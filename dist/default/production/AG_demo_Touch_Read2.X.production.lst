

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Sep 09 22:08:26 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16LF1509
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text55,local,class=CODE,merge=1,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2
    87                           	psect	text63,local,class=CODE,merge=1,delta=2
    88                           	psect	text64,local,class=CODE,merge=1,delta=2
    89                           	psect	text65,local,class=CODE,merge=1,delta=2
    90                           	psect	text66,local,class=CODE,merge=1,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,delta=2
    92                           	psect	text68,local,class=CODE,merge=1,delta=2
    93                           	psect	text69,local,class=CODE,merge=1,delta=2
    94                           	psect	text70,local,class=CODE,merge=1,delta=2
    95                           	psect	text71,local,class=CODE,merge=1,delta=2
    96                           	psect	text72,local,class=CODE,merge=1,delta=2
    97                           	psect	text73,local,class=CODE,merge=1,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,delta=2
    99                           	psect	intentry,global,class=CODE,delta=2
   100                           	psect	text76,local,class=CODE,merge=1,delta=2
   101                           	psect	text77,local,class=CODE,merge=1,delta=2
   102                           	psect	text78,local,class=CODE,merge=1,delta=2
   103                           	psect	text79,local,class=CODE,merge=1,delta=2
   104                           	psect	text80,local,class=CODE,merge=1,delta=2
   105                           	psect	text81,local,class=CODE,merge=1,delta=2
   106                           	psect	text82,local,class=CODE,merge=1,delta=2
   107                           	psect	text83,local,class=CODE,merge=1,delta=2
   108                           	psect	text84,local,class=CODE,merge=1,delta=2
   109                           	psect	text85,local,class=CODE,merge=1,delta=2
   110                           	psect	text86,local,class=CODE,merge=1,delta=2
   111                           	psect	text87,local,class=CODE,merge=1,delta=2
   112                           	psect	text88,local,class=CODE,merge=1,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,delta=2
   118                           	psect	text94,local,class=CODE,merge=1,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	psect	text98,local,class=CODE,merge=1,delta=2
   123                           	psect	text99,local,class=CODE,merge=1,delta=2
   124                           	psect	text100,local,class=CODE,merge=1,delta=2
   125                           	psect	text101,local,class=CODE,merge=1,delta=2
   126                           	psect	text102,local,class=CODE,merge=1,delta=2
   127                           	psect	text103,local,class=CODE,merge=1,delta=2
   128                           	psect	text104,local,class=CODE,merge=1,delta=2
   129                           	psect	text105,local,class=CODE,merge=1,delta=2
   130                           	psect	text106,local,class=CODE,merge=1,delta=2
   131                           	psect	text107,local,class=CODE,merge=1,delta=2
   132                           	psect	text108,local,class=CODE,merge=1,delta=2
   133                           	psect	text109,local,class=CODE,merge=1,delta=2
   134                           	psect	text110,local,class=CODE,merge=1,delta=2
   135                           	psect	text111,local,class=CODE,merge=1,delta=2
   136                           	psect	text112,local,class=CODE,merge=1,delta=2
   137                           	psect	text113,local,class=CODE,merge=1,delta=2
   138                           	psect	text114,local,class=CODE,merge=1,delta=2
   139                           	psect	text115,local,class=CODE,merge=1,delta=2
   140                           	psect	text116,local,class=CODE,merge=1,delta=2
   141                           	psect	text117,local,class=CODE,merge=1,delta=2
   142                           	psect	text118,local,class=CODE,merge=1,delta=2
   143                           	psect	text119,local,class=CODE,merge=1,delta=2
   144                           	psect	text120,local,class=CODE,merge=1,delta=2
   145                           	psect	text121,local,class=CODE,merge=1,delta=2
   146                           	psect	text122,local,class=CODE,merge=1,delta=2
   147                           	psect	text123,local,class=CODE,merge=1,delta=2
   148                           	psect	text124,local,class=CODE,merge=1,delta=2
   149                           	psect	text125,local,class=CODE,merge=1,delta=2
   150                           	psect	text126,local,class=CODE,merge=1,delta=2
   151                           	psect	text127,local,class=CODE,merge=1,delta=2
   152                           	psect	text128,local,class=CODE,merge=1,delta=2
   153                           	psect	text129,local,class=CODE,merge=1,delta=2
   154                           	psect	text130,local,class=CODE,merge=1,delta=2
   155                           	psect	text131,local,class=CODE,merge=1,delta=2
   156                           	psect	text132,local,class=CODE,merge=1,delta=2
   157                           	psect	text133,local,class=CODE,merge=1,delta=2
   158                           	psect	text134,local,class=CODE,merge=1,delta=2
   159                           	psect	text135,local,class=CODE,merge=1,delta=2
   160                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   161                           	dabs	1,0x320,16
   162                           	dabs	1,0x2A4,76
   163                           	dabs	1,0x2A0,4
   164                           	dabs	1,0x220,80
   165                           	dabs	1,0x1E8,8
   166                           	dabs	1,0x2138,0,_loadPosition
   167                           	dabs	1,0x2194,0,_detectLoadPosition
   168                           	dabs	1,0x7E,2
   169  0000                     
   170                           ; Version 2.20
   171                           ; Generated 12/02/2020 GMT
   172                           ; 
   173                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   174                           ; All rights reserved.
   175                           ; 
   176                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   177                           ; 
   178                           ; Redistribution and use in source and binary forms, with or without modification, are
   179                           ; permitted provided that the following conditions are met:
   180                           ; 
   181                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   182                           ;        conditions and the following disclaimer.
   183                           ; 
   184                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   185                           ;        of conditions and the following disclaimer in the documentation and/or other
   186                           ;        materials provided with the distribution.
   187                           ; 
   188                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   189                           ;        software without specific prior written permission.
   190                           ; 
   191                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   192                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   193                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   194                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   195                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   196                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   197                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   198                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   199                           ; 
   200                           ; 
   201                           ; Code-generator required, PIC16LF1509 Definitions
   202                           ; 
   203                           ; SFR Addresses
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  0111                     	;# 
   252  0112                     	;# 
   253  0113                     	;# 
   254  0114                     	;# 
   255  0115                     	;# 
   256  0116                     	;# 
   257  0117                     	;# 
   258  0118                     	;# 
   259  0119                     	;# 
   260  011D                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  018E                     	;# 
   264  0191                     	;# 
   265  0191                     	;# 
   266  0192                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0194                     	;# 
   270  0195                     	;# 
   271  0196                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019D                     	;# 
   278  019E                     	;# 
   279  019F                     	;# 
   280  020C                     	;# 
   281  020D                     	;# 
   282  0211                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0212                     	;# 
   286  0213                     	;# 
   287  0213                     	;# 
   288  0214                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0216                     	;# 
   294  0216                     	;# 
   295  0217                     	;# 
   296  0217                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  0498                     	;# 
   304  0498                     	;# 
   305  0499                     	;# 
   306  049A                     	;# 
   307  049B                     	;# 
   308  049B                     	;# 
   309  049C                     	;# 
   310  049D                     	;# 
   311  049E                     	;# 
   312  049F                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0613                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0616                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  0619                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061C                     	;# 
   329  0691                     	;# 
   330  0692                     	;# 
   331  0693                     	;# 
   332  0694                     	;# 
   333  0695                     	;# 
   334  0F0F                     	;# 
   335  0F10                     	;# 
   336  0F11                     	;# 
   337  0F12                     	;# 
   338  0F13                     	;# 
   339  0F14                     	;# 
   340  0F15                     	;# 
   341  0F16                     	;# 
   342  0F17                     	;# 
   343  0F18                     	;# 
   344  0F19                     	;# 
   345  0F1A                     	;# 
   346  0F1B                     	;# 
   347  0F1C                     	;# 
   348  0F1D                     	;# 
   349  0F1E                     	;# 
   350  0F1F                     	;# 
   351  0F20                     	;# 
   352  0F21                     	;# 
   353  0F22                     	;# 
   354  0F23                     	;# 
   355  0F24                     	;# 
   356  0F25                     	;# 
   357  0F26                     	;# 
   358  0F27                     	;# 
   359  0F28                     	;# 
   360  0F29                     	;# 
   361  0F2A                     	;# 
   362  0F2B                     	;# 
   363  0F2C                     	;# 
   364  0F2D                     	;# 
   365  0F2E                     	;# 
   366  0F2F                     	;# 
   367  0F8C                     	;# 
   368  0F8D                     	;# 
   369  0F91                     	;# 
   370  0F95                     	;# 
   371  0F96                     	;# 
   372  0F97                     	;# 
   373  0F9C                     	;# 
   374  0F9D                     	;# 
   375  0F9E                     	;# 
   376  0FE3                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0013                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  009F                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0111                     	;# 
   436  0112                     	;# 
   437  0113                     	;# 
   438  0114                     	;# 
   439  0115                     	;# 
   440  0116                     	;# 
   441  0117                     	;# 
   442  0118                     	;# 
   443  0119                     	;# 
   444  011D                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  018E                     	;# 
   448  0191                     	;# 
   449  0191                     	;# 
   450  0192                     	;# 
   451  0193                     	;# 
   452  0193                     	;# 
   453  0194                     	;# 
   454  0195                     	;# 
   455  0196                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019C                     	;# 
   461  019D                     	;# 
   462  019E                     	;# 
   463  019F                     	;# 
   464  020C                     	;# 
   465  020D                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0216                     	;# 
   478  0216                     	;# 
   479  0217                     	;# 
   480  0217                     	;# 
   481  0391                     	;# 
   482  0392                     	;# 
   483  0393                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0498                     	;# 
   488  0498                     	;# 
   489  0499                     	;# 
   490  049A                     	;# 
   491  049B                     	;# 
   492  049B                     	;# 
   493  049C                     	;# 
   494  049D                     	;# 
   495  049E                     	;# 
   496  049F                     	;# 
   497  0611                     	;# 
   498  0612                     	;# 
   499  0613                     	;# 
   500  0613                     	;# 
   501  0614                     	;# 
   502  0615                     	;# 
   503  0616                     	;# 
   504  0616                     	;# 
   505  0617                     	;# 
   506  0618                     	;# 
   507  0619                     	;# 
   508  0619                     	;# 
   509  061A                     	;# 
   510  061B                     	;# 
   511  061C                     	;# 
   512  061C                     	;# 
   513  0691                     	;# 
   514  0692                     	;# 
   515  0693                     	;# 
   516  0694                     	;# 
   517  0695                     	;# 
   518  0F0F                     	;# 
   519  0F10                     	;# 
   520  0F11                     	;# 
   521  0F12                     	;# 
   522  0F13                     	;# 
   523  0F14                     	;# 
   524  0F15                     	;# 
   525  0F16                     	;# 
   526  0F17                     	;# 
   527  0F18                     	;# 
   528  0F19                     	;# 
   529  0F1A                     	;# 
   530  0F1B                     	;# 
   531  0F1C                     	;# 
   532  0F1D                     	;# 
   533  0F1E                     	;# 
   534  0F1F                     	;# 
   535  0F20                     	;# 
   536  0F21                     	;# 
   537  0F22                     	;# 
   538  0F23                     	;# 
   539  0F24                     	;# 
   540  0F25                     	;# 
   541  0F26                     	;# 
   542  0F27                     	;# 
   543  0F28                     	;# 
   544  0F29                     	;# 
   545  0F2A                     	;# 
   546  0F2B                     	;# 
   547  0F2C                     	;# 
   548  0F2D                     	;# 
   549  0F2E                     	;# 
   550  0F2F                     	;# 
   551  0F8C                     	;# 
   552  0F8D                     	;# 
   553  0F91                     	;# 
   554  0F95                     	;# 
   555  0F96                     	;# 
   556  0F97                     	;# 
   557  0F9C                     	;# 
   558  0F9D                     	;# 
   559  0F9E                     	;# 
   560  0FE3                     	;# 
   561  0FE4                     	;# 
   562  0FE5                     	;# 
   563  0FE6                     	;# 
   564  0FE7                     	;# 
   565  0FE8                     	;# 
   566  0FE9                     	;# 
   567  0FEA                     	;# 
   568  0FEB                     	;# 
   569  0FED                     	;# 
   570  0FEE                     	;# 
   571  0FEF                     	;# 
   572  0000                     	;# 
   573  0001                     	;# 
   574  0002                     	;# 
   575  0003                     	;# 
   576  0004                     	;# 
   577  0005                     	;# 
   578  0006                     	;# 
   579  0007                     	;# 
   580  0008                     	;# 
   581  0009                     	;# 
   582  000A                     	;# 
   583  000B                     	;# 
   584  000C                     	;# 
   585  000D                     	;# 
   586  000E                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  008C                     	;# 
   600  008D                     	;# 
   601  008E                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0093                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  009F                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011D                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019F                     	;# 
   648  020C                     	;# 
   649  020D                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0216                     	;# 
   663  0217                     	;# 
   664  0217                     	;# 
   665  0391                     	;# 
   666  0392                     	;# 
   667  0393                     	;# 
   668  0394                     	;# 
   669  0395                     	;# 
   670  0396                     	;# 
   671  0498                     	;# 
   672  0498                     	;# 
   673  0499                     	;# 
   674  049A                     	;# 
   675  049B                     	;# 
   676  049B                     	;# 
   677  049C                     	;# 
   678  049D                     	;# 
   679  049E                     	;# 
   680  049F                     	;# 
   681  0611                     	;# 
   682  0612                     	;# 
   683  0613                     	;# 
   684  0613                     	;# 
   685  0614                     	;# 
   686  0615                     	;# 
   687  0616                     	;# 
   688  0616                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0F0F                     	;# 
   703  0F10                     	;# 
   704  0F11                     	;# 
   705  0F12                     	;# 
   706  0F13                     	;# 
   707  0F14                     	;# 
   708  0F15                     	;# 
   709  0F16                     	;# 
   710  0F17                     	;# 
   711  0F18                     	;# 
   712  0F19                     	;# 
   713  0F1A                     	;# 
   714  0F1B                     	;# 
   715  0F1C                     	;# 
   716  0F1D                     	;# 
   717  0F1E                     	;# 
   718  0F1F                     	;# 
   719  0F20                     	;# 
   720  0F21                     	;# 
   721  0F22                     	;# 
   722  0F23                     	;# 
   723  0F24                     	;# 
   724  0F25                     	;# 
   725  0F26                     	;# 
   726  0F27                     	;# 
   727  0F28                     	;# 
   728  0F29                     	;# 
   729  0F2A                     	;# 
   730  0F2B                     	;# 
   731  0F2C                     	;# 
   732  0F2D                     	;# 
   733  0F2E                     	;# 
   734  0F2F                     	;# 
   735  0F8C                     	;# 
   736  0F8D                     	;# 
   737  0F91                     	;# 
   738  0F95                     	;# 
   739  0F96                     	;# 
   740  0F97                     	;# 
   741  0F9C                     	;# 
   742  0F9D                     	;# 
   743  0F9E                     	;# 
   744  0FE3                     	;# 
   745  0FE4                     	;# 
   746  0FE5                     	;# 
   747  0FE6                     	;# 
   748  0FE7                     	;# 
   749  0FE8                     	;# 
   750  0FE9                     	;# 
   751  0FEA                     	;# 
   752  0FEB                     	;# 
   753  0FED                     	;# 
   754  0FEE                     	;# 
   755  0FEF                     	;# 
   756  0000                     	;# 
   757  0001                     	;# 
   758  0002                     	;# 
   759  0003                     	;# 
   760  0004                     	;# 
   761  0005                     	;# 
   762  0006                     	;# 
   763  0007                     	;# 
   764  0008                     	;# 
   765  0009                     	;# 
   766  000A                     	;# 
   767  000B                     	;# 
   768  000C                     	;# 
   769  000D                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008D                     	;# 
   785  008E                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0093                     	;# 
   789  0095                     	;# 
   790  0096                     	;# 
   791  0097                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  009F                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  0111                     	;# 
   804  0112                     	;# 
   805  0113                     	;# 
   806  0114                     	;# 
   807  0115                     	;# 
   808  0116                     	;# 
   809  0117                     	;# 
   810  0118                     	;# 
   811  0119                     	;# 
   812  011D                     	;# 
   813  018C                     	;# 
   814  018D                     	;# 
   815  018E                     	;# 
   816  0191                     	;# 
   817  0191                     	;# 
   818  0192                     	;# 
   819  0193                     	;# 
   820  0193                     	;# 
   821  0194                     	;# 
   822  0195                     	;# 
   823  0196                     	;# 
   824  0199                     	;# 
   825  019A                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019C                     	;# 
   829  019D                     	;# 
   830  019E                     	;# 
   831  019F                     	;# 
   832  020C                     	;# 
   833  020D                     	;# 
   834  0211                     	;# 
   835  0211                     	;# 
   836  0212                     	;# 
   837  0212                     	;# 
   838  0213                     	;# 
   839  0213                     	;# 
   840  0214                     	;# 
   841  0214                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0215                     	;# 
   845  0216                     	;# 
   846  0216                     	;# 
   847  0217                     	;# 
   848  0217                     	;# 
   849  0391                     	;# 
   850  0392                     	;# 
   851  0393                     	;# 
   852  0394                     	;# 
   853  0395                     	;# 
   854  0396                     	;# 
   855  0498                     	;# 
   856  0498                     	;# 
   857  0499                     	;# 
   858  049A                     	;# 
   859  049B                     	;# 
   860  049B                     	;# 
   861  049C                     	;# 
   862  049D                     	;# 
   863  049E                     	;# 
   864  049F                     	;# 
   865  0611                     	;# 
   866  0612                     	;# 
   867  0613                     	;# 
   868  0613                     	;# 
   869  0614                     	;# 
   870  0615                     	;# 
   871  0616                     	;# 
   872  0616                     	;# 
   873  0617                     	;# 
   874  0618                     	;# 
   875  0619                     	;# 
   876  0619                     	;# 
   877  061A                     	;# 
   878  061B                     	;# 
   879  061C                     	;# 
   880  061C                     	;# 
   881  0691                     	;# 
   882  0692                     	;# 
   883  0693                     	;# 
   884  0694                     	;# 
   885  0695                     	;# 
   886  0F0F                     	;# 
   887  0F10                     	;# 
   888  0F11                     	;# 
   889  0F12                     	;# 
   890  0F13                     	;# 
   891  0F14                     	;# 
   892  0F15                     	;# 
   893  0F16                     	;# 
   894  0F17                     	;# 
   895  0F18                     	;# 
   896  0F19                     	;# 
   897  0F1A                     	;# 
   898  0F1B                     	;# 
   899  0F1C                     	;# 
   900  0F1D                     	;# 
   901  0F1E                     	;# 
   902  0F1F                     	;# 
   903  0F20                     	;# 
   904  0F21                     	;# 
   905  0F22                     	;# 
   906  0F23                     	;# 
   907  0F24                     	;# 
   908  0F25                     	;# 
   909  0F26                     	;# 
   910  0F27                     	;# 
   911  0F28                     	;# 
   912  0F29                     	;# 
   913  0F2A                     	;# 
   914  0F2B                     	;# 
   915  0F2C                     	;# 
   916  0F2D                     	;# 
   917  0F2E                     	;# 
   918  0F2F                     	;# 
   919  0F8C                     	;# 
   920  0F8D                     	;# 
   921  0F91                     	;# 
   922  0F95                     	;# 
   923  0F96                     	;# 
   924  0F97                     	;# 
   925  0F9C                     	;# 
   926  0F9D                     	;# 
   927  0F9E                     	;# 
   928  0FE3                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0011                     	;# 
   956  0012                     	;# 
   957  0013                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0093                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  009F                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0111                     	;# 
   988  0112                     	;# 
   989  0113                     	;# 
   990  0114                     	;# 
   991  0115                     	;# 
   992  0116                     	;# 
   993  0117                     	;# 
   994  0118                     	;# 
   995  0119                     	;# 
   996  011D                     	;# 
   997  018C                     	;# 
   998  018D                     	;# 
   999  018E                     	;# 
  1000  0191                     	;# 
  1001  0191                     	;# 
  1002  0192                     	;# 
  1003  0193                     	;# 
  1004  0193                     	;# 
  1005  0194                     	;# 
  1006  0195                     	;# 
  1007  0196                     	;# 
  1008  0199                     	;# 
  1009  019A                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020C                     	;# 
  1017  020D                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0391                     	;# 
  1034  0392                     	;# 
  1035  0393                     	;# 
  1036  0394                     	;# 
  1037  0395                     	;# 
  1038  0396                     	;# 
  1039  0498                     	;# 
  1040  0498                     	;# 
  1041  0499                     	;# 
  1042  049A                     	;# 
  1043  049B                     	;# 
  1044  049B                     	;# 
  1045  049C                     	;# 
  1046  049D                     	;# 
  1047  049E                     	;# 
  1048  049F                     	;# 
  1049  0611                     	;# 
  1050  0612                     	;# 
  1051  0613                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  0615                     	;# 
  1055  0616                     	;# 
  1056  0616                     	;# 
  1057  0617                     	;# 
  1058  0618                     	;# 
  1059  0619                     	;# 
  1060  0619                     	;# 
  1061  061A                     	;# 
  1062  061B                     	;# 
  1063  061C                     	;# 
  1064  061C                     	;# 
  1065  0691                     	;# 
  1066  0692                     	;# 
  1067  0693                     	;# 
  1068  0694                     	;# 
  1069  0695                     	;# 
  1070  0F0F                     	;# 
  1071  0F10                     	;# 
  1072  0F11                     	;# 
  1073  0F12                     	;# 
  1074  0F13                     	;# 
  1075  0F14                     	;# 
  1076  0F15                     	;# 
  1077  0F16                     	;# 
  1078  0F17                     	;# 
  1079  0F18                     	;# 
  1080  0F19                     	;# 
  1081  0F1A                     	;# 
  1082  0F1B                     	;# 
  1083  0F1C                     	;# 
  1084  0F1D                     	;# 
  1085  0F1E                     	;# 
  1086  0F1F                     	;# 
  1087  0F20                     	;# 
  1088  0F21                     	;# 
  1089  0F22                     	;# 
  1090  0F23                     	;# 
  1091  0F24                     	;# 
  1092  0F25                     	;# 
  1093  0F26                     	;# 
  1094  0F27                     	;# 
  1095  0F28                     	;# 
  1096  0F29                     	;# 
  1097  0F2A                     	;# 
  1098  0F2B                     	;# 
  1099  0F2C                     	;# 
  1100  0F2D                     	;# 
  1101  0F2E                     	;# 
  1102  0F2F                     	;# 
  1103  0F8C                     	;# 
  1104  0F8D                     	;# 
  1105  0F91                     	;# 
  1106  0F95                     	;# 
  1107  0F96                     	;# 
  1108  0F97                     	;# 
  1109  0F9C                     	;# 
  1110  0F9D                     	;# 
  1111  0F9E                     	;# 
  1112  0FE3                     	;# 
  1113  0FE4                     	;# 
  1114  0FE5                     	;# 
  1115  0FE6                     	;# 
  1116  0FE7                     	;# 
  1117  0FE8                     	;# 
  1118  0FE9                     	;# 
  1119  0FEA                     	;# 
  1120  0FEB                     	;# 
  1121  0FED                     	;# 
  1122  0FEE                     	;# 
  1123  0FEF                     	;# 
  1124  0000                     	;# 
  1125  0001                     	;# 
  1126  0002                     	;# 
  1127  0003                     	;# 
  1128  0004                     	;# 
  1129  0005                     	;# 
  1130  0006                     	;# 
  1131  0007                     	;# 
  1132  0008                     	;# 
  1133  0009                     	;# 
  1134  000A                     	;# 
  1135  000B                     	;# 
  1136  000C                     	;# 
  1137  000D                     	;# 
  1138  000E                     	;# 
  1139  0011                     	;# 
  1140  0012                     	;# 
  1141  0013                     	;# 
  1142  0015                     	;# 
  1143  0016                     	;# 
  1144  0016                     	;# 
  1145  0017                     	;# 
  1146  0018                     	;# 
  1147  0019                     	;# 
  1148  001A                     	;# 
  1149  001B                     	;# 
  1150  001C                     	;# 
  1151  008C                     	;# 
  1152  008D                     	;# 
  1153  008E                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0095                     	;# 
  1158  0096                     	;# 
  1159  0097                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010D                     	;# 
  1170  010E                     	;# 
  1171  0111                     	;# 
  1172  0112                     	;# 
  1173  0113                     	;# 
  1174  0114                     	;# 
  1175  0115                     	;# 
  1176  0116                     	;# 
  1177  0117                     	;# 
  1178  0118                     	;# 
  1179  0119                     	;# 
  1180  011D                     	;# 
  1181  018C                     	;# 
  1182  018D                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0216                     	;# 
  1214  0216                     	;# 
  1215  0217                     	;# 
  1216  0217                     	;# 
  1217  0391                     	;# 
  1218  0392                     	;# 
  1219  0393                     	;# 
  1220  0394                     	;# 
  1221  0395                     	;# 
  1222  0396                     	;# 
  1223  0498                     	;# 
  1224  0498                     	;# 
  1225  0499                     	;# 
  1226  049A                     	;# 
  1227  049B                     	;# 
  1228  049B                     	;# 
  1229  049C                     	;# 
  1230  049D                     	;# 
  1231  049E                     	;# 
  1232  049F                     	;# 
  1233  0611                     	;# 
  1234  0612                     	;# 
  1235  0613                     	;# 
  1236  0613                     	;# 
  1237  0614                     	;# 
  1238  0615                     	;# 
  1239  0616                     	;# 
  1240  0616                     	;# 
  1241  0617                     	;# 
  1242  0618                     	;# 
  1243  0619                     	;# 
  1244  0619                     	;# 
  1245  061A                     	;# 
  1246  061B                     	;# 
  1247  061C                     	;# 
  1248  061C                     	;# 
  1249  0691                     	;# 
  1250  0692                     	;# 
  1251  0693                     	;# 
  1252  0694                     	;# 
  1253  0695                     	;# 
  1254  0F0F                     	;# 
  1255  0F10                     	;# 
  1256  0F11                     	;# 
  1257  0F12                     	;# 
  1258  0F13                     	;# 
  1259  0F14                     	;# 
  1260  0F15                     	;# 
  1261  0F16                     	;# 
  1262  0F17                     	;# 
  1263  0F18                     	;# 
  1264  0F19                     	;# 
  1265  0F1A                     	;# 
  1266  0F1B                     	;# 
  1267  0F1C                     	;# 
  1268  0F1D                     	;# 
  1269  0F1E                     	;# 
  1270  0F1F                     	;# 
  1271  0F20                     	;# 
  1272  0F21                     	;# 
  1273  0F22                     	;# 
  1274  0F23                     	;# 
  1275  0F24                     	;# 
  1276  0F25                     	;# 
  1277  0F26                     	;# 
  1278  0F27                     	;# 
  1279  0F28                     	;# 
  1280  0F29                     	;# 
  1281  0F2A                     	;# 
  1282  0F2B                     	;# 
  1283  0F2C                     	;# 
  1284  0F2D                     	;# 
  1285  0F2E                     	;# 
  1286  0F2F                     	;# 
  1287  0F8C                     	;# 
  1288  0F8D                     	;# 
  1289  0F91                     	;# 
  1290  0F95                     	;# 
  1291  0F96                     	;# 
  1292  0F97                     	;# 
  1293  0F9C                     	;# 
  1294  0F9D                     	;# 
  1295  0F9E                     	;# 
  1296  0FE3                     	;# 
  1297  0FE4                     	;# 
  1298  0FE5                     	;# 
  1299  0FE6                     	;# 
  1300  0FE7                     	;# 
  1301  0FE8                     	;# 
  1302  0FE9                     	;# 
  1303  0FEA                     	;# 
  1304  0FEB                     	;# 
  1305  0FED                     	;# 
  1306  0FEE                     	;# 
  1307  0FEF                     	;# 
  1308  0000                     	;# 
  1309  0001                     	;# 
  1310  0002                     	;# 
  1311  0003                     	;# 
  1312  0004                     	;# 
  1313  0005                     	;# 
  1314  0006                     	;# 
  1315  0007                     	;# 
  1316  0008                     	;# 
  1317  0009                     	;# 
  1318  000A                     	;# 
  1319  000B                     	;# 
  1320  000C                     	;# 
  1321  000D                     	;# 
  1322  000E                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0013                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0111                     	;# 
  1356  0112                     	;# 
  1357  0113                     	;# 
  1358  0114                     	;# 
  1359  0115                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  0118                     	;# 
  1363  0119                     	;# 
  1364  011D                     	;# 
  1365  018C                     	;# 
  1366  018D                     	;# 
  1367  018E                     	;# 
  1368  0191                     	;# 
  1369  0191                     	;# 
  1370  0192                     	;# 
  1371  0193                     	;# 
  1372  0193                     	;# 
  1373  0194                     	;# 
  1374  0195                     	;# 
  1375  0196                     	;# 
  1376  0199                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019E                     	;# 
  1383  019F                     	;# 
  1384  020C                     	;# 
  1385  020D                     	;# 
  1386  0211                     	;# 
  1387  0211                     	;# 
  1388  0212                     	;# 
  1389  0212                     	;# 
  1390  0213                     	;# 
  1391  0213                     	;# 
  1392  0214                     	;# 
  1393  0214                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0216                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0217                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  0498                     	;# 
  1408  0498                     	;# 
  1409  0499                     	;# 
  1410  049A                     	;# 
  1411  049B                     	;# 
  1412  049B                     	;# 
  1413  049C                     	;# 
  1414  049D                     	;# 
  1415  049E                     	;# 
  1416  049F                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0615                     	;# 
  1423  0616                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061C                     	;# 
  1433  0691                     	;# 
  1434  0692                     	;# 
  1435  0693                     	;# 
  1436  0694                     	;# 
  1437  0695                     	;# 
  1438  0F0F                     	;# 
  1439  0F10                     	;# 
  1440  0F11                     	;# 
  1441  0F12                     	;# 
  1442  0F13                     	;# 
  1443  0F14                     	;# 
  1444  0F15                     	;# 
  1445  0F16                     	;# 
  1446  0F17                     	;# 
  1447  0F18                     	;# 
  1448  0F19                     	;# 
  1449  0F1A                     	;# 
  1450  0F1B                     	;# 
  1451  0F1C                     	;# 
  1452  0F1D                     	;# 
  1453  0F1E                     	;# 
  1454  0F1F                     	;# 
  1455  0F20                     	;# 
  1456  0F21                     	;# 
  1457  0F22                     	;# 
  1458  0F23                     	;# 
  1459  0F24                     	;# 
  1460  0F25                     	;# 
  1461  0F26                     	;# 
  1462  0F27                     	;# 
  1463  0F28                     	;# 
  1464  0F29                     	;# 
  1465  0F2A                     	;# 
  1466  0F2B                     	;# 
  1467  0F2C                     	;# 
  1468  0F2D                     	;# 
  1469  0F2E                     	;# 
  1470  0F2F                     	;# 
  1471  0F8C                     	;# 
  1472  0F8D                     	;# 
  1473  0F91                     	;# 
  1474  0F95                     	;# 
  1475  0F96                     	;# 
  1476  0F97                     	;# 
  1477  0F9C                     	;# 
  1478  0F9D                     	;# 
  1479  0F9E                     	;# 
  1480  0FE3                     	;# 
  1481  0FE4                     	;# 
  1482  0FE5                     	;# 
  1483  0FE6                     	;# 
  1484  0FE7                     	;# 
  1485  0FE8                     	;# 
  1486  0FE9                     	;# 
  1487  0FEA                     	;# 
  1488  0FEB                     	;# 
  1489  0FED                     	;# 
  1490  0FEE                     	;# 
  1491  0FEF                     	;# 
  1492  0000                     	;# 
  1493  0001                     	;# 
  1494  0002                     	;# 
  1495  0003                     	;# 
  1496  0004                     	;# 
  1497  0005                     	;# 
  1498  0006                     	;# 
  1499  0007                     	;# 
  1500  0008                     	;# 
  1501  0009                     	;# 
  1502  000A                     	;# 
  1503  000B                     	;# 
  1504  000C                     	;# 
  1505  000D                     	;# 
  1506  000E                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0013                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001C                     	;# 
  1519  008C                     	;# 
  1520  008D                     	;# 
  1521  008E                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0093                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020C                     	;# 
  1569  020D                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0391                     	;# 
  1586  0392                     	;# 
  1587  0393                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0498                     	;# 
  1592  0498                     	;# 
  1593  0499                     	;# 
  1594  049A                     	;# 
  1595  049B                     	;# 
  1596  049B                     	;# 
  1597  049C                     	;# 
  1598  049D                     	;# 
  1599  049E                     	;# 
  1600  049F                     	;# 
  1601  0611                     	;# 
  1602  0612                     	;# 
  1603  0613                     	;# 
  1604  0613                     	;# 
  1605  0614                     	;# 
  1606  0615                     	;# 
  1607  0616                     	;# 
  1608  0616                     	;# 
  1609  0617                     	;# 
  1610  0618                     	;# 
  1611  0619                     	;# 
  1612  0619                     	;# 
  1613  061A                     	;# 
  1614  061B                     	;# 
  1615  061C                     	;# 
  1616  061C                     	;# 
  1617  0691                     	;# 
  1618  0692                     	;# 
  1619  0693                     	;# 
  1620  0694                     	;# 
  1621  0695                     	;# 
  1622  0F0F                     	;# 
  1623  0F10                     	;# 
  1624  0F11                     	;# 
  1625  0F12                     	;# 
  1626  0F13                     	;# 
  1627  0F14                     	;# 
  1628  0F15                     	;# 
  1629  0F16                     	;# 
  1630  0F17                     	;# 
  1631  0F18                     	;# 
  1632  0F19                     	;# 
  1633  0F1A                     	;# 
  1634  0F1B                     	;# 
  1635  0F1C                     	;# 
  1636  0F1D                     	;# 
  1637  0F1E                     	;# 
  1638  0F1F                     	;# 
  1639  0F20                     	;# 
  1640  0F21                     	;# 
  1641  0F22                     	;# 
  1642  0F23                     	;# 
  1643  0F24                     	;# 
  1644  0F25                     	;# 
  1645  0F26                     	;# 
  1646  0F27                     	;# 
  1647  0F28                     	;# 
  1648  0F29                     	;# 
  1649  0F2A                     	;# 
  1650  0F2B                     	;# 
  1651  0F2C                     	;# 
  1652  0F2D                     	;# 
  1653  0F2E                     	;# 
  1654  0F2F                     	;# 
  1655  0F8C                     	;# 
  1656  0F8D                     	;# 
  1657  0F91                     	;# 
  1658  0F95                     	;# 
  1659  0F96                     	;# 
  1660  0F97                     	;# 
  1661  0F9C                     	;# 
  1662  0F9D                     	;# 
  1663  0F9E                     	;# 
  1664  0FE3                     	;# 
  1665  0FE4                     	;# 
  1666  0FE5                     	;# 
  1667  0FE6                     	;# 
  1668  0FE7                     	;# 
  1669  0FE8                     	;# 
  1670  0FE9                     	;# 
  1671  0FEA                     	;# 
  1672  0FEB                     	;# 
  1673  0FED                     	;# 
  1674  0FEE                     	;# 
  1675  0FEF                     	;# 
  1676  0000                     	;# 
  1677  0001                     	;# 
  1678  0002                     	;# 
  1679  0003                     	;# 
  1680  0004                     	;# 
  1681  0005                     	;# 
  1682  0006                     	;# 
  1683  0007                     	;# 
  1684  0008                     	;# 
  1685  0009                     	;# 
  1686  000A                     	;# 
  1687  000B                     	;# 
  1688  000C                     	;# 
  1689  000D                     	;# 
  1690  000E                     	;# 
  1691  0011                     	;# 
  1692  0012                     	;# 
  1693  0013                     	;# 
  1694  0015                     	;# 
  1695  0016                     	;# 
  1696  0016                     	;# 
  1697  0017                     	;# 
  1698  0018                     	;# 
  1699  0019                     	;# 
  1700  001A                     	;# 
  1701  001B                     	;# 
  1702  001C                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  0091                     	;# 
  1707  0092                     	;# 
  1708  0093                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  009F                     	;# 
  1720  010C                     	;# 
  1721  010D                     	;# 
  1722  010E                     	;# 
  1723  0111                     	;# 
  1724  0112                     	;# 
  1725  0113                     	;# 
  1726  0114                     	;# 
  1727  0115                     	;# 
  1728  0116                     	;# 
  1729  0117                     	;# 
  1730  0118                     	;# 
  1731  0119                     	;# 
  1732  011D                     	;# 
  1733  018C                     	;# 
  1734  018D                     	;# 
  1735  018E                     	;# 
  1736  0191                     	;# 
  1737  0191                     	;# 
  1738  0192                     	;# 
  1739  0193                     	;# 
  1740  0193                     	;# 
  1741  0194                     	;# 
  1742  0195                     	;# 
  1743  0196                     	;# 
  1744  0199                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019C                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019F                     	;# 
  1752  020C                     	;# 
  1753  020D                     	;# 
  1754  0211                     	;# 
  1755  0211                     	;# 
  1756  0212                     	;# 
  1757  0212                     	;# 
  1758  0213                     	;# 
  1759  0213                     	;# 
  1760  0214                     	;# 
  1761  0214                     	;# 
  1762  0215                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0216                     	;# 
  1766  0216                     	;# 
  1767  0217                     	;# 
  1768  0217                     	;# 
  1769  0391                     	;# 
  1770  0392                     	;# 
  1771  0393                     	;# 
  1772  0394                     	;# 
  1773  0395                     	;# 
  1774  0396                     	;# 
  1775  0498                     	;# 
  1776  0498                     	;# 
  1777  0499                     	;# 
  1778  049A                     	;# 
  1779  049B                     	;# 
  1780  049B                     	;# 
  1781  049C                     	;# 
  1782  049D                     	;# 
  1783  049E                     	;# 
  1784  049F                     	;# 
  1785  0611                     	;# 
  1786  0612                     	;# 
  1787  0613                     	;# 
  1788  0613                     	;# 
  1789  0614                     	;# 
  1790  0615                     	;# 
  1791  0616                     	;# 
  1792  0616                     	;# 
  1793  0617                     	;# 
  1794  0618                     	;# 
  1795  0619                     	;# 
  1796  0619                     	;# 
  1797  061A                     	;# 
  1798  061B                     	;# 
  1799  061C                     	;# 
  1800  061C                     	;# 
  1801  0691                     	;# 
  1802  0692                     	;# 
  1803  0693                     	;# 
  1804  0694                     	;# 
  1805  0695                     	;# 
  1806  0F0F                     	;# 
  1807  0F10                     	;# 
  1808  0F11                     	;# 
  1809  0F12                     	;# 
  1810  0F13                     	;# 
  1811  0F14                     	;# 
  1812  0F15                     	;# 
  1813  0F16                     	;# 
  1814  0F17                     	;# 
  1815  0F18                     	;# 
  1816  0F19                     	;# 
  1817  0F1A                     	;# 
  1818  0F1B                     	;# 
  1819  0F1C                     	;# 
  1820  0F1D                     	;# 
  1821  0F1E                     	;# 
  1822  0F1F                     	;# 
  1823  0F20                     	;# 
  1824  0F21                     	;# 
  1825  0F22                     	;# 
  1826  0F23                     	;# 
  1827  0F24                     	;# 
  1828  0F25                     	;# 
  1829  0F26                     	;# 
  1830  0F27                     	;# 
  1831  0F28                     	;# 
  1832  0F29                     	;# 
  1833  0F2A                     	;# 
  1834  0F2B                     	;# 
  1835  0F2C                     	;# 
  1836  0F2D                     	;# 
  1837  0F2E                     	;# 
  1838  0F2F                     	;# 
  1839  0F8C                     	;# 
  1840  0F8D                     	;# 
  1841  0F91                     	;# 
  1842  0F95                     	;# 
  1843  0F96                     	;# 
  1844  0F97                     	;# 
  1845  0F9C                     	;# 
  1846  0F9D                     	;# 
  1847  0F9E                     	;# 
  1848  0FE3                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  0011                     	;# 
  1876  0012                     	;# 
  1877  0013                     	;# 
  1878  0015                     	;# 
  1879  0016                     	;# 
  1880  0016                     	;# 
  1881  0017                     	;# 
  1882  0018                     	;# 
  1883  0019                     	;# 
  1884  001A                     	;# 
  1885  001B                     	;# 
  1886  001C                     	;# 
  1887  008C                     	;# 
  1888  008D                     	;# 
  1889  008E                     	;# 
  1890  0091                     	;# 
  1891  0092                     	;# 
  1892  0093                     	;# 
  1893  0095                     	;# 
  1894  0096                     	;# 
  1895  0097                     	;# 
  1896  0099                     	;# 
  1897  009A                     	;# 
  1898  009B                     	;# 
  1899  009B                     	;# 
  1900  009C                     	;# 
  1901  009D                     	;# 
  1902  009E                     	;# 
  1903  009F                     	;# 
  1904  010C                     	;# 
  1905  010D                     	;# 
  1906  010E                     	;# 
  1907  0111                     	;# 
  1908  0112                     	;# 
  1909  0113                     	;# 
  1910  0114                     	;# 
  1911  0115                     	;# 
  1912  0116                     	;# 
  1913  0117                     	;# 
  1914  0118                     	;# 
  1915  0119                     	;# 
  1916  011D                     	;# 
  1917  018C                     	;# 
  1918  018D                     	;# 
  1919  018E                     	;# 
  1920  0191                     	;# 
  1921  0191                     	;# 
  1922  0192                     	;# 
  1923  0193                     	;# 
  1924  0193                     	;# 
  1925  0194                     	;# 
  1926  0195                     	;# 
  1927  0196                     	;# 
  1928  0199                     	;# 
  1929  019A                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019C                     	;# 
  1933  019D                     	;# 
  1934  019E                     	;# 
  1935  019F                     	;# 
  1936  020C                     	;# 
  1937  020D                     	;# 
  1938  0211                     	;# 
  1939  0211                     	;# 
  1940  0212                     	;# 
  1941  0212                     	;# 
  1942  0213                     	;# 
  1943  0213                     	;# 
  1944  0214                     	;# 
  1945  0214                     	;# 
  1946  0215                     	;# 
  1947  0215                     	;# 
  1948  0215                     	;# 
  1949  0216                     	;# 
  1950  0216                     	;# 
  1951  0217                     	;# 
  1952  0217                     	;# 
  1953  0391                     	;# 
  1954  0392                     	;# 
  1955  0393                     	;# 
  1956  0394                     	;# 
  1957  0395                     	;# 
  1958  0396                     	;# 
  1959  0498                     	;# 
  1960  0498                     	;# 
  1961  0499                     	;# 
  1962  049A                     	;# 
  1963  049B                     	;# 
  1964  049B                     	;# 
  1965  049C                     	;# 
  1966  049D                     	;# 
  1967  049E                     	;# 
  1968  049F                     	;# 
  1969  0611                     	;# 
  1970  0612                     	;# 
  1971  0613                     	;# 
  1972  0613                     	;# 
  1973  0614                     	;# 
  1974  0615                     	;# 
  1975  0616                     	;# 
  1976  0616                     	;# 
  1977  0617                     	;# 
  1978  0618                     	;# 
  1979  0619                     	;# 
  1980  0619                     	;# 
  1981  061A                     	;# 
  1982  061B                     	;# 
  1983  061C                     	;# 
  1984  061C                     	;# 
  1985  0691                     	;# 
  1986  0692                     	;# 
  1987  0693                     	;# 
  1988  0694                     	;# 
  1989  0695                     	;# 
  1990  0F0F                     	;# 
  1991  0F10                     	;# 
  1992  0F11                     	;# 
  1993  0F12                     	;# 
  1994  0F13                     	;# 
  1995  0F14                     	;# 
  1996  0F15                     	;# 
  1997  0F16                     	;# 
  1998  0F17                     	;# 
  1999  0F18                     	;# 
  2000  0F19                     	;# 
  2001  0F1A                     	;# 
  2002  0F1B                     	;# 
  2003  0F1C                     	;# 
  2004  0F1D                     	;# 
  2005  0F1E                     	;# 
  2006  0F1F                     	;# 
  2007  0F20                     	;# 
  2008  0F21                     	;# 
  2009  0F22                     	;# 
  2010  0F23                     	;# 
  2011  0F24                     	;# 
  2012  0F25                     	;# 
  2013  0F26                     	;# 
  2014  0F27                     	;# 
  2015  0F28                     	;# 
  2016  0F29                     	;# 
  2017  0F2A                     	;# 
  2018  0F2B                     	;# 
  2019  0F2C                     	;# 
  2020  0F2D                     	;# 
  2021  0F2E                     	;# 
  2022  0F2F                     	;# 
  2023  0F8C                     	;# 
  2024  0F8D                     	;# 
  2025  0F91                     	;# 
  2026  0F95                     	;# 
  2027  0F96                     	;# 
  2028  0F97                     	;# 
  2029  0F9C                     	;# 
  2030  0F9D                     	;# 
  2031  0F9E                     	;# 
  2032  0FE3                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;_loadPosition
  2044                           
  2045                           	psect	stringtext1
  2046  1800                     __pstringtext1:
  2047  1800                     _SpiCmmandFunction:
  2048  1800  3449               	retlw	low _SpiCmdFunc_Test
  2049  1801  3410               	retlw	high _SpiCmdFunc_Test
  2050  1802  34D4               	retlw	low _SpiCmdFunc_FwdPulseNormal
  2051  1803  3416               	retlw	high _SpiCmdFunc_FwdPulseNormal
  2052  1804  348F               	retlw	low _SpiCmdFunc_RevPulseNormal
  2053  1805  3416               	retlw	high _SpiCmdFunc_RevPulseNormal
  2054  1806  344A               	retlw	low _SpiCmdFunc_FwdPulseWithShake
  2055  1807  3410               	retlw	high _SpiCmdFunc_FwdPulseWithShake
  2056  1808  344B               	retlw	low _SpiCmdFunc_SearchLoadPosition
  2057  1809  3410               	retlw	high _SpiCmdFunc_SearchLoadPosition
  2058  180A  341C               	retlw	low _SpiCmdFunc_SearchBasePosition
  2059  180B  3417               	retlw	high _SpiCmdFunc_SearchBasePosition
  2060  180C  34F3               	retlw	low _SpiCmdFunc_FwdPulseWithCorrect
  2061  180D  3415               	retlw	high _SpiCmdFunc_FwdPulseWithCorrect
  2062  180E  344D               	retlw	low _SpiCmdFunc_FwdPulsePositionCtl
  2063  180F  3416               	retlw	high _SpiCmdFunc_FwdPulsePositionCtl
  2064  1810  346E               	retlw	low _SpiCmdFunc_RevPulsePositionCtl
  2065  1811  3416               	retlw	high _SpiCmdFunc_RevPulsePositionCtl
  2066  1812  3455               	retlw	low _SpiCmdFunc_StartDetectVrs
  2067  1813  3410               	retlw	high _SpiCmdFunc_StartDetectVrs
  2068  1814  3458               	retlw	low _SpiCmdFunc_StopDetectVrs
  2069  1815  3410               	retlw	high _SpiCmdFunc_StopDetectVrs
  2070  1816  3463               	retlw	low _SpiCmdFunc_EnableExcitating
  2071  1817  3410               	retlw	high _SpiCmdFunc_EnableExcitating
  2072  1818  3468               	retlw	low _SpiCmdFunc_DisableExcitating
  2073  1819  3410               	retlw	high _SpiCmdFunc_DisableExcitating
  2074  181A  346F               	retlw	low _SpiCmdFunc_Search1008Position
  2075  181B  3417               	retlw	high _SpiCmdFunc_Search1008Position
  2076  181C                     __end_of_SpiCmmandFunction:
  2077                           
  2078                           	psect	stringtext2
  2079  181C                     __pstringtext2:
  2080  181C                     _TblM1PulseChangePosition:
  2081  181C  3401               	retlw	1
  2082  181D  3406               	retlw	6
  2083  181E  340A               	retlw	10
  2084  181F  340B               	retlw	11
  2085  1820  340E               	retlw	14
  2086  1821  340F               	retlw	15
  2087  1822  3412               	retlw	18
  2088  1823  3413               	retlw	19
  2089  1824  3416               	retlw	22
  2090  1825  3417               	retlw	23
  2091  1826  341A               	retlw	26
  2092  1827  341B               	retlw	27
  2093  1828  341E               	retlw	30
  2094  1829  341F               	retlw	31
  2095  182A  3422               	retlw	34
  2096  182B  3423               	retlw	35
  2097  182C  3426               	retlw	38
  2098  182D  3427               	retlw	39
  2099  182E  342A               	retlw	42
  2100  182F  342B               	retlw	43
  2101  1830  342E               	retlw	46
  2102  1831  342F               	retlw	47
  2103  1832  3432               	retlw	50
  2104  1833  3438               	retlw	56
  2105  1834  3448               	retlw	72
  2106  1835                     __end_of_TblM1PulseChangePosition:
  2107                           
  2108                           	psect	stringtext3
  2109  1835                     __pstringtext3:
  2110  1835                     _TblM0PulseChangePosition:
  2111  1835  3401               	retlw	1
  2112  1836  3406               	retlw	6
  2113  1837  340A               	retlw	10
  2114  1838  340B               	retlw	11
  2115  1839  340E               	retlw	14
  2116  183A  340F               	retlw	15
  2117  183B  3412               	retlw	18
  2118  183C  3413               	retlw	19
  2119  183D  3416               	retlw	22
  2120  183E  3417               	retlw	23
  2121  183F  341A               	retlw	26
  2122  1840  341B               	retlw	27
  2123  1841  341E               	retlw	30
  2124  1842  341F               	retlw	31
  2125  1843  3422               	retlw	34
  2126  1844  3423               	retlw	35
  2127  1845  3426               	retlw	38
  2128  1846  3427               	retlw	39
  2129  1847  342A               	retlw	42
  2130  1848  342B               	retlw	43
  2131  1849  342E               	retlw	46
  2132  184A  342F               	retlw	47
  2133  184B  3432               	retlw	50
  2134  184C  3438               	retlw	56
  2135  184D  3448               	retlw	72
  2136  184E                     __end_of_TblM0PulseChangePosition:
  2137                           
  2138                           	psect	stringtext4
  2139  184E                     __pstringtext4:
  2140  184E                     _offsetBasePosition:
  2141  184E  34E8               	retlw	232
  2142  184F  34FF               	retlw	255
  2143  1850  34F0               	retlw	240
  2144  1851  34FF               	retlw	255
  2145  1852                     __end_of_offsetBasePosition:
  2146                           
  2147                           	psect	stringtext5
  2148  1852                     __pstringtext5:
  2149  1852                     _TblMaxSearchSteps:
  2150  1852  3438               	retlw	56
  2151  1853  3404               	retlw	4
  2152  1854  3438               	retlw	56
  2153  1855  3404               	retlw	4
  2154  1856                     __end_of_TblMaxSearchSteps:
  2155                           
  2156                           	psect	stringtext6
  2157  1856                     __pstringtext6:
  2158  1856                     _TblMaxSteps:
  2159  1856  3468               	retlw	104
  2160  1857  3401               	retlw	1
  2161  1858  3468               	retlw	104
  2162  1859  3401               	retlw	1
  2163  185A                     __end_of_TblMaxSteps:
  2164                           
  2165                           	psect	stringtext7
  2166  185A                     __pstringtext7:
  2167  185A                     _spi_configuration:
  2168  185A  3414               	retlw	20
  2169  185B  3400               	retlw	0
  2170  185C  3400               	retlw	0
  2171  185D  3401               	retlw	1
  2172  185E                     __end_of_spi_configuration:
  2173                           
  2174                           	psect	nvBANK2
  2175  0168                     __pnvBANK2:
  2176  0168                     _TMR1_InterruptHandler:
  2177  0168                     	ds	2
  2178  016A                     _timer1ReloadVal:
  2179  016A                     	ds	2
  2180  016C                     _TMR2_InterruptHandler:
  2181  016C                     	ds	2
  2182  0012                     _PIR2bits	set	18
  2183  0018                     _T1CONbits	set	24
  2184  0018                     _T1CON	set	24
  2185  0016                     _TMR1L	set	22
  2186  0017                     _TMR1H	set	23
  2187  0019                     _T1GCON	set	25
  2188  000B                     _INTCONbits	set	11
  2189  001C                     _T2CONbits	set	28
  2190  001C                     _T2CON	set	28
  2191  0011                     _PIR1bits	set	17
  2192  001A                     _TMR2	set	26
  2193  001B                     _PR2	set	27
  2194  008D                     _TRISBbits	set	141
  2195  0095                     _OPTION_REGbits	set	149
  2196  008E                     _TRISC	set	142
  2197  008D                     _TRISB	set	141
  2198  008C                     _TRISA	set	140
  2199  0097                     _WDTCON	set	151
  2200  0099                     _OSCCON	set	153
  2201  0091                     _PIE1bits	set	145
  2202  0114                     _CM2CON1	set	276
  2203  0113                     _CM2CON0	set	275
  2204  0112                     _CM1CON1	set	274
  2205  0111                     _CM1CON0	set	273
  2206  011D                     _APFCON	set	285
  2207  010E                     _LATC	set	270
  2208  010D                     _LATB	set	269
  2209  010C                     _LATA	set	268
  2210  0116                     _BORCON	set	278
  2211  0119                     _DACCON1	set	281
  2212  0118                     _DACCON0	set	280
  2213  0870                     _LATC0	set	2160
  2214  018C                     _ANSELA	set	396
  2215  018D                     _ANSELB	set	397
  2216  018E                     _ANSELC	set	398
  2217  0211                     _SSP1BUF	set	529
  2218  0216                     _SSP1CON2	set	534
  2219  0215                     _SSP1CON1bits	set	533
  2220  0212                     _SSP1ADD	set	530
  2221  0215                     _SSP1CON1	set	533
  2222  0214                     _SSP1STAT	set	532
  2223  020C                     _WPUA	set	524
  2224  020D                     _WPUB	set	525
  2225                           
  2226                           	psect	cinit
  2227  001E                     start_initialization:	
  2228                           ; #config settings
  2229                           
  2230  001E                     __initialization:	;BIGRAM
  2231                           
  2232                           ; Clear objects allocated to BIGRAM
  2233  001E  3038               	movlw	low (0+8504)
  2234  001F  0084               	movwf	4
  2235  0020  3021               	movlw	high (0+8504)
  2236  0021  0085               	movwf	5
  2237  0022  30B8               	movlw	184
  2238  0023  00FE               	movwf	btemp
  2239  0024  3000               	movlw	0
  2240  0025  00FF               	movwf	btemp+1
  2241  0026  3190  20D4  3180   	fcall	clear_ram0
  2242                           
  2243                           ; Clear objects allocated to COMMON
  2244  0029  01F0               	clrf	__pbssCOMMON& (0+127)
  2245  002A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2246  002B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2247  002C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2248  002D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2249                           
  2250                           ; Clear objects allocated to BANK0
  2251  002E  304F               	movlw	low __pbssBANK0
  2252  002F  0084               	movwf	4
  2253  0030  3000               	movlw	high __pbssBANK0
  2254  0031  0085               	movwf	5
  2255  0032  3021               	movlw	33
  2256  0033  00FE               	movwf	btemp
  2257  0034  3000               	movlw	0
  2258  0035  00FF               	movwf	btemp+1
  2259  0036  3190  20D4  3180   	fcall	clear_ram0
  2260                           
  2261                           ; Clear objects allocated to BANK1
  2262  0039  30A0               	movlw	low __pbssBANK1
  2263  003A  0084               	movwf	4
  2264  003B  3000               	movlw	high __pbssBANK1
  2265  003C  0085               	movwf	5
  2266  003D  304F               	movlw	79
  2267  003E  00FE               	movwf	btemp
  2268  003F  3000               	movlw	0
  2269  0040  00FF               	movwf	btemp+1
  2270  0041  3190  20D4  3180   	fcall	clear_ram0
  2271                           
  2272                           ; Clear objects allocated to BANK2
  2273  0044  3020               	movlw	low __pbssBANK2
  2274  0045  0084               	movwf	4
  2275  0046  3001               	movlw	high __pbssBANK2
  2276  0047  0085               	movwf	5
  2277  0048  3048               	movlw	72
  2278  0049  00FE               	movwf	btemp
  2279  004A  3000               	movlw	0
  2280  004B  00FF               	movwf	btemp+1
  2281  004C  3190  20D4  3180   	fcall	clear_ram0
  2282                           
  2283                           ; Clear objects allocated to BANK3
  2284  004F  30A0               	movlw	low __pbssBANK3
  2285  0050  0084               	movwf	4
  2286  0051  3001               	movlw	high __pbssBANK3
  2287  0052  0085               	movwf	5
  2288  0053  302E               	movlw	46
  2289  0054  00FE               	movwf	btemp
  2290  0055  3000               	movlw	0
  2291  0056  00FF               	movwf	btemp+1
  2292  0057  3190  20D4         	fcall	clear_ram0
  2293  0059                     end_of_initialization:	
  2294                           ;End of C runtime variable initialization code
  2295                           
  2296  0059                     __end_of__initialization:
  2297  0059  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2298  005A  0020               	movlb	0
  2299  005B  3189  2966         	ljmp	_main	;jump to C main() function
  2300                           
  2301                           	psect	bssCOMMON
  2302  0070                     __pbssCOMMON:
  2303  0070                     _addShakePulseBit:
  2304  0070                     	ds	1
  2305  0071                     _polarityBit:
  2306  0071                     	ds	1
  2307  0072                     _m1PulseOutStep:
  2308  0072                     	ds	1
  2309  0073                     _m0PulseOutStep:
  2310  0073                     	ds	1
  2311  0074                     _motorBitOperation:
  2312  0074                     	ds	1
  2313                           
  2314                           	psect	bssBANK0
  2315  004F                     __pbssBANK0:
  2316  004F                     _detectLoadCont:
  2317  004F                     	ds	2
  2318  0051                     _detectLoadType:
  2319  0051                     	ds	2
  2320  0053                     _actCorrectDriveBit:
  2321  0053                     	ds	1
  2322  0054                     _reqCorrectBasePosBit:
  2323  0054                     	ds	1
  2324  0055                     _reqSearchBasePosBit:
  2325  0055                     	ds	1
  2326  0056                     _motorActiveBit:
  2327  0056                     	ds	1
  2328  0057                     _driveDirectionBit:
  2329  0057                     	ds	1
  2330  0058                     _m0PulsePositionCtWork:
  2331  0058                     	ds	1
  2332  0059                     _dataTRISCWork_M1:
  2333  0059                     	ds	1
  2334  005A                     _dataTRISBWork_M1:
  2335  005A                     	ds	1
  2336  005B                     _dataTRISAWork_M1:
  2337  005B                     	ds	1
  2338  005C                     _dataTRISCWork_M0:
  2339  005C                     	ds	1
  2340  005D                     _dataTRISBWork_M0:
  2341  005D                     	ds	1
  2342  005E                     _dataTRISAWork_M0:
  2343  005E                     	ds	1
  2344  005F                     _dataTRISC:
  2345  005F                     	ds	1
  2346  0060                     _dataTRISB:
  2347  0060                     	ds	1
  2348  0061                     _dataTRISA:
  2349  0061                     	ds	1
  2350  0062                     _pulseOutLATCWork_M1:
  2351  0062                     	ds	1
  2352  0063                     _pulseOutLATBWork_M1:
  2353  0063                     	ds	1
  2354  0064                     _pulseOutLATAWork_M1:
  2355  0064                     	ds	1
  2356  0065                     _pulseOutLATCWork_M0:
  2357  0065                     	ds	1
  2358  0066                     _pulseOutLATBWork_M0:
  2359  0066                     	ds	1
  2360  0067                     _pulseOutLATAWork_M0:
  2361  0067                     	ds	1
  2362  0068                     _pulseOutLATC:
  2363  0068                     	ds	1
  2364  0069                     _pulseOutLATB:
  2365  0069                     	ds	1
  2366  006A                     _pulseOutLATA:
  2367  006A                     	ds	1
  2368  006B                     _motorNoOperation:
  2369  006B                     	ds	1
  2370  006C                     _currentPosition:
  2371  006C                     	ds	4
  2372                           
  2373                           	psect	bssBANK1
  2374  00A0                     __pbssBANK1:
  2375  00A0                     _detectRoughTotalMove:
  2376  00A0                     	ds	4
  2377  00A4                     _positionSearchCt:
  2378  00A4                     	ds	4
  2379  00A8                     _motorStepCounterSet:
  2380  00A8                     	ds	4
  2381  00AC                     _cbAfterMotorStopFunc:
  2382  00AC                     	ds	4
  2383  00B0                     _positionSearchStat:
  2384  00B0                     	ds	2
  2385  00B2                     _detectRoughPosCt:
  2386  00B2                     	ds	2
  2387  00B4                     _detectFinePosCt:
  2388  00B4                     	ds	2
  2389  00B6                     _loadPositionIndex:
  2390  00B6                     	ds	2
  2391  00B8                     _detectLoadPositionTypePtr:
  2392  00B8                     	ds	2
  2393  00BA                     _detectLoadPositionIndex:
  2394  00BA                     	ds	2
  2395  00BC                     _vrsCountValue:
  2396  00BC                     	ds	2
  2397  00BE                     _motorM1StepCounter:
  2398  00BE                     	ds	2
  2399  00C0                     _motorM0StepCounter:
  2400  00C0                     	ds	2
  2401  00C2                     _spkOutChangeFunc:
  2402  00C2                     	ds	2
  2403  00C4                     _excitatingTime:
  2404  00C4                     	ds	2
  2405  00C6                     _finishPositionCtSet:
  2406  00C6                     	ds	2
  2407  00C8                     _m1PulseOutChangeFunc:
  2408  00C8                     	ds	2
  2409  00CA                     _m0PulseOutChangeFunc:
  2410  00CA                     	ds	2
  2411  00CC                     _recieveCommand:
  2412  00CC                     	ds	1
  2413  00CD                     _doubleInterval:
  2414  00CD                     	ds	1
  2415  00CE                     _reqCheckLoadPosBit:
  2416  00CE                     	ds	1
  2417  00CF                     _reqCorrectFinePoBit:
  2418  00CF                     	ds	1
  2419  00D0                     _reqAfterDetectLoadFuncBit:
  2420  00D0                     	ds	1
  2421  00D1                     _handPositionActiveBit:
  2422  00D1                     	ds	1
  2423  00D2                     _reqVrsCheckBit:
  2424  00D2                     	ds	1
  2425  00D3                     _reqComparatorOffBit:
  2426  00D3                     	ds	1
  2427  00D4                     _reqComparatorOnBit:
  2428  00D4                     	ds	1
  2429  00D5                     _OutTrisRequestFlug:
  2430  00D5                     	ds	1
  2431  00D6                     _OutRequestFlug:
  2432  00D6                     	ds	1
  2433  00D7                     _correctDriveDirectionBit:
  2434  00D7                     	ds	1
  2435  00D8                     _reqStopMotorBit:
  2436  00D8                     	ds	1
  2437  00D9                     _reqAfterMotorStopFuncBit:
  2438  00D9                     	ds	1
  2439  00DA                     _excitatingStatusOn:
  2440  00DA                     	ds	1
  2441  00DB                     _spkStopStatus:
  2442  00DB                     	ds	1
  2443  00DC                     _spkReqVrsCheckWait:
  2444  00DC                     	ds	1
  2445  00DD                     _spkReqVrsCheckBit:
  2446  00DD                     	ds	1
  2447  00DE                     _spkOutTrisRequestFlug:
  2448  00DE                     	ds	1
  2449  00DF                     _spkChangePosition:
  2450  00DF                     	ds	1
  2451  00E0                     _spkPositionCt:
  2452  00E0                     	ds	1
  2453  00E1                     _detectSpkTurnBit:
  2454  00E1                     	ds	1
  2455  00E2                     _excitatingOffMaskTime:
  2456  00E2                     	ds	1
  2457  00E3                     _excitatingEnableBit:
  2458  00E3                     	ds	1
  2459  00E4                     _m1PulseOutStepWork:
  2460  00E4                     	ds	1
  2461  00E5                     _m0PulseOutStepWork:
  2462  00E5                     	ds	1
  2463  00E6                     _m1PulseChangePosition:
  2464  00E6                     	ds	1
  2465  00E7                     _m0PulseChangePosition:
  2466  00E7                     	ds	1
  2467  00E8                     _m1PulsePositionCtWork:
  2468  00E8                     	ds	1
  2469  00E9                     _m1PulsePositionCt:
  2470  00E9                     	ds	1
  2471  00EA                     _m0PulsePositionCt:
  2472  00EA                     	ds	1
  2473  00EB                     _TblM1PulseChangePositionLast:
  2474  00EB                     	ds	1
  2475  00EC                     _TblM0PulseChangePositionLast:
  2476  00EC                     	ds	1
  2477  00ED                     _missingDetectFinePosition:
  2478  00ED                     	ds	2
  2479                           
  2480                           	psect	bssBANK2
  2481  0120                     __pbssBANK2:
  2482  0120                     _cbAfterDetectLoadFunc:
  2483  0120                     	ds	4
  2484  0124                     _searchTotalSteps:
  2485  0124                     	ds	4
  2486  0128                     _detectLoadPositionPtr:
  2487  0128                     	ds	4
  2488  012C                     _correctDriveFinishPositionCtSet:
  2489  012C                     	ds	2
  2490  012E                     _correctDriveSteps:
  2491  012E                     	ds	2
  2492  0130                     _driveType:
  2493  0130                     	ds	2
  2494  0132                     _detectLoadPositionType:
  2495  0132                     	ds	46
  2496  0160                     _detectBasePosition:
  2497  0160                     	ds	4
  2498  0164                     _targetPosition:
  2499  0164                     	ds	4
  2500                           
  2501                           	psect	bssBANK3
  2502  01A0                     __pbssBANK3:
  2503  01A0                     _loadPositionType:
  2504  01A0                     	ds	46
  2505                           
  2506                           	psect	clrtext
  2507  10D4                     clear_ram0:	
  2508                           ;	Called with FSR0 containing the base address, and
  2509                           ;	btemp/btemp+1 has the size to clear
  2510                           
  2511  10D4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2512  10D5                     clrloop0:
  2513  10D5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2514  10D6  3101               	addfsr 0,1
  2515  10D7  3001               	movlw	1
  2516  10D8  02FE               	subwf	126,f
  2517  10D9  3000               	movlw	0
  2518  10DA  3BFF               	subwfb	127,f
  2519  10DB  087F               	movf	127,w
  2520  10DC  047E               	iorwf	126,w
  2521  10DD  1903               	btfsc	3,2
  2522  10DE  3400               	retlw	0	;all done for this memory range, return
  2523  10DF  28D5               	goto	clrloop0	;have we reached the end yet?
  2524                           
  2525                           	psect	cstackBANK3
  2526  01CE                     __pcstackBANK3:
  2527  01CE                     ??_main:
  2528                           
  2529                           ; 1 bytes @ 0x0
  2530  01CE                     	ds	1
  2531                           
  2532                           	psect	cstackBANK2
  2533  016E                     __pcstackBANK2:
  2534  016E                     WatchMotorDriveFinish@func:
  2535                           
  2536                           ; 2 bytes @ 0x0
  2537  016E                     	ds	2
  2538                           
  2539                           	psect	cstackBANK1
  2540  00EF                     __pcstackBANK1:
  2541  00EF                     ??_SPIControl_RecieveComannd:
  2542                           
  2543                           ; 1 bytes @ 0x0
  2544  00EF                     	ds	1
  2545                           
  2546                           	psect	cstackCOMMON
  2547  0075                     __pcstackCOMMON:
  2548  0075                     ?_TMR2_DefaultInterruptHandler:
  2549  0075                     ??_TMR2_DefaultInterruptHandler:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0075                     ?_TMR2_CallBack:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0075                     ?_TMR1_ISR:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0075                     ?_SPI_Initialize:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0075                     ?_PIN_MANAGER_Initialize:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0075                     ?_OSCILLATOR_Initialize:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0075                     ?_WDT_Initialize:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0075                     ?_TMR1_Initialize:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0075                     ?_TMR1_DefaultInterruptHandler:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0075                     ??_TMR1_DefaultInterruptHandler:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0075                     ?_TMR1_CallBack:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0075                     ??_TMR1_CallBack:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0075                     ?_TMR2_Interrupt:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0075                     ?_InitPulsePositionTable:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0075                     ?_SetMotorStart:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0075                     ?_SPIControl_RecieveComannd:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0075                     ?_VrsCheck:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0075                     ??_VrsCheck:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0075                     ?_ComparatorOn:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0075                     ??_ComparatorOn:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0075                     ?_ComparatorOff:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0075                     ??_ComparatorOff:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0075                     ?_SpkVrsCheck:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0075                     ?_SetDataTRISxWork_SPK_OPEN:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0075                     ??_SetDataTRISxWork_SPK_OPEN:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_P1:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_P1:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_P1:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_P1:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_P1:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_P1:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_P1:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_P1:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_P1:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_P1:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_P1:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_P1:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_P1:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_P1:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_P1:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_P1:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0075                     ?_SpkComparatorOn:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0075                     ?_SetDataTRISxWork_SPK_SHORT:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0075                     ??_SetDataTRISxWork_SPK_SHORT:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0075                     ?_SetExcitatingOutOffData:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0075                     ?_SpkComparatorOff:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0075                     ?_PriorUpdateCorrentPosition:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0075                     ?_InitPositionSearch:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0075                     ?_SetMotorBitMotorNo:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0075                     ?_DetermineBasePosition:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0075                     ?_UpdataHandPosition:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0075                     ?_SaveLoadPosition:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0075                     ?_ActivateHandPosition:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0075                     ?_MoveTargetPosition:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0075                     ?_UpdateCurrentPositionByFinePosition:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0075                     ?_ExcitatingOutOn:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0075                     ?_ExcitatingOutOff:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0075                     ?_SetOutPutLATX:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_P2:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_P2:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_OFF:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_OFF:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_P2:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_P2:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_OFF:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_OFF:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_P2:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_P2:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_OFF:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_OFF:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_P2:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_P2:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_OFF:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_OFF:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_P2:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_P2:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_OFF:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_OFF:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_P2:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_P2:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_OFF:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_OFF:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_P2:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_P2:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_OFF:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_OFF:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_P2:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_P2:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_OFF:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_OFF:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0075                     ?_SetDataTRISxWork_M0_SPK_POL0_OPEN:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0075                     ??_SetDataTRISxWork_M0_SPK_POL0_OPEN:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0075                     ?_SetDataTRISxWork_M0_SPK_POL0_SHORT:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0075                     ??_SetDataTRISxWork_M0_SPK_POL0_SHORT:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0075                     ?_SetDataTRISxWork_M0_SPK_POL1_OPEN:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0075                     ??_SetDataTRISxWork_M0_SPK_POL1_OPEN:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0075                     ?_SetDataTRISxWork_M0_SPK_POL1_SHORT:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0075                     ??_SetDataTRISxWork_M0_SPK_POL1_SHORT:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0075                     ?_SetDataTRISxWork_M1_SPK_POL0_OPEN:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0075                     ??_SetDataTRISxWork_M1_SPK_POL0_OPEN:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0075                     ?_SetDataTRISxWork_M1_SPK_POL0_SHORT:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0075                     ??_SetDataTRISxWork_M1_SPK_POL0_SHORT:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0075                     ?_SetDataTRISxWork_M1_SPK_POL1_OPEN:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0075                     ??_SetDataTRISxWork_M1_SPK_POL1_OPEN:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0075                     ?_SetDataTRISxWork_M1_SPK_POL1_SHORT:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0075                     ??_SetDataTRISxWork_M1_SPK_POL1_SHORT:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0075                     ?_SPIControl_ExecuteCommand:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0075                     ?_TMR2_Initialize:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0075                     ?_TMR2_StartTimer:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0075                     ?_TMR2_StopTimer:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0075                     ?_TMR2_ISR:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0075                     ?_DAC_Initialize:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0075                     ?_INTERRUPT_InterruptManager:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0075                     ?_SYSTEM_Initialize:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0075                     ?_TMR1_StopTimer:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0075                     ?_TMR1_WriteTimer:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0075                     ?_SPI_Open:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0075                     ?_SPI_ReadByte:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0075                     ?_main:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0075                     ?_TMR2_Interrupt_SPK:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0075                     ?_WatchMotorDriveFinish:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0075                     ?_StartPulseOutM0:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0075                     ?_StartPulseOutM1:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0075                     ?_SetMotorStartSPK:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0075                     ?_SetMotorStopSPK:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0075                     ?_SetMotorEnableExcitating:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0075                     ?_SetMotorDisableExcitating:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0075                     ?_CalcMotorStepCounter:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0075                     ?_SetMotorPositionSearchStart:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0075                     ?_SetMotorCorrectPositionStart:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0075                     ?_SetMotorStop:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0075                     ?_DeactivateHandPosition:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0075                     ?_GetIsMotorActive:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0075                     ?i1_TMR2_StopTimer:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0075                     ??i1_TMR2_StopTimer:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0075                     ?i1_SetExcitatingOutOffData:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0075                     ?i1_SetOutPutLATX:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0075                     ??i1_SetOutPutLATX:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0075                     ComparatorOff@motor_no:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0075                     ComparatorOn@motor_no:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0075                     TMR1_WriteTimer@timerVal:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020                           
  3021                           ; 2 bytes @ 0x0
  3022  0075                     	ds	1
  3023  0076                     ??_ExcitatingOutOn:
  3024  0076                     ??i1_SetExcitatingOutOffData:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0076                     VrsCheck@motor_no:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030                           
  3031                           ; 1 bytes @ 0x1
  3032  0076                     	ds	1
  3033  0077                     ??_TMR1_ISR:
  3034  0077                     ??_TMR2_Interrupt:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0077                     ??_ExcitatingOutOff:	
  3038                           ; 1 bytes @ 0x2
  3039                           
  3040  0077                     ??_TMR1_WriteTimer:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043                           
  3044                           ; 1 bytes @ 0x2
  3045  0077                     	ds	1
  3046  0078                     ??_SpkVrsCheck:
  3047  0078                     ??_TMR2_Interrupt_SPK:	
  3048                           ; 1 bytes @ 0x3
  3049                           
  3050                           
  3051                           ; 1 bytes @ 0x3
  3052  0078                     	ds	2
  3053  007A                     ??_TMR2_CallBack:
  3054  007A                     ??_TMR2_ISR:	
  3055                           ; 1 bytes @ 0x5
  3056                           
  3057  007A                     ??_INTERRUPT_InterruptManager:	
  3058                           ; 1 bytes @ 0x5
  3059                           
  3060                           
  3061                           	psect	cstackBANK0
  3062  0020                     __pcstackBANK0:	
  3063                           ; 1 bytes @ 0x5
  3064                           
  3065  0020                     ?_TMR2_SetInterruptHandler:
  3066  0020                     ??_SPI_Initialize:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0020                     ??_PIN_MANAGER_Initialize:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0020                     ??_OSCILLATOR_Initialize:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0020                     ??_WDT_Initialize:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0020                     ?_TMR1_SetInterruptHandler:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0020                     ??_InitPulsePositionTable:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0020                     ?_SetMotorDirection:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0020                     ?_SetMotorAddShakePulse:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0020                     ?_SetMotorFrequency:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0020                     ??_SpkComparatorOn:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0020                     ??_SpkComparatorOff:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0020                     ??_SetMotorBitMotorNo:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0020                     ??_ActivateHandPosition:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0020                     ??_SetOutPutLATX:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0020                     ??_TMR2_StartTimer:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0020                     ??_TMR2_StopTimer:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0020                     ??_DAC_Initialize:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0020                     ??_TMR1_StopTimer:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0020                     ??_SPI_Open:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0020                     ??_SPI_ReadByte:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0020                     ??_StartPulseOutM0:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0020                     ??_StartPulseOutM1:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     ??_SetMotorEnableExcitating:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0020                     ??_SetMotorDisableExcitating:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0020                     ?_SetDriveType:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0020                     ?_SetAfterMotorStopFunc:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0020                     ?_SetAfterDetectLoadFunc:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0020                     ??_SetMotorStop:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0020                     ??_DeactivateHandPosition:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0020                     ??_GetIsMotorActive:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     ?___bmul:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     ?___wmul:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     SetDriveType@drive_type:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165  0020                     SetMotorDirection@dir:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     SetMotorAddShakePulse@sw:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     SetMotorFrequency@type:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     ___bmul@multiplicand:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183  0020                     SetAfterMotorStopFunc@func:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     SetAfterDetectLoadFunc@func:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ___wmul@multiplier:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192                           
  3193                           ; 2 bytes @ 0x0
  3194  0020                     	ds	1
  3195  0021                     ??_SetMotorDirection:
  3196  0021                     ??_SetMotorAddShakePulse:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0021                     ??_SetMotorStart:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0021                     ??_SetExcitatingOutOffData:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0021                     ??_SetDriveType:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208  0021                     ??___bmul:	
  3209                           ; 1 bytes @ 0x1
  3210                           
  3211  0021                     InitPulsePositionTable@motor_no:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0021                     SetMotorFrequency@set_freq:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     SetMotorStart@motor_no:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220                           
  3221                           ; 1 bytes @ 0x1
  3222  0021                     	ds	1
  3223  0022                     ??_TMR2_SetInterruptHandler:
  3224  0022                     ??_TMR1_Initialize:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     ??_TMR1_SetInterruptHandler:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     ??_SetMotorFrequency:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     ??_TMR2_Initialize:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     ??_SYSTEM_Initialize:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     ??_SetMotorStartSPK:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     ??_SetMotorStopSPK:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0022                     ??_SetAfterMotorStopFunc:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0022                     ??_SetAfterDetectLoadFunc:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0022                     SetMotorEnableExcitating@motor_no:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0022                     SetMotorDisableExcitating@motor_no:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0022                     SetAfterMotorStopFunc@motor_no:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0022                     SetAfterDetectLoadFunc@motor_no:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0022                     SetMotorStop@motor_no:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0022                     ActivateHandPosition@motor_no:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0022                     DeactivateHandPosition@motor_no:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0022                     GetIsMotorActive@motor_no:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0022                     SetMotorBitMotorNo@motor_no:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278  0022                     ___bmul@product:	
  3279                           ; 1 bytes @ 0x2
  3280                           
  3281  0022                     ___wmul@multiplicand:	
  3282                           ; 1 bytes @ 0x2
  3283                           
  3284                           
  3285                           ; 2 bytes @ 0x2
  3286  0022                     	ds	1
  3287  0023                     SPI_Open@spiUniqueConfiguration:
  3288  0023                     SetDriveType@motor_no:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0023                     SetMotorDirection@motor_no:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0023                     SetMotorAddShakePulse@motor_no:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0023                     SetMotorFrequency@motor_no:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0023                     GetIsMotorActive@res:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     ___bmul@multiplier:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306                           
  3307                           ; 1 bytes @ 0x3
  3308  0023                     	ds	1
  3309  0024                     ??___wmul:
  3310  0024                     ___wmul@product:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313                           
  3314                           ; 2 bytes @ 0x4
  3315  0024                     	ds	2
  3316  0026                     ?_CorrectPosition:
  3317  0026                     ??_InitPositionSearch:	
  3318                           ; 1 bytes @ 0x6
  3319                           
  3320  0026                     ??_SaveLoadPosition:	
  3321                           ; 1 bytes @ 0x6
  3322                           
  3323  0026                     ??_UpdateCurrentPositionByFinePosition:	
  3324                           ; 1 bytes @ 0x6
  3325                           
  3326  0026                     CorrectPosition@pos:	
  3327                           ; 1 bytes @ 0x6
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x6
  3331  0026                     	ds	2
  3332  0028                     CorrectPosition@max:
  3333                           
  3334                           ; 2 bytes @ 0x8
  3335  0028                     	ds	2
  3336  002A                     ??_CorrectPosition:
  3337                           
  3338                           ; 1 bytes @ 0xA
  3339  002A                     	ds	3
  3340  002D                     ??_PriorUpdateCorrentPosition:
  3341  002D                     ??_DetermineBasePosition:	
  3342                           ; 1 bytes @ 0xD
  3343                           
  3344  002D                     ??_UpdataHandPosition:	
  3345                           ; 1 bytes @ 0xD
  3346                           
  3347  002D                     ?_UpdateTargetPosition:	
  3348                           ; 1 bytes @ 0xD
  3349                           
  3350  002D                     UpdateTargetPosition@steps:	
  3351                           ; 1 bytes @ 0xD
  3352                           
  3353                           
  3354                           ; 2 bytes @ 0xD
  3355  002D                     	ds	1
  3356  002E                     InitPositionSearch@i:
  3357  002E                     UpdateCurrentPositionByFinePosition@diff:	
  3358                           ; 1 bytes @ 0xE
  3359                           
  3360                           
  3361                           ; 2 bytes @ 0xE
  3362  002E                     	ds	1
  3363  002F                     ??_UpdateTargetPosition:
  3364  002F                     InitPositionSearch@motor_no:	
  3365                           ; 1 bytes @ 0xF
  3366                           
  3367  002F                     PriorUpdateCorrentPosition@motor_no:	
  3368                           ; 1 bytes @ 0xF
  3369                           
  3370                           
  3371                           ; 1 bytes @ 0xF
  3372  002F                     	ds	1
  3373  0030                     ?_SetMotorStepCounter:
  3374  0030                     ??_CalcMotorStepCounter:	
  3375                           ; 1 bytes @ 0x10
  3376                           
  3377  0030                     ??_SetMotorPositionSearchStart:	
  3378                           ; 1 bytes @ 0x10
  3379                           
  3380  0030                     ??_SetMotorCorrectPositionStart:	
  3381                           ; 1 bytes @ 0x10
  3382                           
  3383  0030                     SetMotorPositionSearchStart@motor_no:	
  3384                           ; 1 bytes @ 0x10
  3385                           
  3386  0030                     UpdateCurrentPositionByFinePosition@i:	
  3387                           ; 1 bytes @ 0x10
  3388                           
  3389  0030                     SetMotorStepCounter@steps:	
  3390                           ; 1 bytes @ 0x10
  3391                           
  3392                           
  3393                           ; 2 bytes @ 0x10
  3394  0030                     	ds	1
  3395  0031                     UpdateTargetPosition@motor_no:
  3396  0031                     UpdateCurrentPositionByFinePosition@motor_no:	
  3397                           ; 1 bytes @ 0x11
  3398                           
  3399                           
  3400                           ; 1 bytes @ 0x11
  3401  0031                     	ds	1
  3402  0032                     ??_SetMotorStepCounter:
  3403  0032                     SetMotorStepCounter@motor_no:	
  3404                           ; 1 bytes @ 0x12
  3405                           
  3406  0032                     SetMotorCorrectPositionStart@motor_no:	
  3407                           ; 1 bytes @ 0x12
  3408                           
  3409                           
  3410                           ; 1 bytes @ 0x12
  3411  0032                     	ds	3
  3412  0035                     DetermineBasePosition@load_pos_type:
  3413                           
  3414                           ; 2 bytes @ 0x15
  3415  0035                     	ds	1
  3416  0036                     SaveLoadPosition@motor_no:
  3417                           
  3418                           ; 1 bytes @ 0x16
  3419  0036                     	ds	1
  3420  0037                     CalcMotorStepCounter@motor_bit:
  3421  0037                     DetermineBasePosition@base_pos_index:	
  3422                           ; 1 bytes @ 0x17
  3423                           
  3424  0037                     UpdataHandPosition@i:	
  3425                           ; 1 bytes @ 0x17
  3426                           
  3427  0037                     SaveLoadPosition@i:	
  3428                           ; 1 bytes @ 0x17
  3429                           
  3430                           
  3431                           ; 1 bytes @ 0x17
  3432  0037                     	ds	1
  3433  0038                     DetermineBasePosition@motor_no:
  3434  0038                     UpdataHandPosition@motor_no:	
  3435                           ; 1 bytes @ 0x18
  3436                           
  3437  0038                     CalcMotorStepCounter@steps:	
  3438                           ; 1 bytes @ 0x18
  3439                           
  3440                           
  3441                           ; 2 bytes @ 0x18
  3442  0038                     	ds	2
  3443  003A                     CalcMotorStepCounter@motor_no:
  3444                           
  3445                           ; 1 bytes @ 0x1A
  3446  003A                     	ds	1
  3447  003B                     ??_MoveTargetPosition:
  3448                           
  3449                           ; 1 bytes @ 0x1B
  3450  003B                     	ds	1
  3451  003C                     ??_AfterDetectedLoadPosition:
  3452  003C                     MoveTargetPosition@motor_no:	
  3453                           ; 1 bytes @ 0x1C
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x1C
  3457  003C                     	ds	1
  3458  003D                     ?_AfterDetectedLoadPosition:
  3459  003D                     ?_SPIControl_SetNotification:	
  3460                           ; 1 bytes @ 0x1D
  3461                           
  3462  003D                     ?_SpiCmdFunc_Test:	
  3463                           ; 1 bytes @ 0x1D
  3464                           
  3465  003D                     ?_SpiCmdFunc_FwdPulseNormal:	
  3466                           ; 1 bytes @ 0x1D
  3467                           
  3468  003D                     ?_SpiCmdFunc_RevPulseNormal:	
  3469                           ; 1 bytes @ 0x1D
  3470                           
  3471  003D                     ?_SpiCmdFunc_FwdPulseWithShake:	
  3472                           ; 1 bytes @ 0x1D
  3473                           
  3474  003D                     ?_SpiCmdFunc_SearchLoadPosition:	
  3475                           ; 1 bytes @ 0x1D
  3476                           
  3477  003D                     ?_SpiCmdFunc_SearchBasePosition:	
  3478                           ; 1 bytes @ 0x1D
  3479                           
  3480  003D                     ?_SpiCmdFunc_FwdPulseWithCorrect:	
  3481                           ; 1 bytes @ 0x1D
  3482                           
  3483  003D                     ?_SpiCmdFunc_FwdPulsePositionCtl:	
  3484                           ; 1 bytes @ 0x1D
  3485                           
  3486  003D                     ?_SpiCmdFunc_RevPulsePositionCtl:	
  3487                           ; 1 bytes @ 0x1D
  3488                           
  3489  003D                     ?_SpiCmdFunc_StartDetectVrs:	
  3490                           ; 1 bytes @ 0x1D
  3491                           
  3492  003D                     ?_SpiCmdFunc_StopDetectVrs:	
  3493                           ; 1 bytes @ 0x1D
  3494                           
  3495  003D                     ?_SpiCmdFunc_EnableExcitating:	
  3496                           ; 1 bytes @ 0x1D
  3497                           
  3498  003D                     ?_SpiCmdFunc_DisableExcitating:	
  3499                           ; 1 bytes @ 0x1D
  3500                           
  3501  003D                     ?_SpiCmdFunc_Search1008Position:	
  3502                           ; 1 bytes @ 0x1D
  3503                           
  3504  003D                     ?_SetFwdPulseWithCorrectProc:	
  3505                           ; 1 bytes @ 0x1D
  3506                           
  3507  003D                     ?_VerifyHandPosition_LoadPosition:	
  3508                           ; 1 bytes @ 0x1D
  3509                           
  3510  003D                     AfterDetectedLoadPosition@motor_no:	
  3511                           ; 1 bytes @ 0x1D
  3512                           
  3513  003D                     VerifyHandPosition_LoadPosition@motor_no:	
  3514                           ; 1 bytes @ 0x1D
  3515                           
  3516  003D                     SpiCmdFunc_Test@motor_no:	
  3517                           ; 1 bytes @ 0x1D
  3518                           
  3519  003D                     SpiCmdFunc_FwdPulseNormal@motor_no:	
  3520                           ; 1 bytes @ 0x1D
  3521                           
  3522  003D                     SpiCmdFunc_RevPulseNormal@motor_no:	
  3523                           ; 1 bytes @ 0x1D
  3524                           
  3525  003D                     SpiCmdFunc_FwdPulseWithShake@motor_no:	
  3526                           ; 1 bytes @ 0x1D
  3527                           
  3528  003D                     SpiCmdFunc_SearchLoadPosition@motor_no:	
  3529                           ; 1 bytes @ 0x1D
  3530                           
  3531  003D                     SpiCmdFunc_SearchBasePosition@motor_no:	
  3532                           ; 1 bytes @ 0x1D
  3533                           
  3534  003D                     SpiCmdFunc_FwdPulseWithCorrect@motor_no:	
  3535                           ; 1 bytes @ 0x1D
  3536                           
  3537  003D                     SetFwdPulseWithCorrectProc@motor_no:	
  3538                           ; 1 bytes @ 0x1D
  3539                           
  3540  003D                     SpiCmdFunc_FwdPulsePositionCtl@motor_no:	
  3541                           ; 1 bytes @ 0x1D
  3542                           
  3543  003D                     SpiCmdFunc_RevPulsePositionCtl@motor_no:	
  3544                           ; 1 bytes @ 0x1D
  3545                           
  3546  003D                     SpiCmdFunc_StartDetectVrs@motor_no:	
  3547                           ; 1 bytes @ 0x1D
  3548                           
  3549  003D                     SpiCmdFunc_StopDetectVrs@motor_no:	
  3550                           ; 1 bytes @ 0x1D
  3551                           
  3552  003D                     SpiCmdFunc_EnableExcitating@motor_no:	
  3553                           ; 1 bytes @ 0x1D
  3554                           
  3555  003D                     SpiCmdFunc_DisableExcitating@motor_no:	
  3556                           ; 1 bytes @ 0x1D
  3557                           
  3558  003D                     SpiCmdFunc_Search1008Position@motor_no:	
  3559                           ; 1 bytes @ 0x1D
  3560                           
  3561  003D                     SPIControl_SetNotification@motor_no:	
  3562                           ; 1 bytes @ 0x1D
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x1D
  3566  003D                     	ds	1
  3567  003E                     ??_SPIControl_SetNotification:
  3568  003E                     ??_SpiCmdFunc_Test:	
  3569                           ; 1 bytes @ 0x1E
  3570                           
  3571  003E                     ??_SpiCmdFunc_FwdPulseNormal:	
  3572                           ; 1 bytes @ 0x1E
  3573                           
  3574  003E                     ??_SpiCmdFunc_RevPulseNormal:	
  3575                           ; 1 bytes @ 0x1E
  3576                           
  3577  003E                     ??_SpiCmdFunc_FwdPulseWithShake:	
  3578                           ; 1 bytes @ 0x1E
  3579                           
  3580  003E                     ??_SpiCmdFunc_SearchLoadPosition:	
  3581                           ; 1 bytes @ 0x1E
  3582                           
  3583  003E                     ??_SpiCmdFunc_SearchBasePosition:	
  3584                           ; 1 bytes @ 0x1E
  3585                           
  3586  003E                     ??_SpiCmdFunc_FwdPulseWithCorrect:	
  3587                           ; 1 bytes @ 0x1E
  3588                           
  3589  003E                     ??_SpiCmdFunc_FwdPulsePositionCtl:	
  3590                           ; 1 bytes @ 0x1E
  3591                           
  3592  003E                     ??_SpiCmdFunc_RevPulsePositionCtl:	
  3593                           ; 1 bytes @ 0x1E
  3594                           
  3595  003E                     ??_SpiCmdFunc_StartDetectVrs:	
  3596                           ; 1 bytes @ 0x1E
  3597                           
  3598  003E                     ??_SpiCmdFunc_StopDetectVrs:	
  3599                           ; 1 bytes @ 0x1E
  3600                           
  3601  003E                     ??_SpiCmdFunc_EnableExcitating:	
  3602                           ; 1 bytes @ 0x1E
  3603                           
  3604  003E                     ??_SpiCmdFunc_DisableExcitating:	
  3605                           ; 1 bytes @ 0x1E
  3606                           
  3607  003E                     ??_SpiCmdFunc_Search1008Position:	
  3608                           ; 1 bytes @ 0x1E
  3609                           
  3610  003E                     ??_SetFwdPulseWithCorrectProc:	
  3611                           ; 1 bytes @ 0x1E
  3612                           
  3613  003E                     ??_VerifyHandPosition_LoadPosition:	
  3614                           ; 1 bytes @ 0x1E
  3615                           
  3616                           
  3617                           ; 1 bytes @ 0x1E
  3618  003E                     	ds	2
  3619  0040                     ??_SPIControl_ExecuteCommand:
  3620  0040                     SetFwdPulseWithCorrectProc@motor_bit:	
  3621                           ; 1 bytes @ 0x20
  3622                           
  3623                           
  3624                           ; 1 bytes @ 0x20
  3625  0040                     	ds	3
  3626  0043                     AfterDetectedLoadPosition@res:
  3627  0043                     SPIControl_ExecuteCommand@cmd_type:	
  3628                           ; 1 bytes @ 0x23
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x23
  3632  0043                     	ds	1
  3633  0044                     SPIControl_ExecuteCommand@motor_select:
  3634  0044                     AfterDetectedLoadPosition@move_steps:	
  3635                           ; 1 bytes @ 0x24
  3636                           
  3637                           
  3638                           ; 2 bytes @ 0x24
  3639  0044                     	ds	2
  3640  0046                     VerifyHandPosition_LoadPosition@remain_steps:
  3641                           
  3642                           ; 2 bytes @ 0x26
  3643  0046                     	ds	2
  3644  0048                     VerifyHandPosition_LoadPosition@misalignment_flag:
  3645                           
  3646                           ; 1 bytes @ 0x28
  3647  0048                     	ds	1
  3648  0049                     VerifyHandPosition_LoadPosition@curt_pos:
  3649                           
  3650                           ; 2 bytes @ 0x29
  3651  0049                     	ds	2
  3652  004B                     VerifyHandPosition_LoadPosition@i:
  3653                           
  3654                           ; 1 bytes @ 0x2B
  3655  004B                     	ds	1
  3656  004C                     VerifyHandPosition_LoadPosition@load_pos:
  3657                           
  3658                           ; 2 bytes @ 0x2C
  3659  004C                     	ds	2
  3660  004E                     ??_WatchMotorDriveFinish:
  3661                           
  3662                           ; 1 bytes @ 0x2E
  3663  004E                     	ds	1
  3664                           
  3665                           	psect	maintext
  3666  0966                     __pmaintext:	
  3667 ;;
  3668 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3669 ;;
  3670 ;; *************** function _main *****************
  3671 ;; Defined at:
  3672 ;;		line 16 in file "main.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : B1F/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3686 ;;      Params:         0       0       0       0       0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       1       0       0       0
  3689 ;;      Totals:         0       0       0       0       1       0       0       0
  3690 ;;Total ram usage:        1 bytes
  3691 ;; Hardware stack levels required when called:   15
  3692 ;; This function calls:
  3693 ;;		_InitPulsePositionTable
  3694 ;;		_SPIControl_RecieveComannd
  3695 ;;		_SPI_Open
  3696 ;;		_SYSTEM_Initialize
  3697 ;;		_SetMotorAddShakePulse
  3698 ;;		_SetMotorDirection
  3699 ;;		_SetMotorFrequency
  3700 ;;		_SetMotorStart
  3701 ;;		_SetMotorStepCounter
  3702 ;;		_TMR1_StopTimer
  3703 ;;		_TMR2_SetInterruptHandler
  3704 ;; This function is called by:
  3705 ;;		Startup code after reset
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _main
  3711  0966                     _main:
  3712                           
  3713                           ;main.c: 19:     SYSTEM_Initialize();
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3717  0966  3193  23FF  3189   	fcall	_SYSTEM_Initialize
  3718                           
  3719                           ;main.c: 21:  TMR1_StopTimer();
  3720  0969  3187  27FE  3189   	fcall	_TMR1_StopTimer
  3721                           
  3722                           ;main.c: 27:     TMR2_SetInterruptHandler(TMR2_Interrupt);
  3723  096C  30FA               	movlw	low _TMR2_Interrupt
  3724  096D  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3725  096E  3003               	movlw	high _TMR2_Interrupt
  3726  096F  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3727  0970  3190  2079  3189   	fcall	_TMR2_SetInterruptHandler
  3728                           
  3729                           ;main.c: 34:     (INTCONbits.GIE = 1);
  3730  0973  178B               	bsf	11,7	;volatile
  3731                           
  3732                           ;main.c: 37:     (INTCONbits.PEIE = 1);
  3733  0974  170B               	bsf	11,6	;volatile
  3734                           
  3735                           ;main.c: 45:  InitPulsePositionTable( 0 );
  3736  0975  3000               	movlw	0
  3737  0976  3192  22CB  3189   	fcall	_InitPulsePositionTable
  3738                           
  3739                           ;main.c: 46:  InitPulsePositionTable( 1 );
  3740  0979  3001               	movlw	1
  3741  097A  3192  22CB  3189   	fcall	_InitPulsePositionTable
  3742                           
  3743                           ;main.c: 48:  SetMotorDirection( 0, 1 );
  3744  097D  0020               	movlb	0	; select bank0
  3745  097E  01A0               	clrf	SetMotorDirection@dir
  3746  097F  0AA0               	incf	SetMotorDirection@dir,f
  3747  0980  3000               	movlw	0
  3748  0981  3194  24E9  3189   	fcall	_SetMotorDirection
  3749                           
  3750                           ;main.c: 49:  SetMotorStepCounter( 0, 80 );
  3751  0984  3050               	movlw	80
  3752  0985  00B0               	movwf	SetMotorStepCounter@steps
  3753  0986  3000               	movlw	0
  3754  0987  00B1               	movwf	SetMotorStepCounter@steps+1
  3755  0988  3000               	movlw	0
  3756  0989  3190  20FA  3189   	fcall	_SetMotorStepCounter
  3757                           
  3758                           ;main.c: 50:  SetMotorAddShakePulse( 0, 0 );
  3759  098C  0020               	movlb	0	; select bank0
  3760  098D  01A0               	clrf	SetMotorAddShakePulse@sw
  3761  098E  3000               	movlw	0
  3762  098F  3195  251B  3189   	fcall	_SetMotorAddShakePulse
  3763                           
  3764                           ;main.c: 51:  SetMotorFrequency( 0, FREQ_SET_SELF_CONTROL_NORMAL, 41 );
  3765  0992  01A0               	clrf	SetMotorFrequency@type
  3766  0993  3029               	movlw	41
  3767  0994  0023               	movlb	3	; select bank3
  3768  0995  00CE               	movwf	??_main^(0+384)
  3769  0996  084E               	movf	??_main^(0+384),w
  3770  0997  0020               	movlb	0	; select bank0
  3771  0998  00A1               	movwf	SetMotorFrequency@set_freq
  3772  0999  3000               	movlw	0
  3773  099A  3188  2045  3189   	fcall	_SetMotorFrequency
  3774                           
  3775                           ;main.c: 53:  SetMotorDirection( 1, 1 );
  3776  099D  01A0               	clrf	SetMotorDirection@dir
  3777  099E  0AA0               	incf	SetMotorDirection@dir,f
  3778  099F  3001               	movlw	1
  3779  09A0  3194  24E9  3189   	fcall	_SetMotorDirection
  3780                           
  3781                           ;main.c: 54:  SetMotorStepCounter( 1, 120 );
  3782  09A3  3078               	movlw	120
  3783  09A4  00B0               	movwf	SetMotorStepCounter@steps
  3784  09A5  3000               	movlw	0
  3785  09A6  00B1               	movwf	SetMotorStepCounter@steps+1
  3786  09A7  3001               	movlw	1
  3787  09A8  3190  20FA  3189   	fcall	_SetMotorStepCounter
  3788                           
  3789                           ;main.c: 55:  SetMotorAddShakePulse( 1, 0 );
  3790  09AB  0020               	movlb	0	; select bank0
  3791  09AC  01A0               	clrf	SetMotorAddShakePulse@sw
  3792  09AD  3001               	movlw	1
  3793  09AE  3195  251B  3189   	fcall	_SetMotorAddShakePulse
  3794                           
  3795                           ;main.c: 56:  SetMotorFrequency( 1, FREQ_SET_SELF_CONTROL_NORMAL, 41 );
  3796  09B1  01A0               	clrf	SetMotorFrequency@type
  3797  09B2  3029               	movlw	41
  3798  09B3  0023               	movlb	3	; select bank3
  3799  09B4  00CE               	movwf	??_main^(0+384)
  3800  09B5  084E               	movf	??_main^(0+384),w
  3801  09B6  0020               	movlb	0	; select bank0
  3802  09B7  00A1               	movwf	SetMotorFrequency@set_freq
  3803  09B8  3001               	movlw	1
  3804  09B9  3188  2045  3189   	fcall	_SetMotorFrequency
  3805                           
  3806                           ;main.c: 58:  SetMotorStart( 0 );
  3807  09BC  3000               	movlw	0
  3808  09BD  3190  2089  3189   	fcall	_SetMotorStart
  3809                           
  3810                           ;main.c: 59:  SetMotorStart( 1 );
  3811  09C0  3001               	movlw	1
  3812  09C1  3190  2089  3189   	fcall	_SetMotorStart
  3813                           
  3814                           ;main.c: 66:  SPI_Open(SPI_DEFAULT);
  3815  09C4  3000               	movlw	0
  3816  09C5  3189  2110  3189   	fcall	_SPI_Open
  3817  09C8                     l6902:
  3818                           
  3819                           ;main.c: 70:   SPIControl_RecieveComannd();
  3820  09C8  3193  23A0  3189   	fcall	_SPIControl_RecieveComannd
  3821  09CB  29C8               	goto	l6902
  3822  09CC                     __end_of_main:
  3823                           
  3824                           	psect	text1
  3825  07FE                     __ptext1:	
  3826 ;; *************** function _TMR1_StopTimer *****************
  3827 ;; Defined at:
  3828 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		None
  3837 ;; Tracked objects:
  3838 ;;		On entry : 1F/0
  3839 ;;		On exit  : 1F/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3842 ;;      Params:         0       0       0       0       0       0       0       0
  3843 ;;      Locals:         0       0       0       0       0       0       0       0
  3844 ;;      Temps:          0       0       0       0       0       0       0       0
  3845 ;;      Totals:         0       0       0       0       0       0       0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    8
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_main
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _TMR1_StopTimer
  3858  07FE                     _TMR1_StopTimer:
  3859                           
  3860                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _TMR1_StopTimer: []
  3864  07FE  1018               	bcf	24,0	;volatile
  3865  07FF  0008               	return
  3866  0800                     __end_of_TMR1_StopTimer:
  3867                           
  3868                           	psect	text2
  3869  151B                     __ptext2:	
  3870 ;; *************** function _SetMotorAddShakePulse *****************
  3871 ;; Defined at:
  3872 ;;		line 1797 in file "MotorDrive.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  motor_no        1    wreg     unsigned char 
  3875 ;;  sw              1    0[BANK0 ] unsigned char 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  motor_no        1    3[BANK0 ] unsigned char 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0
  3882 ;; Tracked objects:
  3883 ;;		On entry : 1F/0
  3884 ;;		On exit  : 1F/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3887 ;;      Params:         0       1       0       0       0       0       0       0
  3888 ;;      Locals:         0       1       0       0       0       0       0       0
  3889 ;;      Temps:          0       2       0       0       0       0       0       0
  3890 ;;      Totals:         0       4       0       0       0       0       0       0
  3891 ;;Total ram usage:        4 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    8
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _SetMotorAddShakePulse
  3903  151B                     _SetMotorAddShakePulse:
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _SetMotorAddShakePulse: [wreg+status,2+status,0]
  3907                           ;SetMotorAddShakePulse@motor_no stored from wreg
  3908  151B  00A3               	movwf	SetMotorAddShakePulse@motor_no
  3909                           
  3910                           ;MotorDrive.c: 1797: void SetMotorAddShakePulse(UB motor_no, UB sw);MotorDrive.c: 1798: 
      +                          {;MotorDrive.c: 1799:     motorBitOperation = (UB) (0x01 << motor_no);
  3911  151C  3001               	movlw	1
  3912  151D  00A1               	movwf	??_SetMotorAddShakePulse
  3913  151E  0A23               	incf	SetMotorAddShakePulse@motor_no,w
  3914  151F  2D21               	goto	u5604
  3915  1520                     u5605:
  3916  1520  35A1               	lslf	??_SetMotorAddShakePulse,f
  3917  1521                     u5604:
  3918  1521  0B89               	decfsz	9,f
  3919  1522  2D20               	goto	u5605
  3920  1523  0821               	movf	??_SetMotorAddShakePulse,w
  3921  1524  00A2               	movwf	??_SetMotorAddShakePulse+1
  3922  1525  0822               	movf	??_SetMotorAddShakePulse+1,w
  3923  1526  00F4               	movwf	_motorBitOperation
  3924                           
  3925                           ;MotorDrive.c: 1801:     if (sw) {
  3926  1527  0820               	movf	SetMotorAddShakePulse@sw,w
  3927  1528  1903               	btfsc	3,2
  3928  1529  2D2F               	goto	l6856
  3929                           
  3930                           ;MotorDrive.c: 1803:         addShakePulseBit |= motorBitOperation;
  3931  152A  0874               	movf	_motorBitOperation,w
  3932  152B  00A1               	movwf	??_SetMotorAddShakePulse
  3933  152C  0821               	movf	??_SetMotorAddShakePulse,w
  3934  152D  04F0               	iorwf	_addShakePulseBit,f
  3935                           
  3936                           ;MotorDrive.c: 1805:     } else {
  3937  152E  0008               	return
  3938  152F                     l6856:
  3939                           
  3940                           ;MotorDrive.c: 1807:         addShakePulseBit &= (UB) (~motorBitOperation);
  3941  152F  0974               	comf	_motorBitOperation,w
  3942  1530  00A1               	movwf	??_SetMotorAddShakePulse
  3943  1531  0821               	movf	??_SetMotorAddShakePulse,w
  3944  1532  05F0               	andwf	_addShakePulseBit,f
  3945  1533  0008               	return
  3946  1534                     __end_of_SetMotorAddShakePulse:
  3947                           
  3948                           	psect	text3
  3949  13FF                     __ptext3:	
  3950 ;; *************** function _SYSTEM_Initialize *****************
  3951 ;; Defined at:
  3952 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0, pclath, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : B1F/0
  3963 ;;		On exit  : 1F/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3966 ;;      Params:         0       0       0       0       0       0       0       0
  3967 ;;      Locals:         0       0       0       0       0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0
  3969 ;;      Totals:         0       0       0       0       0       0       0       0
  3970 ;;Total ram usage:        0 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:   10
  3973 ;; This function calls:
  3974 ;;		_DAC_Initialize
  3975 ;;		_OSCILLATOR_Initialize
  3976 ;;		_PIN_MANAGER_Initialize
  3977 ;;		_SPI_Initialize
  3978 ;;		_TMR1_Initialize
  3979 ;;		_TMR2_Initialize
  3980 ;;		_WDT_Initialize
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _SYSTEM_Initialize
  3988  13FF                     _SYSTEM_Initialize:
  3989                           
  3990                           ;mcc_generated_files/mcc.c: 53:     SPI_Initialize();
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3994  13FF  3190  209D  3193   	fcall	_SPI_Initialize
  3995                           
  3996                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3997  1402  3195  2502  3193   	fcall	_PIN_MANAGER_Initialize
  3998                           
  3999                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4000  1405  3190  2073  3193   	fcall	_OSCILLATOR_Initialize
  4001                           
  4002                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4003  1408  3190  205F  3193   	fcall	_WDT_Initialize
  4004                           
  4005                           ;mcc_generated_files/mcc.c: 57:     DAC_Initialize();
  4006  140B  3190  206D  3193   	fcall	_DAC_Initialize
  4007                           
  4008                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4009  140E  3193  23B2  3193   	fcall	_TMR2_Initialize
  4010                           
  4011                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  4012  1411  3195  254E         	fcall	_TMR1_Initialize
  4013  1413  0008               	return
  4014  1414                     __end_of_SYSTEM_Initialize:
  4015                           
  4016                           	psect	text4
  4017  105F                     __ptext4:	
  4018 ;; *************** function _WDT_Initialize *****************
  4019 ;; Defined at:
  4020 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg
  4029 ;; Tracked objects:
  4030 ;;		On entry : B1F/2
  4031 ;;		On exit  : B1F/1
  4032 ;;		Unchanged: B00/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4034 ;;      Params:         0       0       0       0       0       0       0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    8
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_SYSTEM_Initialize
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _WDT_Initialize
  4050  105F                     _WDT_Initialize:
  4051                           
  4052                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in _WDT_Initialize: [wreg]
  4056  105F  3016               	movlw	22
  4057  1060  0021               	movlb	1	; select bank1
  4058  1061  0097               	movwf	23	;volatile
  4059  1062  0008               	return
  4060  1063                     __end_of_WDT_Initialize:
  4061                           
  4062                           	psect	text5
  4063  13B2                     __ptext5:	
  4064 ;; *************** function _TMR2_Initialize *****************
  4065 ;; Defined at:
  4066 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      void 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0, pclath, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : B1F/2
  4077 ;;		On exit  : 1F/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4080 ;;      Params:         0       0       0       0       0       0       0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0
  4083 ;;      Totals:         0       0       0       0       0       0       0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    9
  4087 ;; This function calls:
  4088 ;;		_TMR2_SetInterruptHandler
  4089 ;; This function is called by:
  4090 ;;		_SYSTEM_Initialize
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function _TMR2_Initialize
  4096  13B2                     _TMR2_Initialize:
  4097                           
  4098                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x79;
  4099                           
  4100                           ;incstack = 0
  4101                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4102  13B2  3079               	movlw	121
  4103  13B3  0020               	movlb	0	; select bank0
  4104  13B4  009B               	movwf	27	;volatile
  4105                           
  4106                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  4107  13B5  019A               	clrf	26	;volatile
  4108                           
  4109                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  4110  13B6  1091               	bcf	17,1	;volatile
  4111                           
  4112                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  4113  13B7  0021               	movlb	1	; select bank1
  4114  13B8  1491               	bsf	17,1	;volatile
  4115                           
  4116                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  4117  13B9  3048               	movlw	low _TMR2_DefaultInterruptHandler
  4118  13BA  0020               	movlb	0	; select bank0
  4119  13BB  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  4120  13BC  3010               	movlw	high _TMR2_DefaultInterruptHandler
  4121  13BD  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  4122  13BE  3190  2079         	fcall	_TMR2_SetInterruptHandler
  4123                           
  4124                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x05;
  4125  13C0  3005               	movlw	5
  4126  13C1  0020               	movlb	0	; select bank0
  4127  13C2  009C               	movwf	28	;volatile
  4128  13C3  0008               	return
  4129  13C4                     __end_of_TMR2_Initialize:
  4130                           
  4131                           	psect	text6
  4132  154E                     __ptext6:	
  4133 ;; *************** function _TMR1_Initialize *****************
  4134 ;; Defined at:
  4135 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 1F/0
  4146 ;;		On exit  : 1F/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4149 ;;      Params:         0       0       0       0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0
  4152 ;;      Totals:         0       0       0       0       0       0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    9
  4156 ;; This function calls:
  4157 ;;		_TMR1_SetInterruptHandler
  4158 ;; This function is called by:
  4159 ;;		_SYSTEM_Initialize
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _TMR1_Initialize
  4165  154E                     _TMR1_Initialize:
  4166                           
  4167                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4171  154E  0199               	clrf	25	;volatile
  4172                           
  4173                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x86;
  4174  154F  3086               	movlw	134
  4175  1550  0097               	movwf	23	;volatile
  4176                           
  4177                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xE8;
  4178  1551  30E8               	movlw	232
  4179  1552  0096               	movwf	22	;volatile
  4180                           
  4181                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4182  1553  1011               	bcf	17,0	;volatile
  4183                           
  4184                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4185  1554  0817               	movf	23,w	;volatile
  4186  1555  0022               	movlb	2	; select bank2
  4187  1556  00EB               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  4188  1557  0020               	movlb	0	; select bank0
  4189  1558  0816               	movf	22,w	;volatile
  4190  1559  0022               	movlb	2	; select bank2
  4191  155A  00EA               	movwf	_timer1ReloadVal^(0+256)	;volatile
  4192                           
  4193                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4194  155B  0021               	movlb	1	; select bank1
  4195  155C  1411               	bsf	17,0	;volatile
  4196                           
  4197                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4198  155D  3047               	movlw	low _TMR1_DefaultInterruptHandler
  4199  155E  0020               	movlb	0	; select bank0
  4200  155F  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4201  1560  3010               	movlw	high _TMR1_DefaultInterruptHandler
  4202  1561  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4203  1562  3190  2081         	fcall	_TMR1_SetInterruptHandler
  4204                           
  4205                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0xC1;
  4206  1564  30C1               	movlw	193
  4207  1565  0020               	movlb	0	; select bank0
  4208  1566  0098               	movwf	24	;volatile
  4209  1567  0008               	return
  4210  1568                     __end_of_TMR1_Initialize:
  4211                           
  4212                           	psect	text7
  4213  1081                     __ptext7:	
  4214 ;; *************** function _TMR1_SetInterruptHandler *****************
  4215 ;; Defined at:
  4216 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4219 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg
  4226 ;; Tracked objects:
  4227 ;;		On entry : 1F/0
  4228 ;;		On exit  : 1F/2
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4231 ;;      Params:         0       2       0       0       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0       0
  4234 ;;      Totals:         0       2       0       0       0       0       0       0
  4235 ;;Total ram usage:        2 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    8
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_TMR1_Initialize
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _TMR1_SetInterruptHandler
  4247  1081                     _TMR1_SetInterruptHandler:
  4248                           
  4249                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4253  1081  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4254  1082  0022               	movlb	2	; select bank2
  4255  1083  00E9               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  4256  1084  0020               	movlb	0	; select bank0
  4257  1085  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4258  1086  0022               	movlb	2	; select bank2
  4259  1087  00E8               	movwf	_TMR1_InterruptHandler^(0+256)
  4260  1088  0008               	return
  4261  1089                     __end_of_TMR1_SetInterruptHandler:
  4262                           
  4263                           	psect	text8
  4264  109D                     __ptext8:	
  4265 ;; *************** function _SPI_Initialize *****************
  4266 ;; Defined at:
  4267 ;;		line 62 in file "mcc_generated_files/spi.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2
  4276 ;; Tracked objects:
  4277 ;;		On entry : B1F/0
  4278 ;;		On exit  : B1F/4
  4279 ;;		Unchanged: B00/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4281 ;;      Params:         0       0       0       0       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0       0
  4284 ;;      Totals:         0       0       0       0       0       0       0       0
  4285 ;;Total ram usage:        0 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    8
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_SYSTEM_Initialize
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           
  4296                           ;psect for function _SPI_Initialize
  4297  109D                     _SPI_Initialize:
  4298                           
  4299                           ;mcc_generated_files/spi.c: 65:     SSP1STAT = 0x00;
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4303  109D  0024               	movlb	4	; select bank4
  4304  109E  0194               	clrf	20	;volatile
  4305                           
  4306                           ;mcc_generated_files/spi.c: 66:     SSP1CON1 = 0x14;
  4307  109F  3014               	movlw	20
  4308  10A0  0095               	movwf	21	;volatile
  4309                           
  4310                           ;mcc_generated_files/spi.c: 67:     SSP1ADD = 0x00;
  4311  10A1  0192               	clrf	18	;volatile
  4312                           
  4313                           ;mcc_generated_files/spi.c: 68:     TRISBbits.TRISB6 = 1;
  4314  10A2  0021               	movlb	1	; select bank1
  4315  10A3  170D               	bsf	13,6	;volatile
  4316                           
  4317                           ;mcc_generated_files/spi.c: 69:     SSP1CON1bits.SSPEN = 0;
  4318  10A4  0024               	movlb	4	; select bank4
  4319  10A5  1295               	bcf	21,5	;volatile
  4320  10A6  0008               	return
  4321  10A7                     __end_of_SPI_Initialize:
  4322                           
  4323                           	psect	text9
  4324  1502                     __ptext9:	
  4325 ;; *************** function _PIN_MANAGER_Initialize *****************
  4326 ;; Defined at:
  4327 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;		None
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2
  4336 ;; Tracked objects:
  4337 ;;		On entry : B1F/4
  4338 ;;		On exit  : B1F/2
  4339 ;;		Unchanged: B00/0
  4340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4341 ;;      Params:         0       0       0       0       0       0       0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0       0
  4343 ;;      Temps:          0       0       0       0       0       0       0       0
  4344 ;;      Totals:         0       0       0       0       0       0       0       0
  4345 ;;Total ram usage:        0 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    8
  4348 ;; This function calls:
  4349 ;;		Nothing
  4350 ;; This function is called by:
  4351 ;;		_SYSTEM_Initialize
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _PIN_MANAGER_Initialize
  4357  1502                     _PIN_MANAGER_Initialize:
  4358                           
  4359                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4360                           
  4361                           ;incstack = 0
  4362                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4363  1502  0022               	movlb	2	; select bank2
  4364  1503  018C               	clrf	12	;volatile
  4365                           
  4366                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4367  1504  018D               	clrf	13	;volatile
  4368                           
  4369                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4370  1505  018E               	clrf	14	;volatile
  4371                           
  4372                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  4373  1506  3008               	movlw	8
  4374  1507  0021               	movlb	1	; select bank1
  4375  1508  008C               	movwf	12	;volatile
  4376                           
  4377                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x50;
  4378  1509  3050               	movlw	80
  4379  150A  008D               	movwf	13	;volatile
  4380                           
  4381                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x60;
  4382  150B  3060               	movlw	96
  4383  150C  008E               	movwf	14	;volatile
  4384                           
  4385                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x0E;
  4386  150D  300E               	movlw	14
  4387  150E  0023               	movlb	3	; select bank3
  4388  150F  008E               	movwf	14	;volatile
  4389                           
  4390                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
  4391  1510  018D               	clrf	13	;volatile
  4392                           
  4393                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x02;
  4394  1511  3002               	movlw	2
  4395  1512  008C               	movwf	12	;volatile
  4396                           
  4397                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4398  1513  0024               	movlb	4	; select bank4
  4399  1514  018D               	clrf	13	;volatile
  4400                           
  4401                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4402  1515  018C               	clrf	12	;volatile
  4403                           
  4404                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4405  1516  0021               	movlb	1	; select bank1
  4406  1517  1795               	bsf	21,7	;volatile
  4407                           
  4408                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4409  1518  0022               	movlb	2	; select bank2
  4410  1519  019D               	clrf	29	;volatile
  4411  151A  0008               	return
  4412  151B                     __end_of_PIN_MANAGER_Initialize:
  4413                           
  4414                           	psect	text10
  4415  1073                     __ptext10:	
  4416 ;; *************** function _OSCILLATOR_Initialize *****************
  4417 ;; Defined at:
  4418 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, status,2
  4427 ;; Tracked objects:
  4428 ;;		On entry : B1F/2
  4429 ;;		On exit  : B1F/2
  4430 ;;		Unchanged: B00/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4432 ;;      Params:         0       0       0       0       0       0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0
  4434 ;;      Temps:          0       0       0       0       0       0       0       0
  4435 ;;      Totals:         0       0       0       0       0       0       0       0
  4436 ;;Total ram usage:        0 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    8
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_SYSTEM_Initialize
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _OSCILLATOR_Initialize
  4448  1073                     _OSCILLATOR_Initialize:
  4449                           
  4450                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x7A;
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4454  1073  307A               	movlw	122
  4455  1074  0021               	movlb	1	; select bank1
  4456  1075  0099               	movwf	25	;volatile
  4457                           
  4458                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4459  1076  0022               	movlb	2	; select bank2
  4460  1077  0196               	clrf	22	;volatile
  4461  1078  0008               	return
  4462  1079                     __end_of_OSCILLATOR_Initialize:
  4463                           
  4464                           	psect	text11
  4465  106D                     __ptext11:	
  4466 ;; *************** function _DAC_Initialize *****************
  4467 ;; Defined at:
  4468 ;;		line 58 in file "mcc_generated_files/dac.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg
  4477 ;; Tracked objects:
  4478 ;;		On entry : B1F/1
  4479 ;;		On exit  : B1F/2
  4480 ;;		Unchanged: B00/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4482 ;;      Params:         0       0       0       0       0       0       0       0
  4483 ;;      Locals:         0       0       0       0       0       0       0       0
  4484 ;;      Temps:          0       0       0       0       0       0       0       0
  4485 ;;      Totals:         0       0       0       0       0       0       0       0
  4486 ;;Total ram usage:        0 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    8
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_SYSTEM_Initialize
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           
  4497                           ;psect for function _DAC_Initialize
  4498  106D                     _DAC_Initialize:
  4499                           
  4500                           ;mcc_generated_files/dac.c: 61:     DACCON0 = 0x80;
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in _DAC_Initialize: [wreg]
  4504  106D  3080               	movlw	128
  4505  106E  0022               	movlb	2	; select bank2
  4506  106F  0098               	movwf	24	;volatile
  4507                           
  4508                           ;mcc_generated_files/dac.c: 63:     DACCON1 = 0x1F;
  4509  1070  301F               	movlw	31
  4510  1071  0099               	movwf	25	;volatile
  4511  1072  0008               	return
  4512  1073                     __end_of_DAC_Initialize:
  4513                           
  4514                           	psect	text12
  4515  0910                     __ptext12:	
  4516 ;; *************** function _SPI_Open *****************
  4517 ;; Defined at:
  4518 ;;		line 72 in file "mcc_generated_files/spi.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  spiUniqueCon    1    wreg     enum E353
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  spiUniqueCon    1    3[BANK0 ] enum E353
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      _Bool 
  4525 ;; Registers used:
  4526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4527 ;; Tracked objects:
  4528 ;;		On entry : 1F/0
  4529 ;;		On exit  : 1F/4
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4532 ;;      Params:         0       0       0       0       0       0       0       0
  4533 ;;      Locals:         0       1       0       0       0       0       0       0
  4534 ;;      Temps:          0       3       0       0       0       0       0       0
  4535 ;;      Totals:         0       4       0       0       0       0       0       0
  4536 ;;Total ram usage:        4 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    8
  4539 ;; This function calls:
  4540 ;;		Nothing
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _SPI_Open
  4548  0910                     _SPI_Open:
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _SPI_Open: [wreg-fsr0h+status,2+status,0+pclath]
  4552                           ;SPI_Open@spiUniqueConfiguration stored from wreg
  4553  0910  00A3               	movwf	SPI_Open@spiUniqueConfiguration
  4554                           
  4555                           ;mcc_generated_files/spi.c: 72: _Bool SPI_Open(spi_modes_t spiUniqueConfiguration);mcc_g
      +                          enerated_files/spi.c: 73: {;mcc_generated_files/spi.c: 74:     if(!SSP1CON1bits.SSPEN)
  4556  0911  0024               	movlb	4	; select bank4
  4557  0912  1A95               	btfsc	21,5	;volatile
  4558  0913  0008               	return
  4559                           
  4560                           ;mcc_generated_files/spi.c: 75:     {;mcc_generated_files/spi.c: 76:         SSP1STAT = 
      +                          spi_configuration[spiUniqueConfiguration].stat;
  4561  0914  0020               	movlb	0	; select bank0
  4562  0915  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4563  0916  00A0               	movwf	??_SPI_Open
  4564  0917  01A1               	clrf	??_SPI_Open+1
  4565  0918  35A0               	lslf	??_SPI_Open,f
  4566  0919  0DA1               	rlf	??_SPI_Open+1,f
  4567  091A  35A0               	lslf	??_SPI_Open,f
  4568  091B  0DA1               	rlf	??_SPI_Open+1,f
  4569  091C  305B               	movlw	low ((_spi_configuration+1)| (0+32768))
  4570  091D  0720               	addwf	??_SPI_Open,w
  4571  091E  0084               	movwf	4
  4572  091F  3098               	movlw	high ((_spi_configuration+1)| (0+32768))
  4573  0920  3D21               	addwfc	??_SPI_Open+1,w
  4574  0921  0085               	movwf	5
  4575  0922  0800               	movf	0,w	;code access
  4576  0923  0024               	movlb	4	; select bank4
  4577  0924  0094               	movwf	20	;volatile
  4578                           
  4579                           ;mcc_generated_files/spi.c: 77:         SSP1CON1 = spi_configuration[spiUniqueConfigurat
      +                          ion].con1;
  4580  0925  0020               	movlb	0	; select bank0
  4581  0926  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4582  0927  00A0               	movwf	??_SPI_Open
  4583  0928  01A1               	clrf	??_SPI_Open+1
  4584  0929  35A0               	lslf	??_SPI_Open,f
  4585  092A  0DA1               	rlf	??_SPI_Open+1,f
  4586  092B  35A0               	lslf	??_SPI_Open,f
  4587  092C  0DA1               	rlf	??_SPI_Open+1,f
  4588  092D  305A               	movlw	low (_spi_configuration| (0+32768))
  4589  092E  0720               	addwf	??_SPI_Open,w
  4590  092F  0084               	movwf	4
  4591  0930  3098               	movlw	high (_spi_configuration| (0+32768))
  4592  0931  3D21               	addwfc	??_SPI_Open+1,w
  4593  0932  0085               	movwf	5
  4594  0933  0800               	movf	0,w	;code access
  4595  0934  0024               	movlb	4	; select bank4
  4596  0935  0095               	movwf	21	;volatile
  4597                           
  4598                           ;mcc_generated_files/spi.c: 78:         SSP1CON2 = 0x00;
  4599  0936  0196               	clrf	22	;volatile
  4600                           
  4601                           ;mcc_generated_files/spi.c: 79:         SSP1ADD = spi_configuration[spiUniqueConfigurati
      +                          on].add;
  4602  0937  0020               	movlb	0	; select bank0
  4603  0938  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4604  0939  00A0               	movwf	??_SPI_Open
  4605  093A  01A1               	clrf	??_SPI_Open+1
  4606  093B  35A0               	lslf	??_SPI_Open,f
  4607  093C  0DA1               	rlf	??_SPI_Open+1,f
  4608  093D  35A0               	lslf	??_SPI_Open,f
  4609  093E  0DA1               	rlf	??_SPI_Open+1,f
  4610  093F  305C               	movlw	low ((_spi_configuration+2)| (0+32768))
  4611  0940  0720               	addwf	??_SPI_Open,w
  4612  0941  0084               	movwf	4
  4613  0942  3098               	movlw	high ((_spi_configuration+2)| (0+32768))
  4614  0943  3D21               	addwfc	??_SPI_Open+1,w
  4615  0944  0085               	movwf	5
  4616  0945  0800               	movf	0,w	;code access
  4617  0946  0024               	movlb	4	; select bank4
  4618  0947  0092               	movwf	18	;volatile
  4619                           
  4620                           ;mcc_generated_files/spi.c: 80:         TRISBbits.TRISB6 = spi_configuration[spiUniqueCo
      +                          nfiguration].operation;
  4621  0948  0020               	movlb	0	; select bank0
  4622  0949  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4623  094A  00A0               	movwf	??_SPI_Open
  4624  094B  01A1               	clrf	??_SPI_Open+1
  4625  094C  35A0               	lslf	??_SPI_Open,f
  4626  094D  0DA1               	rlf	??_SPI_Open+1,f
  4627  094E  35A0               	lslf	??_SPI_Open,f
  4628  094F  0DA1               	rlf	??_SPI_Open+1,f
  4629  0950  305D               	movlw	low ((_spi_configuration+3)| (0+32768))
  4630  0951  0720               	addwf	??_SPI_Open,w
  4631  0952  0084               	movwf	4
  4632  0953  3098               	movlw	high ((_spi_configuration+3)| (0+32768))
  4633  0954  3D21               	addwfc	??_SPI_Open+1,w
  4634  0955  0085               	movwf	5
  4635  0956  0800               	movf	0,w	;code access
  4636  0957  00A2               	movwf	??_SPI_Open+2
  4637  0958  0EA2               	swapf	??_SPI_Open+2,f
  4638  0959  0DA2               	rlf	??_SPI_Open+2,f
  4639  095A  0DA2               	rlf	??_SPI_Open+2,f
  4640  095B  0021               	movlb	1	; select bank1
  4641  095C  080D               	movf	13,w	;volatile
  4642  095D  0020               	movlb	0	; select bank0
  4643  095E  0622               	xorwf	??_SPI_Open+2,w
  4644  095F  39BF               	andlw	-65
  4645  0960  0622               	xorwf	??_SPI_Open+2,w
  4646  0961  0021               	movlb	1	; select bank1
  4647  0962  008D               	movwf	13	;volatile
  4648                           
  4649                           ;mcc_generated_files/spi.c: 81:         SSP1CON1bits.SSPEN = 1;
  4650  0963  0024               	movlb	4	; select bank4
  4651  0964  1695               	bsf	21,5	;volatile
  4652  0965  0008               	return
  4653  0966                     __end_of_SPI_Open:
  4654                           
  4655                           	psect	text13
  4656  13A0                     __ptext13:	
  4657 ;; *************** function _SPIControl_RecieveComannd *****************
  4658 ;; Defined at:
  4659 ;;		line 173 in file "spi_control.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/4
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4673 ;;      Params:         0       0       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       1       0       0       0       0       0
  4676 ;;      Totals:         0       0       1       0       0       0       0       0
  4677 ;;Total ram usage:        1 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:   14
  4680 ;; This function calls:
  4681 ;;		_SPIControl_ExecuteCommand
  4682 ;;		_SPI_ReadByte
  4683 ;;		_WatchMotorDriveFinish
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function _SPIControl_RecieveComannd
  4691  13A0                     _SPIControl_RecieveComannd:
  4692  13A0                     l1318:	
  4693                           ;incstack = 0
  4694                           ; Regs used in _SPIControl_RecieveComannd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4695                           ;spi_control.c: 175:     while ( 1 ) {
  4696                           
  4697                           
  4698                           ;spi_control.c: 179:         if ( PIR1bits.SSP1IF ) {
  4699  13A0  0020               	movlb	0	; select bank0
  4700  13A1  1D91               	btfss	17,3	;volatile
  4701  13A2  2BAE               	goto	l6864
  4702                           
  4703                           ;spi_control.c: 180:             PIR1bits.SSP1IF = 0;
  4704  13A3  1191               	bcf	17,3	;volatile
  4705                           
  4706                           ;spi_control.c: 181:             recieveCommand = SPI_ReadByte( );
  4707  13A4  3190  2052  3193   	fcall	_SPI_ReadByte
  4708  13A7  0021               	movlb	1	; select bank1
  4709  13A8  00EF               	movwf	??_SPIControl_RecieveComannd^(0+128)
  4710  13A9  086F               	movf	??_SPIControl_RecieveComannd^(0+128),w
  4711  13AA  00CC               	movwf	_recieveCommand^(0+128)
  4712                           
  4713                           ;spi_control.c: 182:             SPIControl_ExecuteCommand( );
  4714  13AB  318B  2388  3193   	fcall	_SPIControl_ExecuteCommand
  4715  13AE                     l6864:
  4716                           
  4717                           ;spi_control.c: 185:         WatchMotorDriveFinish( );
  4718  13AE  318B  23FB  3193   	fcall	_WatchMotorDriveFinish
  4719  13B1  2BA0               	goto	l1318
  4720  13B2                     __end_of_SPIControl_RecieveComannd:
  4721                           
  4722                           	psect	text14
  4723  0BFB                     __ptext14:	
  4724 ;; *************** function _WatchMotorDriveFinish *****************
  4725 ;; Defined at:
  4726 ;;		line 1209 in file "MotorDrive.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;		None
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  func            2    0[BANK2 ] PTR FTN(unsigned char ,)
  4731 ;;		 -> SetFwdPulseWithCorrectProc(1), SpiCmdFunc_Search1008Position(1), SpiCmdFunc_DisableExcitating(1), SpiCmdFunc_Ena
      +bleExcitating(1), 
  4732 ;;		 -> SpiCmdFunc_StopDetectVrs(1), SpiCmdFunc_StartDetectVrs(1), SpiCmdFunc_RevPulsePositionCtl(1), SpiCmdFunc_FwdPuls
      +ePositionCtl(1), 
  4733 ;;		 -> SpiCmdFunc_FwdPulseWithCorrect(1), SpiCmdFunc_SearchBasePosition(1), SpiCmdFunc_SearchLoadPosition(1), SpiCmdFun
      +c_FwdPulseWithShake(1), 
  4734 ;;		 -> SpiCmdFunc_RevPulseNormal(1), SpiCmdFunc_FwdPulseNormal(1), SpiCmdFunc_Test(1), VerifyHandPosition_LoadPosition(
      +1), 
  4735 ;;		 -> SPIControl_SetNotification(1), AfterDetectedLoadPosition(1), NULL(0), 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 1C/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4745 ;;      Params:         0       0       0       0       0       0       0       0
  4746 ;;      Locals:         0       0       0       2       0       0       0       0
  4747 ;;      Temps:          0       1       0       0       0       0       0       0
  4748 ;;      Totals:         0       1       0       2       0       0       0       0
  4749 ;;Total ram usage:        3 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:   13
  4752 ;; This function calls:
  4753 ;;		_AfterDetectedLoadPosition
  4754 ;;		_SPIControl_SetNotification
  4755 ;;		_SetFwdPulseWithCorrectProc
  4756 ;;		_SpiCmdFunc_DisableExcitating
  4757 ;;		_SpiCmdFunc_EnableExcitating
  4758 ;;		_SpiCmdFunc_FwdPulseNormal
  4759 ;;		_SpiCmdFunc_FwdPulsePositionCtl
  4760 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  4761 ;;		_SpiCmdFunc_FwdPulseWithShake
  4762 ;;		_SpiCmdFunc_RevPulseNormal
  4763 ;;		_SpiCmdFunc_RevPulsePositionCtl
  4764 ;;		_SpiCmdFunc_Search1008Position
  4765 ;;		_SpiCmdFunc_SearchBasePosition
  4766 ;;		_SpiCmdFunc_SearchLoadPosition
  4767 ;;		_SpiCmdFunc_StartDetectVrs
  4768 ;;		_SpiCmdFunc_StopDetectVrs
  4769 ;;		_SpiCmdFunc_Test
  4770 ;;		_VerifyHandPosition_LoadPosition
  4771 ;; This function is called by:
  4772 ;;		_SPIControl_RecieveComannd
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _WatchMotorDriveFinish
  4778  0BFB                     _WatchMotorDriveFinish:
  4779                           
  4780                           ;MotorDrive.c: 1211:     void ( *func)(UB motor_no);;MotorDrive.c: 1213:     if (reqAfte
      +                          rDetectLoadFuncBit & 0x01) {
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _WatchMotorDriveFinish: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4784  0BFB  0021               	movlb	1	; select bank1
  4785  0BFC  1C50               	btfss	_reqAfterDetectLoadFuncBit^(0+128),0
  4786  0BFD  2C17               	goto	l6772
  4787                           
  4788                           ;MotorDrive.c: 1215:         reqAfterDetectLoadFuncBit &= (UB) (~0x01);
  4789  0BFE  30FE               	movlw	254
  4790  0BFF  0020               	movlb	0	; select bank0
  4791  0C00  00CE               	movwf	??_WatchMotorDriveFinish
  4792  0C01  084E               	movf	??_WatchMotorDriveFinish,w
  4793  0C02  0021               	movlb	1	; select bank1
  4794  0C03  05D0               	andwf	_reqAfterDetectLoadFuncBit^(0+128),f
  4795                           
  4796                           ;MotorDrive.c: 1217:         if (cbAfterDetectLoadFunc[ 0 ]) {
  4797  0C04  0022               	movlb	2	; select bank2
  4798  0C05  0820               	movf	_cbAfterDetectLoadFunc^(0+256),w
  4799  0C06  0421               	iorwf	(_cbAfterDetectLoadFunc+1)^(0+256),w
  4800  0C07  1903               	btfsc	3,2
  4801  0C08  2C17               	goto	l6772
  4802                           
  4803                           ;MotorDrive.c: 1218:             func = cbAfterDetectLoadFunc[ 0 ];
  4804  0C09  0821               	movf	(_cbAfterDetectLoadFunc+1)^(0+256),w
  4805  0C0A  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4806  0C0B  0820               	movf	_cbAfterDetectLoadFunc^(0+256),w
  4807  0C0C  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4808                           
  4809                           ;MotorDrive.c: 1219:             cbAfterDetectLoadFunc[ 0 ] = ((void*)0);
  4810  0C0D  01A0               	clrf	_cbAfterDetectLoadFunc^(0+256)
  4811  0C0E  01A1               	clrf	(_cbAfterDetectLoadFunc+1)^(0+256)
  4812                           
  4813                           ;MotorDrive.c: 1220:             func(0);
  4814  0C0F  0020               	movlb	0	; select bank0
  4815  0C10  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4816  0C11  0022               	movlb	2	; select bank2
  4817  0C12  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4818  0C13  008A               	movwf	10
  4819  0C14  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4820  0C15  000A               	callw
  4821  0C16  318B               	pagesel	$
  4822  0C17                     l6772:
  4823                           
  4824                           ;MotorDrive.c: 1224:     if (reqAfterDetectLoadFuncBit & 0x02) {
  4825  0C17  0021               	movlb	1	; select bank1
  4826  0C18  1CD0               	btfss	_reqAfterDetectLoadFuncBit^(0+128),1
  4827  0C19  2C34               	goto	l6782
  4828                           
  4829                           ;MotorDrive.c: 1226:         reqAfterDetectLoadFuncBit &= (UB) (~0x02);
  4830  0C1A  30FD               	movlw	253
  4831  0C1B  0020               	movlb	0	; select bank0
  4832  0C1C  00CE               	movwf	??_WatchMotorDriveFinish
  4833  0C1D  084E               	movf	??_WatchMotorDriveFinish,w
  4834  0C1E  0021               	movlb	1	; select bank1
  4835  0C1F  05D0               	andwf	_reqAfterDetectLoadFuncBit^(0+128),f
  4836                           
  4837                           ;MotorDrive.c: 1228:         if (cbAfterDetectLoadFunc[ 1 ]) {
  4838  0C20  0022               	movlb	2	; select bank2
  4839  0C21  0822               	movf	(low ((_cbAfterDetectLoadFunc| (0+256)+2)))^0,w
  4840  0C22  0423               	iorwf	((low ((_cbAfterDetectLoadFunc| (0+256)+2))+1))^0,w
  4841  0C23  1903               	btfsc	3,2
  4842  0C24  2C34               	goto	l6782
  4843                           
  4844                           ;MotorDrive.c: 1229:             func = cbAfterDetectLoadFunc[ 1 ];
  4845  0C25  0823               	movf	((low ((_cbAfterDetectLoadFunc| (0+256)+2))+1))^0,w
  4846  0C26  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4847  0C27  0822               	movf	(low ((_cbAfterDetectLoadFunc| (0+256)+2)))^0,w
  4848  0C28  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4849                           
  4850                           ;MotorDrive.c: 1230:             cbAfterDetectLoadFunc[ 1 ] = ((void*)0);
  4851  0C29  01A2               	clrf	(low ((_cbAfterDetectLoadFunc| (0+256)+2)))^0
  4852  0C2A  01A3               	clrf	((low ((_cbAfterDetectLoadFunc| (0+256)+2))+1))^0
  4853                           
  4854                           ;MotorDrive.c: 1231:             func(1);
  4855  0C2B  0020               	movlb	0	; select bank0
  4856  0C2C  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4857  0C2D  0ABD               	incf	SetFwdPulseWithCorrectProc@motor_no,f
  4858  0C2E  0022               	movlb	2	; select bank2
  4859  0C2F  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4860  0C30  008A               	movwf	10
  4861  0C31  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4862  0C32  000A               	callw
  4863  0C33  318B               	pagesel	$
  4864  0C34                     l6782:
  4865                           
  4866                           ;MotorDrive.c: 1235:     if (reqAfterMotorStopFuncBit & 0x01) {
  4867  0C34  0021               	movlb	1	; select bank1
  4868  0C35  1C59               	btfss	_reqAfterMotorStopFuncBit^(0+128),0
  4869  0C36  2C53               	goto	l6792
  4870                           
  4871                           ;MotorDrive.c: 1237:         reqAfterMotorStopFuncBit &= (UB) (~0x01);
  4872  0C37  30FE               	movlw	254
  4873  0C38  0020               	movlb	0	; select bank0
  4874  0C39  00CE               	movwf	??_WatchMotorDriveFinish
  4875  0C3A  084E               	movf	??_WatchMotorDriveFinish,w
  4876  0C3B  0021               	movlb	1	; select bank1
  4877  0C3C  05D9               	andwf	_reqAfterMotorStopFuncBit^(0+128),f
  4878                           
  4879                           ;MotorDrive.c: 1239:         if (cbAfterMotorStopFunc[ 0 ]) {
  4880  0C3D  082C               	movf	_cbAfterMotorStopFunc^(0+128),w
  4881  0C3E  042D               	iorwf	(_cbAfterMotorStopFunc+1)^(0+128),w
  4882  0C3F  1903               	btfsc	3,2
  4883  0C40  2C53               	goto	l6792
  4884                           
  4885                           ;MotorDrive.c: 1240:             func = cbAfterMotorStopFunc[ 0 ];
  4886  0C41  082D               	movf	(_cbAfterMotorStopFunc+1)^(0+128),w
  4887  0C42  0022               	movlb	2	; select bank2
  4888  0C43  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4889  0C44  0021               	movlb	1	; select bank1
  4890  0C45  082C               	movf	_cbAfterMotorStopFunc^(0+128),w
  4891  0C46  0022               	movlb	2	; select bank2
  4892  0C47  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4893                           
  4894                           ;MotorDrive.c: 1241:             cbAfterMotorStopFunc[ 0 ] = ((void*)0);
  4895  0C48  0021               	movlb	1	; select bank1
  4896  0C49  01AC               	clrf	_cbAfterMotorStopFunc^(0+128)
  4897  0C4A  01AD               	clrf	(_cbAfterMotorStopFunc+1)^(0+128)
  4898                           
  4899                           ;MotorDrive.c: 1242:             func(0);
  4900  0C4B  0020               	movlb	0	; select bank0
  4901  0C4C  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4902  0C4D  0022               	movlb	2	; select bank2
  4903  0C4E  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4904  0C4F  008A               	movwf	10
  4905  0C50  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4906  0C51  000A               	callw
  4907  0C52  318B               	pagesel	$
  4908  0C53                     l6792:
  4909                           
  4910                           ;MotorDrive.c: 1246:     if (reqAfterMotorStopFuncBit & 0x02) {
  4911  0C53  0021               	movlb	1	; select bank1
  4912  0C54  1CD9               	btfss	_reqAfterMotorStopFuncBit^(0+128),1
  4913  0C55  0008               	return
  4914                           
  4915                           ;MotorDrive.c: 1248:         reqAfterMotorStopFuncBit &= (UB) (~0x02);
  4916  0C56  30FD               	movlw	253
  4917  0C57  0020               	movlb	0	; select bank0
  4918  0C58  00CE               	movwf	??_WatchMotorDriveFinish
  4919  0C59  084E               	movf	??_WatchMotorDriveFinish,w
  4920  0C5A  0021               	movlb	1	; select bank1
  4921  0C5B  05D9               	andwf	_reqAfterMotorStopFuncBit^(0+128),f
  4922                           
  4923                           ;MotorDrive.c: 1250:         if (cbAfterMotorStopFunc[ 1 ]) {
  4924  0C5C  082E               	movf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128),w
  4925  0C5D  042F               	iorwf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128),w
  4926  0C5E  1903               	btfsc	3,2
  4927  0C5F  0008               	return
  4928                           
  4929                           ;MotorDrive.c: 1251:             func = cbAfterMotorStopFunc[ 1 ];
  4930  0C60  082F               	movf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128),w
  4931  0C61  0022               	movlb	2	; select bank2
  4932  0C62  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4933  0C63  0021               	movlb	1	; select bank1
  4934  0C64  082E               	movf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128),w
  4935  0C65  0022               	movlb	2	; select bank2
  4936  0C66  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4937                           
  4938                           ;MotorDrive.c: 1252:             cbAfterMotorStopFunc[ 1 ] = ((void*)0);
  4939  0C67  0021               	movlb	1	; select bank1
  4940  0C68  01AE               	clrf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128)
  4941  0C69  01AF               	clrf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128)
  4942                           
  4943                           ;MotorDrive.c: 1253:             func(1);
  4944  0C6A  0020               	movlb	0	; select bank0
  4945  0C6B  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4946  0C6C  0ABD               	incf	SetFwdPulseWithCorrectProc@motor_no,f
  4947  0C6D  0022               	movlb	2	; select bank2
  4948  0C6E  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4949  0C6F  008A               	movwf	10
  4950  0C70  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4951  0C71  000A               	callw
  4952  0C72  318B               	pagesel	$
  4953  0C73  0008               	return
  4954  0C74                     __end_of_WatchMotorDriveFinish:
  4955                           
  4956                           	psect	text15
  4957  0882                     __ptext15:	
  4958 ;; *************** function _SetFwdPulseWithCorrectProc *****************
  4959 ;; Defined at:
  4960 ;;		line 374 in file "spi_control.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  motor_no        1   29[BANK0 ] unsigned char 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  motor_bit       1   32[BANK0 ] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      void 
  4967 ;; Registers used:
  4968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 1D/2
  4971 ;;		On exit  : 1F/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4974 ;;      Params:         0       1       0       0       0       0       0       0
  4975 ;;      Locals:         0       1       0       0       0       0       0       0
  4976 ;;      Temps:          0       2       0       0       0       0       0       0
  4977 ;;      Totals:         0       4       0       0       0       0       0       0
  4978 ;;Total ram usage:        4 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:   11
  4981 ;; This function calls:
  4982 ;;		_CalcMotorStepCounter
  4983 ;;		_SetAfterDetectLoadFunc
  4984 ;;		_SetDriveType
  4985 ;;		_SetMotorFrequency
  4986 ;;		_SetMotorStart
  4987 ;;		_UpdateTargetPosition
  4988 ;; This function is called by:
  4989 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  4990 ;;		_WatchMotorDriveFinish
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           
  4995                           ;psect for function _SetFwdPulseWithCorrectProc
  4996  0882                     _SetFwdPulseWithCorrectProc:
  4997                           
  4998                           ;spi_control.c: 374: void SetFwdPulseWithCorrectProc( UB motor_no );spi_control.c: 375: 
      +                          {;spi_control.c: 376:     UB motor_bit = ( UB )( 0x01 << motor_no );
  4999                           
  5000                           ;incstack = 0
  5001                           ; Regs used in _SetFwdPulseWithCorrectProc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5002  0882  3001               	movlw	1
  5003  0883  0020               	movlb	0	; select bank0
  5004  0884  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  5005  0885  0A3D               	incf	SetFwdPulseWithCorrectProc@motor_no,w
  5006  0886  2888               	goto	u4854
  5007  0887                     u4855:
  5008  0887  35BE               	lslf	??_SetFwdPulseWithCorrectProc,f
  5009  0888                     u4854:
  5010  0888  0B89               	decfsz	9,f
  5011  0889  2887               	goto	u4855
  5012  088A  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5013  088B  00BF               	movwf	??_SetFwdPulseWithCorrectProc+1
  5014  088C  083F               	movf	??_SetFwdPulseWithCorrectProc+1,w
  5015  088D  00C0               	movwf	SetFwdPulseWithCorrectProc@motor_bit
  5016                           
  5017                           ;spi_control.c: 378:     if ( 0 == ( actCorrectDriveBit & motor_bit ) ) {
  5018  088E  0853               	movf	_actCorrectDriveBit,w
  5019  088F  0540               	andwf	SetFwdPulseWithCorrectProc@motor_bit,w
  5020  0890  1D03               	btfss	3,2
  5021  0891  28A4               	goto	l1360
  5022                           
  5023                           ;spi_control.c: 380:      SetDriveType( motor_no, DRIVE_CHECK_POSITION );
  5024  0892  3002               	movlw	2
  5025  0893  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  5026  0894  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5027  0895  00A0               	movwf	SetDriveType@drive_type
  5028  0896  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5029  0897  318D  2585  3188   	fcall	_SetDriveType
  5030                           
  5031                           ;spi_control.c: 381:      SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5032  089A  3002               	movlw	2
  5033  089B  0020               	movlb	0	; select bank0
  5034  089C  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  5035  089D  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5036  089E  00A0               	movwf	SetMotorFrequency@type
  5037  089F  01A1               	clrf	SetMotorFrequency@set_freq
  5038  08A0  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5039  08A1  3188  2045  3188   	fcall	_SetMotorFrequency
  5040  08A4                     l1360:	
  5041                           ;spi_control.c: 382:     }
  5042                           
  5043                           
  5044                           ;spi_control.c: 384:  UpdateTargetPosition( motor_no, 1 );
  5045  08A4  3001               	movlw	1
  5046  08A5  00AD               	movwf	UpdateTargetPosition@steps
  5047  08A6  3000               	movlw	0
  5048  08A7  00AE               	movwf	UpdateTargetPosition@steps+1
  5049  08A8  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5050  08A9  3196  26B1  3188   	fcall	_UpdateTargetPosition
  5051                           
  5052                           ;spi_control.c: 385:  CalcMotorStepCounter( motor_no );
  5053  08AC  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5054  08AD  3185  25EB  3188   	fcall	_CalcMotorStepCounter
  5055                           
  5056                           ;spi_control.c: 388:  if ( ( reqCorrectBasePosBit | actCorrectDriveBit ) & motor_bit ) {
  5057  08B0  0020               	movlb	0	; select bank0
  5058  08B1  0854               	movf	_reqCorrectBasePosBit,w
  5059  08B2  0453               	iorwf	_actCorrectDriveBit,w
  5060  08B3  0540               	andwf	SetFwdPulseWithCorrectProc@motor_bit,w
  5061  08B4  1D03               	btfss	3,2
  5062  08B5  28BE               	goto	l6346
  5063                           
  5064                           ;spi_control.c: 393:   SetAfterDetectLoadFunc( motor_no, VerifyHandPosition_LoadPosition
      +                           );
  5065  08B6  30C0               	movlw	low _VerifyHandPosition_LoadPosition
  5066  08B7  00A0               	movwf	SetAfterDetectLoadFunc@func
  5067  08B8  3006               	movlw	high _VerifyHandPosition_LoadPosition
  5068  08B9  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  5069  08BA  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5070  08BB  3190  20BD  3188   	fcall	_SetAfterDetectLoadFunc
  5071  08BE                     l6346:
  5072                           
  5073                           ;spi_control.c: 397:     SetMotorStart( motor_no );
  5074  08BE  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5075  08BF  3190  2089         	fcall	_SetMotorStart
  5076  08C1  0008               	return
  5077  08C2                     __end_of_SetFwdPulseWithCorrectProc:
  5078                           
  5079                           	psect	text16
  5080  176F                     __ptext16:	
  5081 ;; *************** function _SpiCmdFunc_Search1008Position *****************
  5082 ;; Defined at:
  5083 ;;		line 495 in file "spi_control.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 1D/2
  5094 ;;		On exit  : 1F/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5097 ;;      Params:         0       1       0       0       0       0       0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0       0
  5099 ;;      Temps:          0       1       0       0       0       0       0       0
  5100 ;;      Totals:         0       2       0       0       0       0       0       0
  5101 ;;Total ram usage:        2 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:   12
  5104 ;; This function calls:
  5105 ;;		_DeactivateHandPosition
  5106 ;;		_SetDriveType
  5107 ;;		_SetMotorDirection
  5108 ;;		_SetMotorFrequency
  5109 ;;		_SetMotorPositionSearchStart
  5110 ;;		_SetMotorStepCounter
  5111 ;; This function is called by:
  5112 ;;		_WatchMotorDriveFinish
  5113 ;;		_SPIControl_ExecuteCommand
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function _SpiCmdFunc_Search1008Position
  5119  176F                     _SpiCmdFunc_Search1008Position:
  5120                           
  5121                           ;spi_control.c: 495: void SpiCmdFunc_Search1008Position( UB motor_no );spi_control.c: 49
      +                          6: {;spi_control.c: 502:  DeactivateHandPosition( motor_no );
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _SpiCmdFunc_Search1008Position: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5125  176F  0020               	movlb	0	; select bank0
  5126  1770  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5127  1771  3193  237C  3197   	fcall	_DeactivateHandPosition
  5128                           
  5129                           ;spi_control.c: 505:  SetDriveType( motor_no, DRIVE_SEARCH_1008_POSITION );
  5130  1774  3005               	movlw	5
  5131  1775  0020               	movlb	0	; select bank0
  5132  1776  00BE               	movwf	??_SpiCmdFunc_Search1008Position
  5133  1777  083E               	movf	??_SpiCmdFunc_Search1008Position,w
  5134  1778  00A0               	movwf	SetDriveType@drive_type
  5135  1779  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5136  177A  318D  2585  3197   	fcall	_SetDriveType
  5137                           
  5138                           ;spi_control.c: 507:     SetMotorDirection( motor_no, 1 );
  5139  177D  0020               	movlb	0	; select bank0
  5140  177E  01A0               	clrf	SetMotorDirection@dir
  5141  177F  0AA0               	incf	SetMotorDirection@dir,f
  5142  1780  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5143  1781  3194  24E9  3197   	fcall	_SetMotorDirection
  5144                           
  5145                           ;spi_control.c: 509:     SetMotorStepCounter( motor_no, 0 );
  5146  1784  3000               	movlw	0
  5147  1785  00B0               	movwf	SetMotorStepCounter@steps
  5148  1786  00B1               	movwf	SetMotorStepCounter@steps+1
  5149  1787  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5150  1788  3190  20FA  3197   	fcall	_SetMotorStepCounter
  5151                           
  5152                           ;spi_control.c: 511:     SetMotorFrequency( motor_no, FREQ_SET_SELF_CONTROL_SHAKE, 136 )
      +                          ;
  5153  178B  0020               	movlb	0	; select bank0
  5154  178C  01A0               	clrf	SetMotorFrequency@type
  5155  178D  0AA0               	incf	SetMotorFrequency@type,f
  5156  178E  3088               	movlw	136
  5157  178F  00BE               	movwf	??_SpiCmdFunc_Search1008Position
  5158  1790  083E               	movf	??_SpiCmdFunc_Search1008Position,w
  5159  1791  00A1               	movwf	SetMotorFrequency@set_freq
  5160  1792  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5161  1793  3188  2045  3197   	fcall	_SetMotorFrequency
  5162                           
  5163                           ;spi_control.c: 513:     SetMotorPositionSearchStart( motor_no );
  5164  1796  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5165  1797  3196  262D         	fcall	_SetMotorPositionSearchStart
  5166  1799  0008               	return
  5167  179A                     __end_of_SpiCmdFunc_Search1008Position:
  5168                           
  5169                           	psect	text17
  5170  1068                     __ptext17:	
  5171 ;; *************** function _SpiCmdFunc_DisableExcitating *****************
  5172 ;; Defined at:
  5173 ;;		line 483 in file "spi_control.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 1D/2
  5184 ;;		On exit  : 1F/1
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5187 ;;      Params:         0       1       0       0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0
  5190 ;;      Totals:         0       1       0       0       0       0       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    9
  5194 ;; This function calls:
  5195 ;;		_SetMotorDisableExcitating
  5196 ;; This function is called by:
  5197 ;;		_WatchMotorDriveFinish
  5198 ;;		_SPIControl_ExecuteCommand
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           
  5203                           ;psect for function _SpiCmdFunc_DisableExcitating
  5204  1068                     _SpiCmdFunc_DisableExcitating:
  5205                           
  5206                           ;spi_control.c: 483: void SpiCmdFunc_DisableExcitating( UB motor_no );spi_control.c: 484
      +                          : {;spi_control.c: 485:  SetMotorDisableExcitating( motor_no );
  5207                           
  5208                           ;incstack = 0
  5209                           ; Regs used in _SpiCmdFunc_DisableExcitating: [wreg+status,2+status,0+pclath+cstack]
  5210  1068  0020               	movlb	0	; select bank0
  5211  1069  083D               	movf	SpiCmdFunc_DisableExcitating@motor_no,w
  5212  106A  3193  2346         	fcall	_SetMotorDisableExcitating
  5213  106C  0008               	return
  5214  106D                     __end_of_SpiCmdFunc_DisableExcitating:
  5215                           
  5216                           	psect	text18
  5217  1063                     __ptext18:	
  5218 ;; *************** function _SpiCmdFunc_EnableExcitating *****************
  5219 ;; Defined at:
  5220 ;;		line 471 in file "spi_control.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 1D/2
  5231 ;;		On exit  : 1F/1
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5234 ;;      Params:         0       1       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0
  5237 ;;      Totals:         0       1       0       0       0       0       0       0
  5238 ;;Total ram usage:        1 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    9
  5241 ;; This function calls:
  5242 ;;		_SetMotorEnableExcitating
  5243 ;; This function is called by:
  5244 ;;		_WatchMotorDriveFinish
  5245 ;;		_SPIControl_ExecuteCommand
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function _SpiCmdFunc_EnableExcitating
  5251  1063                     _SpiCmdFunc_EnableExcitating:
  5252                           
  5253                           ;spi_control.c: 471: void SpiCmdFunc_EnableExcitating( UB motor_no );spi_control.c: 472:
      +                           {;spi_control.c: 473:  SetMotorEnableExcitating( motor_no );
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in _SpiCmdFunc_EnableExcitating: [wreg+status,2+status,0+pclath+cstack]
  5257  1063  0020               	movlb	0	; select bank0
  5258  1064  083D               	movf	SpiCmdFunc_EnableExcitating@motor_no,w
  5259  1065  3193  2358         	fcall	_SetMotorEnableExcitating
  5260  1067  0008               	return
  5261  1068                     __end_of_SpiCmdFunc_EnableExcitating:
  5262                           
  5263                           	psect	text19
  5264  1058                     __ptext19:	
  5265 ;; *************** function _SpiCmdFunc_StopDetectVrs *****************
  5266 ;; Defined at:
  5267 ;;		line 459 in file "spi_control.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;		None
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0, pclath, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 1D/2
  5278 ;;		On exit  : 1F/2
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5281 ;;      Params:         0       1       0       0       0       0       0       0
  5282 ;;      Locals:         0       0       0       0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0
  5284 ;;      Totals:         0       1       0       0       0       0       0       0
  5285 ;;Total ram usage:        1 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:   11
  5288 ;; This function calls:
  5289 ;;		_SetMotorStopSPK
  5290 ;; This function is called by:
  5291 ;;		_WatchMotorDriveFinish
  5292 ;;		_SPIControl_ExecuteCommand
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _SpiCmdFunc_StopDetectVrs
  5298  1058                     _SpiCmdFunc_StopDetectVrs:
  5299                           
  5300                           ;spi_control.c: 459: void SpiCmdFunc_StopDetectVrs( UB motor_no );spi_control.c: 460: {;
      +                          spi_control.c: 461:  SetMotorStopSPK();
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _SpiCmdFunc_StopDetectVrs: [wreg+status,2+status,0+pclath+cstack]
  5304  1058  3196  260F         	fcall	_SetMotorStopSPK
  5305  105A  0008               	return
  5306  105B                     __end_of_SpiCmdFunc_StopDetectVrs:
  5307                           
  5308                           	psect	text20
  5309  1055                     __ptext20:	
  5310 ;; *************** function _SpiCmdFunc_StartDetectVrs *****************
  5311 ;; Defined at:
  5312 ;;		line 447 in file "spi_control.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 1D/2
  5323 ;;		On exit  : 1D/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5326 ;;      Params:         0       1       0       0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0
  5329 ;;      Totals:         0       1       0       0       0       0       0       0
  5330 ;;Total ram usage:        1 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   11
  5333 ;; This function calls:
  5334 ;;		_SetMotorStartSPK
  5335 ;; This function is called by:
  5336 ;;		_WatchMotorDriveFinish
  5337 ;;		_SPIControl_ExecuteCommand
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _SpiCmdFunc_StartDetectVrs
  5343  1055                     _SpiCmdFunc_StartDetectVrs:
  5344                           
  5345                           ;spi_control.c: 447: void SpiCmdFunc_StartDetectVrs( UB motor_no );spi_control.c: 448: {
      +                          ;spi_control.c: 449:  SetMotorStartSPK();
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _SpiCmdFunc_StartDetectVrs: [wreg+status,2+status,0+pclath+cstack]
  5349  1055  3197  279A         	fcall	_SetMotorStartSPK
  5350  1057  0008               	return
  5351  1058                     __end_of_SpiCmdFunc_StartDetectVrs:
  5352                           
  5353                           	psect	text21
  5354  166E                     __ptext21:	
  5355 ;; *************** function _SpiCmdFunc_RevPulsePositionCtl *****************
  5356 ;; Defined at:
  5357 ;;		line 427 in file "spi_control.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      void 
  5364 ;; Registers used:
  5365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 1D/2
  5368 ;;		On exit  : 1F/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5371 ;;      Params:         0       1       0       0       0       0       0       0
  5372 ;;      Locals:         0       0       0       0       0       0       0       0
  5373 ;;      Temps:          0       1       0       0       0       0       0       0
  5374 ;;      Totals:         0       2       0       0       0       0       0       0
  5375 ;;Total ram usage:        2 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:   11
  5378 ;; This function calls:
  5379 ;;		_CalcMotorStepCounter
  5380 ;;		_SetDriveType
  5381 ;;		_SetMotorFrequency
  5382 ;;		_SetMotorStart
  5383 ;;		_UpdateTargetPosition
  5384 ;; This function is called by:
  5385 ;;		_WatchMotorDriveFinish
  5386 ;;		_SPIControl_ExecuteCommand
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _SpiCmdFunc_RevPulsePositionCtl
  5392  166E                     _SpiCmdFunc_RevPulsePositionCtl:
  5393                           
  5394                           ;spi_control.c: 427: void SpiCmdFunc_RevPulsePositionCtl( UB motor_no );spi_control.c: 4
      +                          28: {;spi_control.c: 429:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _SpiCmdFunc_RevPulsePositionCtl: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5398  166E  0020               	movlb	0	; select bank0
  5399  166F  01A0               	clrf	SetDriveType@drive_type
  5400  1670  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5401  1671  318D  2585  3196   	fcall	_SetDriveType
  5402                           
  5403                           ;spi_control.c: 431:  UpdateTargetPosition( motor_no, -1 );
  5404  1674  30FF               	movlw	255
  5405  1675  0020               	movlb	0	; select bank0
  5406  1676  00AD               	movwf	UpdateTargetPosition@steps
  5407  1677  30FF               	movlw	255
  5408  1678  00AE               	movwf	UpdateTargetPosition@steps+1
  5409  1679  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5410  167A  3196  26B1  3196   	fcall	_UpdateTargetPosition
  5411                           
  5412                           ;spi_control.c: 432:  CalcMotorStepCounter( motor_no );
  5413  167D  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5414  167E  3185  25EB  3196   	fcall	_CalcMotorStepCounter
  5415                           
  5416                           ;spi_control.c: 435:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5417  1681  3002               	movlw	2
  5418  1682  0020               	movlb	0	; select bank0
  5419  1683  00BE               	movwf	??_SpiCmdFunc_RevPulsePositionCtl
  5420  1684  083E               	movf	??_SpiCmdFunc_RevPulsePositionCtl,w
  5421  1685  00A0               	movwf	SetMotorFrequency@type
  5422  1686  01A1               	clrf	SetMotorFrequency@set_freq
  5423  1687  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5424  1688  3188  2045  3196   	fcall	_SetMotorFrequency
  5425                           
  5426                           ;spi_control.c: 437:     SetMotorStart( motor_no );
  5427  168B  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5428  168C  3190  2089         	fcall	_SetMotorStart
  5429  168E  0008               	return
  5430  168F                     __end_of_SpiCmdFunc_RevPulsePositionCtl:
  5431                           
  5432                           	psect	text22
  5433  164D                     __ptext22:	
  5434 ;; *************** function _SpiCmdFunc_FwdPulsePositionCtl *****************
  5435 ;; Defined at:
  5436 ;;		line 407 in file "spi_control.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 1D/2
  5447 ;;		On exit  : 1F/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5450 ;;      Params:         0       1       0       0       0       0       0       0
  5451 ;;      Locals:         0       0       0       0       0       0       0       0
  5452 ;;      Temps:          0       1       0       0       0       0       0       0
  5453 ;;      Totals:         0       2       0       0       0       0       0       0
  5454 ;;Total ram usage:        2 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:   11
  5457 ;; This function calls:
  5458 ;;		_CalcMotorStepCounter
  5459 ;;		_SetDriveType
  5460 ;;		_SetMotorFrequency
  5461 ;;		_SetMotorStart
  5462 ;;		_UpdateTargetPosition
  5463 ;; This function is called by:
  5464 ;;		_WatchMotorDriveFinish
  5465 ;;		_SPIControl_ExecuteCommand
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           
  5470                           ;psect for function _SpiCmdFunc_FwdPulsePositionCtl
  5471  164D                     _SpiCmdFunc_FwdPulsePositionCtl:
  5472                           
  5473                           ;spi_control.c: 407: void SpiCmdFunc_FwdPulsePositionCtl( UB motor_no );spi_control.c: 4
      +                          08: {;spi_control.c: 409:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5474                           
  5475                           ;incstack = 0
  5476                           ; Regs used in _SpiCmdFunc_FwdPulsePositionCtl: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5477  164D  0020               	movlb	0	; select bank0
  5478  164E  01A0               	clrf	SetDriveType@drive_type
  5479  164F  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5480  1650  318D  2585  3196   	fcall	_SetDriveType
  5481                           
  5482                           ;spi_control.c: 411:  UpdateTargetPosition( motor_no, 1 );
  5483  1653  3001               	movlw	1
  5484  1654  0020               	movlb	0	; select bank0
  5485  1655  00AD               	movwf	UpdateTargetPosition@steps
  5486  1656  3000               	movlw	0
  5487  1657  00AE               	movwf	UpdateTargetPosition@steps+1
  5488  1658  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5489  1659  3196  26B1  3196   	fcall	_UpdateTargetPosition
  5490                           
  5491                           ;spi_control.c: 412:  CalcMotorStepCounter( motor_no );
  5492  165C  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5493  165D  3185  25EB  3196   	fcall	_CalcMotorStepCounter
  5494                           
  5495                           ;spi_control.c: 415:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5496  1660  3002               	movlw	2
  5497  1661  0020               	movlb	0	; select bank0
  5498  1662  00BE               	movwf	??_SpiCmdFunc_FwdPulsePositionCtl
  5499  1663  083E               	movf	??_SpiCmdFunc_FwdPulsePositionCtl,w
  5500  1664  00A0               	movwf	SetMotorFrequency@type
  5501  1665  01A1               	clrf	SetMotorFrequency@set_freq
  5502  1666  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5503  1667  3188  2045  3196   	fcall	_SetMotorFrequency
  5504                           
  5505                           ;spi_control.c: 417:     SetMotorStart( motor_no );
  5506  166A  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5507  166B  3190  2089         	fcall	_SetMotorStart
  5508  166D  0008               	return
  5509  166E                     __end_of_SpiCmdFunc_FwdPulsePositionCtl:
  5510                           
  5511                           	psect	text23
  5512  15F3                     __ptext23:	
  5513 ;; *************** function _SpiCmdFunc_FwdPulseWithCorrect *****************
  5514 ;; Defined at:
  5515 ;;		line 348 in file "spi_control.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  motor_bit       1    0        unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 1D/2
  5526 ;;		On exit  : 1F/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5529 ;;      Params:         0       1       0       0       0       0       0       0
  5530 ;;      Locals:         0       1       0       0       0       0       0       0
  5531 ;;      Temps:          0       1       0       0       0       0       0       0
  5532 ;;      Totals:         0       3       0       0       0       0       0       0
  5533 ;;Total ram usage:        3 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:   12
  5536 ;; This function calls:
  5537 ;;		_GetIsMotorActive
  5538 ;;		_SetAfterMotorStopFunc
  5539 ;;		_SetFwdPulseWithCorrectProc
  5540 ;;		_SetMotorStop
  5541 ;; This function is called by:
  5542 ;;		_WatchMotorDriveFinish
  5543 ;;		_SPIControl_ExecuteCommand
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           
  5548                           ;psect for function _SpiCmdFunc_FwdPulseWithCorrect
  5549  15F3                     _SpiCmdFunc_FwdPulseWithCorrect:
  5550                           
  5551                           ;spi_control.c: 354:  if ( GetIsMotorActive( motor_no ) ) {
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _SpiCmdFunc_FwdPulseWithCorrect: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5555  15F3  0020               	movlb	0	; select bank0
  5556  15F4  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5557  15F5  3193  23EA  3195   	fcall	_GetIsMotorActive
  5558  15F8  3A00               	xorlw	0
  5559  15F9  1903               	skipnz
  5560  15FA  2E08               	goto	l6660
  5561                           
  5562                           ;spi_control.c: 356:   SetMotorStop( motor_no );
  5563  15FB  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5564  15FC  3193  236A  3195   	fcall	_SetMotorStop
  5565                           
  5566                           ;spi_control.c: 357:   SetAfterMotorStopFunc( motor_no, SetFwdPulseWithCorrectProc );
  5567  15FF  3082               	movlw	low _SetFwdPulseWithCorrectProc
  5568  1600  0020               	movlb	0	; select bank0
  5569  1601  00A0               	movwf	SetAfterMotorStopFunc@func
  5570  1602  3008               	movlw	high _SetFwdPulseWithCorrectProc
  5571  1603  00A1               	movwf	SetAfterMotorStopFunc@func+1
  5572  1604  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5573  1605  3190  2093         	fcall	_SetAfterMotorStopFunc
  5574                           
  5575                           ;spi_control.c: 358:  } else {
  5576  1607  0008               	return
  5577  1608                     l6660:
  5578                           
  5579                           ;spi_control.c: 360:   SetFwdPulseWithCorrectProc( motor_no );
  5580  1608  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5581  1609  00BE               	movwf	??_SpiCmdFunc_FwdPulseWithCorrect
  5582  160A  083E               	movf	??_SpiCmdFunc_FwdPulseWithCorrect,w
  5583  160B  00BD               	movwf	SetFwdPulseWithCorrectProc@motor_no
  5584  160C  3188  2082         	fcall	_SetFwdPulseWithCorrectProc
  5585  160E  0008               	return
  5586  160F                     __end_of_SpiCmdFunc_FwdPulseWithCorrect:
  5587                           
  5588                           	psect	text24
  5589  171C                     __ptext24:	
  5590 ;; *************** function _SpiCmdFunc_SearchBasePosition *****************
  5591 ;; Defined at:
  5592 ;;		line 317 in file "spi_control.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 1D/2
  5603 ;;		On exit  : 1F/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5606 ;;      Params:         0       1       0       0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0       0
  5608 ;;      Temps:          0       1       0       0       0       0       0       0
  5609 ;;      Totals:         0       2       0       0       0       0       0       0
  5610 ;;Total ram usage:        2 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:   12
  5613 ;; This function calls:
  5614 ;;		_DeactivateHandPosition
  5615 ;;		_SetDriveType
  5616 ;;		_SetMotorDirection
  5617 ;;		_SetMotorFrequency
  5618 ;;		_SetMotorPositionSearchStart
  5619 ;;		_SetMotorStepCounter
  5620 ;; This function is called by:
  5621 ;;		_WatchMotorDriveFinish
  5622 ;;		_SPIControl_ExecuteCommand
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _SpiCmdFunc_SearchBasePosition
  5628  171C                     _SpiCmdFunc_SearchBasePosition:
  5629                           
  5630                           ;spi_control.c: 317: void SpiCmdFunc_SearchBasePosition( UB motor_no );spi_control.c: 31
      +                          8: {;spi_control.c: 324:  DeactivateHandPosition( motor_no );
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _SpiCmdFunc_SearchBasePosition: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5634  171C  0020               	movlb	0	; select bank0
  5635  171D  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5636  171E  3193  237C  3197   	fcall	_DeactivateHandPosition
  5637                           
  5638                           ;spi_control.c: 327:  SetDriveType( motor_no, DRIVE_SEARCH_BASE_POSITION );
  5639  1721  0020               	movlb	0	; select bank0
  5640  1722  01A0               	clrf	SetDriveType@drive_type
  5641  1723  0AA0               	incf	SetDriveType@drive_type,f
  5642  1724  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5643  1725  318D  2585  3197   	fcall	_SetDriveType
  5644                           
  5645                           ;spi_control.c: 329:     SetMotorDirection( motor_no, 1 );
  5646  1728  0020               	movlb	0	; select bank0
  5647  1729  01A0               	clrf	SetMotorDirection@dir
  5648  172A  0AA0               	incf	SetMotorDirection@dir,f
  5649  172B  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5650  172C  3194  24E9  3197   	fcall	_SetMotorDirection
  5651                           
  5652                           ;spi_control.c: 331:     SetMotorStepCounter( motor_no, 0 );
  5653  172F  3000               	movlw	0
  5654  1730  00B0               	movwf	SetMotorStepCounter@steps
  5655  1731  00B1               	movwf	SetMotorStepCounter@steps+1
  5656  1732  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5657  1733  3190  20FA  3197   	fcall	_SetMotorStepCounter
  5658                           
  5659                           ;spi_control.c: 333:     SetMotorFrequency( motor_no, FREQ_SET_SELF_CONTROL_SHAKE, 136 )
      +                          ;
  5660  1736  0020               	movlb	0	; select bank0
  5661  1737  01A0               	clrf	SetMotorFrequency@type
  5662  1738  0AA0               	incf	SetMotorFrequency@type,f
  5663  1739  3088               	movlw	136
  5664  173A  00BE               	movwf	??_SpiCmdFunc_SearchBasePosition
  5665  173B  083E               	movf	??_SpiCmdFunc_SearchBasePosition,w
  5666  173C  00A1               	movwf	SetMotorFrequency@set_freq
  5667  173D  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5668  173E  3188  2045  3197   	fcall	_SetMotorFrequency
  5669                           
  5670                           ;spi_control.c: 335:     SetMotorPositionSearchStart( motor_no );
  5671  1741  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5672  1742  3196  262D         	fcall	_SetMotorPositionSearchStart
  5673  1744  0008               	return
  5674  1745                     __end_of_SpiCmdFunc_SearchBasePosition:
  5675                           
  5676                           	psect	text25
  5677  104B                     __ptext25:	
  5678 ;; *************** function _SpiCmdFunc_SearchLoadPosition *****************
  5679 ;; Defined at:
  5680 ;;		line 305 in file "spi_control.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		None
  5689 ;; Tracked objects:
  5690 ;;		On entry : 1D/2
  5691 ;;		On exit  : 1D/0
  5692 ;;		Unchanged: 1D/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5694 ;;      Params:         0       1       0       0       0       0       0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0
  5697 ;;      Totals:         0       1       0       0       0       0       0       0
  5698 ;;Total ram usage:        1 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    8
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_WatchMotorDriveFinish
  5705 ;;		_SPIControl_ExecuteCommand
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function _SpiCmdFunc_SearchLoadPosition
  5711  104B                     _SpiCmdFunc_SearchLoadPosition:
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _SpiCmdFunc_SearchLoadPosition: []
  5715  104B  0008               	return
  5716  104C                     __end_of_SpiCmdFunc_SearchLoadPosition:
  5717                           
  5718                           	psect	text26
  5719  104A                     __ptext26:	
  5720 ;; *************** function _SpiCmdFunc_FwdPulseWithShake *****************
  5721 ;; Defined at:
  5722 ;;		line 293 in file "spi_control.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		None
  5731 ;; Tracked objects:
  5732 ;;		On entry : 1D/2
  5733 ;;		On exit  : 1D/0
  5734 ;;		Unchanged: 1D/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5736 ;;      Params:         0       1       0       0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0
  5739 ;;      Totals:         0       1       0       0       0       0       0       0
  5740 ;;Total ram usage:        1 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    8
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_WatchMotorDriveFinish
  5747 ;;		_SPIControl_ExecuteCommand
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           
  5752                           ;psect for function _SpiCmdFunc_FwdPulseWithShake
  5753  104A                     _SpiCmdFunc_FwdPulseWithShake:
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _SpiCmdFunc_FwdPulseWithShake: []
  5757  104A  0008               	return
  5758  104B                     __end_of_SpiCmdFunc_FwdPulseWithShake:
  5759                           
  5760                           	psect	text27
  5761  168F                     __ptext27:	
  5762 ;; *************** function _SpiCmdFunc_RevPulseNormal *****************
  5763 ;; Defined at:
  5764 ;;		line 273 in file "spi_control.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 1D/2
  5775 ;;		On exit  : 1F/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5778 ;;      Params:         0       1       0       0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       0       0       0       0
  5780 ;;      Temps:          0       1       0       0       0       0       0       0
  5781 ;;      Totals:         0       2       0       0       0       0       0       0
  5782 ;;Total ram usage:        2 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:   11
  5785 ;; This function calls:
  5786 ;;		_SetDriveType
  5787 ;;		_SetMotorDirection
  5788 ;;		_SetMotorFrequency
  5789 ;;		_SetMotorStart
  5790 ;;		_SetMotorStepCounter
  5791 ;; This function is called by:
  5792 ;;		_WatchMotorDriveFinish
  5793 ;;		_SPIControl_ExecuteCommand
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           
  5798                           ;psect for function _SpiCmdFunc_RevPulseNormal
  5799  168F                     _SpiCmdFunc_RevPulseNormal:
  5800                           
  5801                           ;spi_control.c: 273: void SpiCmdFunc_RevPulseNormal( UB motor_no );spi_control.c: 274: {
      +                          ;spi_control.c: 275:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5802                           
  5803                           ;incstack = 0
  5804                           ; Regs used in _SpiCmdFunc_RevPulseNormal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5805  168F  0020               	movlb	0	; select bank0
  5806  1690  01A0               	clrf	SetDriveType@drive_type
  5807  1691  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5808  1692  318D  2585  3196   	fcall	_SetDriveType
  5809                           
  5810                           ;spi_control.c: 277:     SetMotorDirection( motor_no, 0 );
  5811  1695  0020               	movlb	0	; select bank0
  5812  1696  01A0               	clrf	SetMotorDirection@dir
  5813  1697  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5814  1698  3194  24E9  3196   	fcall	_SetMotorDirection
  5815                           
  5816                           ;spi_control.c: 279:     SetMotorStepCounter( motor_no, 1 );
  5817  169B  3001               	movlw	1
  5818  169C  00B0               	movwf	SetMotorStepCounter@steps
  5819  169D  3000               	movlw	0
  5820  169E  00B1               	movwf	SetMotorStepCounter@steps+1
  5821  169F  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5822  16A0  3190  20FA  3196   	fcall	_SetMotorStepCounter
  5823                           
  5824                           ;spi_control.c: 281:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5825  16A3  3002               	movlw	2
  5826  16A4  0020               	movlb	0	; select bank0
  5827  16A5  00BE               	movwf	??_SpiCmdFunc_RevPulseNormal
  5828  16A6  083E               	movf	??_SpiCmdFunc_RevPulseNormal,w
  5829  16A7  00A0               	movwf	SetMotorFrequency@type
  5830  16A8  01A1               	clrf	SetMotorFrequency@set_freq
  5831  16A9  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5832  16AA  3188  2045  3196   	fcall	_SetMotorFrequency
  5833                           
  5834                           ;spi_control.c: 283:     SetMotorStart( motor_no );
  5835  16AD  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5836  16AE  3190  2089         	fcall	_SetMotorStart
  5837  16B0  0008               	return
  5838  16B1                     __end_of_SpiCmdFunc_RevPulseNormal:
  5839                           
  5840                           	psect	text28
  5841  16D4                     __ptext28:	
  5842 ;; *************** function _SpiCmdFunc_FwdPulseNormal *****************
  5843 ;; Defined at:
  5844 ;;		line 253 in file "spi_control.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 1D/2
  5855 ;;		On exit  : 1F/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5858 ;;      Params:         0       1       0       0       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0       0
  5860 ;;      Temps:          0       1       0       0       0       0       0       0
  5861 ;;      Totals:         0       2       0       0       0       0       0       0
  5862 ;;Total ram usage:        2 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:   11
  5865 ;; This function calls:
  5866 ;;		_SetDriveType
  5867 ;;		_SetMotorDirection
  5868 ;;		_SetMotorFrequency
  5869 ;;		_SetMotorStart
  5870 ;;		_SetMotorStepCounter
  5871 ;; This function is called by:
  5872 ;;		_WatchMotorDriveFinish
  5873 ;;		_SPIControl_ExecuteCommand
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           
  5878                           ;psect for function _SpiCmdFunc_FwdPulseNormal
  5879  16D4                     _SpiCmdFunc_FwdPulseNormal:
  5880                           
  5881                           ;spi_control.c: 253: void SpiCmdFunc_FwdPulseNormal( UB motor_no );spi_control.c: 254: {
      +                          ;spi_control.c: 255:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _SpiCmdFunc_FwdPulseNormal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5885  16D4  0020               	movlb	0	; select bank0
  5886  16D5  01A0               	clrf	SetDriveType@drive_type
  5887  16D6  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5888  16D7  318D  2585  3196   	fcall	_SetDriveType
  5889                           
  5890                           ;spi_control.c: 257:     SetMotorDirection( motor_no, 1 );
  5891  16DA  0020               	movlb	0	; select bank0
  5892  16DB  01A0               	clrf	SetMotorDirection@dir
  5893  16DC  0AA0               	incf	SetMotorDirection@dir,f
  5894  16DD  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5895  16DE  3194  24E9  3196   	fcall	_SetMotorDirection
  5896                           
  5897                           ;spi_control.c: 259:     SetMotorStepCounter( motor_no, 1 );
  5898  16E1  3001               	movlw	1
  5899  16E2  00B0               	movwf	SetMotorStepCounter@steps
  5900  16E3  3000               	movlw	0
  5901  16E4  00B1               	movwf	SetMotorStepCounter@steps+1
  5902  16E5  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5903  16E6  3190  20FA  3196   	fcall	_SetMotorStepCounter
  5904                           
  5905                           ;spi_control.c: 261:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5906  16E9  3002               	movlw	2
  5907  16EA  0020               	movlb	0	; select bank0
  5908  16EB  00BE               	movwf	??_SpiCmdFunc_FwdPulseNormal
  5909  16EC  083E               	movf	??_SpiCmdFunc_FwdPulseNormal,w
  5910  16ED  00A0               	movwf	SetMotorFrequency@type
  5911  16EE  01A1               	clrf	SetMotorFrequency@set_freq
  5912  16EF  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5913  16F0  3188  2045  3196   	fcall	_SetMotorFrequency
  5914                           
  5915                           ;spi_control.c: 263:     SetMotorStart( motor_no );
  5916  16F3  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5917  16F4  3190  2089         	fcall	_SetMotorStart
  5918  16F6  0008               	return
  5919  16F7                     __end_of_SpiCmdFunc_FwdPulseNormal:
  5920                           
  5921                           	psect	text29
  5922  1049                     __ptext29:	
  5923 ;; *************** function _SpiCmdFunc_Test *****************
  5924 ;; Defined at:
  5925 ;;		line 239 in file "spi_control.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		None
  5934 ;; Tracked objects:
  5935 ;;		On entry : 1D/2
  5936 ;;		On exit  : 1D/0
  5937 ;;		Unchanged: 1D/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5939 ;;      Params:         0       1       0       0       0       0       0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0       0
  5942 ;;      Totals:         0       1       0       0       0       0       0       0
  5943 ;;Total ram usage:        1 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    8
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_WatchMotorDriveFinish
  5950 ;;		_SPIControl_ExecuteCommand
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _SpiCmdFunc_Test
  5956  1049                     _SpiCmdFunc_Test:
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in _SpiCmdFunc_Test: []
  5960  1049  0008               	return
  5961  104A                     __end_of_SpiCmdFunc_Test:
  5962                           
  5963                           	psect	text30
  5964  15D7                     __ptext30:	
  5965 ;; *************** function _SPIControl_SetNotification *****************
  5966 ;; Defined at:
  5967 ;;		line 523 in file "spi_control.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      void 
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0
  5976 ;; Tracked objects:
  5977 ;;		On entry : 1F/2
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5981 ;;      Params:         0       1       0       0       0       0       0       0
  5982 ;;      Locals:         0       0       0       0       0       0       0       0
  5983 ;;      Temps:          0       1       0       0       0       0       0       0
  5984 ;;      Totals:         0       2       0       0       0       0       0       0
  5985 ;;Total ram usage:        2 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    8
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_AfterDetectedLoadPosition
  5992 ;;		_WatchMotorDriveFinish
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function _SPIControl_SetNotification
  5998  15D7                     _SPIControl_SetNotification:
  5999                           
  6000                           ;spi_control.c: 523: void SPIControl_SetNotification( UB motor_no );spi_control.c: 524: 
      +                          {;spi_control.c: 525:  if ( ( 0x01 + 0x02 )== handPositionActiveBit ) {
  6001                           
  6002                           ;incstack = 0
  6003                           ; Regs used in _SPIControl_SetNotification: [wreg+status,2+status,0]
  6004  15D7  3003               	movlw	3
  6005  15D8  0021               	movlb	1	; select bank1
  6006  15D9  0651               	xorwf	_handPositionActiveBit^(0+128),w
  6007  15DA  1D03               	btfss	3,2
  6008  15DB  0008               	return
  6009                           
  6010                           ;spi_control.c: 527:      LATC0 = 1;
  6011  15DC  0022               	movlb	2	; select bank2
  6012  15DD  140E               	bsf	14,0	;volatile
  6013                           
  6014                           ;spi_control.c: 530:   _delay((unsigned long)((1000)*(16000000/4000000.0)));
  6015  15DE  3006               	movlw	6
  6016  15DF  0020               	movlb	0	; select bank0
  6017  15E0  00BE               	movwf	??_SPIControl_SetNotification
  6018  15E1  3030               	movlw	48
  6019  15E2                     u5637:
  6020  15E2  0B89               	decfsz	9,f
  6021  15E3  2DE2               	goto	u5637
  6022  15E4  0BBE               	decfsz	??_SPIControl_SetNotification,f
  6023  15E5  2DE2               	goto	u5637
  6024  15E6  0000               	nop
  6025                           
  6026                           ;spi_control.c: 533:      LATC0 = 0;
  6027  15E7  0022               	movlb	2	; select bank2
  6028  15E8  100E               	bcf	14,0	;volatile
  6029                           
  6030                           ;spi_control.c: 535:   _delay((unsigned long)((1000)*(16000000/4000000.0)));
  6031  15E9  3006               	movlw	6
  6032  15EA  0020               	movlb	0	; select bank0
  6033  15EB  00BE               	movwf	??_SPIControl_SetNotification
  6034  15EC  3030               	movlw	48
  6035  15ED                     u5647:
  6036  15ED  0B89               	decfsz	9,f
  6037  15EE  2DED               	goto	u5647
  6038  15EF  0BBE               	decfsz	??_SPIControl_SetNotification,f
  6039  15F0  2DED               	goto	u5647
  6040  15F1  0000               	nop
  6041  15F2  0008               	return
  6042  15F3                     __end_of_SPIControl_SetNotification:
  6043                           
  6044                           	psect	text31
  6045  005D                     __ptext31:	
  6046 ;; *************** function _AfterDetectedLoadPosition *****************
  6047 ;; Defined at:
  6048 ;;		line 2053 in file "MotorDrive.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;  motor_no        1   29[BANK0 ] unsigned char 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  move_steps      2   36[BANK0 ] short 
  6053 ;;  res             1   35[BANK0 ] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 1F/2
  6060 ;;		On exit  : 1F/1
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6063 ;;      Params:         0       1       0       0       0       0       0       0
  6064 ;;      Locals:         0       3       0       0       0       0       0       0
  6065 ;;      Temps:          0       7       0       0       0       0       0       0
  6066 ;;      Totals:         0      11       0       0       0       0       0       0
  6067 ;;Total ram usage:       11 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:   12
  6070 ;; This function calls:
  6071 ;;		_ActivateHandPosition
  6072 ;;		_CorrectPosition
  6073 ;;		_DetermineBasePosition
  6074 ;;		_InitPositionSearch
  6075 ;;		_MoveTargetPosition
  6076 ;;		_SaveLoadPosition
  6077 ;;		_SetAfterDetectLoadFunc
  6078 ;;		_SetAfterMotorStopFunc
  6079 ;;		_SetDriveType
  6080 ;;		_SetMotorBitMotorNo
  6081 ;;		_SetMotorStart
  6082 ;;		_UpdataHandPosition
  6083 ;;		_UpdateCurrentPositionByFinePosition
  6084 ;; This function is called by:
  6085 ;;		_SetMotorPositionSearchStart
  6086 ;;		_SetMotorCorrectPositionStart
  6087 ;;		_WatchMotorDriveFinish
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function _AfterDetectedLoadPosition
  6093  005D                     _AfterDetectedLoadPosition:
  6094                           
  6095                           ;MotorDrive.c: 2053: void AfterDetectedLoadPosition(UB motor_no);MotorDrive.c: 2054: {;M
      +                          otorDrive.c: 2055:     H move_steps;;MotorDrive.c: 2056:     UB res = ID_SEARCH_RESULT_N
      +                          ULL;
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _AfterDetectedLoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6099  005D  0020               	movlb	0	; select bank0
  6100  005E  01C3               	clrf	AfterDetectedLoadPosition@res
  6101                           
  6102                           ;MotorDrive.c: 2058:     SetMotorBitMotorNo(motor_no);
  6103  005F  083D               	movf	AfterDetectedLoadPosition@motor_no,w
  6104  0060  3192  22ED  3180   	fcall	_SetMotorBitMotorNo
  6105                           
  6106                           ;MotorDrive.c: 2061:     if (reqSearchBasePosBit & motorBitOperation) {
  6107  0063  0855               	movf	_reqSearchBasePosBit,w
  6108  0064  0574               	andwf	_motorBitOperation,w
  6109  0065  1903               	btfsc	3,2
  6110  0066  2876               	goto	l6358
  6111                           
  6112                           ;MotorDrive.c: 2062:         searchTotalSteps[ motorNoOperation ] += positionSearchCt[ m
      +                          otorNoOperation ];
  6113  0067  356B               	lslf	_motorNoOperation,w
  6114  0068  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6115  0069  0086               	movwf	6
  6116  006A  0187               	clrf	7
  6117  006B  356B               	lslf	_motorNoOperation,w
  6118  006C  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  6119  006D  0084               	movwf	4
  6120  006E  3001               	movlw	1	; select bank2/3
  6121  006F  0085               	movwf	5
  6122  0070  3F40               	moviw [0]fsr1
  6123  0071  0780               	addwf	0,f
  6124  0072  3101               	addfsr 0,1
  6125  0073  3F41               	moviw [1]fsr1
  6126  0074  3D80               	addwfc	0,f
  6127  0075  313F               	addfsr 0,-1
  6128  0076                     l6358:
  6129                           
  6130                           ;MotorDrive.c: 2065:     move_steps = positionSearchCt[ motorNoOperation ];
  6131  0076  356B               	lslf	_motorNoOperation,w
  6132  0077  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6133  0078  0086               	movwf	6
  6134  0079  0187               	clrf	7
  6135  007A  3F40               	moviw [0]fsr1
  6136  007B  00C4               	movwf	AfterDetectedLoadPosition@move_steps
  6137  007C  3F41               	moviw [1]fsr1
  6138  007D  00C5               	movwf	AfterDetectedLoadPosition@move_steps+1
  6139                           
  6140                           ;MotorDrive.c: 2068:     if (reqSearchBasePosBit & motorBitOperation) {
  6141  007E  0855               	movf	_reqSearchBasePosBit,w
  6142  007F  0574               	andwf	_motorBitOperation,w
  6143  0080  1903               	btfsc	3,2
  6144  0081  2890               	goto	l6364
  6145                           
  6146                           ;MotorDrive.c: 2069:         currentPosition[ motorNoOperation ] += positionSearchCt[ mo
      +                          torNoOperation ];
  6147  0082  356B               	lslf	_motorNoOperation,w
  6148  0083  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6149  0084  0086               	movwf	6
  6150  0085  0187               	clrf	7
  6151  0086  356B               	lslf	_motorNoOperation,w
  6152  0087  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6153  0088  0084               	movwf	4
  6154  0089  0185               	clrf	5
  6155  008A  3F40               	moviw [0]fsr1
  6156  008B  0780               	addwf	0,f
  6157  008C  3101               	addfsr 0,1
  6158  008D  3F41               	moviw [1]fsr1
  6159  008E  3D80               	addwfc	0,f
  6160  008F  313F               	addfsr 0,-1
  6161  0090                     l6364:	
  6162                           ;MotorDrive.c: 2070:     } else {
  6163                           
  6164                           
  6165                           ;MotorDrive.c: 2074:     if (searchTotalSteps[ motorNoOperation ] > TblMaxSearchSteps[ m
      +                          otorNoOperation ]) {
  6166  0090  356B               	lslf	_motorNoOperation,w
  6167  0091  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  6168  0092  0086               	movwf	6
  6169  0093  3001               	movlw	1	; select bank2/3
  6170  0094  0087               	movwf	7
  6171  0095  3F40               	moviw [0]fsr1
  6172  0096  00BC               	movwf	??_AfterDetectedLoadPosition
  6173  0097  3F41               	moviw [1]fsr1
  6174  0098  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6175  0099  086B               	movf	_motorNoOperation,w
  6176  009A  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6177  009B  01BF               	clrf	??_AfterDetectedLoadPosition+3
  6178  009C  35BE               	lslf	??_AfterDetectedLoadPosition+2,f
  6179  009D  0DBF               	rlf	??_AfterDetectedLoadPosition+3,f
  6180  009E  3052               	movlw	low (_TblMaxSearchSteps| (0+32768))
  6181  009F  073E               	addwf	??_AfterDetectedLoadPosition+2,w
  6182  00A0  0084               	movwf	4
  6183  00A1  3098               	movlw	high (_TblMaxSearchSteps| (0+32768))
  6184  00A2  3D3F               	addwfc	??_AfterDetectedLoadPosition+3,w
  6185  00A3  0085               	movwf	5
  6186  00A4  3F00               	moviw [0]fsr0
  6187  00A5  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6188  00A6  3F01               	moviw [1]fsr0
  6189  00A7  00C1               	movwf	??_AfterDetectedLoadPosition+5
  6190  00A8  0841               	movf	??_AfterDetectedLoadPosition+5,w
  6191  00A9  3A80               	xorlw	128
  6192  00AA  00C2               	movwf	??_AfterDetectedLoadPosition+6
  6193  00AB  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6194  00AC  3A80               	xorlw	128
  6195  00AD  0242               	subwf	??_AfterDetectedLoadPosition+6,w
  6196  00AE  1D03               	skipz
  6197  00AF  28B2               	goto	u4905
  6198  00B0  083C               	movf	??_AfterDetectedLoadPosition,w
  6199  00B1  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6200  00B2                     u4905:
  6201  00B2  1803               	skipnc
  6202  00B3  28B6               	goto	l6368
  6203                           
  6204                           ;MotorDrive.c: 2076:         res = ID_SEARCH_RESULT_ERR;
  6205  00B4  3005               	movlw	5
  6206  00B5  2942               	goto	L1
  6207  00B6                     l6368:	
  6208                           ;MotorDrive.c: 2077:     } else {
  6209                           
  6210                           
  6211                           ;MotorDrive.c: 2079:         if (move_steps > 47) {
  6212  00B6  0020               	movlb	0	; select bank0
  6213  00B7  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6214  00B8  3A80               	xorlw	128
  6215  00B9  00BC               	movwf	??_AfterDetectedLoadPosition
  6216  00BA  3080               	movlw	128
  6217  00BB  023C               	subwf	??_AfterDetectedLoadPosition,w
  6218  00BC  1D03               	skipz
  6219  00BD  28C0               	goto	u4915
  6220  00BE  3030               	movlw	48
  6221  00BF  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6222  00C0                     u4915:
  6223  00C0  1C03               	skipc
  6224  00C1  2944               	goto	l6396
  6225                           
  6226                           ;MotorDrive.c: 2082:             if (((47 * 2) >= move_steps)
  6227  00C2  0020               	movlb	0	; select bank0
  6228  00C3  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6229  00C4  3A80               	xorlw	128
  6230  00C5  00BC               	movwf	??_AfterDetectedLoadPosition
  6231  00C6  3080               	movlw	128
  6232  00C7  023C               	subwf	??_AfterDetectedLoadPosition,w
  6233  00C8  1D03               	skipz
  6234  00C9  28CC               	goto	u4925
  6235  00CA  305F               	movlw	95
  6236  00CB  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6237  00CC                     u4925:
  6238  00CC  1803               	skipnc
  6239  00CD  2905               	goto	l6382
  6240  00CE  0020               	movlb	0	; select bank0
  6241  00CF  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6242  00D0  3A80               	xorlw	128
  6243  00D1  00BC               	movwf	??_AfterDetectedLoadPosition
  6244  00D2  3080               	movlw	128
  6245  00D3  023C               	subwf	??_AfterDetectedLoadPosition,w
  6246  00D4  1D03               	skipz
  6247  00D5  28D8               	goto	u4935
  6248  00D6  3056               	movlw	86
  6249  00D7  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6250  00D8                     u4935:
  6251  00D8  1C03               	skipc
  6252  00D9  2905               	goto	l6382
  6253                           
  6254                           ;MotorDrive.c: 2083:                     && ((move_steps >= 43 * 2))) {;MotorDrive.c: 20
      +                          86:                 if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motorNoOperation ]
      +                          ) {
  6255  00DA  0020               	movlb	0	; select bank0
  6256  00DB  086B               	movf	_motorNoOperation,w
  6257  00DC  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6258  00DD  0086               	movwf	6
  6259  00DE  0187               	clrf	7
  6260  00DF  0801               	movf	1,w
  6261  00E0  1D03               	btfss	3,2
  6262  00E1  28E8               	goto	l6378
  6263                           
  6264                           ;MotorDrive.c: 2088:                     positionSearchStat[ motorNoOperation ] = ID_SEA
      +                          RCH_FINE_ROUGH_POS;
  6265  00E2  086B               	movf	_motorNoOperation,w
  6266  00E3  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6267  00E4  0086               	movwf	6
  6268  00E5  0187               	clrf	7
  6269  00E6  0181               	clrf	1
  6270  00E7  0A81               	incf	1,f
  6271  00E8                     l6378:
  6272                           
  6273                           ;MotorDrive.c: 2091:                 doubleInterval = 1;
  6274  00E8  0021               	movlb	1	; select bank1
  6275  00E9  01CD               	clrf	_doubleInterval^(0+128)
  6276  00EA  0ACD               	incf	_doubleInterval^(0+128),f
  6277                           
  6278                           ;MotorDrive.c: 2092:                 detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD
      +                          _FINE;
  6279  00EB  0020               	movlb	0	; select bank0
  6280  00EC  086B               	movf	_motorNoOperation,w
  6281  00ED  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6282  00EE  0086               	movwf	6
  6283  00EF  0187               	clrf	7
  6284  00F0  0181               	clrf	1
  6285  00F1  0A81               	incf	1,f
  6286                           
  6287                           ;MotorDrive.c: 2093:                 detectFinePosCt[ motorNoOperation ] += 2;
  6288  00F2  3002               	movlw	2
  6289  00F3  00BC               	movwf	??_AfterDetectedLoadPosition
  6290  00F4  086B               	movf	_motorNoOperation,w
  6291  00F5  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6292  00F6  0086               	movwf	6
  6293  00F7  0187               	clrf	7
  6294  00F8  083C               	movf	??_AfterDetectedLoadPosition,w
  6295  00F9  0781               	addwf	1,f
  6296                           
  6297                           ;MotorDrive.c: 2094:                 detectLoadCont[ motorNoOperation ] = 2;
  6298  00FA  3002               	movlw	2
  6299  00FB  00BC               	movwf	??_AfterDetectedLoadPosition
  6300  00FC  086B               	movf	_motorNoOperation,w
  6301  00FD  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6302  00FE  0086               	movwf	6
  6303  00FF  0187               	clrf	7
  6304  0100  083C               	movf	??_AfterDetectedLoadPosition,w
  6305  0101  0081               	movwf	1
  6306  0102                     l6380:
  6307                           
  6308                           ;MotorDrive.c: 2096:                 res = ID_SEARCH_RESULT_NEW_POS;
  6309  0102  01C3               	clrf	AfterDetectedLoadPosition@res
  6310  0103  0AC3               	incf	AfterDetectedLoadPosition@res,f
  6311                           
  6312                           ;MotorDrive.c: 2098:             } else if ((ID_DETECT_LOAD_ROUGH == detectLoadType[ mot
      +                          orNoOperation ])
  6313  0104  2A30               	goto	l6452
  6314  0105                     l6382:
  6315  0105  0020               	movlb	0	; select bank0
  6316  0106  086B               	movf	_motorNoOperation,w
  6317  0107  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6318  0108  0086               	movwf	6
  6319  0109  0187               	clrf	7
  6320  010A  3002               	movlw	2
  6321  010B  0601               	xorwf	1,w
  6322  010C  1D03               	btfss	3,2
  6323  010D  2941               	goto	l6394
  6324  010E  356B               	lslf	_motorNoOperation,w
  6325  010F  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6326  0110  0086               	movwf	6
  6327  0111  0187               	clrf	7
  6328  0112  3F40               	moviw [0]fsr1
  6329  0113  00BC               	movwf	??_AfterDetectedLoadPosition
  6330  0114  3F41               	moviw [1]fsr1
  6331  0115  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6332  0116  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6333  0117  073C               	addwf	??_AfterDetectedLoadPosition,w
  6334  0118  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6335  0119  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6336  011A  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6337  011B  00BF               	movwf	??_AfterDetectedLoadPosition+3
  6338  011C  083F               	movf	??_AfterDetectedLoadPosition+3,w
  6339  011D  3A80               	xorlw	128
  6340  011E  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6341  011F  3080               	movlw	128
  6342  0120  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6343  0121  1D03               	skipz
  6344  0122  2925               	goto	u4965
  6345  0123  305F               	movlw	95
  6346  0124  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6347  0125                     u4965:
  6348  0125  1803               	skipnc
  6349  0126  2941               	goto	l6394
  6350  0127  0020               	movlb	0	; select bank0
  6351  0128  356B               	lslf	_motorNoOperation,w
  6352  0129  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6353  012A  0086               	movwf	6
  6354  012B  0187               	clrf	7
  6355  012C  3F40               	moviw [0]fsr1
  6356  012D  00BC               	movwf	??_AfterDetectedLoadPosition
  6357  012E  3F41               	moviw [1]fsr1
  6358  012F  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6359  0130  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6360  0131  073C               	addwf	??_AfterDetectedLoadPosition,w
  6361  0132  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6362  0133  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6363  0134  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6364  0135  00BF               	movwf	??_AfterDetectedLoadPosition+3
  6365  0136  083F               	movf	??_AfterDetectedLoadPosition+3,w
  6366  0137  3A80               	xorlw	128
  6367  0138  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6368  0139  3080               	movlw	128
  6369  013A  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6370  013B  1D03               	skipz
  6371  013C  293F               	goto	u4975
  6372  013D  3056               	movlw	86
  6373  013E  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6374  013F                     u4975:
  6375  013F  1803               	btfsc	3,0
  6376  0140  28E8               	goto	l6378
  6377  0141                     l6394:	
  6378                           ;MotorDrive.c: 2105:                 detectLoadCont[ motorNoOperation ] = 2;
  6379                           
  6380                           ;MotorDrive.c: 2104:                 detectFinePosCt[ motorNoOperation ] += 2;
  6381                           
  6382                           ;MotorDrive.c: 2103:                 detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD
      +                          _FINE;
  6383                           
  6384                           ;MotorDrive.c: 2100:                     && ((detectRoughTotalMove[ motorNoOperation ] +
      +                           move_steps) >= (43 * 2))) {;MotorDrive.c: 2102:                 doubleInterval = 1;
  6385                           
  6386                           
  6387                           ;MotorDrive.c: 2111:                 res = ID_SEARCH_RESULT_RETRY;
  6388  0141  3003               	movlw	3
  6389  0142                     L1:
  6390  0142  0020               	movlb	0	; select bank0
  6391  0143  2A2D               	goto	L2
  6392  0144                     l6396:
  6393  0144  0020               	movlb	0	; select bank0
  6394  0145  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6395  0146  3A80               	xorlw	128
  6396  0147  00BC               	movwf	??_AfterDetectedLoadPosition
  6397  0148  3080               	movlw	128
  6398  0149  023C               	subwf	??_AfterDetectedLoadPosition,w
  6399  014A  1D03               	skipz
  6400  014B  294E               	goto	u4985
  6401  014C  3030               	movlw	48
  6402  014D  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6403  014E                     u4985:
  6404  014E  1803               	skipnc
  6405  014F  2965               	goto	l6406
  6406  0150  0020               	movlb	0	; select bank0
  6407  0151  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6408  0152  3A80               	xorlw	128
  6409  0153  00BC               	movwf	??_AfterDetectedLoadPosition
  6410  0154  3080               	movlw	128
  6411  0155  023C               	subwf	??_AfterDetectedLoadPosition,w
  6412  0156  1D03               	skipz
  6413  0157  295A               	goto	u4995
  6414  0158  302B               	movlw	43
  6415  0159  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6416  015A                     u4995:
  6417  015A  1C03               	skipc
  6418  015B  2965               	goto	l6406
  6419                           
  6420                           ;MotorDrive.c: 2115:             if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motor
      +                          NoOperation ]) {
  6421  015C  0020               	movlb	0	; select bank0
  6422  015D  086B               	movf	_motorNoOperation,w
  6423  015E  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6424  015F  0086               	movwf	6
  6425  0160  0187               	clrf	7
  6426  0161  0801               	movf	1,w
  6427  0162  1D03               	btfss	3,2
  6428  0163  2A06               	goto	L3
  6429  0164  2A00               	goto	L6
  6430  0165                     l6406:	
  6431                           ;MotorDrive.c: 2122:             detectLoadCont[ motorNoOperation ] = 1;
  6432                           
  6433                           ;MotorDrive.c: 2121:             detectFinePosCt[ motorNoOperation ]++;
  6434                           
  6435                           ;MotorDrive.c: 2120:             detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD_FIN
      +                          E;
  6436                           
  6437                           ;MotorDrive.c: 2118:             }
  6438                           
  6439                           ;MotorDrive.c: 2117:                 positionSearchStat[ motorNoOperation ] = ID_SEARCH_
      +                          FINE_ROUGH_POS;
  6440                           
  6441  0165  0020               	movlb	0	; select bank0
  6442  0166  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6443  0167  3A80               	xorlw	128
  6444  0168  00BC               	movwf	??_AfterDetectedLoadPosition
  6445  0169  3080               	movlw	128
  6446  016A  023C               	subwf	??_AfterDetectedLoadPosition,w
  6447  016B  1D03               	skipz
  6448  016C  296F               	goto	u5015
  6449  016D  302B               	movlw	43
  6450  016E  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6451  016F                     u5015:
  6452  016F  1803               	skipnc
  6453  0170  2A30               	goto	l6452
  6454                           
  6455                           ;MotorDrive.c: 2128:             if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motor
      +                          NoOperation ]) {
  6456  0171  0020               	movlb	0	; select bank0
  6457  0172  086B               	movf	_motorNoOperation,w
  6458  0173  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6459  0174  0086               	movwf	6
  6460  0175  0187               	clrf	7
  6461  0176  0801               	movf	1,w
  6462  0177  1903               	btfsc	3,2
  6463  0178  2A30               	goto	l6452
  6464  0179  086B               	movf	_motorNoOperation,w
  6465  017A  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6466  017B  0086               	movwf	6
  6467  017C  0187               	clrf	7
  6468  017D  0301               	decf	1,w
  6469  017E  1D03               	btfss	3,2
  6470  017F  29BA               	goto	l6426
  6471                           
  6472                           ;MotorDrive.c: 2136:                 if (move_steps > 2) {
  6473  0180  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6474  0181  3A80               	xorlw	128
  6475  0182  00BC               	movwf	??_AfterDetectedLoadPosition
  6476  0183  3080               	movlw	128
  6477  0184  023C               	subwf	??_AfterDetectedLoadPosition,w
  6478  0185  1D03               	skipz
  6479  0186  2989               	goto	u5045
  6480  0187  3003               	movlw	3
  6481  0188  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6482  0189                     u5045:
  6483  0189  1C03               	skipc
  6484  018A  29AB               	goto	l6420
  6485  018B                     l6416:
  6486                           
  6487                           ;MotorDrive.c: 2138:                     detectLoadType[ motorNoOperation ] = ID_DETECT_
      +                          LOAD_ROUGH;
  6488  018B  3002               	movlw	2
  6489  018C  0020               	movlb	0	; select bank0
  6490  018D  00BC               	movwf	??_AfterDetectedLoadPosition
  6491  018E  086B               	movf	_motorNoOperation,w
  6492  018F  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6493  0190  0086               	movwf	6
  6494  0191  0187               	clrf	7
  6495  0192  083C               	movf	??_AfterDetectedLoadPosition,w
  6496  0193  0081               	movwf	1
  6497                           
  6498                           ;MotorDrive.c: 2139:                     detectRoughPosCt[ motorNoOperation ]++;
  6499  0194  3001               	movlw	1
  6500  0195  00BC               	movwf	??_AfterDetectedLoadPosition
  6501  0196  086B               	movf	_motorNoOperation,w
  6502  0197  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6503  0198  0086               	movwf	6
  6504  0199  0187               	clrf	7
  6505  019A  083C               	movf	??_AfterDetectedLoadPosition,w
  6506  019B  0781               	addwf	1,f
  6507                           
  6508                           ;MotorDrive.c: 2140:                     detectLoadCont[ motorNoOperation ] = 1;
  6509  019C  086B               	movf	_motorNoOperation,w
  6510  019D  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6511  019E  0086               	movwf	6
  6512  019F  0187               	clrf	7
  6513  01A0  0181               	clrf	1
  6514  01A1  0A81               	incf	1,f
  6515                           
  6516                           ;MotorDrive.c: 2141:                     detectRoughTotalMove[ motorNoOperation ] = move
      +                          _steps;
  6517  01A2  356B               	lslf	_motorNoOperation,w
  6518  01A3  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6519  01A4  0086               	movwf	6
  6520  01A5  0187               	clrf	7
  6521  01A6  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6522  01A7  3FC0               	movwi [0]fsr1
  6523  01A8  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6524  01A9  3FC1               	movwi [1]fsr1
  6525  01AA  2902               	goto	l6380
  6526  01AB                     l6420:
  6527                           
  6528                           ;MotorDrive.c: 2145:                     detectLoadCont[ motorNoOperation ]++;
  6529  01AB  3001               	movlw	1
  6530  01AC  0020               	movlb	0	; select bank0
  6531  01AD  00BC               	movwf	??_AfterDetectedLoadPosition
  6532  01AE  086B               	movf	_motorNoOperation,w
  6533  01AF  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6534  01B0  0086               	movwf	6
  6535  01B1  0187               	clrf	7
  6536  01B2  083C               	movf	??_AfterDetectedLoadPosition,w
  6537  01B3  0781               	addwf	1,f
  6538                           
  6539                           ;MotorDrive.c: 2146:                     if (detectLoadCont[ motorNoOperation ] > 2) {
  6540  01B4  086B               	movf	_motorNoOperation,w
  6541  01B5  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6542  01B6  0086               	movwf	6
  6543  01B7  0187               	clrf	7
  6544  01B8  3003               	movlw	3
  6545  01B9  2A29               	goto	L7
  6546  01BA                     l6426:
  6547  01BA  086B               	movf	_motorNoOperation,w
  6548  01BB  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6549  01BC  0086               	movwf	6
  6550  01BD  0187               	clrf	7
  6551  01BE  3002               	movlw	2
  6552  01BF  0601               	xorwf	1,w
  6553  01C0  1D03               	btfss	3,2
  6554  01C1  2941               	goto	l6394
  6555                           
  6556                           ;MotorDrive.c: 2156:                 detectRoughTotalMove[ motorNoOperation ] += move_st
      +                          eps;
  6557  01C2  356B               	lslf	_motorNoOperation,w
  6558  01C3  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6559  01C4  0086               	movwf	6
  6560  01C5  0187               	clrf	7
  6561  01C6  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6562  01C7  0781               	addwf	1,f
  6563  01C8  3141               	addfsr 1,1
  6564  01C9  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6565  01CA  3D81               	addwfc	1,f
  6566  01CB  317F               	addfsr 1,-1
  6567                           
  6568                           ;MotorDrive.c: 2158:                 if (move_steps > 3) {
  6569  01CC  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6570  01CD  3A80               	xorlw	128
  6571  01CE  00BC               	movwf	??_AfterDetectedLoadPosition
  6572  01CF  3080               	movlw	128
  6573  01D0  023C               	subwf	??_AfterDetectedLoadPosition,w
  6574  01D1  1D03               	skipz
  6575  01D2  29D5               	goto	u5075
  6576  01D3  3004               	movlw	4
  6577  01D4  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6578  01D5                     u5075:
  6579  01D5  1C03               	skipc
  6580  01D6  2A1B               	goto	l6444
  6581                           
  6582                           ;MotorDrive.c: 2161:                     if ((47 >= detectRoughTotalMove[ motorNoOperati
      +                          on ]) && (detectRoughTotalMove[ motorNoOperation ] >= 43)) {
  6583  01D7  0020               	movlb	0	; select bank0
  6584  01D8  356B               	lslf	_motorNoOperation,w
  6585  01D9  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6586  01DA  0086               	movwf	6
  6587  01DB  0187               	clrf	7
  6588  01DC  3F40               	moviw [0]fsr1
  6589  01DD  00BC               	movwf	??_AfterDetectedLoadPosition
  6590  01DE  3F41               	moviw [1]fsr1
  6591  01DF  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6592  01E0  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6593  01E1  3A80               	xorlw	128
  6594  01E2  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6595  01E3  3080               	movlw	128
  6596  01E4  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6597  01E5  1D03               	skipz
  6598  01E6  29E9               	goto	u5085
  6599  01E7  3030               	movlw	48
  6600  01E8  023C               	subwf	??_AfterDetectedLoadPosition,w
  6601  01E9                     u5085:
  6602  01E9  1803               	skipnc
  6603  01EA  298B               	goto	l6416
  6604  01EB  0020               	movlb	0	; select bank0
  6605  01EC  356B               	lslf	_motorNoOperation,w
  6606  01ED  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6607  01EE  0086               	movwf	6
  6608  01EF  0187               	clrf	7
  6609  01F0  3F40               	moviw [0]fsr1
  6610  01F1  00BC               	movwf	??_AfterDetectedLoadPosition
  6611  01F2  3F41               	moviw [1]fsr1
  6612  01F3  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6613  01F4  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6614  01F5  3A80               	xorlw	128
  6615  01F6  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6616  01F7  3080               	movlw	128
  6617  01F8  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6618  01F9  1D03               	skipz
  6619  01FA  29FD               	goto	u5095
  6620  01FB  302B               	movlw	43
  6621  01FC  023C               	subwf	??_AfterDetectedLoadPosition,w
  6622  01FD                     u5095:
  6623  01FD  1C03               	skipc
  6624  01FE  298B               	goto	l6416
  6625                           
  6626                           ;MotorDrive.c: 2163:                         positionSearchStat[ motorNoOperation ] = ID
      +                          _SEARCH_FINE_ROUGH_POS;
  6627  01FF  0020               	movlb	0	; select bank0
  6628  0200                     L6:
  6629  0200  086B               	movf	_motorNoOperation,w
  6630  0201  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6631  0202  0086               	movwf	6
  6632  0203  0187               	clrf	7
  6633  0204  0181               	clrf	1
  6634  0205  0A81               	incf	1,f
  6635  0206                     L3:
  6636                           
  6637                           ;MotorDrive.c: 2164:                         detectLoadType[ motorNoOperation ] = ID_DET
      +                          ECT_LOAD_FINE;
  6638  0206  086B               	movf	_motorNoOperation,w
  6639  0207  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6640  0208  0086               	movwf	6
  6641  0209  0187               	clrf	7
  6642  020A  0181               	clrf	1
  6643  020B  0A81               	incf	1,f
  6644                           
  6645                           ;MotorDrive.c: 2165:                         detectFinePosCt[ motorNoOperation ]++;
  6646  020C  3001               	movlw	1
  6647  020D  00BC               	movwf	??_AfterDetectedLoadPosition
  6648  020E  086B               	movf	_motorNoOperation,w
  6649  020F  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6650  0210  0086               	movwf	6
  6651  0211  0187               	clrf	7
  6652  0212  083C               	movf	??_AfterDetectedLoadPosition,w
  6653  0213  0781               	addwf	1,f
  6654                           
  6655                           ;MotorDrive.c: 2166:                         detectLoadCont[ motorNoOperation ] = 1;
  6656  0214  086B               	movf	_motorNoOperation,w
  6657  0215  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6658  0216  0086               	movwf	6
  6659  0217  0187               	clrf	7
  6660  0218  0181               	clrf	1
  6661  0219  0A81               	incf	1,f
  6662  021A  2902               	goto	l6380
  6663  021B                     l6444:
  6664                           
  6665                           ;MotorDrive.c: 2180:                     detectLoadCont[ motorNoOperation ]++;
  6666  021B  3001               	movlw	1
  6667  021C  0020               	movlb	0	; select bank0
  6668  021D  00BC               	movwf	??_AfterDetectedLoadPosition
  6669  021E  086B               	movf	_motorNoOperation,w
  6670  021F  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6671  0220  0086               	movwf	6
  6672  0221  0187               	clrf	7
  6673  0222  083C               	movf	??_AfterDetectedLoadPosition,w
  6674  0223  0781               	addwf	1,f
  6675                           
  6676                           ;MotorDrive.c: 2181:                     if (detectLoadCont[ motorNoOperation ] > 9) {
  6677  0224  086B               	movf	_motorNoOperation,w
  6678  0225  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6679  0226  0086               	movwf	6
  6680  0227  0187               	clrf	7
  6681  0228  300A               	movlw	10
  6682  0229                     L7:
  6683  0229  0201               	subwf	1,w
  6684  022A  1803               	btfsc	3,0
  6685  022B  2941               	goto	l6394
  6686                           
  6687                           ;MotorDrive.c: 2150:                         res = ID_SEARCH_RESULT_CONT;
  6688  022C  3002               	movlw	2
  6689  022D                     L2:
  6690  022D  00BC               	movwf	??_AfterDetectedLoadPosition
  6691  022E  083C               	movf	??_AfterDetectedLoadPosition,w
  6692  022F  00C3               	movwf	AfterDetectedLoadPosition@res
  6693  0230                     l6452:
  6694                           
  6695                           ;MotorDrive.c: 2197:     if ((detectFinePosCt[ motorNoOperation ] == 8)
  6696  0230  0020               	movlb	0	; select bank0
  6697  0231  086B               	movf	_motorNoOperation,w
  6698  0232  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6699  0233  0086               	movwf	6
  6700  0234  0187               	clrf	7
  6701  0235  3008               	movlw	8
  6702  0236  0601               	xorwf	1,w
  6703  0237  1D03               	btfss	3,2
  6704  0238  2A42               	goto	l6458
  6705  0239  086B               	movf	_motorNoOperation,w
  6706  023A  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6707  023B  0086               	movwf	6
  6708  023C  0187               	clrf	7
  6709  023D  0301               	decf	1,w
  6710  023E  1D03               	btfss	3,2
  6711  023F  2A42               	goto	l6458
  6712  0240                     l6456:
  6713                           
  6714                           ;MotorDrive.c: 2198:             && (detectRoughPosCt[ motorNoOperation ] == 1)) {;Motor
      +                          Drive.c: 2200:         res = ID_SEARCH_RESULT_SUCCESS;
  6715  0240  3004               	movlw	4
  6716  0241  2A62               	goto	L4
  6717  0242                     l6458:	
  6718                           ;MotorDrive.c: 2202:     } else if ((detectFinePosCt[ motorNoOperation ] == (8 + 1))
  6719                           
  6720  0242  086B               	movf	_motorNoOperation,w
  6721  0243  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6722  0244  0086               	movwf	6
  6723  0245  0187               	clrf	7
  6724  0246  3009               	movlw	9
  6725  0247  0601               	xorwf	1,w
  6726  0248  1D03               	btfss	3,2
  6727  0249  2A51               	goto	l6464
  6728  024A  086B               	movf	_motorNoOperation,w
  6729  024B  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6730  024C  0086               	movwf	6
  6731  024D  0187               	clrf	7
  6732  024E  0301               	decf	1,w
  6733  024F  1903               	btfsc	3,2
  6734  0250  2A40               	goto	l6456
  6735  0251                     l6464:
  6736  0251  086B               	movf	_motorNoOperation,w
  6737  0252  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6738  0253  0086               	movwf	6
  6739  0254  0187               	clrf	7
  6740  0255  300A               	movlw	10
  6741  0256  0201               	subwf	1,w
  6742  0257  1803               	btfsc	3,0
  6743  0258  2A61               	goto	l6466
  6744                           
  6745                           ;MotorDrive.c: 2213:     } else if (detectRoughPosCt[ motorNoOperation ] > 1) {
  6746  0259  086B               	movf	_motorNoOperation,w
  6747  025A  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6748  025B  0086               	movwf	6
  6749  025C  0187               	clrf	7
  6750  025D  3002               	movlw	2
  6751  025E  0201               	subwf	1,w
  6752  025F  1C03               	skipc
  6753  0260  2A65               	goto	l6472
  6754  0261                     l6466:
  6755                           
  6756                           ;MotorDrive.c: 2212:         res = ID_SEARCH_RESULT_RETRY;
  6757  0261  3003               	movlw	3
  6758  0262                     L4:
  6759  0262  00BC               	movwf	??_AfterDetectedLoadPosition
  6760  0263  083C               	movf	??_AfterDetectedLoadPosition,w
  6761  0264  00C3               	movwf	AfterDetectedLoadPosition@res
  6762  0265                     l6472:
  6763                           
  6764                           ;MotorDrive.c: 2218:     if (ID_SEARCH_RESULT_ERR == res) {
  6765  0265  3005               	movlw	5
  6766  0266  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6767  0267  1903               	btfsc	3,2
  6768  0268  2BEF               	goto	l6578
  6769  0269  0843               	movf	AfterDetectedLoadPosition@res,w
  6770  026A  1D03               	btfss	3,2
  6771  026B  2A7D               	goto	l6484
  6772                           
  6773                           ;MotorDrive.c: 2225:         SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedLoadP
      +                          osition);
  6774  026C  305D               	movlw	low _AfterDetectedLoadPosition
  6775  026D  00A0               	movwf	SetAfterDetectLoadFunc@func
  6776  026E  3000               	movlw	high _AfterDetectedLoadPosition
  6777  026F  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  6778  0270  086B               	movf	_motorNoOperation,w
  6779  0271  3190  20BD  3180   	fcall	_SetAfterDetectLoadFunc
  6780                           
  6781                           ;MotorDrive.c: 2226:         if (reqSearchBasePosBit & motorBitOperation) {
  6782  0274  0855               	movf	_reqSearchBasePosBit,w
  6783  0275  0574               	andwf	_motorBitOperation,w
  6784  0276  1903               	btfsc	3,2
  6785  0277  2BEF               	goto	l6578
  6786                           
  6787                           ;MotorDrive.c: 2227:             SetMotorStart(motorNoOperation);
  6788  0278  086B               	movf	_motorNoOperation,w
  6789  0279  3190  2089  3180   	fcall	_SetMotorStart
  6790  027C  2BEF               	goto	l6578
  6791  027D                     l6484:
  6792  027D  3003               	movlw	3
  6793  027E  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6794  027F  1D03               	btfss	3,2
  6795  0280  2A9C               	goto	l6496
  6796                           
  6797                           ;MotorDrive.c: 2236:         InitPositionSearch(motorNoOperation);
  6798  0281  086B               	movf	_motorNoOperation,w
  6799  0282  318E  261A  3180   	fcall	_InitPositionSearch
  6800                           
  6801                           ;MotorDrive.c: 2237:         SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedLoadP
      +                          osition);
  6802  0285  305D               	movlw	low _AfterDetectedLoadPosition
  6803  0286  00A0               	movwf	SetAfterDetectLoadFunc@func
  6804  0287  3000               	movlw	high _AfterDetectedLoadPosition
  6805  0288  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  6806  0289  086B               	movf	_motorNoOperation,w
  6807  028A  3190  20BD  3180   	fcall	_SetAfterDetectLoadFunc
  6808                           
  6809                           ;MotorDrive.c: 2238:         if (reqSearchBasePosBit & motorBitOperation) {
  6810  028D  0855               	movf	_reqSearchBasePosBit,w
  6811  028E  0574               	andwf	_motorBitOperation,w
  6812  028F  1903               	btfsc	3,2
  6813  0290  2A96               	goto	l6494
  6814                           
  6815                           ;MotorDrive.c: 2239:             SetMotorStart(motorNoOperation);
  6816  0291  086B               	movf	_motorNoOperation,w
  6817  0292  3190  2089  3180   	fcall	_SetMotorStart
  6818                           
  6819                           ;MotorDrive.c: 2240:         } else {
  6820  0295  2BEF               	goto	l6578
  6821  0296                     l6494:
  6822                           
  6823                           ;MotorDrive.c: 2241:             reqCorrectFinePoBit |= motorBitOperation;
  6824  0296  0874               	movf	_motorBitOperation,w
  6825  0297  00BC               	movwf	??_AfterDetectedLoadPosition
  6826  0298  083C               	movf	??_AfterDetectedLoadPosition,w
  6827  0299  0021               	movlb	1	; select bank1
  6828  029A  04CF               	iorwf	_reqCorrectFinePoBit^(0+128),f
  6829                           
  6830                           ;MotorDrive.c: 2243:     } else {
  6831                           
  6832                           ;MotorDrive.c: 2242:         }
  6833  029B  2BEF               	goto	l6578
  6834  029C                     l6496:
  6835                           
  6836                           ;MotorDrive.c: 2245:         if (0 == (reqCorrectFinePoBit & motorBitOperation)) {
  6837  029C  0021               	movlb	1	; select bank1
  6838  029D  084F               	movf	_reqCorrectFinePoBit^(0+128),w
  6839  029E  0574               	andwf	_motorBitOperation,w
  6840  029F  1D03               	btfss	3,2
  6841  02A0  2B5A               	goto	l6524
  6842                           
  6843                           ;MotorDrive.c: 2249:             if (1 == doubleInterval) {
  6844  02A1  034D               	decf	_doubleInterval^(0+128),w
  6845  02A2  1D03               	btfss	3,2
  6846  02A3  2B0A               	goto	l6512
  6847                           
  6848                           ;MotorDrive.c: 2250:                 detectLoadPositionIndex[ motorNoOperation ]++;
  6849  02A4  3001               	movlw	1
  6850  02A5  0020               	movlb	0	; select bank0
  6851  02A6  00BC               	movwf	??_AfterDetectedLoadPosition
  6852  02A7  086B               	movf	_motorNoOperation,w
  6853  02A8  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  6854  02A9  0086               	movwf	6
  6855  02AA  0187               	clrf	7
  6856  02AB  083C               	movf	??_AfterDetectedLoadPosition,w
  6857  02AC  0781               	addwf	1,f
  6858                           
  6859                           ;MotorDrive.c: 2251:                 missingDetectFinePosition = currentPosition[ motorN
      +                          oOperation ] - 45;
  6860  02AD  356B               	lslf	_motorNoOperation,w
  6861  02AE  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6862  02AF  0086               	movwf	6
  6863  02B0  0187               	clrf	7
  6864  02B1  3F40               	moviw [0]fsr1
  6865  02B2  00BC               	movwf	??_AfterDetectedLoadPosition
  6866  02B3  3F41               	moviw [1]fsr1
  6867  02B4  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6868  02B5  083C               	movf	??_AfterDetectedLoadPosition,w
  6869  02B6  3ED3               	addlw	211
  6870  02B7  0021               	movlb	1	; select bank1
  6871  02B8  00ED               	movwf	_missingDetectFinePosition^(0+128)
  6872  02B9  30FF               	movlw	255
  6873  02BA  0020               	movlb	0	; select bank0
  6874  02BB  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6875  02BC  0021               	movlb	1	; select bank1
  6876  02BD  00EE               	movwf	(_missingDetectFinePosition+1)^(0+128)
  6877                           
  6878                           ;MotorDrive.c: 2252:                 CorrectPosition(&missingDetectFinePosition, TblMaxS
      +                          teps[ motorNoOperation ]);
  6879  02BE  30ED               	movlw	low _missingDetectFinePosition
  6880  02BF  0020               	movlb	0	; select bank0
  6881  02C0  00A6               	movwf	CorrectPosition@pos
  6882  02C1  3000               	movlw	high _missingDetectFinePosition
  6883  02C2  00A7               	movwf	CorrectPosition@pos+1
  6884  02C3  086B               	movf	_motorNoOperation,w
  6885  02C4  00BC               	movwf	??_AfterDetectedLoadPosition
  6886  02C5  01BD               	clrf	??_AfterDetectedLoadPosition+1
  6887  02C6  35BC               	lslf	??_AfterDetectedLoadPosition,f
  6888  02C7  0DBD               	rlf	??_AfterDetectedLoadPosition+1,f
  6889  02C8  3056               	movlw	low (_TblMaxSteps| (0+32768))
  6890  02C9  073C               	addwf	??_AfterDetectedLoadPosition,w
  6891  02CA  0084               	movwf	4
  6892  02CB  3098               	movlw	high (_TblMaxSteps| (0+32768))
  6893  02CC  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6894  02CD  0085               	movwf	5
  6895  02CE  3F00               	moviw [0]fsr0
  6896  02CF  00A8               	movwf	CorrectPosition@max
  6897  02D0  3F01               	moviw [1]fsr0
  6898  02D1  00A9               	movwf	CorrectPosition@max+1
  6899  02D2  3188  200B  3180   	fcall	_CorrectPosition
  6900                           
  6901                           ;MotorDrive.c: 2254:                 *detectLoadPositionPtr[ motorNoOperation ] = missin
      +                          gDetectFinePosition;
  6902  02D5  356B               	lslf	_motorNoOperation,w
  6903  02D6  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6904  02D7  0086               	movwf	6
  6905  02D8  3001               	movlw	1	; select bank2/3
  6906  02D9  0087               	movwf	7
  6907  02DA  3F40               	moviw [0]fsr1
  6908  02DB  00BC               	movwf	??_AfterDetectedLoadPosition
  6909  02DC  3F41               	moviw [1]fsr1
  6910  02DD  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6911  02DE  083C               	movf	??_AfterDetectedLoadPosition,w
  6912  02DF  0086               	movwf	6
  6913  02E0  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6914  02E1  0087               	movwf	7
  6915  02E2  0021               	movlb	1	; select bank1
  6916  02E3  086D               	movf	_missingDetectFinePosition^(0+128),w
  6917  02E4  3FC0               	movwi [0]fsr1
  6918  02E5  086E               	movf	(_missingDetectFinePosition+1)^(0+128),w
  6919  02E6  3FC1               	movwi [1]fsr1
  6920                           
  6921                           ;MotorDrive.c: 2255:                 detectLoadPositionPtr[ motorNoOperation ]++;
  6922  02E7  0020               	movlb	0	; select bank0
  6923  02E8  356B               	lslf	_motorNoOperation,w
  6924  02E9  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6925  02EA  0086               	movwf	6
  6926  02EB  3001               	movlw	1	; select bank2/3
  6927  02EC  0087               	movwf	7
  6928  02ED  3002               	movlw	2
  6929  02EE  0781               	addwf	1,f
  6930  02EF  3141               	addfsr 1,1
  6931  02F0  1803               	skipnc
  6932  02F1  0A81               	incf	1,f
  6933                           
  6934                           ;MotorDrive.c: 2257:                 *detectLoadPositionTypePtr[ motorNoOperation ] = de
      +                          tectLoadType[ motorNoOperation ];
  6935  02F2  086B               	movf	_motorNoOperation,w
  6936  02F3  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6937  02F4  0086               	movwf	6
  6938  02F5  0187               	clrf	7
  6939  02F6  0801               	movf	1,w
  6940  02F7  00BC               	movwf	??_AfterDetectedLoadPosition
  6941  02F8  086B               	movf	_motorNoOperation,w
  6942  02F9  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6943  02FA  0086               	movwf	6
  6944  02FB  0187               	clrf	7
  6945  02FC  0801               	movf	1,w
  6946  02FD  0086               	movwf	6
  6947  02FE  3001               	movlw	1	; select bank2/3
  6948  02FF  0087               	movwf	7
  6949  0300  083C               	movf	??_AfterDetectedLoadPosition,w
  6950  0301  0081               	movwf	1
  6951                           
  6952                           ;MotorDrive.c: 2258:                 detectLoadPositionTypePtr[ motorNoOperation ]++;
  6953  0302  3001               	movlw	1
  6954  0303  00BC               	movwf	??_AfterDetectedLoadPosition
  6955  0304  086B               	movf	_motorNoOperation,w
  6956  0305  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6957  0306  0086               	movwf	6
  6958  0307  0187               	clrf	7
  6959  0308  083C               	movf	??_AfterDetectedLoadPosition,w
  6960  0309  0781               	addwf	1,f
  6961  030A                     l6512:
  6962                           
  6963                           ;MotorDrive.c: 2261:             detectLoadPositionIndex[ motorNoOperation ]++;
  6964  030A  3001               	movlw	1
  6965  030B  0020               	movlb	0	; select bank0
  6966  030C  00BC               	movwf	??_AfterDetectedLoadPosition
  6967  030D  086B               	movf	_motorNoOperation,w
  6968  030E  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  6969  030F  0086               	movwf	6
  6970  0310  0187               	clrf	7
  6971  0311  083C               	movf	??_AfterDetectedLoadPosition,w
  6972  0312  0781               	addwf	1,f
  6973                           
  6974                           ;MotorDrive.c: 2264:             *detectLoadPositionPtr[ motorNoOperation ] = currentPos
      +                          ition[ motorNoOperation ];
  6975  0313  356B               	lslf	_motorNoOperation,w
  6976  0314  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6977  0315  0086               	movwf	6
  6978  0316  0187               	clrf	7
  6979  0317  356B               	lslf	_motorNoOperation,w
  6980  0318  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6981  0319  0084               	movwf	4
  6982  031A  3001               	movlw	1	; select bank2/3
  6983  031B  0085               	movwf	5
  6984  031C  3F00               	moviw [0]fsr0
  6985  031D  00BC               	movwf	??_AfterDetectedLoadPosition
  6986  031E  3F01               	moviw [1]fsr0
  6987  031F  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6988  0320  083C               	movf	??_AfterDetectedLoadPosition,w
  6989  0321  0084               	movwf	4
  6990  0322  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6991  0323  0085               	movwf	5
  6992  0324  3F40               	moviw [0]fsr1
  6993  0325  3F80               	movwi [0]fsr0
  6994  0326  3F41               	moviw [1]fsr1
  6995  0327  3F81               	movwi [1]fsr0
  6996                           
  6997                           ;MotorDrive.c: 2265:             detectLoadPositionPtr[ motorNoOperation ]++;
  6998  0328  356B               	lslf	_motorNoOperation,w
  6999  0329  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  7000  032A  0086               	movwf	6
  7001  032B  3001               	movlw	1	; select bank2/3
  7002  032C  0087               	movwf	7
  7003  032D  3002               	movlw	2
  7004  032E  0781               	addwf	1,f
  7005  032F  3141               	addfsr 1,1
  7006  0330  1803               	skipnc
  7007  0331  0A81               	incf	1,f
  7008                           
  7009                           ;MotorDrive.c: 2268:             *detectLoadPositionTypePtr[ motorNoOperation ] = detect
      +                          LoadType[ motorNoOperation ];
  7010  0332  086B               	movf	_motorNoOperation,w
  7011  0333  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  7012  0334  0086               	movwf	6
  7013  0335  0187               	clrf	7
  7014  0336  0801               	movf	1,w
  7015  0337  00BC               	movwf	??_AfterDetectedLoadPosition
  7016  0338  086B               	movf	_motorNoOperation,w
  7017  0339  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7018  033A  0086               	movwf	6
  7019  033B  0187               	clrf	7
  7020  033C  0801               	movf	1,w
  7021  033D  0086               	movwf	6
  7022  033E  3001               	movlw	1	; select bank2/3
  7023  033F  0087               	movwf	7
  7024  0340  083C               	movf	??_AfterDetectedLoadPosition,w
  7025  0341  0081               	movwf	1
  7026                           
  7027                           ;MotorDrive.c: 2269:             if (ID_SEARCH_RESULT_CONT == res) {
  7028  0342  3002               	movlw	2
  7029  0343  0643               	xorwf	AfterDetectedLoadPosition@res,w
  7030  0344  1D03               	btfss	3,2
  7031  0345  2B52               	goto	l956
  7032                           
  7033                           ;MotorDrive.c: 2270:                 *detectLoadPositionTypePtr[ motorNoOperation ] += 1
      +                          0;
  7034  0346  300A               	movlw	10
  7035  0347  00BC               	movwf	??_AfterDetectedLoadPosition
  7036  0348  086B               	movf	_motorNoOperation,w
  7037  0349  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7038  034A  0086               	movwf	6
  7039  034B  0187               	clrf	7
  7040  034C  0801               	movf	1,w
  7041  034D  0086               	movwf	6
  7042  034E  3001               	movlw	1	; select bank2/3
  7043  034F  0087               	movwf	7
  7044  0350  083C               	movf	??_AfterDetectedLoadPosition,w
  7045  0351  0781               	addwf	1,f
  7046  0352                     l956:	
  7047                           ;MotorDrive.c: 2271:             }
  7048                           
  7049                           
  7050                           ;MotorDrive.c: 2273:             detectLoadPositionTypePtr[ motorNoOperation ]++;
  7051  0352  3001               	movlw	1
  7052  0353  00BC               	movwf	??_AfterDetectedLoadPosition
  7053  0354  086B               	movf	_motorNoOperation,w
  7054  0355  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7055  0356  0086               	movwf	6
  7056  0357  0187               	clrf	7
  7057  0358  083C               	movf	??_AfterDetectedLoadPosition,w
  7058  0359  0781               	addwf	1,f
  7059  035A                     l6524:
  7060                           
  7061                           ;MotorDrive.c: 2277:         if (ID_SEARCH_RESULT_SUCCESS == res) {
  7062  035A  3004               	movlw	4
  7063  035B  0020               	movlb	0	; select bank0
  7064  035C  0643               	xorwf	AfterDetectedLoadPosition@res,w
  7065  035D  1D03               	btfss	3,2
  7066  035E  2BB0               	goto	l6554
  7067                           
  7068                           ;MotorDrive.c: 2279:             DetermineBasePosition(motorNoOperation);
  7069  035F  086B               	movf	_motorNoOperation,w
  7070  0360  318F  275A  3180   	fcall	_DetermineBasePosition
  7071                           
  7072                           ;MotorDrive.c: 2282:             UpdataHandPosition(motorNoOperation);
  7073  0363  086B               	movf	_motorNoOperation,w
  7074  0364  318E  26BA  3180   	fcall	_UpdataHandPosition
  7075                           
  7076                           ;MotorDrive.c: 2285:             SaveLoadPosition(motorNoOperation);
  7077  0367  086B               	movf	_motorNoOperation,w
  7078  0368  318C  2474  3180   	fcall	_SaveLoadPosition
  7079                           
  7080                           ;MotorDrive.c: 2288:             ActivateHandPosition(motorNoOperation);
  7081  036B  086B               	movf	_motorNoOperation,w
  7082  036C  3193  238E  3180   	fcall	_ActivateHandPosition
  7083                           
  7084                           ;MotorDrive.c: 2290:             if (reqSearchBasePosBit & motorBitOperation) {
  7085  036F  0020               	movlb	0	; select bank0
  7086  0370  0855               	movf	_reqSearchBasePosBit,w
  7087  0371  0574               	andwf	_motorBitOperation,w
  7088  0372  1903               	btfsc	3,2
  7089  0373  2B9F               	goto	l6546
  7090                           
  7091                           ;MotorDrive.c: 2292:                 if (DRIVE_SEARCH_1008_POSITION == driveType[ motorN
      +                          oOperation ]) {
  7092  0374  086B               	movf	_motorNoOperation,w
  7093  0375  3E30               	addlw	(low (_driveType| (0+256)))& (0+255)
  7094  0376  0086               	movwf	6
  7095  0377  3001               	movlw	1	; select bank2/3
  7096  0378  0087               	movwf	7
  7097  0379  3005               	movlw	5
  7098  037A  0601               	xorwf	1,w
  7099  037B  1D03               	btfss	3,2
  7100  037C  2B8C               	goto	l6540
  7101                           
  7102                           ;MotorDrive.c: 2294:                     if (0 == motorNoOperation) {
  7103  037D  086B               	movf	_motorNoOperation,w
  7104  037E  1D03               	btfss	3,2
  7105  037F  2B86               	goto	l6538
  7106                           
  7107                           ;MotorDrive.c: 2295:                         targetPosition[ 0 ] = 48;
  7108  0380  3030               	movlw	48
  7109  0381  0022               	movlb	2	; select bank2
  7110  0382  00E4               	movwf	_targetPosition^(0+256)
  7111  0383  3000               	movlw	0
  7112  0384  00E5               	movwf	(_targetPosition^(0+256)+1)
  7113                           
  7114                           ;MotorDrive.c: 2296:                     } else {
  7115  0385  2B94               	goto	l6542
  7116  0386                     l6538:
  7117                           
  7118                           ;MotorDrive.c: 2297:                         targetPosition[ 1 ] = 304;
  7119  0386  3030               	movlw	48
  7120  0387  0022               	movlb	2	; select bank2
  7121  0388  00E6               	movwf	(_targetPosition^(0+256)+2)
  7122  0389  3001               	movlw	1
  7123  038A  00E7               	movwf	(_targetPosition^(0+256)+3)
  7124  038B  2B94               	goto	l6542
  7125  038C                     l6540:
  7126                           
  7127                           ;MotorDrive.c: 2300:                     targetPosition[ motorNoOperation ] = 0;
  7128  038C  356B               	lslf	_motorNoOperation,w
  7129  038D  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
  7130  038E  0086               	movwf	6
  7131  038F  3001               	movlw	1	; select bank2/3
  7132  0390  0087               	movwf	7
  7133  0391  3000               	movlw	0
  7134  0392  3FC0               	movwi [0]fsr1
  7135  0393  3FC1               	movwi [1]fsr1
  7136  0394                     l6542:
  7137                           
  7138                           ;MotorDrive.c: 2303:                 SetAfterMotorStopFunc(motorNoOperation, SPIControl_
      +                          SetNotification);
  7139  0394  30D7               	movlw	low _SPIControl_SetNotification
  7140  0395  0020               	movlb	0	; select bank0
  7141  0396  00A0               	movwf	SetAfterMotorStopFunc@func
  7142  0397  3015               	movlw	high _SPIControl_SetNotification
  7143  0398  00A1               	movwf	SetAfterMotorStopFunc@func+1
  7144  0399  086B               	movf	_motorNoOperation,w
  7145  039A  3190  2093  3180   	fcall	_SetAfterMotorStopFunc
  7146                           
  7147                           ;MotorDrive.c: 2304:                 SetDriveType(motorNoOperation, DRIVE_SIMPLE);
  7148  039D  01A0               	clrf	SetDriveType@drive_type
  7149  039E  2BAB               	goto	L5
  7150  039F                     l6546:	
  7151                           ;MotorDrive.c: 2305:             } else if (reqCorrectBasePosBit & motorBitOperation) {
  7152                           
  7153  039F  0854               	movf	_reqCorrectBasePosBit,w
  7154  03A0  0574               	andwf	_motorBitOperation,w
  7155  03A1  1903               	btfsc	3,2
  7156  03A2  2BEB               	goto	l6576
  7157                           
  7158                           ;MotorDrive.c: 2309:                 reqCorrectBasePosBit &= (UB) (~motorBitOperation);
  7159  03A3  0974               	comf	_motorBitOperation,w
  7160  03A4  00BC               	movwf	??_AfterDetectedLoadPosition
  7161  03A5  083C               	movf	??_AfterDetectedLoadPosition,w
  7162  03A6  05D4               	andwf	_reqCorrectBasePosBit,f
  7163                           
  7164                           ;MotorDrive.c: 2310:                 SetDriveType(motorNoOperation, DRIVE_ACT_CORRECT_PO
      +                          SITION);
  7165  03A7  3004               	movlw	4
  7166  03A8  00BC               	movwf	??_AfterDetectedLoadPosition
  7167  03A9  083C               	movf	??_AfterDetectedLoadPosition,w
  7168  03AA  00A0               	movwf	SetDriveType@drive_type
  7169  03AB                     L5:
  7170  03AB  086B               	movf	_motorNoOperation,w
  7171  03AC  318D  2585  3180   	fcall	_SetDriveType
  7172  03AF  2BEB               	goto	l6576
  7173  03B0                     l6554:	
  7174                           ;MotorDrive.c: 2315:         } else {
  7175                           
  7176                           ;MotorDrive.c: 2314:             MoveTargetPosition(motorNoOperation);
  7177                           
  7178                           
  7179                           ;MotorDrive.c: 2317:             SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedL
      +                          oadPosition);
  7180  03B0  305D               	movlw	low _AfterDetectedLoadPosition
  7181  03B1  00A0               	movwf	SetAfterDetectLoadFunc@func
  7182  03B2  3000               	movlw	high _AfterDetectedLoadPosition
  7183  03B3  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  7184  03B4  086B               	movf	_motorNoOperation,w
  7185  03B5  3190  20BD  3180   	fcall	_SetAfterDetectLoadFunc
  7186                           
  7187                           ;MotorDrive.c: 2318:             if (reqSearchBasePosBit & motorBitOperation) {
  7188  03B8  0855               	movf	_reqSearchBasePosBit,w
  7189  03B9  0574               	andwf	_motorBitOperation,w
  7190  03BA  1903               	btfsc	3,2
  7191  03BB  2BC1               	goto	l6560
  7192                           
  7193                           ;MotorDrive.c: 2322:                 SetMotorStart(motorNoOperation);
  7194  03BC  086B               	movf	_motorNoOperation,w
  7195  03BD  3190  2089  3180   	fcall	_SetMotorStart
  7196                           
  7197                           ;MotorDrive.c: 2324:             } else if ((reqCorrectBasePosBit & motorBitOperation)
  7198  03C0  2BEF               	goto	l6578
  7199  03C1                     l6560:
  7200  03C1  0854               	movf	_reqCorrectBasePosBit,w
  7201  03C2  0574               	andwf	_motorBitOperation,w
  7202  03C3  1903               	btfsc	3,2
  7203  03C4  2BEF               	goto	l6578
  7204  03C5  0021               	movlb	1	; select bank1
  7205  03C6  084F               	movf	_reqCorrectFinePoBit^(0+128),w
  7206  03C7  0574               	andwf	_motorBitOperation,w
  7207  03C8  1903               	btfsc	3,2
  7208  03C9  2BEF               	goto	l6578
  7209  03CA  0020               	movlb	0	; select bank0
  7210  03CB  086B               	movf	_motorNoOperation,w
  7211  03CC  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  7212  03CD  0086               	movwf	6
  7213  03CE  0187               	clrf	7
  7214  03CF  0301               	decf	1,w
  7215  03D0  1D03               	btfss	3,2
  7216  03D1  2BEF               	goto	l6578
  7217  03D2  0343               	decf	AfterDetectedLoadPosition@res,w
  7218  03D3  1D03               	btfss	3,2
  7219  03D4  2BEF               	goto	l6578
  7220                           
  7221                           ;MotorDrive.c: 2327:                     && (ID_SEARCH_RESULT_NEW_POS == res)) {;MotorDr
      +                          ive.c: 2331:                 UpdateCurrentPositionByFinePosition(motorNoOperation);
  7222  03D5  086B               	movf	_motorNoOperation,w
  7223  03D6  318C  24F7  3180   	fcall	_UpdateCurrentPositionByFinePosition
  7224                           
  7225                           ;MotorDrive.c: 2338:                 InitPositionSearch(motorNoOperation);
  7226  03D9  086B               	movf	_motorNoOperation,w
  7227  03DA  318E  261A  3180   	fcall	_InitPositionSearch
  7228                           
  7229                           ;MotorDrive.c: 2340:                 SetDriveType(motorNoOperation, DRIVE_ACT_CORRECT_PO
      +                          SITION);
  7230  03DD  3004               	movlw	4
  7231  03DE  00BC               	movwf	??_AfterDetectedLoadPosition
  7232  03DF  083C               	movf	??_AfterDetectedLoadPosition,w
  7233  03E0  00A0               	movwf	SetDriveType@drive_type
  7234  03E1  086B               	movf	_motorNoOperation,w
  7235  03E2  318D  2585  3180   	fcall	_SetDriveType
  7236                           
  7237                           ;MotorDrive.c: 2341:                 reqCorrectFinePoBit &= (UB) (~motorBitOperation);
  7238  03E5  0974               	comf	_motorBitOperation,w
  7239  03E6  0020               	movlb	0	; select bank0
  7240  03E7  00BC               	movwf	??_AfterDetectedLoadPosition
  7241  03E8  083C               	movf	??_AfterDetectedLoadPosition,w
  7242  03E9  0021               	movlb	1	; select bank1
  7243  03EA  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
  7244  03EB                     l6576:
  7245                           
  7246                           ;MotorDrive.c: 2343:                 MoveTargetPosition(motorNoOperation);
  7247  03EB  0020               	movlb	0	; select bank0
  7248  03EC  086B               	movf	_motorNoOperation,w
  7249  03ED  3193  23D7         	fcall	_MoveTargetPosition
  7250  03EF                     l6578:	
  7251                           ;MotorDrive.c: 2345:             } else {
  7252                           
  7253                           
  7254                           ;MotorDrive.c: 2354:     positionSearchCt[ motorNoOperation ] = 0;
  7255  03EF  0020               	movlb	0	; select bank0
  7256  03F0  356B               	lslf	_motorNoOperation,w
  7257  03F1  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  7258  03F2  0086               	movwf	6
  7259  03F3  0187               	clrf	7
  7260  03F4  3000               	movlw	0
  7261  03F5  3FC0               	movwi [0]fsr1
  7262  03F6  3FC1               	movwi [1]fsr1
  7263                           
  7264                           ;MotorDrive.c: 2357:     doubleInterval = 0;
  7265  03F7  0021               	movlb	1	; select bank1
  7266  03F8  01CD               	clrf	_doubleInterval^(0+128)
  7267  03F9  0008               	return
  7268  03FA                     __end_of_AfterDetectedLoadPosition:
  7269                           
  7270                           	psect	text32
  7271  06C0                     __ptext32:	
  7272 ;; *************** function _VerifyHandPosition_LoadPosition *****************
  7273 ;; Defined at:
  7274 ;;		line 2560 in file "MotorDrive.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  motor_no        1   29[BANK0 ] unsigned char 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  load_pos        2   44[BANK0 ] short 
  7279 ;;  curt_pos        2   41[BANK0 ] short 
  7280 ;;  remain_steps    2   38[BANK0 ] short 
  7281 ;;  load_pos_pl1    2    0        short 
  7282 ;;  i               1   43[BANK0 ] unsigned char 
  7283 ;;  misalignment    1   40[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 1F/2
  7290 ;;		On exit  : 1F/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7293 ;;      Params:         0       1       0       0       0       0       0       0
  7294 ;;      Locals:         0       8       0       0       0       0       0       0
  7295 ;;      Temps:          0       8       0       0       0       0       0       0
  7296 ;;      Totals:         0      17       0       0       0       0       0       0
  7297 ;;Total ram usage:       17 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:   12
  7300 ;; This function calls:
  7301 ;;		_CorrectPosition
  7302 ;;		_MoveTargetPosition
  7303 ;;		_SetMotorCorrectPositionStart
  7304 ;;		___bmul
  7305 ;;		___wmul
  7306 ;; This function is called by:
  7307 ;;		_SetFwdPulseWithCorrectProc
  7308 ;;		_WatchMotorDriveFinish
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _VerifyHandPosition_LoadPosition
  7314  06C0                     _VerifyHandPosition_LoadPosition:
  7315                           
  7316                           ;MotorDrive.c: 2560: void VerifyHandPosition_LoadPosition(UB motor_no);MotorDrive.c: 256
      +                          1: {;MotorDrive.c: 2562:     UB i;;MotorDrive.c: 2563:     UB misalignment_flag = 1;
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _VerifyHandPosition_LoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7320  06C0  0020               	movlb	0	; select bank0
  7321  06C1  01C8               	clrf	VerifyHandPosition_LoadPosition@misalignment_flag
  7322  06C2  0AC8               	incf	VerifyHandPosition_LoadPosition@misalignment_flag,f
  7323                           
  7324                           ;MotorDrive.c: 2564:     H remain_steps;;MotorDrive.c: 2565:     H curt_pos;;MotorDrive.
      +                          c: 2566:     H load_pos;;MotorDrive.c: 2567:     H load_pos_pl1;;MotorDrive.c: 2570:    
      +                           if (0 == motor_no) {
  7325  06C3  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7326  06C4  1D03               	btfss	3,2
  7327  06C5  2ECD               	goto	l6588
  7328                           
  7329                           ;MotorDrive.c: 2571:         remain_steps = motorM0StepCounter;
  7330  06C6  0021               	movlb	1	; select bank1
  7331  06C7  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
  7332  06C8  0020               	movlb	0	; select bank0
  7333  06C9  00C7               	movwf	VerifyHandPosition_LoadPosition@remain_steps+1
  7334  06CA  0021               	movlb	1	; select bank1
  7335  06CB  0840               	movf	_motorM0StepCounter^(0+128),w
  7336  06CC  2ED3               	goto	L8
  7337  06CD                     l6588:	
  7338                           ;MotorDrive.c: 2572:     } else {
  7339                           
  7340                           
  7341                           ;MotorDrive.c: 2573:         remain_steps = motorM1StepCounter;
  7342  06CD  0021               	movlb	1	; select bank1
  7343  06CE  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
  7344  06CF  0020               	movlb	0	; select bank0
  7345  06D0  00C7               	movwf	VerifyHandPosition_LoadPosition@remain_steps+1
  7346  06D1  0021               	movlb	1	; select bank1
  7347  06D2  083E               	movf	_motorM1StepCounter^(0+128),w
  7348  06D3                     L8:
  7349  06D3  0020               	movlb	0	; select bank0
  7350  06D4  00C6               	movwf	VerifyHandPosition_LoadPosition@remain_steps
  7351                           
  7352                           ;MotorDrive.c: 2577:     currentPosition[ motor_no ] -= remain_steps;
  7353  06D5  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7354  06D6  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7355  06D7  0086               	movwf	6
  7356  06D8  0187               	clrf	7
  7357  06D9  0846               	movf	VerifyHandPosition_LoadPosition@remain_steps,w
  7358  06DA  0281               	subwf	1,f
  7359  06DB  3141               	addfsr 1,1
  7360  06DC  0847               	movf	VerifyHandPosition_LoadPosition@remain_steps+1,w
  7361  06DD  3B81               	subwfb	1,f
  7362  06DE  317F               	addfsr 1,-1
  7363                           
  7364                           ;MotorDrive.c: 2578:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
  7365  06DF  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7366  06E0  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7367  06E1  00A6               	movwf	CorrectPosition@pos
  7368  06E2  3000               	movlw	0
  7369  06E3  00A7               	movwf	CorrectPosition@pos+1
  7370  06E4  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7371  06E5  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7372  06E6  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7373  06E7  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7374  06E8  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7375  06E9  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7376  06EA  073E               	addwf	??_VerifyHandPosition_LoadPosition,w
  7377  06EB  0084               	movwf	4
  7378  06EC  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7379  06ED  3D3F               	addwfc	??_VerifyHandPosition_LoadPosition+1,w
  7380  06EE  0085               	movwf	5
  7381  06EF  3F00               	moviw [0]fsr0
  7382  06F0  00A8               	movwf	CorrectPosition@max
  7383  06F1  3F01               	moviw [1]fsr0
  7384  06F2  00A9               	movwf	CorrectPosition@max+1
  7385  06F3  3188  200B  3186   	fcall	_CorrectPosition
  7386                           
  7387                           ;MotorDrive.c: 2580:     curt_pos = currentPosition[ motor_no ];
  7388  06F6  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7389  06F7  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7390  06F8  0086               	movwf	6
  7391  06F9  0187               	clrf	7
  7392  06FA  3F40               	moviw [0]fsr1
  7393  06FB  00C9               	movwf	VerifyHandPosition_LoadPosition@curt_pos
  7394  06FC  3F41               	moviw [1]fsr1
  7395  06FD  00CA               	movwf	VerifyHandPosition_LoadPosition@curt_pos+1
  7396                           
  7397                           ;MotorDrive.c: 2595:     for (i = 0; i < loadPositionIndex[ motor_no ]; i++) {
  7398  06FE  01CB               	clrf	VerifyHandPosition_LoadPosition@i
  7399  06FF  2F41               	goto	l6618
  7400  0700                     l6604:	
  7401                           ;MotorDrive.c: 2602:             break;
  7402                           
  7403                           
  7404                           ;MotorDrive.c: 2605:         if (ID_DETECT_LOAD_FINE == loadPositionType[ motor_no ][ i 
      +                          ]) {
  7405  0700  3017               	movlw	23
  7406  0701  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7407  0702  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7408  0703  00A0               	movwf	___bmul@multiplicand
  7409  0704  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7410  0705  3192  22DC  3186   	fcall	___bmul
  7411  0708  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  7412  0709  074B               	addwf	VerifyHandPosition_LoadPosition@i,w
  7413  070A  00BF               	movwf	??_VerifyHandPosition_LoadPosition+1
  7414  070B  083F               	movf	??_VerifyHandPosition_LoadPosition+1,w
  7415  070C  0086               	movwf	6
  7416  070D  3001               	movlw	1	; select bank3/4
  7417  070E  0087               	movwf	7
  7418  070F  0301               	decf	1,w
  7419  0710  1D03               	btfss	3,2
  7420  0711  2F3D               	goto	l6616
  7421                           
  7422                           ;MotorDrive.c: 2607:             load_pos++;
  7423  0712  3001               	movlw	1
  7424  0713  07CC               	addwf	VerifyHandPosition_LoadPosition@load_pos,f
  7425  0714  3000               	movlw	0
  7426  0715  3DCD               	addwfc	VerifyHandPosition_LoadPosition@load_pos+1,f
  7427                           
  7428                           ;MotorDrive.c: 2608:             if (load_pos >= TblMaxSteps[ motor_no ]) {
  7429  0716  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7430  0717  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7431  0718  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7432  0719  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7433  071A  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7434  071B  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7435  071C  073E               	addwf	??_VerifyHandPosition_LoadPosition,w
  7436  071D  0084               	movwf	4
  7437  071E  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7438  071F  3D3F               	addwfc	??_VerifyHandPosition_LoadPosition+1,w
  7439  0720  0085               	movwf	5
  7440  0721  3F00               	moviw [0]fsr0
  7441  0722  00C0               	movwf	??_VerifyHandPosition_LoadPosition+2
  7442  0723  3F01               	moviw [1]fsr0
  7443  0724  00C1               	movwf	??_VerifyHandPosition_LoadPosition+3
  7444  0725  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7445  0726  3A80               	xorlw	128
  7446  0727  00C2               	movwf	??_VerifyHandPosition_LoadPosition+4
  7447  0728  0841               	movf	??_VerifyHandPosition_LoadPosition+3,w
  7448  0729  3A80               	xorlw	128
  7449  072A  0242               	subwf	??_VerifyHandPosition_LoadPosition+4,w
  7450  072B  1D03               	skipz
  7451  072C  2F2F               	goto	u5385
  7452  072D  0840               	movf	??_VerifyHandPosition_LoadPosition+2,w
  7453  072E  024C               	subwf	VerifyHandPosition_LoadPosition@load_pos,w
  7454  072F                     u5385:
  7455  072F  1C03               	skipc
  7456  0730  2F34               	goto	l6612
  7457                           
  7458                           ;MotorDrive.c: 2609:                 load_pos = 0;
  7459  0731  0020               	movlb	0	; select bank0
  7460  0732  01CC               	clrf	VerifyHandPosition_LoadPosition@load_pos
  7461  0733  01CD               	clrf	VerifyHandPosition_LoadPosition@load_pos+1
  7462  0734                     l6612:
  7463                           
  7464                           ;MotorDrive.c: 2612:             if (curt_pos == load_pos) {
  7465  0734  0020               	movlb	0	; select bank0
  7466  0735  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7467  0736  064A               	xorwf	VerifyHandPosition_LoadPosition@curt_pos+1,w
  7468  0737  1D03               	skipz
  7469  0738  2F3B               	goto	u5395
  7470  0739  084C               	movf	VerifyHandPosition_LoadPosition@load_pos,w
  7471  073A  0649               	xorwf	VerifyHandPosition_LoadPosition@curt_pos,w
  7472  073B                     u5395:
  7473  073B  1903               	btfsc	3,2
  7474  073C  2F78               	goto	l6602
  7475  073D                     l6616:
  7476                           
  7477                           ;MotorDrive.c: 2618:     }
  7478  073D  3001               	movlw	1
  7479  073E  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7480  073F  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7481  0740  07CB               	addwf	VerifyHandPosition_LoadPosition@i,f
  7482  0741                     l6618:
  7483  0741  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7484  0742  3EB6               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  7485  0743  0086               	movwf	6
  7486  0744  0187               	clrf	7
  7487  0745  0801               	movf	1,w
  7488  0746  024B               	subwf	VerifyHandPosition_LoadPosition@i,w
  7489  0747  1803               	btfsc	3,0
  7490  0748  2F79               	goto	l6620
  7491                           
  7492                           ;MotorDrive.c: 2597:         load_pos = loadPosition[ motor_no ][ i ];
  7493  0749  084B               	movf	VerifyHandPosition_LoadPosition@i,w
  7494  074A  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7495  074B  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7496  074C  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7497  074D  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7498  074E  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7499  074F  00C0               	movwf	??_VerifyHandPosition_LoadPosition+2
  7500  0750  01C1               	clrf	??_VerifyHandPosition_LoadPosition+3
  7501  0751  0840               	movf	??_VerifyHandPosition_LoadPosition+2,w
  7502  0752  00A0               	movwf	___wmul@multiplier
  7503  0753  0841               	movf	??_VerifyHandPosition_LoadPosition+3,w
  7504  0754  00A1               	movwf	___wmul@multiplier+1
  7505  0755  302E               	movlw	46
  7506  0756  00A2               	movwf	___wmul@multiplicand
  7507  0757  3000               	movlw	0
  7508  0758  00A3               	movwf	___wmul@multiplicand+1
  7509  0759  3195  2568  3186   	fcall	___wmul
  7510  075C  3038               	movlw	56
  7511  075D  00C2               	movwf	??_VerifyHandPosition_LoadPosition+4
  7512  075E  3021               	movlw	33
  7513  075F  00C3               	movwf	??_VerifyHandPosition_LoadPosition+5
  7514  0760  0820               	movf	?___wmul,w
  7515  0761  0742               	addwf	??_VerifyHandPosition_LoadPosition+4,w
  7516  0762  00C4               	movwf	??_VerifyHandPosition_LoadPosition+6
  7517  0763  0821               	movf	?___wmul+1,w
  7518  0764  3D43               	addwfc	??_VerifyHandPosition_LoadPosition+5,w
  7519  0765  00C5               	movwf	??_VerifyHandPosition_LoadPosition+7
  7520  0766  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7521  0767  0744               	addwf	??_VerifyHandPosition_LoadPosition+6,w
  7522  0768  0086               	movwf	6
  7523  0769  083F               	movf	??_VerifyHandPosition_LoadPosition+1,w
  7524  076A  3D45               	addwfc	??_VerifyHandPosition_LoadPosition+7,w
  7525  076B  0087               	movwf	7
  7526  076C  3F40               	moviw [0]fsr1
  7527  076D  00CC               	movwf	VerifyHandPosition_LoadPosition@load_pos
  7528  076E  3F41               	moviw [1]fsr1
  7529  076F  00CD               	movwf	VerifyHandPosition_LoadPosition@load_pos+1
  7530                           
  7531                           ;MotorDrive.c: 2599:         if (curt_pos == load_pos) {
  7532  0770  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7533  0771  064A               	xorwf	VerifyHandPosition_LoadPosition@curt_pos+1,w
  7534  0772  1D03               	skipz
  7535  0773  2F76               	goto	u5365
  7536  0774  084C               	movf	VerifyHandPosition_LoadPosition@load_pos,w
  7537  0775  0649               	xorwf	VerifyHandPosition_LoadPosition@curt_pos,w
  7538  0776                     u5365:
  7539  0776  1D03               	skipz
  7540  0777  2F00               	goto	l6604
  7541  0778                     l6602:
  7542                           
  7543                           ;MotorDrive.c: 2601:             misalignment_flag = 0;
  7544  0778  01C8               	clrf	VerifyHandPosition_LoadPosition@misalignment_flag
  7545  0779                     l6620:
  7546                           
  7547                           ;MotorDrive.c: 2620:     if (misalignment_flag) {
  7548  0779  0848               	movf	VerifyHandPosition_LoadPosition@misalignment_flag,w
  7549  077A  1903               	btfsc	3,2
  7550  077B  2F80               	goto	l6624
  7551                           
  7552                           ;MotorDrive.c: 2624:         SetMotorCorrectPositionStart(motor_no);
  7553  077C  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7554  077D  3197  2745         	fcall	_SetMotorCorrectPositionStart
  7555                           
  7556                           ;MotorDrive.c: 2625:     } else {
  7557  077F  0008               	return
  7558  0780                     l6624:
  7559                           
  7560                           ;MotorDrive.c: 2628:         MoveTargetPosition(motor_no);
  7561  0780  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7562  0781  3193  23D7         	fcall	_MoveTargetPosition
  7563  0783  0008               	return
  7564  0784                     __end_of_VerifyHandPosition_LoadPosition:
  7565                           
  7566                           	psect	text33
  7567  1745                     __ptext33:	
  7568 ;; *************** function _SetMotorCorrectPositionStart *****************
  7569 ;; Defined at:
  7570 ;;		line 1910 in file "MotorDrive.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  motor_no        1    wreg     unsigned char 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  motor_no        1   18[BANK0 ] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 1F/0
  7581 ;;		On exit  : 1F/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7584 ;;      Params:         0       0       0       0       0       0       0       0
  7585 ;;      Locals:         0       1       0       0       0       0       0       0
  7586 ;;      Temps:          0       2       0       0       0       0       0       0
  7587 ;;      Totals:         0       3       0       0       0       0       0       0
  7588 ;;Total ram usage:        3 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:   10
  7591 ;; This function calls:
  7592 ;;		_InitPositionSearch
  7593 ;;		_SetAfterDetectLoadFunc
  7594 ;; This function is called by:
  7595 ;;		_VerifyHandPosition_LoadPosition
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _SetMotorCorrectPositionStart
  7601  1745                     _SetMotorCorrectPositionStart:
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _SetMotorCorrectPositionStart: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7605                           ;SetMotorCorrectPositionStart@motor_no stored from wreg
  7606  1745  00B2               	movwf	SetMotorCorrectPositionStart@motor_no
  7607                           
  7608                           ;MotorDrive.c: 1910: void SetMotorCorrectPositionStart(UB motor_no);MotorDrive.c: 1911: 
      +                          {;MotorDrive.c: 1912:     motorBitOperation = (UB) (0x01 << motor_no);
  7609  1746  3001               	movlw	1
  7610  1747  00B0               	movwf	??_SetMotorCorrectPositionStart
  7611  1748  0A32               	incf	SetMotorCorrectPositionStart@motor_no,w
  7612  1749  2F4B               	goto	u4694
  7613  174A                     u4695:
  7614  174A  35B0               	lslf	??_SetMotorCorrectPositionStart,f
  7615  174B                     u4694:
  7616  174B  0B89               	decfsz	9,f
  7617  174C  2F4A               	goto	u4695
  7618  174D  0830               	movf	??_SetMotorCorrectPositionStart,w
  7619  174E  00B1               	movwf	??_SetMotorCorrectPositionStart+1
  7620  174F  0831               	movf	??_SetMotorCorrectPositionStart+1,w
  7621  1750  00F4               	movwf	_motorBitOperation
  7622                           
  7623                           ;MotorDrive.c: 1914:     reqCorrectBasePosBit |= motorBitOperation;
  7624  1751  0874               	movf	_motorBitOperation,w
  7625  1752  00B0               	movwf	??_SetMotorCorrectPositionStart
  7626  1753  0830               	movf	??_SetMotorCorrectPositionStart,w
  7627  1754  04D4               	iorwf	_reqCorrectBasePosBit,f
  7628                           
  7629                           ;MotorDrive.c: 1915:     reqCorrectFinePoBit |= motorBitOperation;
  7630  1755  0874               	movf	_motorBitOperation,w
  7631  1756  00B0               	movwf	??_SetMotorCorrectPositionStart
  7632  1757  0830               	movf	??_SetMotorCorrectPositionStart,w
  7633  1758  0021               	movlb	1	; select bank1
  7634  1759  04CF               	iorwf	_reqCorrectFinePoBit^(0+128),f
  7635                           
  7636                           ;MotorDrive.c: 1917:     searchTotalSteps[ motor_no ] = 0;
  7637  175A  0020               	movlb	0	; select bank0
  7638  175B  3532               	lslf	SetMotorCorrectPositionStart@motor_no,w
  7639  175C  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  7640  175D  0086               	movwf	6
  7641  175E  3001               	movlw	1	; select bank2/3
  7642  175F  0087               	movwf	7
  7643  1760  3000               	movlw	0
  7644  1761  3FC0               	movwi [0]fsr1
  7645  1762  3FC1               	movwi [1]fsr1
  7646                           
  7647                           ;MotorDrive.c: 1919:     InitPositionSearch(motor_no);
  7648  1763  0832               	movf	SetMotorCorrectPositionStart@motor_no,w
  7649  1764  318E  261A  3197   	fcall	_InitPositionSearch
  7650                           
  7651                           ;MotorDrive.c: 1921:     SetAfterDetectLoadFunc(motor_no, AfterDetectedLoadPosition);
  7652  1767  305D               	movlw	low _AfterDetectedLoadPosition
  7653  1768  00A0               	movwf	SetAfterDetectLoadFunc@func
  7654  1769  3000               	movlw	high _AfterDetectedLoadPosition
  7655  176A  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  7656  176B  0832               	movf	SetMotorCorrectPositionStart@motor_no,w
  7657  176C  3190  20BD         	fcall	_SetAfterDetectLoadFunc
  7658  176E  0008               	return
  7659  176F                     __end_of_SetMotorCorrectPositionStart:
  7660                           
  7661                           	psect	text34
  7662  0CF7                     __ptext34:	
  7663 ;; *************** function _UpdateCurrentPositionByFinePosition *****************
  7664 ;; Defined at:
  7665 ;;		line 2457 in file "MotorDrive.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  motor_no        1    wreg     unsigned char 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  motor_no        1   17[BANK0 ] unsigned char 
  7670 ;;  diff            2   14[BANK0 ] short 
  7671 ;;  revise_pos      2    0        short 
  7672 ;;  i               1   16[BANK0 ] unsigned char 
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7677 ;; Tracked objects:
  7678 ;;		On entry : 1F/0
  7679 ;;		On exit  : 1F/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7682 ;;      Params:         0       0       0       0       0       0       0       0
  7683 ;;      Locals:         0       4       0       0       0       0       0       0
  7684 ;;      Temps:          0       8       0       0       0       0       0       0
  7685 ;;      Totals:         0      12       0       0       0       0       0       0
  7686 ;;Total ram usage:       12 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; Hardware stack levels required when called:    9
  7689 ;; This function calls:
  7690 ;;		___bmul
  7691 ;;		___wmul
  7692 ;; This function is called by:
  7693 ;;		_AfterDetectedLoadPosition
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _UpdateCurrentPositionByFinePosition
  7699  0CF7                     _UpdateCurrentPositionByFinePosition:
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _UpdateCurrentPositionByFinePosition: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7703                           ;UpdateCurrentPositionByFinePosition@motor_no stored from wreg
  7704  0CF7  00B1               	movwf	UpdateCurrentPositionByFinePosition@motor_no
  7705                           
  7706                           ;MotorDrive.c: 2457: void UpdateCurrentPositionByFinePosition(UB motor_no);MotorDrive.c:
      +                           2458: {;MotorDrive.c: 2459:     UB i;;MotorDrive.c: 2460:     H revise_pos;;MotorDrive.
      +                          c: 2461:     H diff;;MotorDrive.c: 2463:     for (i = 0; i < loadPositionIndex[ motor_no
      +                           ]; i++) {
  7707  0CF8  01B0               	clrf	UpdateCurrentPositionByFinePosition@i
  7708  0CF9                     l6320:
  7709  0CF9  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7710  0CFA  3EB6               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  7711  0CFB  0086               	movwf	6
  7712  0CFC  0187               	clrf	7
  7713  0CFD  0801               	movf	1,w
  7714  0CFE  0230               	subwf	UpdateCurrentPositionByFinePosition@i,w
  7715  0CFF  1803               	btfsc	3,0
  7716  0D00  0008               	return
  7717                           
  7718                           ;MotorDrive.c: 2465:         if (ID_DETECT_LOAD_FINE == loadPositionType[ motor_no ][ i 
      +                          ]) {
  7719  0D01  3017               	movlw	23
  7720  0D02  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7721  0D03  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7722  0D04  00A0               	movwf	___bmul@multiplicand
  7723  0D05  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7724  0D06  3192  22DC  318C   	fcall	___bmul
  7725  0D09  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  7726  0D0A  0730               	addwf	UpdateCurrentPositionByFinePosition@i,w
  7727  0D0B  00A7               	movwf	??_UpdateCurrentPositionByFinePosition+1
  7728  0D0C  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7729  0D0D  0086               	movwf	6
  7730  0D0E  3001               	movlw	1	; select bank3/4
  7731  0D0F  0087               	movwf	7
  7732  0D10  0301               	decf	1,w
  7733  0D11  1D03               	btfss	3,2
  7734  0D12  2D7F               	goto	l6318
  7735                           
  7736                           ;MotorDrive.c: 2466:             diff = currentPosition[ motor_no ] - loadPosition[ moto
      +                          r_no ][ i ];
  7737  0D13  0830               	movf	UpdateCurrentPositionByFinePosition@i,w
  7738  0D14  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7739  0D15  01A7               	clrf	??_UpdateCurrentPositionByFinePosition+1
  7740  0D16  35A6               	lslf	??_UpdateCurrentPositionByFinePosition,f
  7741  0D17  0DA7               	rlf	??_UpdateCurrentPositionByFinePosition+1,f
  7742  0D18  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7743  0D19  00A8               	movwf	??_UpdateCurrentPositionByFinePosition+2
  7744  0D1A  01A9               	clrf	??_UpdateCurrentPositionByFinePosition+3
  7745  0D1B  0828               	movf	??_UpdateCurrentPositionByFinePosition+2,w
  7746  0D1C  00A0               	movwf	___wmul@multiplier
  7747  0D1D  0829               	movf	??_UpdateCurrentPositionByFinePosition+3,w
  7748  0D1E  00A1               	movwf	___wmul@multiplier+1
  7749  0D1F  302E               	movlw	46
  7750  0D20  00A2               	movwf	___wmul@multiplicand
  7751  0D21  3000               	movlw	0
  7752  0D22  00A3               	movwf	___wmul@multiplicand+1
  7753  0D23  3195  2568  318C   	fcall	___wmul
  7754  0D26  3038               	movlw	56
  7755  0D27  00AA               	movwf	??_UpdateCurrentPositionByFinePosition+4
  7756  0D28  3021               	movlw	33
  7757  0D29  00AB               	movwf	??_UpdateCurrentPositionByFinePosition+5
  7758  0D2A  0820               	movf	?___wmul,w
  7759  0D2B  072A               	addwf	??_UpdateCurrentPositionByFinePosition+4,w
  7760  0D2C  00AC               	movwf	??_UpdateCurrentPositionByFinePosition+6
  7761  0D2D  0821               	movf	?___wmul+1,w
  7762  0D2E  3D2B               	addwfc	??_UpdateCurrentPositionByFinePosition+5,w
  7763  0D2F  00AD               	movwf	??_UpdateCurrentPositionByFinePosition+7
  7764  0D30  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7765  0D31  072C               	addwf	??_UpdateCurrentPositionByFinePosition+6,w
  7766  0D32  0086               	movwf	6
  7767  0D33  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7768  0D34  3D2D               	addwfc	??_UpdateCurrentPositionByFinePosition+7,w
  7769  0D35  0087               	movwf	7
  7770  0D36  3531               	lslf	UpdateCurrentPositionByFinePosition@motor_no,w
  7771  0D37  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7772  0D38  0084               	movwf	4
  7773  0D39  0185               	clrf	5
  7774  0D3A  3F40               	moviw [0]fsr1
  7775  0D3B  0200               	subwf	0,w
  7776  0D3C  00AE               	movwf	UpdateCurrentPositionByFinePosition@diff
  7777  0D3D  3101               	addfsr 0,1
  7778  0D3E  3F41               	moviw [1]fsr1
  7779  0D3F  3B00               	subwfb	0,w
  7780  0D40  00AF               	movwf	UpdateCurrentPositionByFinePosition@diff+1
  7781                           
  7782                           ;MotorDrive.c: 2468:             if (diff < 0) {
  7783  0D41  1FAF               	btfss	UpdateCurrentPositionByFinePosition@diff+1,7
  7784  0D42  2D48               	goto	l6314
  7785                           
  7786                           ;MotorDrive.c: 2469:                 diff = -diff;
  7787  0D43  09AE               	comf	UpdateCurrentPositionByFinePosition@diff,f
  7788  0D44  09AF               	comf	UpdateCurrentPositionByFinePosition@diff+1,f
  7789  0D45  0AAE               	incf	UpdateCurrentPositionByFinePosition@diff,f
  7790  0D46  1903               	skipnz
  7791  0D47  0AAF               	incf	UpdateCurrentPositionByFinePosition@diff+1,f
  7792  0D48                     l6314:
  7793                           
  7794                           ;MotorDrive.c: 2472:             if (diff <= 22) {
  7795  0D48  082F               	movf	UpdateCurrentPositionByFinePosition@diff+1,w
  7796  0D49  3A80               	xorlw	128
  7797  0D4A  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7798  0D4B  3080               	movlw	128
  7799  0D4C  0226               	subwf	??_UpdateCurrentPositionByFinePosition,w
  7800  0D4D  1D03               	skipz
  7801  0D4E  2D51               	goto	u4805
  7802  0D4F  3017               	movlw	23
  7803  0D50  022E               	subwf	UpdateCurrentPositionByFinePosition@diff,w
  7804  0D51                     u4805:
  7805  0D51  1803               	skipnc
  7806  0D52  2D7F               	goto	l6318
  7807                           
  7808                           ;MotorDrive.c: 2473:                 currentPosition[ motor_no ] = loadPosition[ motor_n
      +                          o ][ i ];
  7809  0D53  0020               	movlb	0	; select bank0
  7810  0D54  0830               	movf	UpdateCurrentPositionByFinePosition@i,w
  7811  0D55  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7812  0D56  01A7               	clrf	??_UpdateCurrentPositionByFinePosition+1
  7813  0D57  35A6               	lslf	??_UpdateCurrentPositionByFinePosition,f
  7814  0D58  0DA7               	rlf	??_UpdateCurrentPositionByFinePosition+1,f
  7815  0D59  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7816  0D5A  00A8               	movwf	??_UpdateCurrentPositionByFinePosition+2
  7817  0D5B  01A9               	clrf	??_UpdateCurrentPositionByFinePosition+3
  7818  0D5C  0828               	movf	??_UpdateCurrentPositionByFinePosition+2,w
  7819  0D5D  00A0               	movwf	___wmul@multiplier
  7820  0D5E  0829               	movf	??_UpdateCurrentPositionByFinePosition+3,w
  7821  0D5F  00A1               	movwf	___wmul@multiplier+1
  7822  0D60  302E               	movlw	46
  7823  0D61  00A2               	movwf	___wmul@multiplicand
  7824  0D62  3000               	movlw	0
  7825  0D63  00A3               	movwf	___wmul@multiplicand+1
  7826  0D64  3195  2568         	fcall	___wmul
  7827  0D66  3038               	movlw	56
  7828  0D67  00AA               	movwf	??_UpdateCurrentPositionByFinePosition+4
  7829  0D68  3021               	movlw	33
  7830  0D69  00AB               	movwf	??_UpdateCurrentPositionByFinePosition+5
  7831  0D6A  0820               	movf	?___wmul,w
  7832  0D6B  072A               	addwf	??_UpdateCurrentPositionByFinePosition+4,w
  7833  0D6C  00AC               	movwf	??_UpdateCurrentPositionByFinePosition+6
  7834  0D6D  0821               	movf	?___wmul+1,w
  7835  0D6E  3D2B               	addwfc	??_UpdateCurrentPositionByFinePosition+5,w
  7836  0D6F  00AD               	movwf	??_UpdateCurrentPositionByFinePosition+7
  7837  0D70  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7838  0D71  072C               	addwf	??_UpdateCurrentPositionByFinePosition+6,w
  7839  0D72  0086               	movwf	6
  7840  0D73  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7841  0D74  3D2D               	addwfc	??_UpdateCurrentPositionByFinePosition+7,w
  7842  0D75  0087               	movwf	7
  7843  0D76  3531               	lslf	UpdateCurrentPositionByFinePosition@motor_no,w
  7844  0D77  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7845  0D78  0084               	movwf	4
  7846  0D79  0185               	clrf	5
  7847  0D7A  3F40               	moviw [0]fsr1
  7848  0D7B  3F80               	movwi [0]fsr0
  7849  0D7C  3F41               	moviw [1]fsr1
  7850  0D7D  3F81               	movwi [1]fsr0
  7851                           
  7852                           ;MotorDrive.c: 2474:                 break;
  7853  0D7E  0008               	return
  7854  0D7F                     l6318:
  7855                           
  7856                           ;MotorDrive.c: 2477:     }
  7857  0D7F  3001               	movlw	1
  7858  0D80  0020               	movlb	0	; select bank0
  7859  0D81  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7860  0D82  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7861  0D83  07B0               	addwf	UpdateCurrentPositionByFinePosition@i,f
  7862  0D84  2CF9               	goto	l6320
  7863  0D85                     __end_of_UpdateCurrentPositionByFinePosition:
  7864                           
  7865                           	psect	text35
  7866  0EBA                     __ptext35:	
  7867 ;; *************** function _UpdataHandPosition *****************
  7868 ;; Defined at:
  7869 ;;		line 2425 in file "MotorDrive.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  motor_no        1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  motor_no        1   24[BANK0 ] unsigned char 
  7874 ;;  i               1   23[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 1F/0
  7881 ;;		On exit  : 1F/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7884 ;;      Params:         0       0       0       0       0       0       0       0
  7885 ;;      Locals:         0       2       0       0       0       0       0       0
  7886 ;;      Temps:          0      10       0       0       0       0       0       0
  7887 ;;      Totals:         0      12       0       0       0       0       0       0
  7888 ;;Total ram usage:       12 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    9
  7891 ;; This function calls:
  7892 ;;		_CorrectPosition
  7893 ;;		___wmul
  7894 ;; This function is called by:
  7895 ;;		_AfterDetectedLoadPosition
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _UpdataHandPosition
  7901  0EBA                     _UpdataHandPosition:
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in _UpdataHandPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7905                           ;UpdataHandPosition@motor_no stored from wreg
  7906  0EBA  00B8               	movwf	UpdataHandPosition@motor_no
  7907                           
  7908                           ;MotorDrive.c: 2425: void UpdataHandPosition(UB motor_no);MotorDrive.c: 2426: {;MotorDri
      +                          ve.c: 2427:     UB i;;MotorDrive.c: 2429:     currentPosition[ motor_no ] -= detectBaseP
      +                          osition[ motor_no ];
  7909  0EBB  3538               	lslf	UpdataHandPosition@motor_no,w
  7910  0EBC  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  7911  0EBD  0086               	movwf	6
  7912  0EBE  3001               	movlw	1	; select bank2/3
  7913  0EBF  0087               	movwf	7
  7914  0EC0  3F40               	moviw [0]fsr1
  7915  0EC1  00AD               	movwf	??_UpdataHandPosition
  7916  0EC2  3F41               	moviw [1]fsr1
  7917  0EC3  00AE               	movwf	??_UpdataHandPosition+1
  7918  0EC4  3538               	lslf	UpdataHandPosition@motor_no,w
  7919  0EC5  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7920  0EC6  0086               	movwf	6
  7921  0EC7  0187               	clrf	7
  7922  0EC8  082D               	movf	??_UpdataHandPosition,w
  7923  0EC9  0281               	subwf	1,f
  7924  0ECA  3141               	addfsr 1,1
  7925  0ECB  082E               	movf	??_UpdataHandPosition+1,w
  7926  0ECC  3B81               	subwfb	1,f
  7927  0ECD  317F               	addfsr 1,-1
  7928                           
  7929                           ;MotorDrive.c: 2430:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
  7930  0ECE  3538               	lslf	UpdataHandPosition@motor_no,w
  7931  0ECF  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7932  0ED0  00A6               	movwf	CorrectPosition@pos
  7933  0ED1  3000               	movlw	0
  7934  0ED2  00A7               	movwf	CorrectPosition@pos+1
  7935  0ED3  0838               	movf	UpdataHandPosition@motor_no,w
  7936  0ED4  00AD               	movwf	??_UpdataHandPosition
  7937  0ED5  01AE               	clrf	??_UpdataHandPosition+1
  7938  0ED6  35AD               	lslf	??_UpdataHandPosition,f
  7939  0ED7  0DAE               	rlf	??_UpdataHandPosition+1,f
  7940  0ED8  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7941  0ED9  072D               	addwf	??_UpdataHandPosition,w
  7942  0EDA  0084               	movwf	4
  7943  0EDB  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7944  0EDC  3D2E               	addwfc	??_UpdataHandPosition+1,w
  7945  0EDD  0085               	movwf	5
  7946  0EDE  3F00               	moviw [0]fsr0
  7947  0EDF  00A8               	movwf	CorrectPosition@max
  7948  0EE0  3F01               	moviw [1]fsr0
  7949  0EE1  00A9               	movwf	CorrectPosition@max+1
  7950  0EE2  3188  200B  318E   	fcall	_CorrectPosition
  7951                           
  7952                           ;MotorDrive.c: 2432:     for (i = 0; i < detectLoadPositionIndex[ motor_no ]; i++) {
  7953  0EE5  01B7               	clrf	UpdataHandPosition@i
  7954  0EE6                     l6280:
  7955  0EE6  0838               	movf	UpdataHandPosition@motor_no,w
  7956  0EE7  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  7957  0EE8  0086               	movwf	6
  7958  0EE9  0187               	clrf	7
  7959  0EEA  0801               	movf	1,w
  7960  0EEB  0237               	subwf	UpdataHandPosition@i,w
  7961  0EEC  1803               	btfsc	3,0
  7962  0EED  0008               	return
  7963                           
  7964                           ;MotorDrive.c: 2434:         detectLoadPosition[ motor_no ][ i ] -= detectBasePosition[ 
      +                          motor_no ];
  7965  0EEE  3538               	lslf	UpdataHandPosition@motor_no,w
  7966  0EEF  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  7967  0EF0  0086               	movwf	6
  7968  0EF1  3001               	movlw	1	; select bank2/3
  7969  0EF2  0087               	movwf	7
  7970  0EF3  3F40               	moviw [0]fsr1
  7971  0EF4  00AD               	movwf	??_UpdataHandPosition
  7972  0EF5  3F41               	moviw [1]fsr1
  7973  0EF6  00AE               	movwf	??_UpdataHandPosition+1
  7974  0EF7  0837               	movf	UpdataHandPosition@i,w
  7975  0EF8  00AF               	movwf	??_UpdataHandPosition+2
  7976  0EF9  01B0               	clrf	??_UpdataHandPosition+3
  7977  0EFA  35AF               	lslf	??_UpdataHandPosition+2,f
  7978  0EFB  0DB0               	rlf	??_UpdataHandPosition+3,f
  7979  0EFC  0838               	movf	UpdataHandPosition@motor_no,w
  7980  0EFD  00B1               	movwf	??_UpdataHandPosition+4
  7981  0EFE  01B2               	clrf	??_UpdataHandPosition+5
  7982  0EFF  0831               	movf	??_UpdataHandPosition+4,w
  7983  0F00  00A0               	movwf	___wmul@multiplier
  7984  0F01  0832               	movf	??_UpdataHandPosition+5,w
  7985  0F02  00A1               	movwf	___wmul@multiplier+1
  7986  0F03  302E               	movlw	46
  7987  0F04  00A2               	movwf	___wmul@multiplicand
  7988  0F05  3000               	movlw	0
  7989  0F06  00A3               	movwf	___wmul@multiplicand+1
  7990  0F07  3195  2568  318E   	fcall	___wmul
  7991  0F0A  3094               	movlw	148
  7992  0F0B  00B3               	movwf	??_UpdataHandPosition+6
  7993  0F0C  3021               	movlw	33
  7994  0F0D  00B4               	movwf	??_UpdataHandPosition+7
  7995  0F0E  0820               	movf	?___wmul,w
  7996  0F0F  0733               	addwf	??_UpdataHandPosition+6,w
  7997  0F10  00B5               	movwf	??_UpdataHandPosition+8
  7998  0F11  0821               	movf	?___wmul+1,w
  7999  0F12  3D34               	addwfc	??_UpdataHandPosition+7,w
  8000  0F13  00B6               	movwf	??_UpdataHandPosition+9
  8001  0F14  082F               	movf	??_UpdataHandPosition+2,w
  8002  0F15  0735               	addwf	??_UpdataHandPosition+8,w
  8003  0F16  0086               	movwf	6
  8004  0F17  0830               	movf	??_UpdataHandPosition+3,w
  8005  0F18  3D36               	addwfc	??_UpdataHandPosition+9,w
  8006  0F19  0087               	movwf	7
  8007  0F1A  082D               	movf	??_UpdataHandPosition,w
  8008  0F1B  0281               	subwf	1,f
  8009  0F1C  3141               	addfsr 1,1
  8010  0F1D  082E               	movf	??_UpdataHandPosition+1,w
  8011  0F1E  3B81               	subwfb	1,f
  8012  0F1F  317F               	addfsr 1,-1
  8013                           
  8014                           ;MotorDrive.c: 2435:         CorrectPosition(&detectLoadPosition[ motor_no ][ i ], TblMa
      +                          xSteps[ motor_no ]);
  8015  0F20  0837               	movf	UpdataHandPosition@i,w
  8016  0F21  00AD               	movwf	??_UpdataHandPosition
  8017  0F22  01AE               	clrf	??_UpdataHandPosition+1
  8018  0F23  35AD               	lslf	??_UpdataHandPosition,f
  8019  0F24  0DAE               	rlf	??_UpdataHandPosition+1,f
  8020  0F25  0838               	movf	UpdataHandPosition@motor_no,w
  8021  0F26  00AF               	movwf	??_UpdataHandPosition+2
  8022  0F27  01B0               	clrf	??_UpdataHandPosition+3
  8023  0F28  082F               	movf	??_UpdataHandPosition+2,w
  8024  0F29  00A0               	movwf	___wmul@multiplier
  8025  0F2A  0830               	movf	??_UpdataHandPosition+3,w
  8026  0F2B  00A1               	movwf	___wmul@multiplier+1
  8027  0F2C  302E               	movlw	46
  8028  0F2D  00A2               	movwf	___wmul@multiplicand
  8029  0F2E  3000               	movlw	0
  8030  0F2F  00A3               	movwf	___wmul@multiplicand+1
  8031  0F30  3195  2568  318E   	fcall	___wmul
  8032  0F33  3094               	movlw	148
  8033  0F34  00B1               	movwf	??_UpdataHandPosition+4
  8034  0F35  3021               	movlw	33
  8035  0F36  00B2               	movwf	??_UpdataHandPosition+5
  8036  0F37  0820               	movf	?___wmul,w
  8037  0F38  0731               	addwf	??_UpdataHandPosition+4,w
  8038  0F39  00B3               	movwf	??_UpdataHandPosition+6
  8039  0F3A  0821               	movf	?___wmul+1,w
  8040  0F3B  3D32               	addwfc	??_UpdataHandPosition+5,w
  8041  0F3C  00B4               	movwf	??_UpdataHandPosition+7
  8042  0F3D  082D               	movf	??_UpdataHandPosition,w
  8043  0F3E  0733               	addwf	??_UpdataHandPosition+6,w
  8044  0F3F  00A6               	movwf	CorrectPosition@pos
  8045  0F40  082E               	movf	??_UpdataHandPosition+1,w
  8046  0F41  3D34               	addwfc	??_UpdataHandPosition+7,w
  8047  0F42  00A7               	movwf	CorrectPosition@pos+1
  8048  0F43  0838               	movf	UpdataHandPosition@motor_no,w
  8049  0F44  00B5               	movwf	??_UpdataHandPosition+8
  8050  0F45  01B6               	clrf	??_UpdataHandPosition+9
  8051  0F46  35B5               	lslf	??_UpdataHandPosition+8,f
  8052  0F47  0DB6               	rlf	??_UpdataHandPosition+9,f
  8053  0F48  3056               	movlw	low (_TblMaxSteps| (0+32768))
  8054  0F49  0735               	addwf	??_UpdataHandPosition+8,w
  8055  0F4A  0084               	movwf	4
  8056  0F4B  3098               	movlw	high (_TblMaxSteps| (0+32768))
  8057  0F4C  3D36               	addwfc	??_UpdataHandPosition+9,w
  8058  0F4D  0085               	movwf	5
  8059  0F4E  3F00               	moviw [0]fsr0
  8060  0F4F  00A8               	movwf	CorrectPosition@max
  8061  0F50  3F01               	moviw [1]fsr0
  8062  0F51  00A9               	movwf	CorrectPosition@max+1
  8063  0F52  3188  200B  318E   	fcall	_CorrectPosition
  8064                           
  8065                           ;MotorDrive.c: 2437:     }
  8066  0F55  3001               	movlw	1
  8067  0F56  00AD               	movwf	??_UpdataHandPosition
  8068  0F57  082D               	movf	??_UpdataHandPosition,w
  8069  0F58  07B7               	addwf	UpdataHandPosition@i,f
  8070  0F59  2EE6               	goto	l6280
  8071  0F5A                     __end_of_UpdataHandPosition:
  8072                           
  8073                           	psect	text36
  8074  12ED                     __ptext36:	
  8075 ;; *************** function _SetMotorBitMotorNo *****************
  8076 ;; Defined at:
  8077 ;;		line 2657 in file "MotorDrive.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  motor_no        1    wreg     unsigned char 
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  motor_no        1    2[BANK0 ] unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 1F/0
  8088 ;;		On exit  : 1F/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8091 ;;      Params:         0       0       0       0       0       0       0       0
  8092 ;;      Locals:         0       1       0       0       0       0       0       0
  8093 ;;      Temps:          0       2       0       0       0       0       0       0
  8094 ;;      Totals:         0       3       0       0       0       0       0       0
  8095 ;;Total ram usage:        3 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    8
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_AfterDetectedLoadPosition
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function _SetMotorBitMotorNo
  8107  12ED                     _SetMotorBitMotorNo:
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in _SetMotorBitMotorNo: [wreg+status,2+status,0]
  8111                           ;SetMotorBitMotorNo@motor_no stored from wreg
  8112  12ED  00A2               	movwf	SetMotorBitMotorNo@motor_no
  8113                           
  8114                           ;MotorDrive.c: 2657: void SetMotorBitMotorNo(UB motor_no);MotorDrive.c: 2658: {;MotorDri
      +                          ve.c: 2659:     motorNoOperation = motor_no;
  8115  12EE  0822               	movf	SetMotorBitMotorNo@motor_no,w
  8116  12EF  00A0               	movwf	??_SetMotorBitMotorNo
  8117  12F0  0820               	movf	??_SetMotorBitMotorNo,w
  8118  12F1  00EB               	movwf	_motorNoOperation
  8119                           
  8120                           ;MotorDrive.c: 2660:     motorBitOperation = (UB) (0x01 << motor_no);
  8121  12F2  3001               	movlw	1
  8122  12F3  00A0               	movwf	??_SetMotorBitMotorNo
  8123  12F4  0A22               	incf	SetMotorBitMotorNo@motor_no,w
  8124  12F5  2AF7               	goto	u4714
  8125  12F6                     u4715:
  8126  12F6  35A0               	lslf	??_SetMotorBitMotorNo,f
  8127  12F7                     u4714:
  8128  12F7  0B89               	decfsz	9,f
  8129  12F8  2AF6               	goto	u4715
  8130  12F9  0820               	movf	??_SetMotorBitMotorNo,w
  8131  12FA  00A1               	movwf	??_SetMotorBitMotorNo+1
  8132  12FB  0821               	movf	??_SetMotorBitMotorNo+1,w
  8133  12FC  00F4               	movwf	_motorBitOperation
  8134  12FD  0008               	return
  8135  12FE                     __end_of_SetMotorBitMotorNo:
  8136                           
  8137                           	psect	text37
  8138  0C74                     __ptext37:	
  8139 ;; *************** function _SaveLoadPosition *****************
  8140 ;; Defined at:
  8141 ;;		line 2489 in file "MotorDrive.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;  motor_no        1    wreg     unsigned char 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  motor_no        1   22[BANK0 ] unsigned char 
  8146 ;;  i               1   23[BANK0 ] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 1F/0
  8153 ;;		On exit  : 1F/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8156 ;;      Params:         0       0       0       0       0       0       0       0
  8157 ;;      Locals:         0       2       0       0       0       0       0       0
  8158 ;;      Temps:          0      16       0       0       0       0       0       0
  8159 ;;      Totals:         0      18       0       0       0       0       0       0
  8160 ;;Total ram usage:       18 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    9
  8163 ;; This function calls:
  8164 ;;		___bmul
  8165 ;;		___wmul
  8166 ;; This function is called by:
  8167 ;;		_AfterDetectedLoadPosition
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           
  8172                           ;psect for function _SaveLoadPosition
  8173  0C74                     _SaveLoadPosition:
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _SaveLoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8177                           ;SaveLoadPosition@motor_no stored from wreg
  8178  0C74  00B6               	movwf	SaveLoadPosition@motor_no
  8179                           
  8180                           ;MotorDrive.c: 2489: void SaveLoadPosition(UB motor_no);MotorDrive.c: 2490: {;MotorDrive
      +                          .c: 2491:     UB i;;MotorDrive.c: 2493:     for (i = 0; i < ( ( ( 8 * 2 ) + ( 1 * 9 ) ) 
      +                          - 2 ); i++) {
  8181  0C75  01B7               	clrf	SaveLoadPosition@i
  8182  0C76                     l6288:
  8183                           
  8184                           ;MotorDrive.c: 2494:         loadPosition[ motor_no ][ i ] = detectLoadPosition[ motor_n
      +                          o ][ i ];
  8185  0C76  0837               	movf	SaveLoadPosition@i,w
  8186  0C77  00A6               	movwf	??_SaveLoadPosition
  8187  0C78  01A7               	clrf	??_SaveLoadPosition+1
  8188  0C79  35A6               	lslf	??_SaveLoadPosition,f
  8189  0C7A  0DA7               	rlf	??_SaveLoadPosition+1,f
  8190  0C7B  0836               	movf	SaveLoadPosition@motor_no,w
  8191  0C7C  00A8               	movwf	??_SaveLoadPosition+2
  8192  0C7D  01A9               	clrf	??_SaveLoadPosition+3
  8193  0C7E  0828               	movf	??_SaveLoadPosition+2,w
  8194  0C7F  00A0               	movwf	___wmul@multiplier
  8195  0C80  0829               	movf	??_SaveLoadPosition+3,w
  8196  0C81  00A1               	movwf	___wmul@multiplier+1
  8197  0C82  302E               	movlw	46
  8198  0C83  00A2               	movwf	___wmul@multiplicand
  8199  0C84  3000               	movlw	0
  8200  0C85  00A3               	movwf	___wmul@multiplicand+1
  8201  0C86  3195  2568  318C   	fcall	___wmul
  8202  0C89  3094               	movlw	148
  8203  0C8A  00AA               	movwf	??_SaveLoadPosition+4
  8204  0C8B  3021               	movlw	33
  8205  0C8C  00AB               	movwf	??_SaveLoadPosition+5
  8206  0C8D  0820               	movf	?___wmul,w
  8207  0C8E  072A               	addwf	??_SaveLoadPosition+4,w
  8208  0C8F  00AC               	movwf	??_SaveLoadPosition+6
  8209  0C90  0821               	movf	?___wmul+1,w
  8210  0C91  3D2B               	addwfc	??_SaveLoadPosition+5,w
  8211  0C92  00AD               	movwf	??_SaveLoadPosition+7
  8212  0C93  0826               	movf	??_SaveLoadPosition,w
  8213  0C94  072C               	addwf	??_SaveLoadPosition+6,w
  8214  0C95  0086               	movwf	6
  8215  0C96  0827               	movf	??_SaveLoadPosition+1,w
  8216  0C97  3D2D               	addwfc	??_SaveLoadPosition+7,w
  8217  0C98  0087               	movwf	7
  8218  0C99  0837               	movf	SaveLoadPosition@i,w
  8219  0C9A  00AE               	movwf	??_SaveLoadPosition+8
  8220  0C9B  01AF               	clrf	??_SaveLoadPosition+9
  8221  0C9C  35AE               	lslf	??_SaveLoadPosition+8,f
  8222  0C9D  0DAF               	rlf	??_SaveLoadPosition+9,f
  8223  0C9E  0836               	movf	SaveLoadPosition@motor_no,w
  8224  0C9F  00B0               	movwf	??_SaveLoadPosition+10
  8225  0CA0  01B1               	clrf	??_SaveLoadPosition+11
  8226  0CA1  0830               	movf	??_SaveLoadPosition+10,w
  8227  0CA2  00A0               	movwf	___wmul@multiplier
  8228  0CA3  0831               	movf	??_SaveLoadPosition+11,w
  8229  0CA4  00A1               	movwf	___wmul@multiplier+1
  8230  0CA5  302E               	movlw	46
  8231  0CA6  00A2               	movwf	___wmul@multiplicand
  8232  0CA7  3000               	movlw	0
  8233  0CA8  00A3               	movwf	___wmul@multiplicand+1
  8234  0CA9  3195  2568  318C   	fcall	___wmul
  8235  0CAC  3038               	movlw	56
  8236  0CAD  00B2               	movwf	??_SaveLoadPosition+12
  8237  0CAE  3021               	movlw	33
  8238  0CAF  00B3               	movwf	??_SaveLoadPosition+13
  8239  0CB0  0820               	movf	?___wmul,w
  8240  0CB1  0732               	addwf	??_SaveLoadPosition+12,w
  8241  0CB2  00B4               	movwf	??_SaveLoadPosition+14
  8242  0CB3  0821               	movf	?___wmul+1,w
  8243  0CB4  3D33               	addwfc	??_SaveLoadPosition+13,w
  8244  0CB5  00B5               	movwf	??_SaveLoadPosition+15
  8245  0CB6  082E               	movf	??_SaveLoadPosition+8,w
  8246  0CB7  0734               	addwf	??_SaveLoadPosition+14,w
  8247  0CB8  0084               	movwf	4
  8248  0CB9  082F               	movf	??_SaveLoadPosition+9,w
  8249  0CBA  3D35               	addwfc	??_SaveLoadPosition+15,w
  8250  0CBB  0085               	movwf	5
  8251  0CBC  3F40               	moviw [0]fsr1
  8252  0CBD  3F80               	movwi [0]fsr0
  8253  0CBE  3F41               	moviw [1]fsr1
  8254  0CBF  3F81               	movwi [1]fsr0
  8255                           
  8256                           ;MotorDrive.c: 2495:         loadPositionType[ motor_no ][ i ] = detectLoadPositionType[
      +                           motor_no ][ i ];
  8257  0CC0  3017               	movlw	23
  8258  0CC1  00A6               	movwf	??_SaveLoadPosition
  8259  0CC2  0826               	movf	??_SaveLoadPosition,w
  8260  0CC3  00A0               	movwf	___bmul@multiplicand
  8261  0CC4  0836               	movf	SaveLoadPosition@motor_no,w
  8262  0CC5  3192  22DC  318C   	fcall	___bmul
  8263  0CC8  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8264  0CC9  0737               	addwf	SaveLoadPosition@i,w
  8265  0CCA  00A7               	movwf	??_SaveLoadPosition+1
  8266  0CCB  0827               	movf	??_SaveLoadPosition+1,w
  8267  0CCC  0086               	movwf	6
  8268  0CCD  3001               	movlw	1	; select bank2/3
  8269  0CCE  0087               	movwf	7
  8270  0CCF  0801               	movf	1,w
  8271  0CD0  00A8               	movwf	??_SaveLoadPosition+2
  8272  0CD1  3017               	movlw	23
  8273  0CD2  00A9               	movwf	??_SaveLoadPosition+3
  8274  0CD3  0829               	movf	??_SaveLoadPosition+3,w
  8275  0CD4  00A0               	movwf	___bmul@multiplicand
  8276  0CD5  0836               	movf	SaveLoadPosition@motor_no,w
  8277  0CD6  3192  22DC  318C   	fcall	___bmul
  8278  0CD9  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  8279  0CDA  0737               	addwf	SaveLoadPosition@i,w
  8280  0CDB  00AA               	movwf	??_SaveLoadPosition+4
  8281  0CDC  082A               	movf	??_SaveLoadPosition+4,w
  8282  0CDD  0086               	movwf	6
  8283  0CDE  3001               	movlw	1	; select bank3/4
  8284  0CDF  0087               	movwf	7
  8285  0CE0  0828               	movf	??_SaveLoadPosition+2,w
  8286  0CE1  0081               	movwf	1
  8287                           
  8288                           ;MotorDrive.c: 2496:     }
  8289  0CE2  3001               	movlw	1
  8290  0CE3  00A6               	movwf	??_SaveLoadPosition
  8291  0CE4  0826               	movf	??_SaveLoadPosition,w
  8292  0CE5  07B7               	addwf	SaveLoadPosition@i,f
  8293  0CE6  3017               	movlw	23
  8294  0CE7  0237               	subwf	SaveLoadPosition@i,w
  8295  0CE8  1C03               	skipc
  8296  0CE9  2C76               	goto	l6288
  8297                           
  8298                           ;MotorDrive.c: 2498:     loadPositionIndex[ motor_no ] = detectLoadPositionIndex[ motor_
      +                          no ];
  8299  0CEA  0836               	movf	SaveLoadPosition@motor_no,w
  8300  0CEB  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  8301  0CEC  0086               	movwf	6
  8302  0CED  0187               	clrf	7
  8303  0CEE  0801               	movf	1,w
  8304  0CEF  00A6               	movwf	??_SaveLoadPosition
  8305  0CF0  0836               	movf	SaveLoadPosition@motor_no,w
  8306  0CF1  3EB6               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  8307  0CF2  0086               	movwf	6
  8308  0CF3  0187               	clrf	7
  8309  0CF4  0826               	movf	??_SaveLoadPosition,w
  8310  0CF5  0081               	movwf	1
  8311  0CF6  0008               	return
  8312  0CF7                     __end_of_SaveLoadPosition:
  8313                           
  8314                           	psect	text38
  8315  13D7                     __ptext38:	
  8316 ;; *************** function _MoveTargetPosition *****************
  8317 ;; Defined at:
  8318 ;;		line 2539 in file "MotorDrive.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  motor_no        1    wreg     unsigned char 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  motor_no        1   28[BANK0 ] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      void 
  8325 ;; Registers used:
  8326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8327 ;; Tracked objects:
  8328 ;;		On entry : 1F/0
  8329 ;;		On exit  : 1F/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8332 ;;      Params:         0       0       0       0       0       0       0       0
  8333 ;;      Locals:         0       1       0       0       0       0       0       0
  8334 ;;      Temps:          0       1       0       0       0       0       0       0
  8335 ;;      Totals:         0       2       0       0       0       0       0       0
  8336 ;;Total ram usage:        2 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:   11
  8339 ;; This function calls:
  8340 ;;		_CalcMotorStepCounter
  8341 ;;		_SetMotorFrequency
  8342 ;;		_SetMotorStart
  8343 ;; This function is called by:
  8344 ;;		_AfterDetectedLoadPosition
  8345 ;;		_VerifyHandPosition_LoadPosition
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _MoveTargetPosition
  8351  13D7                     _MoveTargetPosition:
  8352                           
  8353                           ;incstack = 0
  8354                           ; Regs used in _MoveTargetPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8355                           ;MoveTargetPosition@motor_no stored from wreg
  8356  13D7  00BC               	movwf	MoveTargetPosition@motor_no
  8357                           
  8358                           ;MotorDrive.c: 2539: void MoveTargetPosition(UB motor_no);MotorDrive.c: 2540: {;MotorDri
      +                          ve.c: 2542:     CalcMotorStepCounter(motor_no);
  8359  13D8  083C               	movf	MoveTargetPosition@motor_no,w
  8360  13D9  3185  25EB  3193   	fcall	_CalcMotorStepCounter
  8361                           
  8362                           ;MotorDrive.c: 2545:     SetMotorFrequency(motor_no, FREQ_SET_SELF_CONTROL_NORMAL, 41);
  8363  13DC  0020               	movlb	0	; select bank0
  8364  13DD  01A0               	clrf	SetMotorFrequency@type
  8365  13DE  3029               	movlw	41
  8366  13DF  00BB               	movwf	??_MoveTargetPosition
  8367  13E0  083B               	movf	??_MoveTargetPosition,w
  8368  13E1  00A1               	movwf	SetMotorFrequency@set_freq
  8369  13E2  083C               	movf	MoveTargetPosition@motor_no,w
  8370  13E3  3188  2045  3193   	fcall	_SetMotorFrequency
  8371                           
  8372                           ;MotorDrive.c: 2548:     SetMotorStart(motor_no);
  8373  13E6  083C               	movf	MoveTargetPosition@motor_no,w
  8374  13E7  3190  2089         	fcall	_SetMotorStart
  8375  13E9  0008               	return
  8376  13EA                     __end_of_MoveTargetPosition:
  8377                           
  8378                           	psect	text39
  8379  0F5A                     __ptext39:	
  8380 ;; *************** function _DetermineBasePosition *****************
  8381 ;; Defined at:
  8382 ;;		line 2374 in file "MotorDrive.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  motor_no        1    wreg     unsigned char 
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;  motor_no        1   24[BANK0 ] unsigned char 
  8387 ;;  load_pos_typ    2   21[BANK0 ] short 
  8388 ;;  base_pos_ind    1   23[BANK0 ] unsigned char 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;                  1    wreg      void 
  8391 ;; Registers used:
  8392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : 1F/0
  8395 ;;		On exit  : 1F/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8398 ;;      Params:         0       0       0       0       0       0       0       0
  8399 ;;      Locals:         0       4       0       0       0       0       0       0
  8400 ;;      Temps:          0       8       0       0       0       0       0       0
  8401 ;;      Totals:         0      12       0       0       0       0       0       0
  8402 ;;Total ram usage:       12 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    9
  8405 ;; This function calls:
  8406 ;;		_CorrectPosition
  8407 ;;		___bmul
  8408 ;;		___wmul
  8409 ;; This function is called by:
  8410 ;;		_AfterDetectedLoadPosition
  8411 ;; This function uses a non-reentrant model
  8412 ;;
  8413                           
  8414                           
  8415                           ;psect for function _DetermineBasePosition
  8416  0F5A                     _DetermineBasePosition:
  8417                           
  8418                           ;incstack = 0
  8419                           ; Regs used in _DetermineBasePosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8420                           ;DetermineBasePosition@motor_no stored from wreg
  8421  0F5A  00B8               	movwf	DetermineBasePosition@motor_no
  8422                           
  8423                           ;MotorDrive.c: 2374: void DetermineBasePosition(UB motor_no);MotorDrive.c: 2375: {;Motor
      +                          Drive.c: 2376:     UB base_pos_index;;MotorDrive.c: 2377:     H load_pos_type;;MotorDriv
      +                          e.c: 2379:     base_pos_index = 0;
  8424  0F5B  01B7               	clrf	DetermineBasePosition@base_pos_index
  8425  0F5C                     l6242:
  8426                           
  8427                           ;MotorDrive.c: 2384:         load_pos_type = detectLoadPositionType[ motor_no ][ base_po
      +                          s_index ];
  8428  0F5C  3017               	movlw	23
  8429  0F5D  00AD               	movwf	??_DetermineBasePosition
  8430  0F5E  082D               	movf	??_DetermineBasePosition,w
  8431  0F5F  00A0               	movwf	___bmul@multiplicand
  8432  0F60  0838               	movf	DetermineBasePosition@motor_no,w
  8433  0F61  3192  22DC  318F   	fcall	___bmul
  8434  0F64  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8435  0F65  0737               	addwf	DetermineBasePosition@base_pos_index,w
  8436  0F66  00AE               	movwf	??_DetermineBasePosition+1
  8437  0F67  082E               	movf	??_DetermineBasePosition+1,w
  8438  0F68  0086               	movwf	6
  8439  0F69  3001               	movlw	1	; select bank2/3
  8440  0F6A  0087               	movwf	7
  8441  0F6B  0801               	movf	1,w
  8442  0F6C  00AF               	movwf	??_DetermineBasePosition+2
  8443  0F6D  01B0               	clrf	??_DetermineBasePosition+3
  8444  0F6E  082F               	movf	??_DetermineBasePosition+2,w
  8445  0F6F  00B5               	movwf	DetermineBasePosition@load_pos_type
  8446  0F70  0830               	movf	??_DetermineBasePosition+3,w
  8447  0F71  00B6               	movwf	DetermineBasePosition@load_pos_type+1
  8448                           
  8449                           ;MotorDrive.c: 2385:         base_pos_index++;
  8450  0F72  3001               	movlw	1
  8451  0F73  00AD               	movwf	??_DetermineBasePosition
  8452  0F74  082D               	movf	??_DetermineBasePosition,w
  8453  0F75  07B7               	addwf	DetermineBasePosition@base_pos_index,f
  8454                           
  8455                           ;MotorDrive.c: 2387:         if (ID_DETECT_LOAD_ROUGH == load_pos_type) {
  8456  0F76  3002               	movlw	2
  8457  0F77  0635               	xorwf	DetermineBasePosition@load_pos_type,w
  8458  0F78  0436               	iorwf	DetermineBasePosition@load_pos_type+1,w
  8459  0F79  1D03               	btfss	3,2
  8460  0F7A  2F5C               	goto	l6242
  8461  0F7B                     l6250:
  8462                           
  8463                           ;MotorDrive.c: 2396:         load_pos_type = detectLoadPositionType[ motor_no ][ base_po
      +                          s_index ];
  8464  0F7B  3017               	movlw	23
  8465  0F7C  00AD               	movwf	??_DetermineBasePosition
  8466  0F7D  082D               	movf	??_DetermineBasePosition,w
  8467  0F7E  00A0               	movwf	___bmul@multiplicand
  8468  0F7F  0838               	movf	DetermineBasePosition@motor_no,w
  8469  0F80  3192  22DC  318F   	fcall	___bmul
  8470  0F83  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8471  0F84  0737               	addwf	DetermineBasePosition@base_pos_index,w
  8472  0F85  00AE               	movwf	??_DetermineBasePosition+1
  8473  0F86  082E               	movf	??_DetermineBasePosition+1,w
  8474  0F87  0086               	movwf	6
  8475  0F88  3001               	movlw	1	; select bank2/3
  8476  0F89  0087               	movwf	7
  8477  0F8A  0801               	movf	1,w
  8478  0F8B  00AF               	movwf	??_DetermineBasePosition+2
  8479  0F8C  01B0               	clrf	??_DetermineBasePosition+3
  8480  0F8D  082F               	movf	??_DetermineBasePosition+2,w
  8481  0F8E  00B5               	movwf	DetermineBasePosition@load_pos_type
  8482  0F8F  0830               	movf	??_DetermineBasePosition+3,w
  8483  0F90  00B6               	movwf	DetermineBasePosition@load_pos_type+1
  8484                           
  8485                           ;MotorDrive.c: 2398:         if (ID_DETECT_LOAD_FINE == load_pos_type) {
  8486  0F91  0335               	decf	DetermineBasePosition@load_pos_type,w
  8487  0F92  0436               	iorwf	DetermineBasePosition@load_pos_type+1,w
  8488  0F93  1903               	btfsc	3,2
  8489  0F94  2FA3               	goto	l6262
  8490                           
  8491                           ;MotorDrive.c: 2403:         base_pos_index++;
  8492  0F95  3001               	movlw	1
  8493  0F96  00AD               	movwf	??_DetermineBasePosition
  8494  0F97  082D               	movf	??_DetermineBasePosition,w
  8495  0F98  07B7               	addwf	DetermineBasePosition@base_pos_index,f
  8496                           
  8497                           ;MotorDrive.c: 2404:         if (base_pos_index > detectLoadPositionIndex[ motor_no ]) {
  8498  0F99  0838               	movf	DetermineBasePosition@motor_no,w
  8499  0F9A  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  8500  0F9B  0086               	movwf	6
  8501  0F9C  0187               	clrf	7
  8502  0F9D  0837               	movf	DetermineBasePosition@base_pos_index,w
  8503  0F9E  0201               	subwf	1,w
  8504  0F9F  1803               	skipnc
  8505  0FA0  2F7B               	goto	l6250
  8506                           
  8507                           ;MotorDrive.c: 2405:             base_pos_index = 0;
  8508  0FA1  01B7               	clrf	DetermineBasePosition@base_pos_index
  8509  0FA2  2F7B               	goto	l6250
  8510  0FA3                     l6262:
  8511                           
  8512                           ;MotorDrive.c: 2409:     detectBasePosition[ motor_no ] = detectLoadPosition[ motor_no ]
      +                          [ base_pos_index ];
  8513  0FA3  0837               	movf	DetermineBasePosition@base_pos_index,w
  8514  0FA4  00AD               	movwf	??_DetermineBasePosition
  8515  0FA5  01AE               	clrf	??_DetermineBasePosition+1
  8516  0FA6  35AD               	lslf	??_DetermineBasePosition,f
  8517  0FA7  0DAE               	rlf	??_DetermineBasePosition+1,f
  8518  0FA8  0838               	movf	DetermineBasePosition@motor_no,w
  8519  0FA9  00AF               	movwf	??_DetermineBasePosition+2
  8520  0FAA  01B0               	clrf	??_DetermineBasePosition+3
  8521  0FAB  082F               	movf	??_DetermineBasePosition+2,w
  8522  0FAC  00A0               	movwf	___wmul@multiplier
  8523  0FAD  0830               	movf	??_DetermineBasePosition+3,w
  8524  0FAE  00A1               	movwf	___wmul@multiplier+1
  8525  0FAF  302E               	movlw	46
  8526  0FB0  00A2               	movwf	___wmul@multiplicand
  8527  0FB1  3000               	movlw	0
  8528  0FB2  00A3               	movwf	___wmul@multiplicand+1
  8529  0FB3  3195  2568  318F   	fcall	___wmul
  8530  0FB6  3094               	movlw	148
  8531  0FB7  00B1               	movwf	??_DetermineBasePosition+4
  8532  0FB8  3021               	movlw	33
  8533  0FB9  00B2               	movwf	??_DetermineBasePosition+5
  8534  0FBA  0820               	movf	?___wmul,w
  8535  0FBB  0731               	addwf	??_DetermineBasePosition+4,w
  8536  0FBC  00B3               	movwf	??_DetermineBasePosition+6
  8537  0FBD  0821               	movf	?___wmul+1,w
  8538  0FBE  3D32               	addwfc	??_DetermineBasePosition+5,w
  8539  0FBF  00B4               	movwf	??_DetermineBasePosition+7
  8540  0FC0  082D               	movf	??_DetermineBasePosition,w
  8541  0FC1  0733               	addwf	??_DetermineBasePosition+6,w
  8542  0FC2  0086               	movwf	6
  8543  0FC3  082E               	movf	??_DetermineBasePosition+1,w
  8544  0FC4  3D34               	addwfc	??_DetermineBasePosition+7,w
  8545  0FC5  0087               	movwf	7
  8546  0FC6  3538               	lslf	DetermineBasePosition@motor_no,w
  8547  0FC7  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8548  0FC8  0084               	movwf	4
  8549  0FC9  3001               	movlw	1	; select bank2/3
  8550  0FCA  0085               	movwf	5
  8551  0FCB  3F40               	moviw [0]fsr1
  8552  0FCC  3F80               	movwi [0]fsr0
  8553  0FCD  3F41               	moviw [1]fsr1
  8554  0FCE  3F81               	movwi [1]fsr0
  8555                           
  8556                           ;MotorDrive.c: 2410:     detectBasePosition[ motor_no ] += offsetBasePosition[ motor_no 
      +                          ];
  8557  0FCF  0838               	movf	DetermineBasePosition@motor_no,w
  8558  0FD0  00AD               	movwf	??_DetermineBasePosition
  8559  0FD1  01AE               	clrf	??_DetermineBasePosition+1
  8560  0FD2  35AD               	lslf	??_DetermineBasePosition,f
  8561  0FD3  0DAE               	rlf	??_DetermineBasePosition+1,f
  8562  0FD4  304E               	movlw	low (_offsetBasePosition| (0+32768))
  8563  0FD5  072D               	addwf	??_DetermineBasePosition,w
  8564  0FD6  0084               	movwf	4
  8565  0FD7  3098               	movlw	high (_offsetBasePosition| (0+32768))
  8566  0FD8  3D2E               	addwfc	??_DetermineBasePosition+1,w
  8567  0FD9  0085               	movwf	5
  8568  0FDA  3F00               	moviw [0]fsr0
  8569  0FDB  00AF               	movwf	??_DetermineBasePosition+2
  8570  0FDC  3F01               	moviw [1]fsr0
  8571  0FDD  00B0               	movwf	??_DetermineBasePosition+3
  8572  0FDE  3538               	lslf	DetermineBasePosition@motor_no,w
  8573  0FDF  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8574  0FE0  0086               	movwf	6
  8575  0FE1  3001               	movlw	1	; select bank2/3
  8576  0FE2  0087               	movwf	7
  8577  0FE3  082F               	movf	??_DetermineBasePosition+2,w
  8578  0FE4  0781               	addwf	1,f
  8579  0FE5  3141               	addfsr 1,1
  8580  0FE6  0830               	movf	??_DetermineBasePosition+3,w
  8581  0FE7  3D81               	addwfc	1,f
  8582  0FE8  317F               	addfsr 1,-1
  8583                           
  8584                           ;MotorDrive.c: 2412:     CorrectPosition(&detectBasePosition[ motor_no ], TblMaxSteps[ m
      +                          otor_no ]);
  8585  0FE9  3538               	lslf	DetermineBasePosition@motor_no,w
  8586  0FEA  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8587  0FEB  00A6               	movwf	CorrectPosition@pos
  8588  0FEC  3001               	movlw	1
  8589  0FED  00A7               	movwf	CorrectPosition@pos+1
  8590  0FEE  0838               	movf	DetermineBasePosition@motor_no,w
  8591  0FEF  00AD               	movwf	??_DetermineBasePosition
  8592  0FF0  01AE               	clrf	??_DetermineBasePosition+1
  8593  0FF1  35AD               	lslf	??_DetermineBasePosition,f
  8594  0FF2  0DAE               	rlf	??_DetermineBasePosition+1,f
  8595  0FF3  3056               	movlw	low (_TblMaxSteps| (0+32768))
  8596  0FF4  072D               	addwf	??_DetermineBasePosition,w
  8597  0FF5  0084               	movwf	4
  8598  0FF6  3098               	movlw	high (_TblMaxSteps| (0+32768))
  8599  0FF7  3D2E               	addwfc	??_DetermineBasePosition+1,w
  8600  0FF8  0085               	movwf	5
  8601  0FF9  3F00               	moviw [0]fsr0
  8602  0FFA  00A8               	movwf	CorrectPosition@max
  8603  0FFB  3F01               	moviw [1]fsr0
  8604  0FFC  00A9               	movwf	CorrectPosition@max+1
  8605  0FFD  3188  200B         	fcall	_CorrectPosition
  8606  0FFF  0008               	return
  8607  1000                     __end_of_DetermineBasePosition:
  8608                           
  8609                           	psect	text40
  8610  138E                     __ptext40:	
  8611 ;; *************** function _ActivateHandPosition *****************
  8612 ;; Defined at:
  8613 ;;		line 2509 in file "MotorDrive.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;  motor_no        1    wreg     unsigned char 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  motor_no        1    2[BANK0 ] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0
  8622 ;; Tracked objects:
  8623 ;;		On entry : 1F/0
  8624 ;;		On exit  : 1F/1
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8627 ;;      Params:         0       0       0       0       0       0       0       0
  8628 ;;      Locals:         0       1       0       0       0       0       0       0
  8629 ;;      Temps:          0       2       0       0       0       0       0       0
  8630 ;;      Totals:         0       3       0       0       0       0       0       0
  8631 ;;Total ram usage:        3 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    8
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		_AfterDetectedLoadPosition
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function _ActivateHandPosition
  8643  138E                     _ActivateHandPosition:
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in _ActivateHandPosition: [wreg+status,2+status,0]
  8647                           ;ActivateHandPosition@motor_no stored from wreg
  8648  138E  00A2               	movwf	ActivateHandPosition@motor_no
  8649                           
  8650                           ;MotorDrive.c: 2509: void ActivateHandPosition(UB motor_no);MotorDrive.c: 2510: {;MotorD
      +                          rive.c: 2511:     motorBitOperation = (UB) (0x01 << motor_no);
  8651  138F  3001               	movlw	1
  8652  1390  00A0               	movwf	??_ActivateHandPosition
  8653  1391  0A22               	incf	ActivateHandPosition@motor_no,w
  8654  1392  2B94               	goto	u4774
  8655  1393                     u4775:
  8656  1393  35A0               	lslf	??_ActivateHandPosition,f
  8657  1394                     u4774:
  8658  1394  0B89               	decfsz	9,f
  8659  1395  2B93               	goto	u4775
  8660  1396  0820               	movf	??_ActivateHandPosition,w
  8661  1397  00A1               	movwf	??_ActivateHandPosition+1
  8662  1398  0821               	movf	??_ActivateHandPosition+1,w
  8663  1399  00F4               	movwf	_motorBitOperation
  8664                           
  8665                           ;MotorDrive.c: 2513:     handPositionActiveBit |= motorBitOperation;
  8666  139A  0874               	movf	_motorBitOperation,w
  8667  139B  00A0               	movwf	??_ActivateHandPosition
  8668  139C  0820               	movf	??_ActivateHandPosition,w
  8669  139D  0021               	movlb	1	; select bank1
  8670  139E  04D1               	iorwf	_handPositionActiveBit^(0+128),f
  8671  139F  0008               	return
  8672  13A0                     __end_of_ActivateHandPosition:
  8673                           
  8674                           	psect	text41
  8675  1052                     __ptext41:	
  8676 ;; *************** function _SPI_ReadByte *****************
  8677 ;; Defined at:
  8678 ;;		line 136 in file "mcc_generated_files/spi.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;		None
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      unsigned char 
  8685 ;; Registers used:
  8686 ;;		wreg
  8687 ;; Tracked objects:
  8688 ;;		On entry : 1F/0
  8689 ;;		On exit  : 1F/4
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8692 ;;      Params:         0       0       0       0       0       0       0       0
  8693 ;;      Locals:         0       0       0       0       0       0       0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0
  8695 ;;      Totals:         0       0       0       0       0       0       0       0
  8696 ;;Total ram usage:        0 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    8
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_SPIControl_RecieveComannd
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           
  8707                           ;psect for function _SPI_ReadByte
  8708  1052                     _SPI_ReadByte:
  8709                           
  8710                           ;mcc_generated_files/spi.c: 138:     return SSP1BUF;
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _SPI_ReadByte: [wreg]
  8714  1052  0024               	movlb	4	; select bank4
  8715  1053  0811               	movf	17,w	;volatile
  8716  1054  0008               	return
  8717  1055                     __end_of_SPI_ReadByte:
  8718                           
  8719                           	psect	text42
  8720  0B88                     __ptext42:	
  8721 ;; *************** function _SPIControl_ExecuteCommand *****************
  8722 ;; Defined at:
  8723 ;;		line 196 in file "spi_control.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;		None
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  motor_select    1   36[BANK0 ] unsigned char 
  8728 ;;  cmd_type        1   35[BANK0 ] unsigned char 
  8729 ;; Return value:  Size  Location     Type
  8730 ;;                  1    wreg      void 
  8731 ;; Registers used:
  8732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8733 ;; Tracked objects:
  8734 ;;		On entry : 1F/1
  8735 ;;		On exit  : 1C/0
  8736 ;;		Unchanged: 0/0
  8737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8738 ;;      Params:         0       0       0       0       0       0       0       0
  8739 ;;      Locals:         0       2       0       0       0       0       0       0
  8740 ;;      Temps:          0       3       0       0       0       0       0       0
  8741 ;;      Totals:         0       5       0       0       0       0       0       0
  8742 ;;Total ram usage:        5 bytes
  8743 ;; Hardware stack levels used:    1
  8744 ;; Hardware stack levels required when called:   13
  8745 ;; This function calls:
  8746 ;;		_GetIsMotorActive
  8747 ;;		_SetAfterMotorStopFunc
  8748 ;;		_SpiCmdFunc_DisableExcitating
  8749 ;;		_SpiCmdFunc_EnableExcitating
  8750 ;;		_SpiCmdFunc_FwdPulseNormal
  8751 ;;		_SpiCmdFunc_FwdPulsePositionCtl
  8752 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  8753 ;;		_SpiCmdFunc_FwdPulseWithShake
  8754 ;;		_SpiCmdFunc_RevPulseNormal
  8755 ;;		_SpiCmdFunc_RevPulsePositionCtl
  8756 ;;		_SpiCmdFunc_Search1008Position
  8757 ;;		_SpiCmdFunc_SearchBasePosition
  8758 ;;		_SpiCmdFunc_SearchLoadPosition
  8759 ;;		_SpiCmdFunc_StartDetectVrs
  8760 ;;		_SpiCmdFunc_StopDetectVrs
  8761 ;;		_SpiCmdFunc_Test
  8762 ;; This function is called by:
  8763 ;;		_SPIControl_RecieveComannd
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           
  8768                           ;psect for function _SPIControl_ExecuteCommand
  8769  0B88                     _SPIControl_ExecuteCommand:
  8770                           
  8771                           ;spi_control.c: 198:     UB motor_select;;spi_control.c: 199:     UB cmd_type;;spi_contr
      +                          ol.c: 201:     motor_select = recieveCommand;
  8772                           
  8773                           ;incstack = 0
  8774                           ; Regs used in _SPIControl_ExecuteCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8775  0B88  084C               	movf	_recieveCommand^(0+128),w
  8776  0B89  0020               	movlb	0	; select bank0
  8777  0B8A  00C0               	movwf	??_SPIControl_ExecuteCommand
  8778  0B8B  0840               	movf	??_SPIControl_ExecuteCommand,w
  8779  0B8C  00C4               	movwf	SPIControl_ExecuteCommand@motor_select
  8780                           
  8781                           ;spi_control.c: 202:     motor_select &= 0xF0;
  8782  0B8D  30F0               	movlw	240
  8783  0B8E  00C0               	movwf	??_SPIControl_ExecuteCommand
  8784  0B8F  0840               	movf	??_SPIControl_ExecuteCommand,w
  8785  0B90  05C4               	andwf	SPIControl_ExecuteCommand@motor_select,f
  8786                           
  8787                           ;spi_control.c: 204:     cmd_type = recieveCommand;
  8788  0B91  0021               	movlb	1	; select bank1
  8789  0B92  084C               	movf	_recieveCommand^(0+128),w
  8790  0B93  0020               	movlb	0	; select bank0
  8791  0B94  00C0               	movwf	??_SPIControl_ExecuteCommand
  8792  0B95  0840               	movf	??_SPIControl_ExecuteCommand,w
  8793  0B96  00C3               	movwf	SPIControl_ExecuteCommand@cmd_type
  8794                           
  8795                           ;spi_control.c: 205:     cmd_type &= 0x0F;
  8796  0B97  300F               	movlw	15
  8797  0B98  00C0               	movwf	??_SPIControl_ExecuteCommand
  8798  0B99  0840               	movf	??_SPIControl_ExecuteCommand,w
  8799  0B9A  05C3               	andwf	SPIControl_ExecuteCommand@cmd_type,f
  8800                           
  8801                           ;spi_control.c: 207:     if ( ID_CMD_M0 == motor_select ) {
  8802  0B9B  30B0               	movlw	176
  8803  0B9C  0644               	xorwf	SPIControl_ExecuteCommand@motor_select,w
  8804  0B9D  1D03               	btfss	3,2
  8805  0B9E  2BA1               	goto	l6810
  8806                           
  8807                           ;spi_control.c: 208:         motor_select = 0;
  8808  0B9F  01C4               	clrf	SPIControl_ExecuteCommand@motor_select
  8809                           
  8810                           ;spi_control.c: 209:     } else if ( ID_CMD_M1 == motor_select ) {
  8811  0BA0  2BAC               	goto	l1326
  8812  0BA1                     l6810:
  8813  0BA1  30C0               	movlw	192
  8814  0BA2  0644               	xorwf	SPIControl_ExecuteCommand@motor_select,w
  8815  0BA3  1D03               	btfss	3,2
  8816  0BA4  2BA8               	goto	l6814
  8817                           
  8818                           ;spi_control.c: 210:         motor_select = 1;
  8819  0BA5  01C4               	clrf	SPIControl_ExecuteCommand@motor_select
  8820  0BA6  0AC4               	incf	SPIControl_ExecuteCommand@motor_select,f
  8821                           
  8822                           ;spi_control.c: 211:     } else {
  8823  0BA7  2BAC               	goto	l1326
  8824  0BA8                     l6814:
  8825                           
  8826                           ;spi_control.c: 212:         motor_select = 0xFF;
  8827  0BA8  30FF               	movlw	255
  8828  0BA9  00C0               	movwf	??_SPIControl_ExecuteCommand
  8829  0BAA  0840               	movf	??_SPIControl_ExecuteCommand,w
  8830  0BAB  00C4               	movwf	SPIControl_ExecuteCommand@motor_select
  8831  0BAC                     l1326:
  8832                           
  8833                           ;spi_control.c: 215:  if ( ( ID_CMD_TYPE_MAX > cmd_type ) && ( 0xFF != motor_select ) ) 
      +                          {
  8834  0BAC  300E               	movlw	14
  8835  0BAD  0243               	subwf	SPIControl_ExecuteCommand@cmd_type,w
  8836  0BAE  1803               	skipnc
  8837  0BAF  0008               	return
  8838  0BB0  0A44               	incf	SPIControl_ExecuteCommand@motor_select,w
  8839  0BB1  1903               	btfsc	3,2
  8840  0BB2  0008               	return
  8841                           
  8842                           ;spi_control.c: 216:   if ( ID_CMD_FWD_WITH_CORRECT == cmd_type ) {
  8843  0BB3  3006               	movlw	6
  8844  0BB4  0643               	xorwf	SPIControl_ExecuteCommand@cmd_type,w
  8845  0BB5  1D03               	btfss	3,2
  8846  0BB6  2BCC               	goto	l6822
  8847                           
  8848                           ;spi_control.c: 218:        SpiCmmandFunction[ cmd_type ]( motor_select );
  8849  0BB7  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8850  0BB8  00C0               	movwf	??_SPIControl_ExecuteCommand
  8851  0BB9  0840               	movf	??_SPIControl_ExecuteCommand,w
  8852  0BBA  00BD               	movwf	SpiCmdFunc_Search1008Position@motor_no
  8853  0BBB  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8854  0BBC  00C1               	movwf	??_SPIControl_ExecuteCommand+1
  8855  0BBD  01C2               	clrf	??_SPIControl_ExecuteCommand+2
  8856  0BBE  35C1               	lslf	??_SPIControl_ExecuteCommand+1,f
  8857  0BBF  0DC2               	rlf	??_SPIControl_ExecuteCommand+2,f
  8858  0BC0  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8859  0BC1  0741               	addwf	??_SPIControl_ExecuteCommand+1,w
  8860  0BC2  0084               	movwf	4
  8861  0BC3  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8862  0BC4  3D42               	addwfc	??_SPIControl_ExecuteCommand+2,w
  8863  0BC5  0085               	movwf	5
  8864  0BC6  3F01               	moviw [1]fsr0
  8865  0BC7  008A               	movwf	10
  8866  0BC8  3F00               	moviw [0]fsr0
  8867  0BC9  000A               	callw
  8868  0BCA  318B               	pagesel	$
  8869                           
  8870                           ;spi_control.c: 219:   } else {
  8871  0BCB  0008               	return
  8872  0BCC                     l6822:
  8873                           
  8874                           ;spi_control.c: 221:    if ( GetIsMotorActive( motor_select ) ) {
  8875  0BCC  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8876  0BCD  3193  23EA  318B   	fcall	_GetIsMotorActive
  8877  0BD0  3A00               	xorlw	0
  8878  0BD1  1903               	skipnz
  8879  0BD2  2BE6               	goto	l6826
  8880                           
  8881                           ;spi_control.c: 223:        SetAfterMotorStopFunc( motor_select, SpiCmmandFunction[ cmd_
      +                          type ] );
  8882  0BD3  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8883  0BD4  00C0               	movwf	??_SPIControl_ExecuteCommand
  8884  0BD5  01C1               	clrf	??_SPIControl_ExecuteCommand+1
  8885  0BD6  35C0               	lslf	??_SPIControl_ExecuteCommand,f
  8886  0BD7  0DC1               	rlf	??_SPIControl_ExecuteCommand+1,f
  8887  0BD8  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8888  0BD9  0740               	addwf	??_SPIControl_ExecuteCommand,w
  8889  0BDA  0084               	movwf	4
  8890  0BDB  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8891  0BDC  3D41               	addwfc	??_SPIControl_ExecuteCommand+1,w
  8892  0BDD  0085               	movwf	5
  8893  0BDE  3F00               	moviw [0]fsr0
  8894  0BDF  00A0               	movwf	SetAfterMotorStopFunc@func
  8895  0BE0  3F01               	moviw [1]fsr0
  8896  0BE1  00A1               	movwf	SetAfterMotorStopFunc@func+1
  8897  0BE2  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8898  0BE3  3190  2093         	fcall	_SetAfterMotorStopFunc
  8899                           
  8900                           ;spi_control.c: 224:    } else {
  8901  0BE5  0008               	return
  8902  0BE6                     l6826:
  8903                           
  8904                           ;spi_control.c: 226:        SpiCmmandFunction[ cmd_type ]( motor_select );
  8905  0BE6  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8906  0BE7  00C0               	movwf	??_SPIControl_ExecuteCommand
  8907  0BE8  0840               	movf	??_SPIControl_ExecuteCommand,w
  8908  0BE9  00BD               	movwf	SpiCmdFunc_Search1008Position@motor_no
  8909  0BEA  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8910  0BEB  00C1               	movwf	??_SPIControl_ExecuteCommand+1
  8911  0BEC  01C2               	clrf	??_SPIControl_ExecuteCommand+2
  8912  0BED  35C1               	lslf	??_SPIControl_ExecuteCommand+1,f
  8913  0BEE  0DC2               	rlf	??_SPIControl_ExecuteCommand+2,f
  8914  0BEF  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8915  0BF0  0741               	addwf	??_SPIControl_ExecuteCommand+1,w
  8916  0BF1  0084               	movwf	4
  8917  0BF2  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8918  0BF3  3D42               	addwfc	??_SPIControl_ExecuteCommand+2,w
  8919  0BF4  0085               	movwf	5
  8920  0BF5  3F01               	moviw [1]fsr0
  8921  0BF6  008A               	movwf	10
  8922  0BF7  3F00               	moviw [0]fsr0
  8923  0BF8  000A               	callw
  8924  0BF9  318B               	pagesel	$
  8925  0BFA  0008               	return
  8926  0BFB                     __end_of_SPIControl_ExecuteCommand:
  8927                           
  8928                           	psect	text43
  8929  160F                     __ptext43:	
  8930 ;; *************** function _SetMotorStopSPK *****************
  8931 ;; Defined at:
  8932 ;;		line 1474 in file "MotorDrive.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;		None
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;		None
  8937 ;; Return value:  Size  Location     Type
  8938 ;;                  1    wreg      void 
  8939 ;; Registers used:
  8940 ;;		wreg, status,2, status,0, pclath, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 1D/2
  8943 ;;		On exit  : 1F/2
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8946 ;;      Params:         0       0       0       0       0       0       0       0
  8947 ;;      Locals:         0       0       0       0       0       0       0       0
  8948 ;;      Temps:          0       1       0       0       0       0       0       0
  8949 ;;      Totals:         0       1       0       0       0       0       0       0
  8950 ;;Total ram usage:        1 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:   10
  8953 ;; This function calls:
  8954 ;;		_SetExcitatingOutOffData
  8955 ;;		_SpkComparatorOff
  8956 ;;		_TMR2_SetInterruptHandler
  8957 ;;		_TMR2_StopTimer
  8958 ;; This function is called by:
  8959 ;;		_SpiCmdFunc_StopDetectVrs
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function _SetMotorStopSPK
  8965  160F                     _SetMotorStopSPK:
  8966                           
  8967                           ;MotorDrive.c: 1477:     LATA &= ~0x01;
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _SetMotorStopSPK: [wreg+status,2+status,0+pclath+cstack]
  8971  160F  30FE               	movlw	254
  8972  1610  0020               	movlb	0	; select bank0
  8973  1611  00A2               	movwf	??_SetMotorStopSPK
  8974  1612  0822               	movf	??_SetMotorStopSPK,w
  8975  1613  0022               	movlb	2	; select bank2
  8976  1614  058C               	andwf	12,f	;volatile
  8977                           
  8978                           ;MotorDrive.c: 1479:     TMR2_StopTimer();
  8979  1615  3190  204F  3196   	fcall	_TMR2_StopTimer
  8980                           
  8981                           ;MotorDrive.c: 1481:     PIR1bits.TMR2IF = 0;
  8982  1618  1091               	bcf	17,1	;volatile
  8983                           
  8984                           ;MotorDrive.c: 1483:     SpkComparatorOff();
  8985  1619  3191  2107  3196   	fcall	_SpkComparatorOff
  8986                           
  8987                           ;MotorDrive.c: 1484:     excitatingTime = 0;
  8988  161C  0021               	movlb	1	; select bank1
  8989  161D  01C4               	clrf	_excitatingTime^(0+128)
  8990  161E  01C5               	clrf	(_excitatingTime+1)^(0+128)
  8991                           
  8992                           ;MotorDrive.c: 1485:     excitatingOffMaskTime = 0;
  8993  161F  01E2               	clrf	_excitatingOffMaskTime^(0+128)
  8994                           
  8995                           ;MotorDrive.c: 1487:     spkStopStatus = 0;
  8996  1620  01DB               	clrf	_spkStopStatus^(0+128)
  8997                           
  8998                           ;MotorDrive.c: 1488:     excitatingStatusOn = 0;
  8999  1621  01DA               	clrf	_excitatingStatusOn^(0+128)
  9000                           
  9001                           ;MotorDrive.c: 1490:     SetExcitatingOutOffData();
  9002  1622  3195  25BB  3196   	fcall	_SetExcitatingOutOffData
  9003                           
  9004                           ;MotorDrive.c: 1493:     TMR2_SetInterruptHandler(TMR2_Interrupt);
  9005  1625  30FA               	movlw	low _TMR2_Interrupt
  9006  1626  0020               	movlb	0	; select bank0
  9007  1627  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9008  1628  3003               	movlw	high _TMR2_Interrupt
  9009  1629  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9010  162A  3190  2079         	fcall	_TMR2_SetInterruptHandler
  9011  162C  0008               	return
  9012  162D                     __end_of_SetMotorStopSPK:
  9013                           
  9014                           	psect	text44
  9015  104F                     __ptext44:	
  9016 ;; *************** function _TMR2_StopTimer *****************
  9017 ;; Defined at:
  9018 ;;		line 93 in file "mcc_generated_files/tmr2.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		None
  9027 ;; Tracked objects:
  9028 ;;		On entry : 1F/2
  9029 ;;		On exit  : 1F/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9032 ;;      Params:         0       0       0       0       0       0       0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0
  9035 ;;      Totals:         0       0       0       0       0       0       0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    8
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_SetMotorStopSPK
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _TMR2_StopTimer
  9048  104F                     _TMR2_StopTimer:
  9049                           
  9050                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _TMR2_StopTimer: []
  9054  104F  0020               	movlb	0	; select bank0
  9055  1050  111C               	bcf	28,2	;volatile
  9056  1051  0008               	return
  9057  1052                     __end_of_TMR2_StopTimer:
  9058                           
  9059                           	psect	text45
  9060  1107                     __ptext45:	
  9061 ;; *************** function _SpkComparatorOff *****************
  9062 ;; Defined at:
  9063 ;;		line 2747 in file "MotorDrive.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;		None
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;		None
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  1    wreg      void 
  9070 ;; Registers used:
  9071 ;;		wreg
  9072 ;; Tracked objects:
  9073 ;;		On entry : 1F/0
  9074 ;;		On exit  : 1F/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9077 ;;      Params:         0       0       0       0       0       0       0       0
  9078 ;;      Locals:         0       0       0       0       0       0       0       0
  9079 ;;      Temps:          0       0       0       0       0       0       0       0
  9080 ;;      Totals:         0       0       0       0       0       0       0       0
  9081 ;;Total ram usage:        0 bytes
  9082 ;; Hardware stack levels used:    1
  9083 ;; Hardware stack levels required when called:    8
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_SetMotorStopSPK
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           
  9092                           ;psect for function _SpkComparatorOff
  9093  1107                     _SpkComparatorOff:
  9094                           
  9095                           ;MotorDrive.c: 2749:     CM1CON0 = 0x14;
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _SpkComparatorOff: [wreg]
  9099  1107  3014               	movlw	20
  9100  1108  0022               	movlb	2	; select bank2
  9101  1109  0091               	movwf	17	;volatile
  9102                           
  9103                           ;MotorDrive.c: 2750:     CM1CON1 = 0x90;
  9104  110A  3090               	movlw	144
  9105  110B  0092               	movwf	18	;volatile
  9106                           
  9107                           ;MotorDrive.c: 2752:     CM2CON0 = 0x14;
  9108  110C  3014               	movlw	20
  9109  110D  0093               	movwf	19	;volatile
  9110                           
  9111                           ;MotorDrive.c: 2753:     CM2CON1 = 0x90;
  9112  110E  3090               	movlw	144
  9113  110F  0094               	movwf	20	;volatile
  9114                           
  9115                           ;MotorDrive.c: 2755:     PIR2bits.C1IF = 0;
  9116  1110  0020               	movlb	0	; select bank0
  9117  1111  1292               	bcf	18,5	;volatile
  9118                           
  9119                           ;MotorDrive.c: 2756:     PIR2bits.C2IF = 0;
  9120  1112  1312               	bcf	18,6	;volatile
  9121  1113  0008               	return
  9122  1114                     __end_of_SpkComparatorOff:
  9123                           
  9124                           	psect	text46
  9125  179A                     __ptext46:	
  9126 ;; *************** function _SetMotorStartSPK *****************
  9127 ;; Defined at:
  9128 ;;		line 1424 in file "MotorDrive.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;		None
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;		None
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0, pclath, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 1D/2
  9139 ;;		On exit  : 1D/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9142 ;;      Params:         0       0       0       0       0       0       0       0
  9143 ;;      Locals:         0       0       0       0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0       0
  9145 ;;      Totals:         0       0       0       0       0       0       0       0
  9146 ;;Total ram usage:        0 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:   10
  9149 ;; This function calls:
  9150 ;;		_SetExcitatingOutOffData
  9151 ;;		_SpkComparatorOn
  9152 ;;		_TMR2_SetInterruptHandler
  9153 ;;		_TMR2_StartTimer
  9154 ;; This function is called by:
  9155 ;;		_SpiCmdFunc_StartDetectVrs
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           
  9160                           ;psect for function _SetMotorStartSPK
  9161  179A                     _SetMotorStartSPK:
  9162                           
  9163                           ;MotorDrive.c: 1426:     if (excitatingEnableBit & (0x01 | 0x02)) {
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in _SetMotorStartSPK: [wreg+status,2+status,0+pclath+cstack]
  9167  179A  0021               	movlb	1	; select bank1
  9168  179B  0863               	movf	_excitatingEnableBit^(0+128),w
  9169  179C  3903               	andlw	3
  9170  179D  1903               	btfsc	3,2
  9171  179E  2FC5               	goto	l6190
  9172                           
  9173                           ;MotorDrive.c: 1429:         LATA |= 0x01;
  9174  179F  0022               	movlb	2	; select bank2
  9175  17A0  140C               	bsf	12,0	;volatile
  9176                           
  9177                           ;MotorDrive.c: 1432:         TMR2_SetInterruptHandler(TMR2_Interrupt_SPK);
  9178  17A1  3084               	movlw	low _TMR2_Interrupt_SPK
  9179  17A2  0020               	movlb	0	; select bank0
  9180  17A3  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9181  17A4  3007               	movlw	high _TMR2_Interrupt_SPK
  9182  17A5  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9183  17A6  3190  2079  3197   	fcall	_TMR2_SetInterruptHandler
  9184                           
  9185                           ;MotorDrive.c: 1434:         PIR1bits.TMR2IF = 0;
  9186  17A9  0020               	movlb	0	; select bank0
  9187  17AA  1091               	bcf	17,1	;volatile
  9188                           
  9189                           ;MotorDrive.c: 1436:         detectSpkTurnBit = 0x00;
  9190  17AB  0021               	movlb	1	; select bank1
  9191  17AC  01E1               	clrf	_detectSpkTurnBit^(0+128)
  9192                           
  9193                           ;MotorDrive.c: 1439:         dataTRISAWork_M0 = (0x00 | 0x00);
  9194  17AD  0020               	movlb	0	; select bank0
  9195  17AE  01DE               	clrf	_dataTRISAWork_M0
  9196                           
  9197                           ;MotorDrive.c: 1440:         dataTRISBWork_M0 = (0x00 | 0x00);
  9198  17AF  01DD               	clrf	_dataTRISBWork_M0
  9199                           
  9200                           ;MotorDrive.c: 1441:         dataTRISCWork_M0 = (0x00 | 0x00);
  9201  17B0  01DC               	clrf	_dataTRISCWork_M0
  9202                           
  9203                           ;MotorDrive.c: 1443:         dataTRISAWork_M1 = (0x00 | 0x00);
  9204  17B1  01DB               	clrf	_dataTRISAWork_M1
  9205                           
  9206                           ;MotorDrive.c: 1444:         dataTRISBWork_M1 = (0x00 | 0x00);
  9207  17B2  01DA               	clrf	_dataTRISBWork_M1
  9208                           
  9209                           ;MotorDrive.c: 1445:         dataTRISCWork_M1 = (0x00 | 0x00);
  9210  17B3  01D9               	clrf	_dataTRISCWork_M1
  9211                           
  9212                           ;MotorDrive.c: 1447:         spkOutTrisRequestFlug = 1;
  9213  17B4  0021               	movlb	1	; select bank1
  9214  17B5  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
  9215  17B6  0ADE               	incf	_spkOutTrisRequestFlug^(0+128),f
  9216                           
  9217                           ;MotorDrive.c: 1450:         SpkComparatorOn();
  9218  17B7  3188  2000  3197   	fcall	_SpkComparatorOn
  9219                           
  9220                           ;MotorDrive.c: 1452:         spkPositionCt = 0;
  9221  17BA  0021               	movlb	1	; select bank1
  9222  17BB  01E0               	clrf	_spkPositionCt^(0+128)
  9223                           
  9224                           ;MotorDrive.c: 1453:         spkChangePosition = 1;
  9225  17BC  01DF               	clrf	_spkChangePosition^(0+128)
  9226  17BD  0ADF               	incf	_spkChangePosition^(0+128),f
  9227                           
  9228                           ;MotorDrive.c: 1455:         spkOutChangeFunc = SetDataTRISxWork_SPK_SHORT;
  9229  17BE  309F               	movlw	low _SetDataTRISxWork_SPK_SHORT
  9230  17BF  00C2               	movwf	_spkOutChangeFunc^(0+128)
  9231  17C0  3015               	movlw	high _SetDataTRISxWork_SPK_SHORT
  9232  17C1  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
  9233                           
  9234                           ;MotorDrive.c: 1458:         TMR2_StartTimer();
  9235  17C2  3190  204C         	fcall	_TMR2_StartTimer
  9236                           
  9237                           ;MotorDrive.c: 1460:     } else {
  9238  17C4  0008               	return
  9239  17C5                     l6190:
  9240                           
  9241                           ;MotorDrive.c: 1461:         SetExcitatingOutOffData();
  9242  17C5  3195  25BB         	fcall	_SetExcitatingOutOffData
  9243  17C7  0008               	return
  9244  17C8                     __end_of_SetMotorStartSPK:
  9245                           
  9246                           	psect	text47
  9247  1079                     __ptext47:	
  9248 ;; *************** function _TMR2_SetInterruptHandler *****************
  9249 ;; Defined at:
  9250 ;;		line 140 in file "mcc_generated_files/tmr2.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9253 ;;		 -> TMR2_Interrupt_SPK(1), TMR2_Interrupt(1), TMR2_DefaultInterruptHandler(1), 
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;		None
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  1    wreg      void 
  9258 ;; Registers used:
  9259 ;;		wreg
  9260 ;; Tracked objects:
  9261 ;;		On entry : 1F/0
  9262 ;;		On exit  : 1F/2
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9265 ;;      Params:         0       2       0       0       0       0       0       0
  9266 ;;      Locals:         0       0       0       0       0       0       0       0
  9267 ;;      Temps:          0       0       0       0       0       0       0       0
  9268 ;;      Totals:         0       2       0       0       0       0       0       0
  9269 ;;Total ram usage:        2 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    8
  9272 ;; This function calls:
  9273 ;;		Nothing
  9274 ;; This function is called by:
  9275 ;;		_TMR2_Initialize
  9276 ;;		_main
  9277 ;;		_SetMotorStartSPK
  9278 ;;		_SetMotorStopSPK
  9279 ;; This function uses a non-reentrant model
  9280 ;;
  9281                           
  9282                           
  9283                           ;psect for function _TMR2_SetInterruptHandler
  9284  1079                     _TMR2_SetInterruptHandler:
  9285                           
  9286                           ;mcc_generated_files/tmr2.c: 141:     TMR2_InterruptHandler = InterruptHandler;
  9287                           
  9288                           ;incstack = 0
  9289                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9290  1079  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9291  107A  0022               	movlb	2	; select bank2
  9292  107B  00ED               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  9293  107C  0020               	movlb	0	; select bank0
  9294  107D  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9295  107E  0022               	movlb	2	; select bank2
  9296  107F  00EC               	movwf	_TMR2_InterruptHandler^(0+256)
  9297  1080  0008               	return
  9298  1081                     __end_of_TMR2_SetInterruptHandler:
  9299                           
  9300                           	psect	text48
  9301  0800                     __ptext48:	
  9302 ;; *************** function _SpkComparatorOn *****************
  9303 ;; Defined at:
  9304 ;;		line 2765 in file "MotorDrive.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;		None
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;		None
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      void 
  9311 ;; Registers used:
  9312 ;;		wreg
  9313 ;; Tracked objects:
  9314 ;;		On entry : 1F/1
  9315 ;;		On exit  : 1F/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9318 ;;      Params:         0       0       0       0       0       0       0       0
  9319 ;;      Locals:         0       0       0       0       0       0       0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0       0
  9321 ;;      Totals:         0       0       0       0       0       0       0       0
  9322 ;;Total ram usage:        0 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    8
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_SetMotorStartSPK
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _SpkComparatorOn
  9334  0800                     _SpkComparatorOn:
  9335                           
  9336                           ;MotorDrive.c: 2767:     CM1CON0 = (0x14 | 0x80);
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in _SpkComparatorOn: [wreg]
  9340  0800  3094               	movlw	148
  9341  0801  0022               	movlb	2	; select bank2
  9342  0802  0091               	movwf	17	;volatile
  9343                           
  9344                           ;MotorDrive.c: 2768:     PIR2bits.C1IF = 0;
  9345  0803  0020               	movlb	0	; select bank0
  9346  0804  1292               	bcf	18,5	;volatile
  9347                           
  9348                           ;MotorDrive.c: 2770:     CM2CON0 = (0x14 | 0x80);
  9349  0805  3094               	movlw	148
  9350  0806  0022               	movlb	2	; select bank2
  9351  0807  0093               	movwf	19	;volatile
  9352                           
  9353                           ;MotorDrive.c: 2771:     PIR2bits.C2IF = 0;
  9354  0808  0020               	movlb	0	; select bank0
  9355  0809  1312               	bcf	18,6	;volatile
  9356  080A  0008               	return
  9357  080B                     __end_of_SpkComparatorOn:
  9358                           
  9359                           	psect	text49
  9360  15BB                     __ptext49:	
  9361 ;; *************** function _SetExcitatingOutOffData *****************
  9362 ;; Defined at:
  9363 ;;		line 2825 in file "MotorDrive.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;		None
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;		None
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  1    wreg      void 
  9370 ;; Registers used:
  9371 ;;		wreg, status,2, status,0, pclath, cstack
  9372 ;; Tracked objects:
  9373 ;;		On entry : 1F/1
  9374 ;;		On exit  : 1F/2
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9377 ;;      Params:         0       0       0       0       0       0       0       0
  9378 ;;      Locals:         0       0       0       0       0       0       0       0
  9379 ;;      Temps:          0       1       0       0       0       0       0       0
  9380 ;;      Totals:         0       1       0       0       0       0       0       0
  9381 ;;Total ram usage:        1 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; Hardware stack levels required when called:    9
  9384 ;; This function calls:
  9385 ;;		_SetOutPutLATX
  9386 ;; This function is called by:
  9387 ;;		_SetMotorStartSPK
  9388 ;;		_SetMotorStopSPK
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           
  9393                           ;psect for function _SetExcitatingOutOffData
  9394  15BB                     _SetExcitatingOutOffData:
  9395                           
  9396                           ;MotorDrive.c: 2829:     dataTRISAWork_M0 = 0x00;
  9397                           
  9398                           ;incstack = 0
  9399                           ; Regs used in _SetExcitatingOutOffData: [wreg+status,2+status,0+pclath+cstack]
  9400  15BB  0020               	movlb	0	; select bank0
  9401  15BC  01DE               	clrf	_dataTRISAWork_M0
  9402                           
  9403                           ;MotorDrive.c: 2830:     dataTRISBWork_M0 = 0x00;
  9404  15BD  01DD               	clrf	_dataTRISBWork_M0
  9405                           
  9406                           ;MotorDrive.c: 2831:     dataTRISCWork_M0 = 0x20;
  9407  15BE  3020               	movlw	32
  9408  15BF  00A1               	movwf	??_SetExcitatingOutOffData
  9409  15C0  0821               	movf	??_SetExcitatingOutOffData,w
  9410  15C1  00DC               	movwf	_dataTRISCWork_M0
  9411                           
  9412                           ;MotorDrive.c: 2833:     dataTRISAWork_M1 = 0x00;
  9413  15C2  01DB               	clrf	_dataTRISAWork_M1
  9414                           
  9415                           ;MotorDrive.c: 2834:     dataTRISBWork_M1 = 0x00;
  9416  15C3  01DA               	clrf	_dataTRISBWork_M1
  9417                           
  9418                           ;MotorDrive.c: 2835:     dataTRISCWork_M1 = 0x10;
  9419  15C4  3010               	movlw	16
  9420  15C5  00A1               	movwf	??_SetExcitatingOutOffData
  9421  15C6  0821               	movf	??_SetExcitatingOutOffData,w
  9422  15C7  00D9               	movwf	_dataTRISCWork_M1
  9423                           
  9424                           ;MotorDrive.c: 2837:     pulseOutLATAWork_M0 = 0;
  9425  15C8  01E7               	clrf	_pulseOutLATAWork_M0
  9426                           
  9427                           ;MotorDrive.c: 2838:     pulseOutLATBWork_M0 = 0;
  9428  15C9  01E6               	clrf	_pulseOutLATBWork_M0
  9429                           
  9430                           ;MotorDrive.c: 2839:     pulseOutLATCWork_M0 = 0;
  9431  15CA  01E5               	clrf	_pulseOutLATCWork_M0
  9432                           
  9433                           ;MotorDrive.c: 2841:     pulseOutLATAWork_M1 = 0;
  9434  15CB  01E4               	clrf	_pulseOutLATAWork_M1
  9435                           
  9436                           ;MotorDrive.c: 2842:     pulseOutLATBWork_M1 = 0;
  9437  15CC  01E3               	clrf	_pulseOutLATBWork_M1
  9438                           
  9439                           ;MotorDrive.c: 2843:     pulseOutLATCWork_M1 = 0;
  9440  15CD  01E2               	clrf	_pulseOutLATCWork_M1
  9441                           
  9442                           ;MotorDrive.c: 2845:     SetOutPutLATX();
  9443  15CE  318A  2239         	fcall	_SetOutPutLATX
  9444                           
  9445                           ;MotorDrive.c: 2846:     LATA &= ~0x04;
  9446  15D0  30FB               	movlw	251
  9447  15D1  0020               	movlb	0	; select bank0
  9448  15D2  00A1               	movwf	??_SetExcitatingOutOffData
  9449  15D3  0821               	movf	??_SetExcitatingOutOffData,w
  9450  15D4  0022               	movlb	2	; select bank2
  9451  15D5  058C               	andwf	12,f	;volatile
  9452  15D6  0008               	return
  9453  15D7                     __end_of_SetExcitatingOutOffData:
  9454                           
  9455                           	psect	text50
  9456  0A39                     __ptext50:	
  9457 ;; *************** function _SetOutPutLATX *****************
  9458 ;; Defined at:
  9459 ;;		line 2965 in file "MotorDrive.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;		None
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;		None
  9464 ;; Return value:  Size  Location     Type
  9465 ;;                  1    wreg      void 
  9466 ;; Registers used:
  9467 ;;		wreg, status,2, status,0
  9468 ;; Tracked objects:
  9469 ;;		On entry : 1F/0
  9470 ;;		On exit  : 1F/2
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9473 ;;      Params:         0       0       0       0       0       0       0       0
  9474 ;;      Locals:         0       0       0       0       0       0       0       0
  9475 ;;      Temps:          0       1       0       0       0       0       0       0
  9476 ;;      Totals:         0       1       0       0       0       0       0       0
  9477 ;;Total ram usage:        1 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    8
  9480 ;; This function calls:
  9481 ;;		Nothing
  9482 ;; This function is called by:
  9483 ;;		_SetExcitatingOutOffData
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _SetOutPutLATX
  9489  0A39                     _SetOutPutLATX:
  9490                           
  9491                           ;MotorDrive.c: 2969:     dataTRISA = TRISA;
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in _SetOutPutLATX: [wreg+status,2+status,0]
  9495  0A39  0021               	movlb	1	; select bank1
  9496  0A3A  080C               	movf	12,w	;volatile
  9497  0A3B  0020               	movlb	0	; select bank0
  9498  0A3C  00A0               	movwf	??_SetOutPutLATX
  9499  0A3D  0820               	movf	??_SetOutPutLATX,w
  9500  0A3E  00E1               	movwf	_dataTRISA
  9501                           
  9502                           ;MotorDrive.c: 2970:     dataTRISB = TRISB;
  9503  0A3F  0021               	movlb	1	; select bank1
  9504  0A40  080D               	movf	13,w	;volatile
  9505  0A41  0020               	movlb	0	; select bank0
  9506  0A42  00A0               	movwf	??_SetOutPutLATX
  9507  0A43  0820               	movf	??_SetOutPutLATX,w
  9508  0A44  00E0               	movwf	_dataTRISB
  9509                           
  9510                           ;MotorDrive.c: 2971:     dataTRISC = TRISC;
  9511  0A45  0021               	movlb	1	; select bank1
  9512  0A46  080E               	movf	14,w	;volatile
  9513  0A47  0020               	movlb	0	; select bank0
  9514  0A48  00A0               	movwf	??_SetOutPutLATX
  9515  0A49  0820               	movf	??_SetOutPutLATX,w
  9516  0A4A  00DF               	movwf	_dataTRISC
  9517                           
  9518                           ;MotorDrive.c: 2976:     dataTRISB &= (UB) (~(0x00 | 0x00));
  9519  0A4B  30FD               	movlw	253
  9520  0A4C  00A0               	movwf	??_SetOutPutLATX
  9521  0A4D  0820               	movf	??_SetOutPutLATX,w
  9522  0A4E  05E1               	andwf	_dataTRISA,f
  9523                           
  9524                           ;MotorDrive.c: 2977:     dataTRISC &= (UB) (~(0x22 | 0x1C));
  9525  0A4F  30C1               	movlw	193
  9526  0A50  00A0               	movwf	??_SetOutPutLATX
  9527  0A51  0820               	movf	??_SetOutPutLATX,w
  9528  0A52  05DF               	andwf	_dataTRISC,f
  9529                           
  9530                           ;MotorDrive.c: 2980:     dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
  9531  0A53  085E               	movf	_dataTRISAWork_M0,w
  9532  0A54  045B               	iorwf	_dataTRISAWork_M1,w
  9533  0A55  00A0               	movwf	??_SetOutPutLATX
  9534  0A56  0820               	movf	??_SetOutPutLATX,w
  9535  0A57  04E1               	iorwf	_dataTRISA,f
  9536                           
  9537                           ;MotorDrive.c: 2981:     dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
  9538  0A58  085D               	movf	_dataTRISBWork_M0,w
  9539  0A59  045A               	iorwf	_dataTRISBWork_M1,w
  9540  0A5A  00A0               	movwf	??_SetOutPutLATX
  9541  0A5B  0820               	movf	??_SetOutPutLATX,w
  9542  0A5C  04E0               	iorwf	_dataTRISB,f
  9543                           
  9544                           ;MotorDrive.c: 2982:     dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
  9545  0A5D  085C               	movf	_dataTRISCWork_M0,w
  9546  0A5E  0459               	iorwf	_dataTRISCWork_M1,w
  9547  0A5F  00A0               	movwf	??_SetOutPutLATX
  9548  0A60  0820               	movf	??_SetOutPutLATX,w
  9549  0A61  04DF               	iorwf	_dataTRISC,f
  9550                           
  9551                           ;MotorDrive.c: 2985:     TRISA = dataTRISA;
  9552  0A62  0861               	movf	_dataTRISA,w
  9553  0A63  0021               	movlb	1	; select bank1
  9554  0A64  008C               	movwf	12	;volatile
  9555                           
  9556                           ;MotorDrive.c: 2986:     TRISB = dataTRISB;
  9557  0A65  0020               	movlb	0	; select bank0
  9558  0A66  0860               	movf	_dataTRISB,w
  9559  0A67  0021               	movlb	1	; select bank1
  9560  0A68  008D               	movwf	13	;volatile
  9561                           
  9562                           ;MotorDrive.c: 2987:     TRISC = dataTRISC;
  9563  0A69  0020               	movlb	0	; select bank0
  9564  0A6A  085F               	movf	_dataTRISC,w
  9565  0A6B  0021               	movlb	1	; select bank1
  9566  0A6C  008E               	movwf	14	;volatile
  9567                           
  9568                           ;MotorDrive.c: 2990:     pulseOutLATA = LATA;
  9569  0A6D  0022               	movlb	2	; select bank2
  9570  0A6E  080C               	movf	12,w	;volatile
  9571  0A6F  0020               	movlb	0	; select bank0
  9572  0A70  00A0               	movwf	??_SetOutPutLATX
  9573  0A71  0820               	movf	??_SetOutPutLATX,w
  9574  0A72  00EA               	movwf	_pulseOutLATA
  9575                           
  9576                           ;MotorDrive.c: 2991:     pulseOutLATB = LATB;
  9577  0A73  0022               	movlb	2	; select bank2
  9578  0A74  080D               	movf	13,w	;volatile
  9579  0A75  0020               	movlb	0	; select bank0
  9580  0A76  00A0               	movwf	??_SetOutPutLATX
  9581  0A77  0820               	movf	??_SetOutPutLATX,w
  9582  0A78  00E9               	movwf	_pulseOutLATB
  9583                           
  9584                           ;MotorDrive.c: 2992:     pulseOutLATC = LATC;
  9585  0A79  0022               	movlb	2	; select bank2
  9586  0A7A  080E               	movf	14,w	;volatile
  9587  0A7B  0020               	movlb	0	; select bank0
  9588  0A7C  00A0               	movwf	??_SetOutPutLATX
  9589  0A7D  0820               	movf	??_SetOutPutLATX,w
  9590  0A7E  00E8               	movwf	_pulseOutLATC
  9591                           
  9592                           ;MotorDrive.c: 2996:     pulseOutLATA &= (UB) (~(0x32 | 0x00));
  9593  0A7F  30CD               	movlw	205
  9594  0A80  00A0               	movwf	??_SetOutPutLATX
  9595  0A81  0820               	movf	??_SetOutPutLATX,w
  9596  0A82  05EA               	andwf	_pulseOutLATA,f
  9597                           
  9598                           ;MotorDrive.c: 2997:     pulseOutLATB &= (UB) (~(0x00 | 0xA0));
  9599  0A83  305F               	movlw	95
  9600  0A84  00A0               	movwf	??_SetOutPutLATX
  9601  0A85  0820               	movf	??_SetOutPutLATX,w
  9602  0A86  05E9               	andwf	_pulseOutLATB,f
  9603                           
  9604                           ;MotorDrive.c: 2998:     pulseOutLATC &= (UB) (~(0x02 | 0x0C));
  9605  0A87  30F1               	movlw	241
  9606  0A88  00A0               	movwf	??_SetOutPutLATX
  9607  0A89  0820               	movf	??_SetOutPutLATX,w
  9608  0A8A  05E8               	andwf	_pulseOutLATC,f
  9609                           
  9610                           ;MotorDrive.c: 3001:     pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork_M1
      +                          );
  9611  0A8B  0867               	movf	_pulseOutLATAWork_M0,w
  9612  0A8C  0464               	iorwf	_pulseOutLATAWork_M1,w
  9613  0A8D  00A0               	movwf	??_SetOutPutLATX
  9614  0A8E  0820               	movf	??_SetOutPutLATX,w
  9615  0A8F  04EA               	iorwf	_pulseOutLATA,f
  9616                           
  9617                           ;MotorDrive.c: 3002:     pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork_M1
      +                          );
  9618  0A90  0866               	movf	_pulseOutLATBWork_M0,w
  9619  0A91  0463               	iorwf	_pulseOutLATBWork_M1,w
  9620  0A92  00A0               	movwf	??_SetOutPutLATX
  9621  0A93  0820               	movf	??_SetOutPutLATX,w
  9622  0A94  04E9               	iorwf	_pulseOutLATB,f
  9623                           
  9624                           ;MotorDrive.c: 3003:     pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork_M1
      +                          );
  9625  0A95  0865               	movf	_pulseOutLATCWork_M0,w
  9626  0A96  0462               	iorwf	_pulseOutLATCWork_M1,w
  9627  0A97  00A0               	movwf	??_SetOutPutLATX
  9628  0A98  0820               	movf	??_SetOutPutLATX,w
  9629  0A99  04E8               	iorwf	_pulseOutLATC,f
  9630                           
  9631                           ;MotorDrive.c: 3006:     LATA = pulseOutLATA;
  9632  0A9A  086A               	movf	_pulseOutLATA,w
  9633  0A9B  0022               	movlb	2	; select bank2
  9634  0A9C  008C               	movwf	12	;volatile
  9635                           
  9636                           ;MotorDrive.c: 3007:     LATB = pulseOutLATB;
  9637  0A9D  0020               	movlb	0	; select bank0
  9638  0A9E  0869               	movf	_pulseOutLATB,w
  9639  0A9F  0022               	movlb	2	; select bank2
  9640  0AA0  008D               	movwf	13	;volatile
  9641                           
  9642                           ;MotorDrive.c: 3008:     LATC = pulseOutLATC;
  9643  0AA1  0020               	movlb	0	; select bank0
  9644  0AA2  0868               	movf	_pulseOutLATC,w
  9645  0AA3  0022               	movlb	2	; select bank2
  9646  0AA4  008E               	movwf	14	;volatile
  9647  0AA5  0008               	return
  9648  0AA6                     __end_of_SetOutPutLATX:
  9649                           
  9650                           	psect	text51
  9651  162D                     __ptext51:	
  9652 ;; *************** function _SetMotorPositionSearchStart *****************
  9653 ;; Defined at:
  9654 ;;		line 1887 in file "MotorDrive.c"
  9655 ;; Parameters:    Size  Location     Type
  9656 ;;  motor_no        1    wreg     unsigned char 
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;  motor_no        1   16[BANK0 ] unsigned char 
  9659 ;; Return value:  Size  Location     Type
  9660 ;;                  1    wreg      void 
  9661 ;; Registers used:
  9662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9663 ;; Tracked objects:
  9664 ;;		On entry : 1F/0
  9665 ;;		On exit  : 1F/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9668 ;;      Params:         0       0       0       0       0       0       0       0
  9669 ;;      Locals:         0       1       0       0       0       0       0       0
  9670 ;;      Temps:          0       0       0       0       0       0       0       0
  9671 ;;      Totals:         0       1       0       0       0       0       0       0
  9672 ;;Total ram usage:        1 bytes
  9673 ;; Hardware stack levels used:    1
  9674 ;; Hardware stack levels required when called:   11
  9675 ;; This function calls:
  9676 ;;		_InitPositionSearch
  9677 ;;		_SetAfterDetectLoadFunc
  9678 ;;		_SetMotorStart
  9679 ;; This function is called by:
  9680 ;;		_SpiCmdFunc_SearchBasePosition
  9681 ;;		_SpiCmdFunc_Search1008Position
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           
  9686                           ;psect for function _SetMotorPositionSearchStart
  9687  162D                     _SetMotorPositionSearchStart:
  9688                           
  9689                           ;incstack = 0
  9690                           ; Regs used in _SetMotorPositionSearchStart: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9691                           ;SetMotorPositionSearchStart@motor_no stored from wreg
  9692  162D  00B0               	movwf	SetMotorPositionSearchStart@motor_no
  9693                           
  9694                           ;MotorDrive.c: 1887: void SetMotorPositionSearchStart(UB motor_no);MotorDrive.c: 1888: {
      +                          ;MotorDrive.c: 1891:     searchTotalSteps[ motor_no ] = 0;
  9695  162E  3530               	lslf	SetMotorPositionSearchStart@motor_no,w
  9696  162F  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  9697  1630  0086               	movwf	6
  9698  1631  3001               	movlw	1	; select bank2/3
  9699  1632  0087               	movwf	7
  9700  1633  3000               	movlw	0
  9701  1634  3FC0               	movwi [0]fsr1
  9702  1635  3FC1               	movwi [1]fsr1
  9703                           
  9704                           ;MotorDrive.c: 1893:     currentPosition[ motor_no ] = 0;
  9705  1636  3530               	lslf	SetMotorPositionSearchStart@motor_no,w
  9706  1637  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  9707  1638  0086               	movwf	6
  9708  1639  0187               	clrf	7
  9709  163A  3000               	movlw	0
  9710  163B  3FC0               	movwi [0]fsr1
  9711  163C  3FC1               	movwi [1]fsr1
  9712                           
  9713                           ;MotorDrive.c: 1895:     InitPositionSearch(motor_no);
  9714  163D  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9715  163E  318E  261A  3196   	fcall	_InitPositionSearch
  9716                           
  9717                           ;MotorDrive.c: 1897:     SetAfterDetectLoadFunc(motor_no, AfterDetectedLoadPosition);
  9718  1641  305D               	movlw	low _AfterDetectedLoadPosition
  9719  1642  00A0               	movwf	SetAfterDetectLoadFunc@func
  9720  1643  3000               	movlw	high _AfterDetectedLoadPosition
  9721  1644  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  9722  1645  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9723  1646  3190  20BD  3196   	fcall	_SetAfterDetectLoadFunc
  9724                           
  9725                           ;MotorDrive.c: 1899:     SetMotorStart(motor_no);
  9726  1649  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9727  164A  3190  2089         	fcall	_SetMotorStart
  9728  164C  0008               	return
  9729  164D                     __end_of_SetMotorPositionSearchStart:
  9730                           
  9731                           	psect	text52
  9732  0E1A                     __ptext52:	
  9733 ;; *************** function _InitPositionSearch *****************
  9734 ;; Defined at:
  9735 ;;		line 1934 in file "MotorDrive.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;  motor_no        1    wreg     unsigned char 
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  motor_no        1   15[BANK0 ] unsigned char 
  9740 ;;  i               1   14[BANK0 ] unsigned char 
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      void 
  9743 ;; Registers used:
  9744 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 1F/0
  9747 ;;		On exit  : 1F/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9750 ;;      Params:         0       0       0       0       0       0       0       0
  9751 ;;      Locals:         0       2       0       0       0       0       0       0
  9752 ;;      Temps:          0       8       0       0       0       0       0       0
  9753 ;;      Totals:         0      10       0       0       0       0       0       0
  9754 ;;Total ram usage:       10 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    9
  9757 ;; This function calls:
  9758 ;;		___bmul
  9759 ;;		___wmul
  9760 ;; This function is called by:
  9761 ;;		_SetMotorPositionSearchStart
  9762 ;;		_SetMotorCorrectPositionStart
  9763 ;;		_AfterDetectedLoadPosition
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           
  9768                           ;psect for function _InitPositionSearch
  9769  0E1A                     _InitPositionSearch:
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _InitPositionSearch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9773                           ;InitPositionSearch@motor_no stored from wreg
  9774  0E1A  00AF               	movwf	InitPositionSearch@motor_no
  9775                           
  9776                           ;MotorDrive.c: 1934: void InitPositionSearch(UB motor_no);MotorDrive.c: 1935: {;MotorDri
      +                          ve.c: 1936:     UB i;;MotorDrive.c: 1938:     doubleInterval = 0;
  9777  0E1B  0021               	movlb	1	; select bank1
  9778  0E1C  01CD               	clrf	_doubleInterval^(0+128)
  9779                           
  9780                           ;MotorDrive.c: 1940:     positionSearchCt[ motor_no ] = 0;
  9781  0E1D  0020               	movlb	0	; select bank0
  9782  0E1E  352F               	lslf	InitPositionSearch@motor_no,w
  9783  0E1F  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  9784  0E20  0086               	movwf	6
  9785  0E21  0187               	clrf	7
  9786  0E22  3000               	movlw	0
  9787  0E23  3FC0               	movwi [0]fsr1
  9788  0E24  3FC1               	movwi [1]fsr1
  9789                           
  9790                           ;MotorDrive.c: 1942:     detectFinePosCt[ motor_no ] = 0;
  9791  0E25  082F               	movf	InitPositionSearch@motor_no,w
  9792  0E26  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  9793  0E27  0086               	movwf	6
  9794  0E28  0187               	clrf	7
  9795  0E29  0181               	clrf	1
  9796                           
  9797                           ;MotorDrive.c: 1943:     detectRoughPosCt[ motor_no ] = 0;
  9798  0E2A  082F               	movf	InitPositionSearch@motor_no,w
  9799  0E2B  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  9800  0E2C  0086               	movwf	6
  9801  0E2D  0187               	clrf	7
  9802  0E2E  0181               	clrf	1
  9803                           
  9804                           ;MotorDrive.c: 1944:     positionSearchStat[ motor_no ] = ID_SEARCH_FINE_POS_1ST;
  9805  0E2F  082F               	movf	InitPositionSearch@motor_no,w
  9806  0E30  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  9807  0E31  0086               	movwf	6
  9808  0E32  0187               	clrf	7
  9809  0E33  0181               	clrf	1
  9810                           
  9811                           ;MotorDrive.c: 1945:     detectLoadType[ motor_no ] = ID_DETECT_LOAD_NULL;
  9812  0E34  082F               	movf	InitPositionSearch@motor_no,w
  9813  0E35  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  9814  0E36  0086               	movwf	6
  9815  0E37  0187               	clrf	7
  9816  0E38  0181               	clrf	1
  9817                           
  9818                           ;MotorDrive.c: 1946:     detectLoadCont[ motor_no ] = 0;
  9819  0E39  082F               	movf	InitPositionSearch@motor_no,w
  9820  0E3A  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  9821  0E3B  0086               	movwf	6
  9822  0E3C  0187               	clrf	7
  9823  0E3D  0181               	clrf	1
  9824                           
  9825                           ;MotorDrive.c: 1947:     detectRoughTotalMove[ motor_no ] = 0;
  9826  0E3E  352F               	lslf	InitPositionSearch@motor_no,w
  9827  0E3F  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  9828  0E40  0086               	movwf	6
  9829  0E41  0187               	clrf	7
  9830  0E42  3000               	movlw	0
  9831  0E43  3FC0               	movwi [0]fsr1
  9832  0E44  3FC1               	movwi [1]fsr1
  9833                           
  9834                           ;MotorDrive.c: 1949:     detectLoadPositionIndex[ motor_no ] = 0;
  9835  0E45  082F               	movf	InitPositionSearch@motor_no,w
  9836  0E46  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  9837  0E47  0086               	movwf	6
  9838  0E48  0187               	clrf	7
  9839  0E49  0181               	clrf	1
  9840                           
  9841                           ;MotorDrive.c: 1950:     for (i = 0; i < ( ( ( 8 * 2 ) + ( 1 * 9 ) ) - 2 ); i++) {
  9842  0E4A  01AE               	clrf	InitPositionSearch@i
  9843  0E4B                     l6142:
  9844                           
  9845                           ;MotorDrive.c: 1951:         detectLoadPosition[ motor_no ][ i ] = 0;
  9846  0E4B  082E               	movf	InitPositionSearch@i,w
  9847  0E4C  00A6               	movwf	??_InitPositionSearch
  9848  0E4D  01A7               	clrf	??_InitPositionSearch+1
  9849  0E4E  35A6               	lslf	??_InitPositionSearch,f
  9850  0E4F  0DA7               	rlf	??_InitPositionSearch+1,f
  9851  0E50  082F               	movf	InitPositionSearch@motor_no,w
  9852  0E51  00A8               	movwf	??_InitPositionSearch+2
  9853  0E52  01A9               	clrf	??_InitPositionSearch+3
  9854  0E53  0828               	movf	??_InitPositionSearch+2,w
  9855  0E54  00A0               	movwf	___wmul@multiplier
  9856  0E55  0829               	movf	??_InitPositionSearch+3,w
  9857  0E56  00A1               	movwf	___wmul@multiplier+1
  9858  0E57  302E               	movlw	46
  9859  0E58  00A2               	movwf	___wmul@multiplicand
  9860  0E59  3000               	movlw	0
  9861  0E5A  00A3               	movwf	___wmul@multiplicand+1
  9862  0E5B  3195  2568  318E   	fcall	___wmul
  9863  0E5E  3094               	movlw	148
  9864  0E5F  00AA               	movwf	??_InitPositionSearch+4
  9865  0E60  3021               	movlw	33
  9866  0E61  00AB               	movwf	??_InitPositionSearch+5
  9867  0E62  0820               	movf	?___wmul,w
  9868  0E63  072A               	addwf	??_InitPositionSearch+4,w
  9869  0E64  00AC               	movwf	??_InitPositionSearch+6
  9870  0E65  0821               	movf	?___wmul+1,w
  9871  0E66  3D2B               	addwfc	??_InitPositionSearch+5,w
  9872  0E67  00AD               	movwf	??_InitPositionSearch+7
  9873  0E68  0826               	movf	??_InitPositionSearch,w
  9874  0E69  072C               	addwf	??_InitPositionSearch+6,w
  9875  0E6A  0086               	movwf	6
  9876  0E6B  0827               	movf	??_InitPositionSearch+1,w
  9877  0E6C  3D2D               	addwfc	??_InitPositionSearch+7,w
  9878  0E6D  0087               	movwf	7
  9879  0E6E  3000               	movlw	0
  9880  0E6F  3FC0               	movwi [0]fsr1
  9881  0E70  3FC1               	movwi [1]fsr1
  9882                           
  9883                           ;MotorDrive.c: 1953:         detectLoadPositionType[ motor_no ][ i ] = 0;
  9884  0E71  3017               	movlw	23
  9885  0E72  00A6               	movwf	??_InitPositionSearch
  9886  0E73  0826               	movf	??_InitPositionSearch,w
  9887  0E74  00A0               	movwf	___bmul@multiplicand
  9888  0E75  082F               	movf	InitPositionSearch@motor_no,w
  9889  0E76  3192  22DC  318E   	fcall	___bmul
  9890  0E79  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  9891  0E7A  072E               	addwf	InitPositionSearch@i,w
  9892  0E7B  00A7               	movwf	??_InitPositionSearch+1
  9893  0E7C  0827               	movf	??_InitPositionSearch+1,w
  9894  0E7D  0086               	movwf	6
  9895  0E7E  3001               	movlw	1	; select bank2/3
  9896  0E7F  0087               	movwf	7
  9897  0E80  0181               	clrf	1
  9898                           
  9899                           ;MotorDrive.c: 1954:     }
  9900  0E81  3001               	movlw	1
  9901  0E82  00A6               	movwf	??_InitPositionSearch
  9902  0E83  0826               	movf	??_InitPositionSearch,w
  9903  0E84  07AE               	addwf	InitPositionSearch@i,f
  9904  0E85  3017               	movlw	23
  9905  0E86  022E               	subwf	InitPositionSearch@i,w
  9906  0E87  1C03               	skipc
  9907  0E88  2E4B               	goto	l6142
  9908                           
  9909                           ;MotorDrive.c: 1956:     detectLoadPositionPtr[ motor_no ] = &detectLoadPosition[ motor_
      +                          no ][ 0 ];
  9910  0E89  082F               	movf	InitPositionSearch@motor_no,w
  9911  0E8A  00A6               	movwf	??_InitPositionSearch
  9912  0E8B  01A7               	clrf	??_InitPositionSearch+1
  9913  0E8C  0826               	movf	??_InitPositionSearch,w
  9914  0E8D  00A0               	movwf	___wmul@multiplier
  9915  0E8E  0827               	movf	??_InitPositionSearch+1,w
  9916  0E8F  00A1               	movwf	___wmul@multiplier+1
  9917  0E90  302E               	movlw	46
  9918  0E91  00A2               	movwf	___wmul@multiplicand
  9919  0E92  3000               	movlw	0
  9920  0E93  00A3               	movwf	___wmul@multiplicand+1
  9921  0E94  3195  2568  318E   	fcall	___wmul
  9922  0E97  3094               	movlw	148
  9923  0E98  00A8               	movwf	??_InitPositionSearch+2
  9924  0E99  3021               	movlw	33
  9925  0E9A  00A9               	movwf	??_InitPositionSearch+3
  9926  0E9B  0820               	movf	?___wmul,w
  9927  0E9C  0728               	addwf	??_InitPositionSearch+2,w
  9928  0E9D  00AA               	movwf	??_InitPositionSearch+4
  9929  0E9E  0821               	movf	?___wmul+1,w
  9930  0E9F  3D29               	addwfc	??_InitPositionSearch+3,w
  9931  0EA0  00AB               	movwf	??_InitPositionSearch+5
  9932  0EA1  352F               	lslf	InitPositionSearch@motor_no,w
  9933  0EA2  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  9934  0EA3  0086               	movwf	6
  9935  0EA4  3001               	movlw	1	; select bank2/3
  9936  0EA5  0087               	movwf	7
  9937  0EA6  082A               	movf	??_InitPositionSearch+4,w
  9938  0EA7  3FC0               	movwi [0]fsr1
  9939  0EA8  082B               	movf	??_InitPositionSearch+5,w
  9940  0EA9  3FC1               	movwi [1]fsr1
  9941                           
  9942                           ;MotorDrive.c: 1958:     detectLoadPositionTypePtr[ motor_no ] = &detectLoadPositionType
      +                          [ motor_no ][ 0 ];
  9943  0EAA  3017               	movlw	23
  9944  0EAB  00A6               	movwf	??_InitPositionSearch
  9945  0EAC  0826               	movf	??_InitPositionSearch,w
  9946  0EAD  00A0               	movwf	___bmul@multiplicand
  9947  0EAE  082F               	movf	InitPositionSearch@motor_no,w
  9948  0EAF  3192  22DC         	fcall	___bmul
  9949  0EB1  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  9950  0EB2  00A7               	movwf	??_InitPositionSearch+1
  9951  0EB3  082F               	movf	InitPositionSearch@motor_no,w
  9952  0EB4  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  9953  0EB5  0086               	movwf	6
  9954  0EB6  0187               	clrf	7
  9955  0EB7  0827               	movf	??_InitPositionSearch+1,w
  9956  0EB8  0081               	movwf	1
  9957  0EB9  0008               	return
  9958  0EBA                     __end_of_InitPositionSearch:
  9959                           
  9960                           	psect	text53
  9961  1568                     __ptext53:	
  9962 ;; *************** function ___wmul *****************
  9963 ;; Defined at:
  9964 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul16.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9967 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;  product         2    4[BANK0 ] unsigned int 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  2    0[BANK0 ] unsigned int 
  9972 ;; Registers used:
  9973 ;;		wreg, status,2, status,0
  9974 ;; Tracked objects:
  9975 ;;		On entry : 1F/0
  9976 ;;		On exit  : 1F/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9979 ;;      Params:         0       4       0       0       0       0       0       0
  9980 ;;      Locals:         0       2       0       0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0
  9982 ;;      Totals:         0       6       0       0       0       0       0       0
  9983 ;;Total ram usage:        6 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    8
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_InitPositionSearch
  9990 ;;		_DetermineBasePosition
  9991 ;;		_UpdataHandPosition
  9992 ;;		_UpdateCurrentPositionByFinePosition
  9993 ;;		_SaveLoadPosition
  9994 ;;		_VerifyHandPosition_LoadPosition
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           
  9999                           ;psect for function ___wmul
 10000  1568                     ___wmul:
 10001                           
 10002                           ;incstack = 0
 10003                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10004  1568  01A4               	clrf	___wmul@product
 10005  1569  01A5               	clrf	___wmul@product+1
 10006  156A                     l5974:
 10007  156A  1C20               	btfss	___wmul@multiplier,0
 10008  156B  2D70               	goto	l1456
 10009  156C  0822               	movf	___wmul@multiplicand,w
 10010  156D  07A4               	addwf	___wmul@product,f
 10011  156E  0823               	movf	___wmul@multiplicand+1,w
 10012  156F  3DA5               	addwfc	___wmul@product+1,f
 10013  1570                     l1456:
 10014  1570  3001               	movlw	1
 10015  1571                     u4475:
 10016  1571  35A2               	lslf	___wmul@multiplicand,f
 10017  1572  0DA3               	rlf	___wmul@multiplicand+1,f
 10018  1573  0B89               	decfsz	9,f
 10019  1574  2D71               	goto	u4475
 10020  1575  3001               	movlw	1
 10021  1576                     u4485:
 10022  1576  36A1               	lsrf	___wmul@multiplier+1,f
 10023  1577  0CA0               	rrf	___wmul@multiplier,f
 10024  1578  0B89               	decfsz	9,f
 10025  1579  2D76               	goto	u4485
 10026  157A  0820               	movf	___wmul@multiplier,w
 10027  157B  0421               	iorwf	___wmul@multiplier+1,w
 10028  157C  1D03               	btfss	3,2
 10029  157D  2D6A               	goto	l5974
 10030  157E  0825               	movf	___wmul@product+1,w
 10031  157F  00A1               	movwf	?___wmul+1
 10032  1580  0824               	movf	___wmul@product,w
 10033  1581  00A0               	movwf	?___wmul
 10034  1582  0008               	return
 10035  1583                     __end_of___wmul:
 10036                           
 10037                           	psect	text54
 10038  12DC                     __ptext54:	
 10039 ;; *************** function ___bmul *****************
 10040 ;; Defined at:
 10041 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul8.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  multiplier      1    wreg     unsigned char 
 10044 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10047 ;;  product         1    2[BANK0 ] unsigned char 
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      unsigned char 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0
 10052 ;; Tracked objects:
 10053 ;;		On entry : 1F/0
 10054 ;;		On exit  : 1F/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10057 ;;      Params:         0       1       0       0       0       0       0       0
 10058 ;;      Locals:         0       2       0       0       0       0       0       0
 10059 ;;      Temps:          0       1       0       0       0       0       0       0
 10060 ;;      Totals:         0       4       0       0       0       0       0       0
 10061 ;;Total ram usage:        4 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    8
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_InitPositionSearch
 10068 ;;		_DetermineBasePosition
 10069 ;;		_UpdateCurrentPositionByFinePosition
 10070 ;;		_SaveLoadPosition
 10071 ;;		_VerifyHandPosition_LoadPosition
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function ___bmul
 10077  12DC                     ___bmul:
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10081                           ;___bmul@multiplier stored from wreg
 10082  12DC  00A3               	movwf	___bmul@multiplier
 10083  12DD  01A2               	clrf	___bmul@product
 10084  12DE                     l5988:
 10085  12DE  1C23               	btfss	___bmul@multiplier,0
 10086  12DF  2AE4               	goto	l5992
 10087  12E0  0820               	movf	___bmul@multiplicand,w
 10088  12E1  00A1               	movwf	??___bmul
 10089  12E2  0821               	movf	??___bmul,w
 10090  12E3  07A2               	addwf	___bmul@product,f
 10091  12E4                     l5992:
 10092  12E4  1003               	clrc
 10093  12E5  0DA0               	rlf	___bmul@multiplicand,f
 10094  12E6  1003               	clrc
 10095  12E7  0CA3               	rrf	___bmul@multiplier,f
 10096  12E8  0823               	movf	___bmul@multiplier,w
 10097  12E9  1D03               	btfss	3,2
 10098  12EA  2ADE               	goto	l5988
 10099  12EB  0822               	movf	___bmul@product,w
 10100  12EC  0008               	return
 10101  12ED                     __end_of___bmul:
 10102                           
 10103                           	psect	text55
 10104  137C                     __ptext55:	
 10105 ;; *************** function _DeactivateHandPosition *****************
 10106 ;; Defined at:
 10107 ;;		line 2524 in file "MotorDrive.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  motor_no        1    wreg     unsigned char 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, status,2, status,0
 10116 ;; Tracked objects:
 10117 ;;		On entry : 1F/0
 10118 ;;		On exit  : 1F/1
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10121 ;;      Params:         0       0       0       0       0       0       0       0
 10122 ;;      Locals:         0       1       0       0       0       0       0       0
 10123 ;;      Temps:          0       2       0       0       0       0       0       0
 10124 ;;      Totals:         0       3       0       0       0       0       0       0
 10125 ;;Total ram usage:        3 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:    8
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_SpiCmdFunc_SearchBasePosition
 10132 ;;		_SpiCmdFunc_Search1008Position
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           
 10137                           ;psect for function _DeactivateHandPosition
 10138  137C                     _DeactivateHandPosition:
 10139                           
 10140                           ;incstack = 0
 10141                           ; Regs used in _DeactivateHandPosition: [wreg+status,2+status,0]
 10142                           ;DeactivateHandPosition@motor_no stored from wreg
 10143  137C  00A2               	movwf	DeactivateHandPosition@motor_no
 10144                           
 10145                           ;MotorDrive.c: 2524: void DeactivateHandPosition(UB motor_no);MotorDrive.c: 2525: {;Moto
      +                          rDrive.c: 2526:     motorBitOperation = (UB) (0x01 << motor_no);
 10146  137D  3001               	movlw	1
 10147  137E  00A0               	movwf	??_DeactivateHandPosition
 10148  137F  0A22               	incf	DeactivateHandPosition@motor_no,w
 10149  1380  2B82               	goto	u4824
 10150  1381                     u4825:
 10151  1381  35A0               	lslf	??_DeactivateHandPosition,f
 10152  1382                     u4824:
 10153  1382  0B89               	decfsz	9,f
 10154  1383  2B81               	goto	u4825
 10155  1384  0820               	movf	??_DeactivateHandPosition,w
 10156  1385  00A1               	movwf	??_DeactivateHandPosition+1
 10157  1386  0821               	movf	??_DeactivateHandPosition+1,w
 10158  1387  00F4               	movwf	_motorBitOperation
 10159                           
 10160                           ;MotorDrive.c: 2528:     handPositionActiveBit &= (UB) (~motorBitOperation);
 10161  1388  0974               	comf	_motorBitOperation,w
 10162  1389  00A0               	movwf	??_DeactivateHandPosition
 10163  138A  0820               	movf	??_DeactivateHandPosition,w
 10164  138B  0021               	movlb	1	; select bank1
 10165  138C  05D1               	andwf	_handPositionActiveBit^(0+128),f
 10166  138D  0008               	return
 10167  138E                     __end_of_DeactivateHandPosition:
 10168                           
 10169                           	psect	text56
 10170  136A                     __ptext56:	
 10171 ;; *************** function _SetMotorStop *****************
 10172 ;; Defined at:
 10173 ;;		line 2036 in file "MotorDrive.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;  motor_no        1    wreg     unsigned char 
 10176 ;; Auto vars:     Size  Location     Type
 10177 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10178 ;; Return value:  Size  Location     Type
 10179 ;;                  1    wreg      void 
 10180 ;; Registers used:
 10181 ;;		wreg, status,2, status,0
 10182 ;; Tracked objects:
 10183 ;;		On entry : 1F/0
 10184 ;;		On exit  : 1F/1
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10187 ;;      Params:         0       0       0       0       0       0       0       0
 10188 ;;      Locals:         0       1       0       0       0       0       0       0
 10189 ;;      Temps:          0       2       0       0       0       0       0       0
 10190 ;;      Totals:         0       3       0       0       0       0       0       0
 10191 ;;Total ram usage:        3 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; Hardware stack levels required when called:    8
 10194 ;; This function calls:
 10195 ;;		Nothing
 10196 ;; This function is called by:
 10197 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10198 ;; This function uses a non-reentrant model
 10199 ;;
 10200                           
 10201                           
 10202                           ;psect for function _SetMotorStop
 10203  136A                     _SetMotorStop:
 10204                           
 10205                           ;incstack = 0
 10206                           ; Regs used in _SetMotorStop: [wreg+status,2+status,0]
 10207                           ;SetMotorStop@motor_no stored from wreg
 10208  136A  00A2               	movwf	SetMotorStop@motor_no
 10209                           
 10210                           ;MotorDrive.c: 2036: void SetMotorStop(UB motor_no);MotorDrive.c: 2037: {;MotorDrive.c: 
      +                          2038:     motorBitOperation = (UB) (0x01 << motor_no);
 10211  136B  3001               	movlw	1
 10212  136C  00A0               	movwf	??_SetMotorStop
 10213  136D  0A22               	incf	SetMotorStop@motor_no,w
 10214  136E  2B70               	goto	u4704
 10215  136F                     u4705:
 10216  136F  35A0               	lslf	??_SetMotorStop,f
 10217  1370                     u4704:
 10218  1370  0B89               	decfsz	9,f
 10219  1371  2B6F               	goto	u4705
 10220  1372  0820               	movf	??_SetMotorStop,w
 10221  1373  00A1               	movwf	??_SetMotorStop+1
 10222  1374  0821               	movf	??_SetMotorStop+1,w
 10223  1375  00F4               	movwf	_motorBitOperation
 10224                           
 10225                           ;MotorDrive.c: 2040:     reqStopMotorBit |= motorBitOperation;
 10226  1376  0874               	movf	_motorBitOperation,w
 10227  1377  00A0               	movwf	??_SetMotorStop
 10228  1378  0820               	movf	??_SetMotorStop,w
 10229  1379  0021               	movlb	1	; select bank1
 10230  137A  04D8               	iorwf	_reqStopMotorBit^(0+128),f
 10231  137B  0008               	return
 10232  137C                     __end_of_SetMotorStop:
 10233                           
 10234                           	psect	text57
 10235  10BD                     __ptext57:	
 10236 ;; *************** function _SetAfterDetectLoadFunc *****************
 10237 ;; Defined at:
 10238 ;;		line 1663 in file "MotorDrive.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;  motor_no        1    wreg     unsigned char 
 10241 ;;  func            2    0[BANK0 ] PTR FTN(unsigned char ,)
 10242 ;;		 -> VerifyHandPosition_LoadPosition(1), AfterDetectedLoadPosition(1), 
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  1    wreg      void 
 10247 ;; Registers used:
 10248 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10249 ;; Tracked objects:
 10250 ;;		On entry : 1F/0
 10251 ;;		On exit  : 1F/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10254 ;;      Params:         0       2       0       0       0       0       0       0
 10255 ;;      Locals:         0       1       0       0       0       0       0       0
 10256 ;;      Temps:          0       0       0       0       0       0       0       0
 10257 ;;      Totals:         0       3       0       0       0       0       0       0
 10258 ;;Total ram usage:        3 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    8
 10261 ;; This function calls:
 10262 ;;		Nothing
 10263 ;; This function is called by:
 10264 ;;		_SetMotorPositionSearchStart
 10265 ;;		_SetMotorCorrectPositionStart
 10266 ;;		_AfterDetectedLoadPosition
 10267 ;;		_SetFwdPulseWithCorrectProc
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           
 10272                           ;psect for function _SetAfterDetectLoadFunc
 10273  10BD                     _SetAfterDetectLoadFunc:
 10274                           
 10275                           ;incstack = 0
 10276                           ; Regs used in _SetAfterDetectLoadFunc: [wreg+fsr1l+fsr1h+status,2+status,0]
 10277                           ;SetAfterDetectLoadFunc@motor_no stored from wreg
 10278  10BD  00A2               	movwf	SetAfterDetectLoadFunc@motor_no
 10279                           
 10280                           ;MotorDrive.c: 1663: void SetAfterDetectLoadFunc(UB motor_no, void ( * func)(UB motor_no
      +                          ));MotorDrive.c: 1664: {;MotorDrive.c: 1665:     cbAfterDetectLoadFunc[ motor_no ] = fun
      +                          c;
 10281  10BE  3522               	lslf	SetAfterDetectLoadFunc@motor_no,w
 10282  10BF  3E20               	addlw	(low (_cbAfterDetectLoadFunc| (0+256)))& (0+255)
 10283  10C0  0086               	movwf	6
 10284  10C1  3001               	movlw	1	; select bank2/3
 10285  10C2  0087               	movwf	7
 10286  10C3  0820               	movf	SetAfterDetectLoadFunc@func,w
 10287  10C4  3FC0               	movwi [0]fsr1
 10288  10C5  0821               	movf	SetAfterDetectLoadFunc@func+1,w
 10289  10C6  3FC1               	movwi [1]fsr1
 10290  10C7  0008               	return
 10291  10C8                     __end_of_SetAfterDetectLoadFunc:
 10292                           
 10293                           	psect	text58
 10294  1093                     __ptext58:	
 10295 ;; *************** function _SetAfterMotorStopFunc *****************
 10296 ;; Defined at:
 10297 ;;		line 1650 in file "MotorDrive.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;  motor_no        1    wreg     unsigned char 
 10300 ;;  func            2    0[BANK0 ] PTR FTN(unsigned char ,)
 10301 ;;		 -> SetFwdPulseWithCorrectProc(1), SpiCmdFunc_Search1008Position(1), SpiCmdFunc_DisableExcitating(1), SpiCmdFunc_Ena
      +bleExcitating(1), 
 10302 ;;		 -> SpiCmdFunc_StopDetectVrs(1), SpiCmdFunc_StartDetectVrs(1), SpiCmdFunc_RevPulsePositionCtl(1), SpiCmdFunc_FwdPuls
      +ePositionCtl(1), 
 10303 ;;		 -> SpiCmdFunc_FwdPulseWithCorrect(1), SpiCmdFunc_SearchBasePosition(1), SpiCmdFunc_SearchLoadPosition(1), SpiCmdFun
      +c_FwdPulseWithShake(1), 
 10304 ;;		 -> SpiCmdFunc_RevPulseNormal(1), SpiCmdFunc_FwdPulseNormal(1), SpiCmdFunc_Test(1), SPIControl_SetNotification(1), 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10307 ;; Return value:  Size  Location     Type
 10308 ;;                  1    wreg      void 
 10309 ;; Registers used:
 10310 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10311 ;; Tracked objects:
 10312 ;;		On entry : 1F/0
 10313 ;;		On exit  : 1F/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10316 ;;      Params:         0       2       0       0       0       0       0       0
 10317 ;;      Locals:         0       1       0       0       0       0       0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0
 10319 ;;      Totals:         0       3       0       0       0       0       0       0
 10320 ;;Total ram usage:        3 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    8
 10323 ;; This function calls:
 10324 ;;		Nothing
 10325 ;; This function is called by:
 10326 ;;		_AfterDetectedLoadPosition
 10327 ;;		_SPIControl_ExecuteCommand
 10328 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _SetAfterMotorStopFunc
 10334  1093                     _SetAfterMotorStopFunc:
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _SetAfterMotorStopFunc: [wreg+fsr1l+fsr1h+status,2+status,0]
 10338                           ;SetAfterMotorStopFunc@motor_no stored from wreg
 10339  1093  00A2               	movwf	SetAfterMotorStopFunc@motor_no
 10340                           
 10341                           ;MotorDrive.c: 1650: void SetAfterMotorStopFunc(UB motor_no, void ( * func)(UB motor_no)
      +                          );MotorDrive.c: 1651: {;MotorDrive.c: 1652:     cbAfterMotorStopFunc[ motor_no ] = func;
 10342  1094  3522               	lslf	SetAfterMotorStopFunc@motor_no,w
 10343  1095  3EAC               	addlw	(low (_cbAfterMotorStopFunc| 0))& (0+255)
 10344  1096  0086               	movwf	6
 10345  1097  0187               	clrf	7
 10346  1098  0820               	movf	SetAfterMotorStopFunc@func,w
 10347  1099  3FC0               	movwi [0]fsr1
 10348  109A  0821               	movf	SetAfterMotorStopFunc@func+1,w
 10349  109B  3FC1               	movwi [1]fsr1
 10350  109C  0008               	return
 10351  109D                     __end_of_SetAfterMotorStopFunc:
 10352                           
 10353                           	psect	text59
 10354  13EA                     __ptext59:	
 10355 ;; *************** function _GetIsMotorActive *****************
 10356 ;; Defined at:
 10357 ;;		line 2641 in file "MotorDrive.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;  motor_no        1    wreg     unsigned char 
 10360 ;; Auto vars:     Size  Location     Type
 10361 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10362 ;;  res             1    3[BANK0 ] unsigned char 
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  1    wreg      unsigned char 
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0
 10367 ;; Tracked objects:
 10368 ;;		On entry : 1F/0
 10369 ;;		On exit  : 1F/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10372 ;;      Params:         0       0       0       0       0       0       0       0
 10373 ;;      Locals:         0       2       0       0       0       0       0       0
 10374 ;;      Temps:          0       2       0       0       0       0       0       0
 10375 ;;      Totals:         0       4       0       0       0       0       0       0
 10376 ;;Total ram usage:        4 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    8
 10379 ;; This function calls:
 10380 ;;		Nothing
 10381 ;; This function is called by:
 10382 ;;		_SPIControl_ExecuteCommand
 10383 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           
 10388                           ;psect for function _GetIsMotorActive
 10389  13EA                     _GetIsMotorActive:
 10390                           
 10391                           ;incstack = 0
 10392                           ; Regs used in _GetIsMotorActive: [wreg+status,2+status,0]
 10393                           ;GetIsMotorActive@motor_no stored from wreg
 10394  13EA  00A2               	movwf	GetIsMotorActive@motor_no
 10395                           
 10396                           ;MotorDrive.c: 2641: UB GetIsMotorActive(UB motor_no);MotorDrive.c: 2642: {;MotorDrive.c
      +                          : 2643:     UB res = 0;
 10397  13EB  01A3               	clrf	GetIsMotorActive@res
 10398                           
 10399                           ;MotorDrive.c: 2646:     motorBitOperation = (UB) (0x01 << motor_no);
 10400  13EC  3001               	movlw	1
 10401  13ED  00A0               	movwf	??_GetIsMotorActive
 10402  13EE  0A22               	incf	GetIsMotorActive@motor_no,w
 10403  13EF  2BF1               	goto	u4834
 10404  13F0                     u4835:
 10405  13F0  35A0               	lslf	??_GetIsMotorActive,f
 10406  13F1                     u4834:
 10407  13F1  0B89               	decfsz	9,f
 10408  13F2  2BF0               	goto	u4835
 10409  13F3  0820               	movf	??_GetIsMotorActive,w
 10410  13F4  00A1               	movwf	??_GetIsMotorActive+1
 10411  13F5  0821               	movf	??_GetIsMotorActive+1,w
 10412  13F6  00F4               	movwf	_motorBitOperation
 10413                           
 10414                           ;MotorDrive.c: 2648:     if (motorActiveBit & motorBitOperation) {
 10415  13F7  0856               	movf	_motorActiveBit,w
 10416  13F8  0574               	andwf	_motorBitOperation,w
 10417  13F9  1903               	btfsc	3,2
 10418  13FA  2BFD               	goto	l6332
 10419                           
 10420                           ;MotorDrive.c: 2649:         res = 1;
 10421  13FB  01A3               	clrf	GetIsMotorActive@res
 10422  13FC  0AA3               	incf	GetIsMotorActive@res,f
 10423  13FD                     l6332:
 10424                           
 10425                           ;MotorDrive.c: 2652:     return res;
 10426  13FD  0823               	movf	GetIsMotorActive@res,w
 10427  13FE  0008               	return
 10428  13FF                     __end_of_GetIsMotorActive:
 10429                           
 10430                           	psect	text60
 10431  16B1                     __ptext60:	
 10432 ;; *************** function _UpdateTargetPosition *****************
 10433 ;; Defined at:
 10434 ;;		line 2019 in file "MotorDrive.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;  motor_no        1    wreg     unsigned char 
 10437 ;;  steps           2   13[BANK0 ] short 
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  motor_no        1   17[BANK0 ] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      void 
 10442 ;; Registers used:
 10443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10444 ;; Tracked objects:
 10445 ;;		On entry : 1F/0
 10446 ;;		On exit  : 1F/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10449 ;;      Params:         0       2       0       0       0       0       0       0
 10450 ;;      Locals:         0       1       0       0       0       0       0       0
 10451 ;;      Temps:          0       2       0       0       0       0       0       0
 10452 ;;      Totals:         0       5       0       0       0       0       0       0
 10453 ;;Total ram usage:        5 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    9
 10456 ;; This function calls:
 10457 ;;		_CorrectPosition
 10458 ;; This function is called by:
 10459 ;;		_SetFwdPulseWithCorrectProc
 10460 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 10461 ;;		_SpiCmdFunc_RevPulsePositionCtl
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _UpdateTargetPosition
 10467  16B1                     _UpdateTargetPosition:
 10468                           
 10469                           ;incstack = 0
 10470                           ; Regs used in _UpdateTargetPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10471                           ;UpdateTargetPosition@motor_no stored from wreg
 10472  16B1  00B1               	movwf	UpdateTargetPosition@motor_no
 10473                           
 10474                           ;MotorDrive.c: 2019: void UpdateTargetPosition(UB motor_no, H steps);MotorDrive.c: 2020:
      +                           {;MotorDrive.c: 2022:     targetPosition[ motor_no ] += steps;
 10475  16B2  3531               	lslf	UpdateTargetPosition@motor_no,w
 10476  16B3  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10477  16B4  0086               	movwf	6
 10478  16B5  3001               	movlw	1	; select bank2/3
 10479  16B6  0087               	movwf	7
 10480  16B7  082D               	movf	UpdateTargetPosition@steps,w
 10481  16B8  0781               	addwf	1,f
 10482  16B9  3141               	addfsr 1,1
 10483  16BA  082E               	movf	UpdateTargetPosition@steps+1,w
 10484  16BB  3D81               	addwfc	1,f
 10485  16BC  317F               	addfsr 1,-1
 10486                           
 10487                           ;MotorDrive.c: 2024:     CorrectPosition(&targetPosition[ motor_no ], TblMaxSteps[ motor
      +                          _no ]);
 10488  16BD  3531               	lslf	UpdateTargetPosition@motor_no,w
 10489  16BE  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10490  16BF  00A6               	movwf	CorrectPosition@pos
 10491  16C0  3001               	movlw	1
 10492  16C1  00A7               	movwf	CorrectPosition@pos+1
 10493  16C2  0831               	movf	UpdateTargetPosition@motor_no,w
 10494  16C3  00AF               	movwf	??_UpdateTargetPosition
 10495  16C4  01B0               	clrf	??_UpdateTargetPosition+1
 10496  16C5  35AF               	lslf	??_UpdateTargetPosition,f
 10497  16C6  0DB0               	rlf	??_UpdateTargetPosition+1,f
 10498  16C7  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10499  16C8  072F               	addwf	??_UpdateTargetPosition,w
 10500  16C9  0084               	movwf	4
 10501  16CA  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10502  16CB  3D30               	addwfc	??_UpdateTargetPosition+1,w
 10503  16CC  0085               	movwf	5
 10504  16CD  3F00               	moviw [0]fsr0
 10505  16CE  00A8               	movwf	CorrectPosition@max
 10506  16CF  3F01               	moviw [1]fsr0
 10507  16D0  00A9               	movwf	CorrectPosition@max+1
 10508  16D1  3188  200B         	fcall	_CorrectPosition
 10509  16D3  0008               	return
 10510  16D4                     __end_of_UpdateTargetPosition:
 10511                           
 10512                           	psect	text61
 10513  05EB                     __ptext61:	
 10514 ;; *************** function _CalcMotorStepCounter *****************
 10515 ;; Defined at:
 10516 ;;		line 1747 in file "MotorDrive.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;  motor_no        1    wreg     unsigned char 
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;  motor_no        1   26[BANK0 ] unsigned char 
 10521 ;;  steps           2   24[BANK0 ] short 
 10522 ;;  motor_bit       1   23[BANK0 ] unsigned char 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  1    wreg      void 
 10525 ;; Registers used:
 10526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 1F/0
 10529 ;;		On exit  : 1E/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10532 ;;      Params:         0       0       0       0       0       0       0       0
 10533 ;;      Locals:         0       4       0       0       0       0       0       0
 10534 ;;      Temps:          0       7       0       0       0       0       0       0
 10535 ;;      Totals:         0      11       0       0       0       0       0       0
 10536 ;;Total ram usage:       11 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:   10
 10539 ;; This function calls:
 10540 ;;		_CorrectPosition
 10541 ;;		_PriorUpdateCorrentPosition
 10542 ;;		_SetMotorDirection
 10543 ;; This function is called by:
 10544 ;;		_MoveTargetPosition
 10545 ;;		_SetFwdPulseWithCorrectProc
 10546 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 10547 ;;		_SpiCmdFunc_RevPulsePositionCtl
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           
 10552                           ;psect for function _CalcMotorStepCounter
 10553  05EB                     _CalcMotorStepCounter:
 10554                           
 10555                           ;incstack = 0
 10556                           ; Regs used in _CalcMotorStepCounter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10557                           ;CalcMotorStepCounter@motor_no stored from wreg
 10558  05EB  00BA               	movwf	CalcMotorStepCounter@motor_no
 10559                           
 10560                           ;MotorDrive.c: 1747: void CalcMotorStepCounter(UB motor_no);MotorDrive.c: 1748: {;MotorD
      +                          rive.c: 1749:     H steps;;MotorDrive.c: 1750:     UB motor_bit = (UB) (0x01 << motor_no
      +                          );
 10561  05EC  3001               	movlw	1
 10562  05ED  00B0               	movwf	??_CalcMotorStepCounter
 10563  05EE  0A3A               	incf	CalcMotorStepCounter@motor_no,w
 10564  05EF  2DF1               	goto	u4594
 10565  05F0                     u4595:
 10566  05F0  35B0               	lslf	??_CalcMotorStepCounter,f
 10567  05F1                     u4594:
 10568  05F1  0B89               	decfsz	9,f
 10569  05F2  2DF0               	goto	u4595
 10570  05F3  0830               	movf	??_CalcMotorStepCounter,w
 10571  05F4  00B1               	movwf	??_CalcMotorStepCounter+1
 10572  05F5  0831               	movf	??_CalcMotorStepCounter+1,w
 10573  05F6  00B7               	movwf	CalcMotorStepCounter@motor_bit
 10574                           
 10575                           ;MotorDrive.c: 1753:     if (0 == motor_no) {
 10576  05F7  083A               	movf	CalcMotorStepCounter@motor_no,w
 10577  05F8  1D03               	btfss	3,2
 10578  05F9  2E17               	goto	l6092
 10579                           
 10580                           ;MotorDrive.c: 1754:         if (driveDirectionBit & motor_bit) {
 10581  05FA  0857               	movf	_driveDirectionBit,w
 10582  05FB  0537               	andwf	CalcMotorStepCounter@motor_bit,w
 10583  05FC  1903               	btfsc	3,2
 10584  05FD  2E09               	goto	l6088
 10585                           
 10586                           ;MotorDrive.c: 1755:             currentPosition[ motor_no ] -= motorM0StepCounter;
 10587  05FE  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10588  05FF  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10589  0600  0086               	movwf	6
 10590  0601  0187               	clrf	7
 10591  0602  0021               	movlb	1	; select bank1
 10592  0603  0840               	movf	_motorM0StepCounter^(0+128),w
 10593  0604  0281               	subwf	1,f
 10594  0605  3141               	addfsr 1,1
 10595  0606  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
 10596  0607  3B81               	subwfb	1,f
 10597  0608  2E13               	goto	L9
 10598  0609                     l6088:	
 10599                           ;MotorDrive.c: 1756:         } else {
 10600                           
 10601                           
 10602                           ;MotorDrive.c: 1757:             currentPosition[ motor_no ] += motorM0StepCounter;
 10603  0609  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10604  060A  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10605  060B  0086               	movwf	6
 10606  060C  0187               	clrf	7
 10607  060D  0021               	movlb	1	; select bank1
 10608  060E  0840               	movf	_motorM0StepCounter^(0+128),w
 10609  060F  0781               	addwf	1,f
 10610  0610  3141               	addfsr 1,1
 10611  0611  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
 10612  0612  3D81               	addwfc	1,f
 10613  0613                     L9:
 10614  0613  317F               	addfsr 1,-1
 10615                           
 10616                           ;MotorDrive.c: 1759:         motorM0StepCounter = 0;
 10617  0614  01C0               	clrf	_motorM0StepCounter^(0+128)
 10618  0615  01C1               	clrf	(_motorM0StepCounter+1)^(0+128)
 10619                           
 10620                           ;MotorDrive.c: 1760:     } else {
 10621  0616  2E33               	goto	l6100
 10622  0617                     l6092:
 10623                           
 10624                           ;MotorDrive.c: 1761:         if (driveDirectionBit & motor_bit) {
 10625  0617  0857               	movf	_driveDirectionBit,w
 10626  0618  0537               	andwf	CalcMotorStepCounter@motor_bit,w
 10627  0619  1903               	btfsc	3,2
 10628  061A  2E26               	goto	l6096
 10629                           
 10630                           ;MotorDrive.c: 1762:             currentPosition[ motor_no ] -= motorM1StepCounter;
 10631  061B  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10632  061C  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10633  061D  0086               	movwf	6
 10634  061E  0187               	clrf	7
 10635  061F  0021               	movlb	1	; select bank1
 10636  0620  083E               	movf	_motorM1StepCounter^(0+128),w
 10637  0621  0281               	subwf	1,f
 10638  0622  3141               	addfsr 1,1
 10639  0623  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
 10640  0624  3B81               	subwfb	1,f
 10641  0625  2E30               	goto	L10
 10642  0626                     l6096:	
 10643                           ;MotorDrive.c: 1763:         } else {
 10644                           
 10645                           
 10646                           ;MotorDrive.c: 1764:             currentPosition[ motor_no ] += motorM1StepCounter;
 10647  0626  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10648  0627  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10649  0628  0086               	movwf	6
 10650  0629  0187               	clrf	7
 10651  062A  0021               	movlb	1	; select bank1
 10652  062B  083E               	movf	_motorM1StepCounter^(0+128),w
 10653  062C  0781               	addwf	1,f
 10654  062D  3141               	addfsr 1,1
 10655  062E  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
 10656  062F  3D81               	addwfc	1,f
 10657  0630                     L10:
 10658  0630  317F               	addfsr 1,-1
 10659                           
 10660                           ;MotorDrive.c: 1766:         motorM1StepCounter = 0;
 10661  0631  01BE               	clrf	_motorM1StepCounter^(0+128)
 10662  0632  01BF               	clrf	(_motorM1StepCounter+1)^(0+128)
 10663  0633                     l6100:
 10664                           
 10665                           ;MotorDrive.c: 1769:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
 10666  0633  0020               	movlb	0	; select bank0
 10667  0634  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10668  0635  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10669  0636  00A6               	movwf	CorrectPosition@pos
 10670  0637  3000               	movlw	0
 10671  0638  00A7               	movwf	CorrectPosition@pos+1
 10672  0639  083A               	movf	CalcMotorStepCounter@motor_no,w
 10673  063A  00B0               	movwf	??_CalcMotorStepCounter
 10674  063B  01B1               	clrf	??_CalcMotorStepCounter+1
 10675  063C  35B0               	lslf	??_CalcMotorStepCounter,f
 10676  063D  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10677  063E  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10678  063F  0730               	addwf	??_CalcMotorStepCounter,w
 10679  0640  0084               	movwf	4
 10680  0641  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10681  0642  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10682  0643  0085               	movwf	5
 10683  0644  3F00               	moviw [0]fsr0
 10684  0645  00A8               	movwf	CorrectPosition@max
 10685  0646  3F01               	moviw [1]fsr0
 10686  0647  00A9               	movwf	CorrectPosition@max+1
 10687  0648  3188  200B  3185   	fcall	_CorrectPosition
 10688                           
 10689                           ;MotorDrive.c: 1772:     SetMotorDirection(motor_no, 1);
 10690  064B  01A0               	clrf	SetMotorDirection@dir
 10691  064C  0AA0               	incf	SetMotorDirection@dir,f
 10692  064D  083A               	movf	CalcMotorStepCounter@motor_no,w
 10693  064E  3194  24E9  3185   	fcall	_SetMotorDirection
 10694                           
 10695                           ;MotorDrive.c: 1773:     steps = targetPosition[ motor_no ] - currentPosition[ motor_no 
      +                          ];
 10696  0651  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10697  0652  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10698  0653  0086               	movwf	6
 10699  0654  0187               	clrf	7
 10700  0655  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10701  0656  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10702  0657  0084               	movwf	4
 10703  0658  3001               	movlw	1	; select bank2/3
 10704  0659  0085               	movwf	5
 10705  065A  3F40               	moviw [0]fsr1
 10706  065B  0200               	subwf	0,w
 10707  065C  00B8               	movwf	CalcMotorStepCounter@steps
 10708  065D  3101               	addfsr 0,1
 10709  065E  3F41               	moviw [1]fsr1
 10710  065F  3B00               	subwfb	0,w
 10711  0660  00B9               	movwf	CalcMotorStepCounter@steps+1
 10712  0661                     l6108:	
 10713                           ;MotorDrive.c: 1775:     while (steps < 0) {
 10714                           
 10715                           
 10716                           ;MotorDrive.c: 1775:     while (steps < 0) {
 10717  0661  1FB9               	btfss	CalcMotorStepCounter@steps+1,7
 10718  0662  2E77               	goto	l6110
 10719                           
 10720                           ;MotorDrive.c: 1776:         steps += TblMaxSteps[ motor_no ];
 10721  0663  083A               	movf	CalcMotorStepCounter@motor_no,w
 10722  0664  00B0               	movwf	??_CalcMotorStepCounter
 10723  0665  01B1               	clrf	??_CalcMotorStepCounter+1
 10724  0666  35B0               	lslf	??_CalcMotorStepCounter,f
 10725  0667  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10726  0668  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10727  0669  0730               	addwf	??_CalcMotorStepCounter,w
 10728  066A  0084               	movwf	4
 10729  066B  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10730  066C  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10731  066D  0085               	movwf	5
 10732  066E  3F00               	moviw [0]fsr0
 10733  066F  00B2               	movwf	??_CalcMotorStepCounter+2
 10734  0670  3F01               	moviw [1]fsr0
 10735  0671  00B3               	movwf	??_CalcMotorStepCounter+3
 10736  0672  0832               	movf	??_CalcMotorStepCounter+2,w
 10737  0673  07B8               	addwf	CalcMotorStepCounter@steps,f
 10738  0674  0833               	movf	??_CalcMotorStepCounter+3,w
 10739  0675  3DB9               	addwfc	CalcMotorStepCounter@steps+1,f
 10740  0676  2E61               	goto	l6108
 10741  0677                     l6110:
 10742                           
 10743                           ;MotorDrive.c: 1779:     if ((steps * 2) > TblMaxSteps[ motor_no ]) {
 10744  0677  0839               	movf	CalcMotorStepCounter@steps+1,w
 10745  0678  00B1               	movwf	??_CalcMotorStepCounter+1
 10746  0679  0838               	movf	CalcMotorStepCounter@steps,w
 10747  067A  00B0               	movwf	??_CalcMotorStepCounter
 10748  067B  35B0               	lslf	??_CalcMotorStepCounter,f
 10749  067C  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10750  067D  083A               	movf	CalcMotorStepCounter@motor_no,w
 10751  067E  00B2               	movwf	??_CalcMotorStepCounter+2
 10752  067F  01B3               	clrf	??_CalcMotorStepCounter+3
 10753  0680  35B2               	lslf	??_CalcMotorStepCounter+2,f
 10754  0681  0DB3               	rlf	??_CalcMotorStepCounter+3,f
 10755  0682  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10756  0683  0732               	addwf	??_CalcMotorStepCounter+2,w
 10757  0684  0084               	movwf	4
 10758  0685  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10759  0686  3D33               	addwfc	??_CalcMotorStepCounter+3,w
 10760  0687  0085               	movwf	5
 10761  0688  3F00               	moviw [0]fsr0
 10762  0689  00B4               	movwf	??_CalcMotorStepCounter+4
 10763  068A  3F01               	moviw [1]fsr0
 10764  068B  00B5               	movwf	??_CalcMotorStepCounter+5
 10765  068C  0835               	movf	??_CalcMotorStepCounter+5,w
 10766  068D  3A80               	xorlw	128
 10767  068E  00B6               	movwf	??_CalcMotorStepCounter+6
 10768  068F  0831               	movf	??_CalcMotorStepCounter+1,w
 10769  0690  3A80               	xorlw	128
 10770  0691  0236               	subwf	??_CalcMotorStepCounter+6,w
 10771  0692  1D03               	skipz
 10772  0693  2E96               	goto	u4645
 10773  0694  0830               	movf	??_CalcMotorStepCounter,w
 10774  0695  0234               	subwf	??_CalcMotorStepCounter+4,w
 10775  0696                     u4645:
 10776  0696  1803               	skipnc
 10777  0697  2EB3               	goto	l6116
 10778                           
 10779                           ;MotorDrive.c: 1780:         SetMotorDirection(motor_no, 0);
 10780  0698  0020               	movlb	0	; select bank0
 10781  0699  01A0               	clrf	SetMotorDirection@dir
 10782  069A  083A               	movf	CalcMotorStepCounter@motor_no,w
 10783  069B  3194  24E9  3185   	fcall	_SetMotorDirection
 10784                           
 10785                           ;MotorDrive.c: 1781:         steps = TblMaxSteps[ motor_no ] - steps;
 10786  069E  083A               	movf	CalcMotorStepCounter@motor_no,w
 10787  069F  00B0               	movwf	??_CalcMotorStepCounter
 10788  06A0  01B1               	clrf	??_CalcMotorStepCounter+1
 10789  06A1  35B0               	lslf	??_CalcMotorStepCounter,f
 10790  06A2  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10791  06A3  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10792  06A4  0730               	addwf	??_CalcMotorStepCounter,w
 10793  06A5  0084               	movwf	4
 10794  06A6  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10795  06A7  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10796  06A8  0085               	movwf	5
 10797  06A9  3F00               	moviw [0]fsr0
 10798  06AA  00B2               	movwf	??_CalcMotorStepCounter+2
 10799  06AB  3F01               	moviw [1]fsr0
 10800  06AC  00B3               	movwf	??_CalcMotorStepCounter+3
 10801  06AD  0838               	movf	CalcMotorStepCounter@steps,w
 10802  06AE  0232               	subwf	??_CalcMotorStepCounter+2,w
 10803  06AF  00B8               	movwf	CalcMotorStepCounter@steps
 10804  06B0  0839               	movf	CalcMotorStepCounter@steps+1,w
 10805  06B1  3B33               	subwfb	??_CalcMotorStepCounter+3,w
 10806  06B2  00B9               	movwf	CalcMotorStepCounter@steps+1
 10807  06B3                     l6116:
 10808                           
 10809                           ;MotorDrive.c: 1784:     motorStepCounterSet[ motor_no ] = steps;
 10810  06B3  0020               	movlb	0	; select bank0
 10811  06B4  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10812  06B5  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10813  06B6  0086               	movwf	6
 10814  06B7  0187               	clrf	7
 10815  06B8  0838               	movf	CalcMotorStepCounter@steps,w
 10816  06B9  3FC0               	movwi [0]fsr1
 10817  06BA  0839               	movf	CalcMotorStepCounter@steps+1,w
 10818  06BB  3FC1               	movwi [1]fsr1
 10819                           
 10820                           ;MotorDrive.c: 1786:     PriorUpdateCorrentPosition(motor_no);
 10821  06BC  083A               	movf	CalcMotorStepCounter@motor_no,w
 10822  06BD  3188  20C2         	fcall	_PriorUpdateCorrentPosition
 10823  06BF  0008               	return
 10824  06C0                     __end_of_CalcMotorStepCounter:
 10825                           
 10826                           	psect	text62
 10827  10FA                     __ptext62:	
 10828 ;; *************** function _SetMotorStepCounter *****************
 10829 ;; Defined at:
 10830 ;;		line 1707 in file "MotorDrive.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  motor_no        1    wreg     unsigned char 
 10833 ;;  steps           2   16[BANK0 ] short 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  motor_no        1   18[BANK0 ] unsigned char 
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      void 
 10838 ;; Registers used:
 10839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 1F/0
 10842 ;;		On exit  : 1E/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10845 ;;      Params:         0       2       0       0       0       0       0       0
 10846 ;;      Locals:         0       1       0       0       0       0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0
 10848 ;;      Totals:         0       3       0       0       0       0       0       0
 10849 ;;Total ram usage:        3 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:   10
 10852 ;; This function calls:
 10853 ;;		_PriorUpdateCorrentPosition
 10854 ;; This function is called by:
 10855 ;;		_main
 10856 ;;		_SpiCmdFunc_FwdPulseNormal
 10857 ;;		_SpiCmdFunc_RevPulseNormal
 10858 ;;		_SpiCmdFunc_SearchBasePosition
 10859 ;;		_SpiCmdFunc_Search1008Position
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           
 10864                           ;psect for function _SetMotorStepCounter
 10865  10FA                     _SetMotorStepCounter:
 10866                           
 10867                           ;incstack = 0
 10868                           ; Regs used in _SetMotorStepCounter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10869                           ;SetMotorStepCounter@motor_no stored from wreg
 10870  10FA  00B2               	movwf	SetMotorStepCounter@motor_no
 10871                           
 10872                           ;MotorDrive.c: 1707: void SetMotorStepCounter(UB motor_no, H steps);MotorDrive.c: 1708: 
      +                          {;MotorDrive.c: 1709:     motorStepCounterSet[ motor_no ] = steps;
 10873  10FB  3532               	lslf	SetMotorStepCounter@motor_no,w
 10874  10FC  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10875  10FD  0086               	movwf	6
 10876  10FE  0187               	clrf	7
 10877  10FF  0830               	movf	SetMotorStepCounter@steps,w
 10878  1100  3FC0               	movwi [0]fsr1
 10879  1101  0831               	movf	SetMotorStepCounter@steps+1,w
 10880  1102  3FC1               	movwi [1]fsr1
 10881                           
 10882                           ;MotorDrive.c: 1711:     PriorUpdateCorrentPosition(motor_no);
 10883  1103  0832               	movf	SetMotorStepCounter@motor_no,w
 10884  1104  3188  20C2         	fcall	_PriorUpdateCorrentPosition
 10885  1106  0008               	return
 10886  1107                     __end_of_SetMotorStepCounter:
 10887                           
 10888                           	psect	text63
 10889  08C2                     __ptext63:	
 10890 ;; *************** function _PriorUpdateCorrentPosition *****************
 10891 ;; Defined at:
 10892 ;;		line 1993 in file "MotorDrive.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;  motor_no        1    wreg     unsigned char 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  motor_no        1   15[BANK0 ] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 1F/0
 10903 ;;		On exit  : 1E/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10906 ;;      Params:         0       0       0       0       0       0       0       0
 10907 ;;      Locals:         0       1       0       0       0       0       0       0
 10908 ;;      Temps:          0       2       0       0       0       0       0       0
 10909 ;;      Totals:         0       3       0       0       0       0       0       0
 10910 ;;Total ram usage:        3 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    9
 10913 ;; This function calls:
 10914 ;;		_CorrectPosition
 10915 ;; This function is called by:
 10916 ;;		_SetMotorStepCounter
 10917 ;;		_CalcMotorStepCounter
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           
 10922                           ;psect for function _PriorUpdateCorrentPosition
 10923  08C2                     _PriorUpdateCorrentPosition:
 10924                           
 10925                           ;incstack = 0
 10926                           ; Regs used in _PriorUpdateCorrentPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10927                           ;PriorUpdateCorrentPosition@motor_no stored from wreg
 10928  08C2  00AF               	movwf	PriorUpdateCorrentPosition@motor_no
 10929                           
 10930                           ;MotorDrive.c: 1993: void PriorUpdateCorrentPosition(UB motor_no);MotorDrive.c: 1994: {;
      +                          MotorDrive.c: 1995:     motorBitOperation = (UB) (0x01 << motor_no);
 10931  08C3  3001               	movlw	1
 10932  08C4  00AD               	movwf	??_PriorUpdateCorrentPosition
 10933  08C5  0A2F               	incf	PriorUpdateCorrentPosition@motor_no,w
 10934  08C6  28C8               	goto	u4434
 10935  08C7                     u4435:
 10936  08C7  35AD               	lslf	??_PriorUpdateCorrentPosition,f
 10937  08C8                     u4434:
 10938  08C8  0B89               	decfsz	9,f
 10939  08C9  28C7               	goto	u4435
 10940  08CA  082D               	movf	??_PriorUpdateCorrentPosition,w
 10941  08CB  00AE               	movwf	??_PriorUpdateCorrentPosition+1
 10942  08CC  082E               	movf	??_PriorUpdateCorrentPosition+1,w
 10943  08CD  00F4               	movwf	_motorBitOperation
 10944                           
 10945                           ;MotorDrive.c: 1997:     if (handPositionActiveBit & motorBitOperation) {
 10946  08CE  0021               	movlb	1	; select bank1
 10947  08CF  0851               	movf	_handPositionActiveBit^(0+128),w
 10948  08D0  0574               	andwf	_motorBitOperation,w
 10949  08D1  1903               	btfsc	3,2
 10950  08D2  0008               	return
 10951                           
 10952                           ;MotorDrive.c: 1999:         if (driveDirectionBit & motorBitOperation) {
 10953  08D3  0020               	movlb	0	; select bank0
 10954  08D4  0857               	movf	_driveDirectionBit,w
 10955  08D5  0574               	andwf	_motorBitOperation,w
 10956  08D6  1903               	btfsc	3,2
 10957  08D7  28E7               	goto	l5926
 10958                           
 10959                           ;MotorDrive.c: 2001:             currentPosition[ motor_no ] += motorStepCounterSet[ mot
      +                          or_no ];
 10960  08D8  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10961  08D9  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10962  08DA  0086               	movwf	6
 10963  08DB  0187               	clrf	7
 10964  08DC  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10965  08DD  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10966  08DE  0084               	movwf	4
 10967  08DF  0185               	clrf	5
 10968  08E0  3F40               	moviw [0]fsr1
 10969  08E1  0780               	addwf	0,f
 10970  08E2  3101               	addfsr 0,1
 10971  08E3  3F41               	moviw [1]fsr1
 10972  08E4  3D80               	addwfc	0,f
 10973  08E5  313F               	addfsr 0,-1
 10974                           
 10975                           ;MotorDrive.c: 2002:         } else {
 10976  08E6  28F9               	goto	l5928
 10977  08E7                     l5926:
 10978                           
 10979                           ;MotorDrive.c: 2004:             currentPosition[ motor_no ] -= motorStepCounterSet[ mot
      +                          or_no ];
 10980  08E7  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10981  08E8  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10982  08E9  0086               	movwf	6
 10983  08EA  0187               	clrf	7
 10984  08EB  3F40               	moviw [0]fsr1
 10985  08EC  00AD               	movwf	??_PriorUpdateCorrentPosition
 10986  08ED  3F41               	moviw [1]fsr1
 10987  08EE  00AE               	movwf	??_PriorUpdateCorrentPosition+1
 10988  08EF  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10989  08F0  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10990  08F1  0086               	movwf	6
 10991  08F2  0187               	clrf	7
 10992  08F3  082D               	movf	??_PriorUpdateCorrentPosition,w
 10993  08F4  0281               	subwf	1,f
 10994  08F5  3141               	addfsr 1,1
 10995  08F6  082E               	movf	??_PriorUpdateCorrentPosition+1,w
 10996  08F7  3B81               	subwfb	1,f
 10997  08F8  317F               	addfsr 1,-1
 10998  08F9                     l5928:
 10999                           
 11000                           ;MotorDrive.c: 2007:         CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ 
      +                          motor_no ]);
 11001  08F9  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 11002  08FA  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 11003  08FB  00A6               	movwf	CorrectPosition@pos
 11004  08FC  3000               	movlw	0
 11005  08FD  00A7               	movwf	CorrectPosition@pos+1
 11006  08FE  082F               	movf	PriorUpdateCorrentPosition@motor_no,w
 11007  08FF  00AD               	movwf	??_PriorUpdateCorrentPosition
 11008  0900  01AE               	clrf	??_PriorUpdateCorrentPosition+1
 11009  0901  35AD               	lslf	??_PriorUpdateCorrentPosition,f
 11010  0902  0DAE               	rlf	??_PriorUpdateCorrentPosition+1,f
 11011  0903  3056               	movlw	low (_TblMaxSteps| (0+32768))
 11012  0904  072D               	addwf	??_PriorUpdateCorrentPosition,w
 11013  0905  0084               	movwf	4
 11014  0906  3098               	movlw	high (_TblMaxSteps| (0+32768))
 11015  0907  3D2E               	addwfc	??_PriorUpdateCorrentPosition+1,w
 11016  0908  0085               	movwf	5
 11017  0909  3F00               	moviw [0]fsr0
 11018  090A  00A8               	movwf	CorrectPosition@max
 11019  090B  3F01               	moviw [1]fsr0
 11020  090C  00A9               	movwf	CorrectPosition@max+1
 11021  090D  3188  200B         	fcall	_CorrectPosition
 11022  090F  0008               	return
 11023  0910                     __end_of_PriorUpdateCorrentPosition:
 11024                           
 11025                           	psect	text64
 11026  080B                     __ptext64:	
 11027 ;; *************** function _CorrectPosition *****************
 11028 ;; Defined at:
 11029 ;;		line 1969 in file "MotorDrive.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;  pos             2    6[BANK0 ] PTR short 
 11032 ;;		 -> detectBasePosition(4), missingDetectFinePosition(2), detectLoadPosition(92), currentPosition(4), 
 11033 ;;		 -> targetPosition(4), 
 11034 ;;  max             2    8[BANK0 ] short 
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;		None
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      void 
 11039 ;; Registers used:
 11040 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 1F/0
 11043 ;;		On exit  : 1F/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11046 ;;      Params:         0       4       0       0       0       0       0       0
 11047 ;;      Locals:         0       0       0       0       0       0       0       0
 11048 ;;      Temps:          0       3       0       0       0       0       0       0
 11049 ;;      Totals:         0       7       0       0       0       0       0       0
 11050 ;;Total ram usage:        7 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    8
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		_CalcMotorStepCounter
 11057 ;;		_PriorUpdateCorrentPosition
 11058 ;;		_UpdateTargetPosition
 11059 ;;		_AfterDetectedLoadPosition
 11060 ;;		_DetermineBasePosition
 11061 ;;		_UpdataHandPosition
 11062 ;;		_VerifyHandPosition_LoadPosition
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           
 11067                           ;psect for function _CorrectPosition
 11068  080B                     _CorrectPosition:
 11069                           
 11070                           ;MotorDrive.c: 1969: void CorrectPosition(H *pos, H max);MotorDrive.c: 1970: {;MotorDriv
      +                          e.c: 1971:     if (max == 0) {
 11071                           
 11072                           ;incstack = 0
 11073                           ; Regs used in _CorrectPosition: [wreg+fsr1l+fsr1h+status,2+status,0]
 11074  080B  0828               	movf	CorrectPosition@max,w
 11075  080C  0429               	iorwf	CorrectPosition@max+1,w
 11076  080D  1903               	btfsc	3,2
 11077  080E  0008               	return
 11078  080F                     l885:	
 11079                           ;MotorDrive.c: 1977:     }
 11080                           
 11081                           
 11082                           ;MotorDrive.c: 1975:     while (*pos >= max) {
 11083  080F  0826               	movf	CorrectPosition@pos,w
 11084  0810  0086               	movwf	6
 11085  0811  0827               	movf	CorrectPosition@pos+1,w
 11086  0812  0087               	movwf	7
 11087  0813  3F40               	moviw [0]fsr1
 11088  0814  00AA               	movwf	??_CorrectPosition
 11089  0815  3F41               	moviw [1]fsr1
 11090  0816  00AB               	movwf	??_CorrectPosition+1
 11091  0817  082B               	movf	??_CorrectPosition+1,w
 11092  0818  3A80               	xorlw	128
 11093  0819  00AC               	movwf	??_CorrectPosition+2
 11094  081A  0829               	movf	CorrectPosition@max+1,w
 11095  081B  3A80               	xorlw	128
 11096  081C  022C               	subwf	??_CorrectPosition+2,w
 11097  081D  1D03               	skipz
 11098  081E  2821               	goto	u4255
 11099  081F  0828               	movf	CorrectPosition@max,w
 11100  0820  022A               	subwf	??_CorrectPosition,w
 11101  0821                     u4255:
 11102  0821  1C03               	btfss	3,0
 11103  0822  2839               	goto	l888
 11104                           
 11105                           ;MotorDrive.c: 1976:         *pos -= max;
 11106  0823  0020               	movlb	0	; select bank0
 11107  0824  0826               	movf	CorrectPosition@pos,w
 11108  0825  0086               	movwf	6
 11109  0826  0827               	movf	CorrectPosition@pos+1,w
 11110  0827  0087               	movwf	7
 11111  0828  0828               	movf	CorrectPosition@max,w
 11112  0829  0281               	subwf	1,f
 11113  082A  3141               	addfsr 1,1
 11114  082B  0829               	movf	CorrectPosition@max+1,w
 11115  082C  3B81               	subwfb	1,f
 11116  082D  317F               	addfsr 1,-1
 11117  082E  280F               	goto	l885
 11118  082F                     l5828:
 11119                           
 11120                           ;MotorDrive.c: 1980:         *pos += max;
 11121  082F  0826               	movf	CorrectPosition@pos,w
 11122  0830  0086               	movwf	6
 11123  0831  0827               	movf	CorrectPosition@pos+1,w
 11124  0832  0087               	movwf	7
 11125  0833  0828               	movf	CorrectPosition@max,w
 11126  0834  0781               	addwf	1,f
 11127  0835  3141               	addfsr 1,1
 11128  0836  0829               	movf	CorrectPosition@max+1,w
 11129  0837  3D81               	addwfc	1,f
 11130  0838  317F               	addfsr 1,-1
 11131  0839                     l888:	
 11132                           ;MotorDrive.c: 1981:     }
 11133                           
 11134                           
 11135                           ;MotorDrive.c: 1979:     while (*pos < 0) {
 11136  0839  0020               	movlb	0	; select bank0
 11137  083A  0826               	movf	CorrectPosition@pos,w
 11138  083B  0086               	movwf	6
 11139  083C  0827               	movf	CorrectPosition@pos+1,w
 11140  083D  0087               	movwf	7
 11141  083E  3F40               	moviw [0]fsr1
 11142  083F  00AA               	movwf	??_CorrectPosition
 11143  0840  3F41               	moviw [1]fsr1
 11144  0841  00AB               	movwf	??_CorrectPosition+1
 11145  0842  1FAB               	btfss	??_CorrectPosition+1,7
 11146  0843  0008               	return
 11147  0844  282F               	goto	l5828
 11148  0845                     __end_of_CorrectPosition:
 11149                           
 11150                           	psect	text65
 11151  1089                     __ptext65:	
 11152 ;; *************** function _SetMotorStart *****************
 11153 ;; Defined at:
 11154 ;;		line 1866 in file "MotorDrive.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  motor_no        1    wreg     unsigned char 
 11157 ;; Auto vars:     Size  Location     Type
 11158 ;;  motor_no        1    1[BANK0 ] unsigned char 
 11159 ;; Return value:  Size  Location     Type
 11160 ;;                  1    wreg      void 
 11161 ;; Registers used:
 11162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 1F/0
 11165 ;;		On exit  : 1F/0
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11168 ;;      Params:         0       0       0       0       0       0       0       0
 11169 ;;      Locals:         0       1       0       0       0       0       0       0
 11170 ;;      Temps:          0       0       0       0       0       0       0       0
 11171 ;;      Totals:         0       1       0       0       0       0       0       0
 11172 ;;Total ram usage:        1 bytes
 11173 ;; Hardware stack levels used:    1
 11174 ;; Hardware stack levels required when called:   10
 11175 ;; This function calls:
 11176 ;;		_StartPulseOutM0
 11177 ;;		_StartPulseOutM1
 11178 ;; This function is called by:
 11179 ;;		_main
 11180 ;;		_SetMotorPositionSearchStart
 11181 ;;		_AfterDetectedLoadPosition
 11182 ;;		_MoveTargetPosition
 11183 ;;		_SpiCmdFunc_FwdPulseNormal
 11184 ;;		_SpiCmdFunc_RevPulseNormal
 11185 ;;		_SetFwdPulseWithCorrectProc
 11186 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11187 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           
 11192                           ;psect for function _SetMotorStart
 11193  1089                     _SetMotorStart:
 11194                           
 11195                           ;incstack = 0
 11196                           ; Regs used in _SetMotorStart: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11197                           ;SetMotorStart@motor_no stored from wreg
 11198  1089  00A1               	movwf	SetMotorStart@motor_no
 11199                           
 11200                           ;MotorDrive.c: 1866: void SetMotorStart(UB motor_no);MotorDrive.c: 1867: {;MotorDrive.c:
      +                           1868:     if (motor_no == 0) {
 11201  108A  0821               	movf	SetMotorStart@motor_no,w
 11202  108B  1D03               	btfss	3,2
 11203  108C  2890               	goto	l6030
 11204                           
 11205                           ;MotorDrive.c: 1870:         StartPulseOutM0();
 11206  108D  318A  22A6         	fcall	_StartPulseOutM0
 11207                           
 11208                           ;MotorDrive.c: 1872:     } else {
 11209  108F  0008               	return
 11210  1090                     l6030:
 11211                           
 11212                           ;MotorDrive.c: 1874:         StartPulseOutM1();
 11213  1090  318B  2316         	fcall	_StartPulseOutM1
 11214  1092  0008               	return
 11215  1093                     __end_of_SetMotorStart:
 11216                           
 11217                           	psect	text66
 11218  0B16                     __ptext66:	
 11219 ;; *************** function _StartPulseOutM1 *****************
 11220 ;; Defined at:
 11221 ;;		line 1342 in file "MotorDrive.c"
 11222 ;; Parameters:    Size  Location     Type
 11223 ;;		None
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;		None
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  1    wreg      void 
 11228 ;; Registers used:
 11229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 1F/0
 11232 ;;		On exit  : 1F/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11235 ;;      Params:         0       0       0       0       0       0       0       0
 11236 ;;      Locals:         0       0       0       0       0       0       0       0
 11237 ;;      Temps:          0       1       0       0       0       0       0       0
 11238 ;;      Totals:         0       1       0       0       0       0       0       0
 11239 ;;Total ram usage:        1 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    9
 11242 ;; This function calls:
 11243 ;;		_TMR2_StartTimer
 11244 ;; This function is called by:
 11245 ;;		_SetMotorStart
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           
 11250                           ;psect for function _StartPulseOutM1
 11251  0B16                     _StartPulseOutM1:
 11252                           
 11253                           ;MotorDrive.c: 1344:     (INTCONbits.PEIE = 0);
 11254                           
 11255                           ;incstack = 0
 11256                           ; Regs used in _StartPulseOutM1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11257  0B16  130B               	bcf	11,6	;volatile
 11258                           
 11259                           ;MotorDrive.c: 1346:     if ((reqSearchBasePosBit & 0x02) || (motorStepCounterSet[ 1 ]))
      +                           {
 11260  0B17  18D5               	btfsc	_reqSearchBasePosBit,1
 11261  0B18  2B1E               	goto	l5882
 11262  0B19  0021               	movlb	1	; select bank1
 11263  0B1A  082A               	movf	(_motorStepCounterSet^(0+128)+2),w
 11264  0B1B  042B               	iorwf	((_motorStepCounterSet+1)^(0+128)+2),w
 11265  0B1C  1903               	btfsc	3,2
 11266  0B1D  2B81               	goto	l5916
 11267  0B1E                     l5882:
 11268                           
 11269                           ;MotorDrive.c: 1348:         TblM1PulseChangePositionLast = finishPositionCtSet[ 1 ];
 11270  0B1E  0021               	movlb	1	; select bank1
 11271  0B1F  0847               	movf	(_finishPositionCtSet^(0+128)+1),w
 11272  0B20  0020               	movlb	0	; select bank0
 11273  0B21  00A0               	movwf	??_StartPulseOutM1
 11274  0B22  0820               	movf	??_StartPulseOutM1,w
 11275  0B23  0021               	movlb	1	; select bank1
 11276  0B24  00EB               	movwf	_TblM1PulseChangePositionLast^(0+128)
 11277                           
 11278                           ;MotorDrive.c: 1350:         if (driveDirectionBit & 0x02) {
 11279  0B25  0020               	movlb	0	; select bank0
 11280  0B26  1CD7               	btfss	_driveDirectionBit,1
 11281  0B27  2B45               	goto	l763
 11282                           
 11283                           ;MotorDrive.c: 1352:             if (addShakePulseBit & 0x02) {
 11284  0B28  1CF0               	btfss	_addShakePulseBit,1
 11285  0B29  2B39               	goto	l764
 11286                           
 11287                           ;MotorDrive.c: 1354:                 if (polarityBit & 0x02) {
 11288  0B2A  1CF1               	btfss	_polarityBit,1
 11289  0B2B  2B31               	goto	l5892
 11290                           
 11291                           ;MotorDrive.c: 1356:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_S
      +                          HAKE_POL1_P0;
 11292  0B2C  30D7               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 11293  0B2D  0021               	movlb	1	; select bank1
 11294  0B2E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11295  0B2F  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 11296  0B30  2B35               	goto	L11
 11297  0B31                     l5892:	
 11298                           ;MotorDrive.c: 1357:                 } else {
 11299                           
 11300                           
 11301                           ;MotorDrive.c: 1359:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_S
      +                          HAKE_POL0_P0;
 11302  0B31  30E6               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 11303  0B32  0021               	movlb	1	; select bank1
 11304  0B33  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11305  0B34  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 11306  0B35                     L11:
 11307  0B35  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 11308                           
 11309                           ;MotorDrive.c: 1362:                 m1PulsePositionCtWork = ( 1 - 1 );
 11310  0B36  01E8               	clrf	_m1PulsePositionCtWork^(0+128)
 11311                           
 11312                           ;MotorDrive.c: 1363:                 m1PulseOutStepWork = ID_PULSE_OUT_STEP_P0;
 11313  0B37  01E4               	clrf	_m1PulseOutStepWork^(0+128)
 11314                           
 11315                           ;MotorDrive.c: 1367:             } else {
 11316  0B38  2B5D               	goto	l5906
 11317  0B39                     l764:
 11318                           
 11319                           ;MotorDrive.c: 1369:                 if (polarityBit & 0x02) {
 11320  0B39  1CF1               	btfss	_polarityBit,1
 11321  0B3A  2B40               	goto	l5900
 11322                           
 11323                           ;MotorDrive.c: 1371:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_F
      +                          WD_POL1_P1;
 11324  0B3B  30F5               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 11325  0B3C  0021               	movlb	1	; select bank1
 11326  0B3D  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11327  0B3E  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 11328  0B3F  2B50               	goto	L13
 11329  0B40                     l5900:	
 11330                           ;MotorDrive.c: 1372:                 } else {
 11331                           
 11332                           
 11333                           ;MotorDrive.c: 1374:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_F
      +                          WD_POL0_P1;
 11334  0B40  3004               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 11335  0B41  0021               	movlb	1	; select bank1
 11336  0B42  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11337  0B43  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 11338  0B44  2B50               	goto	L13
 11339  0B45                     l763:
 11340                           
 11341                           ;MotorDrive.c: 1383:             if (polarityBit & 0x02) {
 11342  0B45  1CF1               	btfss	_polarityBit,1
 11343  0B46  2B4C               	goto	l5904
 11344                           
 11345                           ;MotorDrive.c: 1385:                 m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_P
      +                          OL1_P1;
 11346  0B47  3013               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P1
 11347  0B48  0021               	movlb	1	; select bank1
 11348  0B49  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11349  0B4A  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P1
 11350  0B4B  2B50               	goto	L13
 11351  0B4C                     l5904:	
 11352                           ;MotorDrive.c: 1386:             } else {
 11353                           
 11354                           
 11355                           ;MotorDrive.c: 1388:                 m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_P
      +                          OL0_P1;
 11356  0B4C  3022               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P1
 11357  0B4D  0021               	movlb	1	; select bank1
 11358  0B4E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11359  0B4F  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P1
 11360  0B50                     L13:
 11361  0B50  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 11362                           
 11363                           ;MotorDrive.c: 1377:                 m1PulsePositionCtWork = ( ( 1 + ( ( 1 - 1 ) + 5 + 4
      +                           + ( 1 + 3 ) * 10 ) ) - 1 );
 11364                           
 11365                           ;MotorDrive.c: 1375:                 }
 11366  0B51  3031               	movlw	49
 11367  0B52  0020               	movlb	0	; select bank0
 11368  0B53  00A0               	movwf	??_StartPulseOutM1
 11369  0B54  0820               	movf	??_StartPulseOutM1,w
 11370  0B55  0021               	movlb	1	; select bank1
 11371  0B56  00E8               	movwf	_m1PulsePositionCtWork^(0+128)
 11372                           
 11373                           ;MotorDrive.c: 1378:                 m1PulseOutStepWork = ID_PULSE_OUT_STEP_P1;
 11374  0B57  3016               	movlw	22
 11375  0B58  0020               	movlb	0	; select bank0
 11376  0B59  00A0               	movwf	??_StartPulseOutM1
 11377  0B5A  0820               	movf	??_StartPulseOutM1,w
 11378  0B5B  0021               	movlb	1	; select bank1
 11379  0B5C  00E4               	movwf	_m1PulseOutStepWork^(0+128)
 11380  0B5D                     l5906:
 11381                           
 11382                           ;MotorDrive.c: 1396:         motorActiveBit |= 0x02;
 11383  0B5D  0020               	movlb	0	; select bank0
 11384  0B5E  14D6               	bsf	_motorActiveBit,1
 11385                           
 11386                           ;MotorDrive.c: 1397:         m1PulsePositionCt = m1PulsePositionCtWork;
 11387  0B5F  0021               	movlb	1	; select bank1
 11388  0B60  0868               	movf	_m1PulsePositionCtWork^(0+128),w
 11389  0B61  0020               	movlb	0	; select bank0
 11390  0B62  00A0               	movwf	??_StartPulseOutM1
 11391  0B63  0820               	movf	??_StartPulseOutM1,w
 11392  0B64  0021               	movlb	1	; select bank1
 11393  0B65  00E9               	movwf	_m1PulsePositionCt^(0+128)
 11394                           
 11395                           ;MotorDrive.c: 1398:         m1PulseOutStep = m1PulseOutStepWork;
 11396  0B66  0864               	movf	_m1PulseOutStepWork^(0+128),w
 11397  0B67  0020               	movlb	0	; select bank0
 11398  0B68  00A0               	movwf	??_StartPulseOutM1
 11399  0B69  0820               	movf	??_StartPulseOutM1,w
 11400  0B6A  00F2               	movwf	_m1PulseOutStep
 11401                           
 11402                           ;MotorDrive.c: 1399:         m1PulseChangePosition = TblM1PulseChangePosition[ m1PulseOu
      +                          tStep ];
 11403  0B6B  0872               	movf	_m1PulseOutStep,w
 11404  0B6C  3E1C               	addlw	low (_TblM1PulseChangePosition| (0+32768))
 11405  0B6D  0084               	movwf	4
 11406  0B6E  3098               	movlw	high (_TblM1PulseChangePosition| (0+32768))
 11407  0B6F  1803               	skipnc
 11408  0B70  3E01               	addlw	1
 11409  0B71  0085               	movwf	5
 11410  0B72  0800               	movf	0,w	;code access
 11411  0B73  00A0               	movwf	??_StartPulseOutM1
 11412  0B74  0820               	movf	??_StartPulseOutM1,w
 11413  0B75  0021               	movlb	1	; select bank1
 11414  0B76  00E6               	movwf	_m1PulseChangePosition^(0+128)
 11415                           
 11416                           ;MotorDrive.c: 1401:         motorM1StepCounter = motorStepCounterSet[ 1 ];
 11417  0B77  082B               	movf	((_motorStepCounterSet+1)^(0+128)+2),w
 11418  0B78  00BF               	movwf	(_motorM1StepCounter+1)^(0+128)
 11419  0B79  082A               	movf	(_motorStepCounterSet^(0+128)+2),w
 11420  0B7A  00BE               	movwf	_motorM1StepCounter^(0+128)
 11421                           
 11422                           ;MotorDrive.c: 1402:         motorStepCounterSet[ 1 ] = 0;
 11423  0B7B  01AA               	clrf	(_motorStepCounterSet^(0+128)+2)
 11424  0B7C  01AB               	clrf	((_motorStepCounterSet+1)^(0+128)+2)
 11425                           
 11426                           ;MotorDrive.c: 1404:         TMR2_StartTimer();
 11427  0B7D  3190  204C  318B   	fcall	_TMR2_StartTimer
 11428                           
 11429                           ;MotorDrive.c: 1406:     } else {
 11430  0B80  2B86               	goto	l5918
 11431  0B81                     l5916:
 11432                           
 11433                           ;MotorDrive.c: 1408:         actCorrectDriveBit &= (UB) (~0x02);
 11434  0B81  30FD               	movlw	253
 11435  0B82  0020               	movlb	0	; select bank0
 11436  0B83  00A0               	movwf	??_StartPulseOutM1
 11437  0B84  0820               	movf	??_StartPulseOutM1,w
 11438  0B85  05D3               	andwf	_actCorrectDriveBit,f
 11439  0B86                     l5918:
 11440                           
 11441                           ;MotorDrive.c: 1412:     (INTCONbits.PEIE = 1);
 11442  0B86  170B               	bsf	11,6	;volatile
 11443  0B87  0008               	return
 11444  0B88                     __end_of_StartPulseOutM1:
 11445                           
 11446                           	psect	text67
 11447  0AA6                     __ptext67:	
 11448 ;; *************** function _StartPulseOutM0 *****************
 11449 ;; Defined at:
 11450 ;;		line 1269 in file "MotorDrive.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11459 ;; Tracked objects:
 11460 ;;		On entry : 1F/0
 11461 ;;		On exit  : 1F/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11464 ;;      Params:         0       0       0       0       0       0       0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0
 11466 ;;      Temps:          0       1       0       0       0       0       0       0
 11467 ;;      Totals:         0       1       0       0       0       0       0       0
 11468 ;;Total ram usage:        1 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    9
 11471 ;; This function calls:
 11472 ;;		_TMR2_StartTimer
 11473 ;; This function is called by:
 11474 ;;		_SetMotorStart
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           
 11479                           ;psect for function _StartPulseOutM0
 11480  0AA6                     _StartPulseOutM0:
 11481                           
 11482                           ;MotorDrive.c: 1271:     (INTCONbits.PEIE = 0);
 11483                           
 11484                           ;incstack = 0
 11485                           ; Regs used in _StartPulseOutM0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11486  0AA6  130B               	bcf	11,6	;volatile
 11487                           
 11488                           ;MotorDrive.c: 1273:     if ((reqSearchBasePosBit & 0x01) || (motorStepCounterSet[ 0 ]))
      +                           {
 11489  0AA7  1855               	btfsc	_reqSearchBasePosBit,0
 11490  0AA8  2AAE               	goto	l5840
 11491  0AA9  0021               	movlb	1	; select bank1
 11492  0AAA  0828               	movf	_motorStepCounterSet^(0+128),w
 11493  0AAB  0429               	iorwf	(_motorStepCounterSet+1)^(0+128),w
 11494  0AAC  1903               	btfsc	3,2
 11495  0AAD  2B0F               	goto	l5874
 11496  0AAE                     l5840:
 11497                           
 11498                           ;MotorDrive.c: 1275:         TblM0PulseChangePositionLast = finishPositionCtSet[ 0 ];
 11499  0AAE  0021               	movlb	1	; select bank1
 11500  0AAF  0846               	movf	_finishPositionCtSet^(0+128),w
 11501  0AB0  0020               	movlb	0	; select bank0
 11502  0AB1  00A0               	movwf	??_StartPulseOutM0
 11503  0AB2  0820               	movf	??_StartPulseOutM0,w
 11504  0AB3  0021               	movlb	1	; select bank1
 11505  0AB4  00EC               	movwf	_TblM0PulseChangePositionLast^(0+128)
 11506                           
 11507                           ;MotorDrive.c: 1277:         if (driveDirectionBit & 0x01) {
 11508  0AB5  0020               	movlb	0	; select bank0
 11509  0AB6  1C57               	btfss	_driveDirectionBit,0
 11510  0AB7  2AD7               	goto	l746
 11511                           
 11512                           ;MotorDrive.c: 1279:             if (addShakePulseBit & 0x01) {
 11513  0AB8  1C70               	btfss	_addShakePulseBit,0
 11514  0AB9  2ACB               	goto	l747
 11515                           
 11516                           ;MotorDrive.c: 1281:                 if (polarityBit & 0x01) {
 11517  0ABA  1C71               	btfss	_polarityBit,0
 11518  0ABB  2AC1               	goto	l5850
 11519                           
 11520                           ;MotorDrive.c: 1283:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_S
      +                          HAKE_POL1_P0;
 11521  0ABC  3023               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 11522  0ABD  0021               	movlb	1	; select bank1
 11523  0ABE  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11524  0ABF  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 11525  0AC0  2AC5               	goto	L14
 11526  0AC1                     l5850:	
 11527                           ;MotorDrive.c: 1284:                 } else {
 11528                           
 11529                           
 11530                           ;MotorDrive.c: 1286:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_S
      +                          HAKE_POL0_P0;
 11531  0AC1  3032               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 11532  0AC2  0021               	movlb	1	; select bank1
 11533  0AC3  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11534  0AC4  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 11535  0AC5                     L14:
 11536  0AC5  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 11537                           
 11538                           ;MotorDrive.c: 1289:                 m0PulsePositionCtWork = ( 1 - 1 );
 11539  0AC6  0020               	movlb	0	; select bank0
 11540  0AC7  01D8               	clrf	_m0PulsePositionCtWork
 11541                           
 11542                           ;MotorDrive.c: 1290:                 m0PulseOutStepWork = ID_PULSE_OUT_STEP_P0;
 11543  0AC8  0021               	movlb	1	; select bank1
 11544  0AC9  01E5               	clrf	_m0PulseOutStepWork^(0+128)
 11545                           
 11546                           ;MotorDrive.c: 1292:             } else {
 11547  0ACA  2AED               	goto	l5864
 11548  0ACB                     l747:
 11549                           
 11550                           ;MotorDrive.c: 1294:                 if (polarityBit & 0x01) {
 11551  0ACB  1C71               	btfss	_polarityBit,0
 11552  0ACC  2AD2               	goto	l5858
 11553                           
 11554                           ;MotorDrive.c: 1296:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_F
      +                          WD_POL1_P1;
 11555  0ACD  3041               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 11556  0ACE  0021               	movlb	1	; select bank1
 11557  0ACF  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11558  0AD0  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 11559  0AD1  2AE2               	goto	L16
 11560  0AD2                     l5858:	
 11561                           ;MotorDrive.c: 1297:                 } else {
 11562                           
 11563                           
 11564                           ;MotorDrive.c: 1299:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_F
      +                          WD_POL0_P1;
 11565  0AD2  3050               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 11566  0AD3  0021               	movlb	1	; select bank1
 11567  0AD4  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11568  0AD5  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 11569  0AD6  2AE2               	goto	L16
 11570  0AD7                     l746:
 11571                           
 11572                           ;MotorDrive.c: 1308:             if (polarityBit & 0x01) {
 11573  0AD7  1C71               	btfss	_polarityBit,0
 11574  0AD8  2ADE               	goto	l5862
 11575                           
 11576                           ;MotorDrive.c: 1310:                 m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_P
      +                          OL1_P1;
 11577  0AD9  305F               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P1
 11578  0ADA  0021               	movlb	1	; select bank1
 11579  0ADB  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11580  0ADC  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P1
 11581  0ADD  2AE2               	goto	L16
 11582  0ADE                     l5862:	
 11583                           ;MotorDrive.c: 1311:             } else {
 11584                           
 11585                           
 11586                           ;MotorDrive.c: 1313:                 m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_P
      +                          OL0_P1;
 11587  0ADE  306E               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P1
 11588  0ADF  0021               	movlb	1	; select bank1
 11589  0AE0  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11590  0AE1  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P1
 11591  0AE2                     L16:
 11592  0AE2  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 11593                           
 11594                           ;MotorDrive.c: 1302:                 m0PulsePositionCtWork = ( ( 1 + ( ( 1 - 1 ) + 5 + 4
      +                           + ( 1 + 3 ) * 10 ) ) - 1 );
 11595                           
 11596                           ;MotorDrive.c: 1300:                 }
 11597  0AE3  3031               	movlw	49
 11598  0AE4  0020               	movlb	0	; select bank0
 11599  0AE5  00A0               	movwf	??_StartPulseOutM0
 11600  0AE6  0820               	movf	??_StartPulseOutM0,w
 11601  0AE7  00D8               	movwf	_m0PulsePositionCtWork
 11602                           
 11603                           ;MotorDrive.c: 1303:                 m0PulseOutStepWork = ID_PULSE_OUT_STEP_P1;
 11604  0AE8  3016               	movlw	22
 11605  0AE9  00A0               	movwf	??_StartPulseOutM0
 11606  0AEA  0820               	movf	??_StartPulseOutM0,w
 11607  0AEB  0021               	movlb	1	; select bank1
 11608  0AEC  00E5               	movwf	_m0PulseOutStepWork^(0+128)
 11609  0AED                     l5864:
 11610                           
 11611                           ;MotorDrive.c: 1321:         motorActiveBit |= 0x01;
 11612  0AED  0020               	movlb	0	; select bank0
 11613  0AEE  1456               	bsf	_motorActiveBit,0
 11614                           
 11615                           ;MotorDrive.c: 1322:         m0PulsePositionCt = m0PulsePositionCtWork;
 11616  0AEF  0858               	movf	_m0PulsePositionCtWork,w
 11617  0AF0  00A0               	movwf	??_StartPulseOutM0
 11618  0AF1  0820               	movf	??_StartPulseOutM0,w
 11619  0AF2  0021               	movlb	1	; select bank1
 11620  0AF3  00EA               	movwf	_m0PulsePositionCt^(0+128)
 11621                           
 11622                           ;MotorDrive.c: 1323:         m0PulseOutStep = m0PulseOutStepWork;
 11623  0AF4  0865               	movf	_m0PulseOutStepWork^(0+128),w
 11624  0AF5  0020               	movlb	0	; select bank0
 11625  0AF6  00A0               	movwf	??_StartPulseOutM0
 11626  0AF7  0820               	movf	??_StartPulseOutM0,w
 11627  0AF8  00F3               	movwf	_m0PulseOutStep
 11628                           
 11629                           ;MotorDrive.c: 1324:         m0PulseChangePosition = TblM0PulseChangePosition[ m0PulseOu
      +                          tStep ];
 11630  0AF9  0873               	movf	_m0PulseOutStep,w
 11631  0AFA  3E35               	addlw	low (_TblM0PulseChangePosition| (0+32768))
 11632  0AFB  0084               	movwf	4
 11633  0AFC  3098               	movlw	high (_TblM0PulseChangePosition| (0+32768))
 11634  0AFD  1803               	skipnc
 11635  0AFE  3E01               	addlw	1
 11636  0AFF  0085               	movwf	5
 11637  0B00  0800               	movf	0,w	;code access
 11638  0B01  00A0               	movwf	??_StartPulseOutM0
 11639  0B02  0820               	movf	??_StartPulseOutM0,w
 11640  0B03  0021               	movlb	1	; select bank1
 11641  0B04  00E7               	movwf	_m0PulseChangePosition^(0+128)
 11642                           
 11643                           ;MotorDrive.c: 1326:         motorM0StepCounter = motorStepCounterSet[ 0 ];
 11644  0B05  0829               	movf	(_motorStepCounterSet+1)^(0+128),w
 11645  0B06  00C1               	movwf	(_motorM0StepCounter+1)^(0+128)
 11646  0B07  0828               	movf	_motorStepCounterSet^(0+128),w
 11647  0B08  00C0               	movwf	_motorM0StepCounter^(0+128)
 11648                           
 11649                           ;MotorDrive.c: 1327:         motorStepCounterSet[ 0 ] = 0;
 11650  0B09  01A8               	clrf	_motorStepCounterSet^(0+128)
 11651  0B0A  01A9               	clrf	(_motorStepCounterSet+1)^(0+128)
 11652                           
 11653                           ;MotorDrive.c: 1329:         TMR2_StartTimer();
 11654  0B0B  3190  204C  318A   	fcall	_TMR2_StartTimer
 11655                           
 11656                           ;MotorDrive.c: 1331:     } else {
 11657  0B0E  2B14               	goto	l5876
 11658  0B0F                     l5874:
 11659                           
 11660                           ;MotorDrive.c: 1333:         actCorrectDriveBit &= (UB) (~0x01);
 11661  0B0F  30FE               	movlw	254
 11662  0B10  0020               	movlb	0	; select bank0
 11663  0B11  00A0               	movwf	??_StartPulseOutM0
 11664  0B12  0820               	movf	??_StartPulseOutM0,w
 11665  0B13  05D3               	andwf	_actCorrectDriveBit,f
 11666  0B14                     l5876:
 11667                           
 11668                           ;MotorDrive.c: 1337:     (INTCONbits.PEIE = 1);
 11669  0B14  170B               	bsf	11,6	;volatile
 11670  0B15  0008               	return
 11671  0B16                     __end_of_StartPulseOutM0:
 11672                           
 11673                           	psect	text68
 11674  104C                     __ptext68:	
 11675 ;; *************** function _TMR2_StartTimer *****************
 11676 ;; Defined at:
 11677 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;		None
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      void 
 11684 ;; Registers used:
 11685 ;;		None
 11686 ;; Tracked objects:
 11687 ;;		On entry : 1F/1
 11688 ;;		On exit  : 1F/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11691 ;;      Params:         0       0       0       0       0       0       0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0
 11693 ;;      Temps:          0       0       0       0       0       0       0       0
 11694 ;;      Totals:         0       0       0       0       0       0       0       0
 11695 ;;Total ram usage:        0 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; Hardware stack levels required when called:    8
 11698 ;; This function calls:
 11699 ;;		Nothing
 11700 ;; This function is called by:
 11701 ;;		_StartPulseOutM0
 11702 ;;		_StartPulseOutM1
 11703 ;;		_SetMotorStartSPK
 11704 ;; This function uses a non-reentrant model
 11705 ;;
 11706                           
 11707                           
 11708                           ;psect for function _TMR2_StartTimer
 11709  104C                     _TMR2_StartTimer:
 11710                           
 11711                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 11712                           
 11713                           ;incstack = 0
 11714                           ; Regs used in _TMR2_StartTimer: []
 11715  104C  0020               	movlb	0	; select bank0
 11716  104D  151C               	bsf	28,2	;volatile
 11717  104E  0008               	return
 11718  104F                     __end_of_TMR2_StartTimer:
 11719                           
 11720                           	psect	text69
 11721  0845                     __ptext69:	
 11722 ;; *************** function _SetMotorFrequency *****************
 11723 ;; Defined at:
 11724 ;;		line 1828 in file "MotorDrive.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;  motor_no        1    wreg     unsigned char 
 11727 ;;  type            1    0[BANK0 ] unsigned char 
 11728 ;;  set_freq        1    1[BANK0 ] unsigned char 
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      void 
 11733 ;; Registers used:
 11734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11735 ;; Tracked objects:
 11736 ;;		On entry : 1F/0
 11737 ;;		On exit  : 1F/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11740 ;;      Params:         0       2       0       0       0       0       0       0
 11741 ;;      Locals:         0       1       0       0       0       0       0       0
 11742 ;;      Temps:          0       1       0       0       0       0       0       0
 11743 ;;      Totals:         0       4       0       0       0       0       0       0
 11744 ;;Total ram usage:        4 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    8
 11747 ;; This function calls:
 11748 ;;		Nothing
 11749 ;; This function is called by:
 11750 ;;		_main
 11751 ;;		_MoveTargetPosition
 11752 ;;		_SpiCmdFunc_FwdPulseNormal
 11753 ;;		_SpiCmdFunc_RevPulseNormal
 11754 ;;		_SpiCmdFunc_SearchBasePosition
 11755 ;;		_SetFwdPulseWithCorrectProc
 11756 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11757 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11758 ;;		_SpiCmdFunc_Search1008Position
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           
 11763                           ;psect for function _SetMotorFrequency
 11764  0845                     _SetMotorFrequency:
 11765                           
 11766                           ;incstack = 0
 11767                           ; Regs used in _SetMotorFrequency: [wreg-fsr1h+status,2+status,0+pclath]
 11768                           ;SetMotorFrequency@motor_no stored from wreg
 11769  0845  00A3               	movwf	SetMotorFrequency@motor_no
 11770                           
 11771                           ;MotorDrive.c: 1828: void SetMotorFrequency(UB motor_no, UB type, UB set_freq);MotorDriv
      +                          e.c: 1829: {;MotorDrive.c: 1830:     if (FREQ_SET_SELF_CONTROL_NORMAL == type) {
 11772  0846  0820               	movf	SetMotorFrequency@type,w
 11773  0847  1D03               	btfss	3,2
 11774  0848  2853               	goto	l6008
 11775                           
 11776                           ;MotorDrive.c: 1833:         finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1 ) + 5 +
      +                           4 + ( 1 + 3 ) * 10 ) ) - 1 ) + set_freq;
 11777  0849  0821               	movf	SetMotorFrequency@set_freq,w
 11778  084A  3E31               	addlw	49
 11779  084B  00A2               	movwf	??_SetMotorFrequency
 11780  084C  0823               	movf	SetMotorFrequency@motor_no,w
 11781  084D  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11782  084E  0086               	movwf	6
 11783  084F  0187               	clrf	7
 11784  0850  0822               	movf	??_SetMotorFrequency,w
 11785  0851  0081               	movwf	1
 11786                           
 11787                           ;MotorDrive.c: 1835:     } else if (FREQ_SET_SELF_CONTROL_SHAKE == type) {
 11788  0852  0008               	return
 11789  0853                     l6008:
 11790  0853  0320               	decf	SetMotorFrequency@type,w
 11791  0854  1D03               	btfss	3,2
 11792  0855  2879               	goto	l6024
 11793                           
 11794                           ;MotorDrive.c: 1837:         if (0 == motor_no) {
 11795  0856  0823               	movf	SetMotorFrequency@motor_no,w
 11796  0857  1D03               	btfss	3,2
 11797  0858  2875               	goto	l6018
 11798                           
 11799                           ;MotorDrive.c: 1838:             if (TblM0PulseChangePosition[ ( ( 5 + 10 * 2 ) - 1 ) ] 
      +                          < set_freq) {
 11800  0859  304D               	movlw	low ((_TblM0PulseChangePosition+24)| (0+32768))
 11801  085A  0084               	movwf	4
 11802  085B  3098               	movlw	high ((_TblM0PulseChangePosition+24)| (0+32768))
 11803  085C                     L17:
 11804  085C  0085               	movwf	5
 11805  085D  0800               	movf	0,w	;code access
 11806  085E  00A2               	movwf	??_SetMotorFrequency
 11807  085F  0821               	movf	SetMotorFrequency@set_freq,w
 11808  0860  0222               	subwf	??_SetMotorFrequency,w
 11809  0861  1803               	skipnc
 11810  0862  286C               	goto	l6016
 11811                           
 11812                           ;MotorDrive.c: 1839:                 finishPositionCtSet[ motor_no ] = set_freq;
 11813  0863  0821               	movf	SetMotorFrequency@set_freq,w
 11814  0864  00A2               	movwf	??_SetMotorFrequency
 11815  0865  0823               	movf	SetMotorFrequency@motor_no,w
 11816  0866  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11817  0867  0086               	movwf	6
 11818  0868  0187               	clrf	7
 11819  0869  0822               	movf	??_SetMotorFrequency,w
 11820  086A  0081               	movwf	1
 11821                           
 11822                           ;MotorDrive.c: 1840:             } else {
 11823  086B  0008               	return
 11824  086C                     l6016:
 11825                           
 11826                           ;MotorDrive.c: 1841:                 finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1
      +                           ) + 5 + 4 + ( 1 + 3 ) * 10 ) ) + 6 + 16 + 19 );
 11827  086C  305B               	movlw	91
 11828  086D  00A2               	movwf	??_SetMotorFrequency
 11829  086E  0823               	movf	SetMotorFrequency@motor_no,w
 11830  086F  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11831  0870  0086               	movwf	6
 11832  0871  0187               	clrf	7
 11833  0872  0822               	movf	??_SetMotorFrequency,w
 11834  0873  0081               	movwf	1
 11835  0874  0008               	return
 11836  0875                     l6018:
 11837                           
 11838                           ;MotorDrive.c: 1844:             if (TblM1PulseChangePosition[ ( ( 5 + 10 * 2 ) - 1 ) ] 
      +                          < set_freq) {
 11839  0875  3034               	movlw	low ((_TblM1PulseChangePosition+24)| (0+32768))
 11840  0876  0084               	movwf	4
 11841  0877  3098               	movlw	high ((_TblM1PulseChangePosition+24)| (0+32768))
 11842  0878  285C               	goto	L17
 11843  0879                     l6024:
 11844                           
 11845                           ;MotorDrive.c: 1853:         finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1 ) + 5 +
      +                           4 + ( 1 + 3 ) * 10 ) ) + 6 + 16 + 7 );
 11846  0879  304F               	movlw	79
 11847  087A  00A2               	movwf	??_SetMotorFrequency
 11848  087B  0823               	movf	SetMotorFrequency@motor_no,w
 11849  087C  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11850  087D  0086               	movwf	6
 11851  087E  0187               	clrf	7
 11852  087F  0822               	movf	??_SetMotorFrequency,w
 11853  0880  0081               	movwf	1
 11854  0881  0008               	return
 11855  0882                     __end_of_SetMotorFrequency:
 11856                           
 11857                           	psect	text70
 11858  14E9                     __ptext70:	
 11859 ;; *************** function _SetMotorDirection *****************
 11860 ;; Defined at:
 11861 ;;		line 1683 in file "MotorDrive.c"
 11862 ;; Parameters:    Size  Location     Type
 11863 ;;  motor_no        1    wreg     unsigned char 
 11864 ;;  dir             1    0[BANK0 ] unsigned char 
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11867 ;; Return value:  Size  Location     Type
 11868 ;;                  1    wreg      void 
 11869 ;; Registers used:
 11870 ;;		wreg, status,2, status,0
 11871 ;; Tracked objects:
 11872 ;;		On entry : 1F/0
 11873 ;;		On exit  : 1F/0
 11874 ;;		Unchanged: 0/0
 11875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11876 ;;      Params:         0       1       0       0       0       0       0       0
 11877 ;;      Locals:         0       1       0       0       0       0       0       0
 11878 ;;      Temps:          0       2       0       0       0       0       0       0
 11879 ;;      Totals:         0       4       0       0       0       0       0       0
 11880 ;;Total ram usage:        4 bytes
 11881 ;; Hardware stack levels used:    1
 11882 ;; Hardware stack levels required when called:    8
 11883 ;; This function calls:
 11884 ;;		Nothing
 11885 ;; This function is called by:
 11886 ;;		_main
 11887 ;;		_CalcMotorStepCounter
 11888 ;;		_SpiCmdFunc_FwdPulseNormal
 11889 ;;		_SpiCmdFunc_RevPulseNormal
 11890 ;;		_SpiCmdFunc_SearchBasePosition
 11891 ;;		_SpiCmdFunc_Search1008Position
 11892 ;; This function uses a non-reentrant model
 11893 ;;
 11894                           
 11895                           
 11896                           ;psect for function _SetMotorDirection
 11897  14E9                     _SetMotorDirection:
 11898                           
 11899                           ;incstack = 0
 11900                           ; Regs used in _SetMotorDirection: [wreg+status,2+status,0]
 11901                           ;SetMotorDirection@motor_no stored from wreg
 11902  14E9  00A3               	movwf	SetMotorDirection@motor_no
 11903                           
 11904                           ;MotorDrive.c: 1683: void SetMotorDirection(UB motor_no, UB dir);MotorDrive.c: 1684: {;M
      +                          otorDrive.c: 1685:     motorBitOperation = (UB) (0x01 << motor_no);
 11905  14EA  3001               	movlw	1
 11906  14EB  00A1               	movwf	??_SetMotorDirection
 11907  14EC  0A23               	incf	SetMotorDirection@motor_no,w
 11908  14ED  2CEF               	goto	u4274
 11909  14EE                     u4275:
 11910  14EE  35A1               	lslf	??_SetMotorDirection,f
 11911  14EF                     u4274:
 11912  14EF  0B89               	decfsz	9,f
 11913  14F0  2CEE               	goto	u4275
 11914  14F1  0821               	movf	??_SetMotorDirection,w
 11915  14F2  00A2               	movwf	??_SetMotorDirection+1
 11916  14F3  0822               	movf	??_SetMotorDirection+1,w
 11917  14F4  00F4               	movwf	_motorBitOperation
 11918                           
 11919                           ;MotorDrive.c: 1687:     if (1 == dir) {
 11920  14F5  0320               	decf	SetMotorDirection@dir,w
 11921  14F6  1D03               	btfss	3,2
 11922  14F7  2CFD               	goto	l5834
 11923                           
 11924                           ;MotorDrive.c: 1689:         driveDirectionBit |= motorBitOperation;
 11925  14F8  0874               	movf	_motorBitOperation,w
 11926  14F9  00A1               	movwf	??_SetMotorDirection
 11927  14FA  0821               	movf	??_SetMotorDirection,w
 11928  14FB  04D7               	iorwf	_driveDirectionBit,f
 11929                           
 11930                           ;MotorDrive.c: 1691:     } else {
 11931  14FC  0008               	return
 11932  14FD                     l5834:
 11933                           
 11934                           ;MotorDrive.c: 1693:         driveDirectionBit &= (UB) (~motorBitOperation);
 11935  14FD  0974               	comf	_motorBitOperation,w
 11936  14FE  00A1               	movwf	??_SetMotorDirection
 11937  14FF  0821               	movf	??_SetMotorDirection,w
 11938  1500  05D7               	andwf	_driveDirectionBit,f
 11939  1501  0008               	return
 11940  1502                     __end_of_SetMotorDirection:
 11941                           
 11942                           	psect	text71
 11943  0D85                     __ptext71:	
 11944 ;; *************** function _SetDriveType *****************
 11945 ;; Defined at:
 11946 ;;		line 1543 in file "MotorDrive.c"
 11947 ;; Parameters:    Size  Location     Type
 11948 ;;  motor_no        1    wreg     unsigned char 
 11949 ;;  drive_type      1    0[BANK0 ] unsigned char 
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      void 
 11954 ;; Registers used:
 11955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11956 ;; Tracked objects:
 11957 ;;		On entry : 1F/0
 11958 ;;		On exit  : 1E/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11961 ;;      Params:         0       1       0       0       0       0       0       0
 11962 ;;      Locals:         0       1       0       0       0       0       0       0
 11963 ;;      Temps:          0       2       0       0       0       0       0       0
 11964 ;;      Totals:         0       4       0       0       0       0       0       0
 11965 ;;Total ram usage:        4 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    8
 11968 ;; This function calls:
 11969 ;;		Nothing
 11970 ;; This function is called by:
 11971 ;;		_AfterDetectedLoadPosition
 11972 ;;		_SpiCmdFunc_FwdPulseNormal
 11973 ;;		_SpiCmdFunc_RevPulseNormal
 11974 ;;		_SpiCmdFunc_SearchBasePosition
 11975 ;;		_SetFwdPulseWithCorrectProc
 11976 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11977 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11978 ;;		_SpiCmdFunc_Search1008Position
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           
 11983                           ;psect for function _SetDriveType
 11984  0D85                     _SetDriveType:
 11985                           
 11986                           ;incstack = 0
 11987                           ; Regs used in _SetDriveType: [wreg-fsr1h+status,2+status,0]
 11988                           ;SetDriveType@motor_no stored from wreg
 11989  0D85  00A3               	movwf	SetDriveType@motor_no
 11990                           
 11991                           ;MotorDrive.c: 1543: void SetDriveType(UB motor_no, UB drive_type);MotorDrive.c: 1544: {
      +                          ;MotorDrive.c: 1546:     motorBitOperation = (UB) (0x01 << motor_no);
 11992  0D86  3001               	movlw	1
 11993  0D87  00A1               	movwf	??_SetDriveType
 11994  0D88  0A23               	incf	SetDriveType@motor_no,w
 11995  0D89  2D8B               	goto	u4584
 11996  0D8A                     u4585:
 11997  0D8A  35A1               	lslf	??_SetDriveType,f
 11998  0D8B                     u4584:
 11999  0D8B  0B89               	decfsz	9,f
 12000  0D8C  2D8A               	goto	u4585
 12001  0D8D  0821               	movf	??_SetDriveType,w
 12002  0D8E  00A2               	movwf	??_SetDriveType+1
 12003  0D8F  0822               	movf	??_SetDriveType+1,w
 12004  0D90  00F4               	movwf	_motorBitOperation
 12005                           
 12006                           ;MotorDrive.c: 1548:     driveType[ motor_no ] = drive_type;
 12007  0D91  0820               	movf	SetDriveType@drive_type,w
 12008  0D92  00A1               	movwf	??_SetDriveType
 12009  0D93  0823               	movf	SetDriveType@motor_no,w
 12010  0D94  3E30               	addlw	(low (_driveType| (0+256)))& (0+255)
 12011  0D95  0086               	movwf	6
 12012  0D96  3001               	movlw	1	; select bank2/3
 12013  0D97  0087               	movwf	7
 12014  0D98  0821               	movf	??_SetDriveType,w
 12015  0D99  0081               	movwf	1
 12016                           
 12017                           ;MotorDrive.c: 1550:     switch (drive_type) {
 12018  0D9A  2DFD               	goto	l6074
 12019  0D9B                     l6062:
 12020                           
 12021                           ;MotorDrive.c: 1553:         addShakePulseBit &= (UB) (~motorBitOperation);
 12022  0D9B  0974               	comf	_motorBitOperation,w
 12023  0D9C  00A1               	movwf	??_SetDriveType
 12024  0D9D  0821               	movf	??_SetDriveType,w
 12025  0D9E  05F0               	andwf	_addShakePulseBit,f
 12026                           
 12027                           ;MotorDrive.c: 1554:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12028  0D9F  0974               	comf	_motorBitOperation,w
 12029  0DA0  00A1               	movwf	??_SetDriveType
 12030  0DA1  0821               	movf	??_SetDriveType,w
 12031  0DA2  05D5               	andwf	_reqSearchBasePosBit,f
 12032                           
 12033                           ;MotorDrive.c: 1556:         reqCheckLoadPosBit &= (UB) (~motorBitOperation);
 12034  0DA3  0974               	comf	_motorBitOperation,w
 12035  0DA4  00A1               	movwf	??_SetDriveType
 12036  0DA5  0821               	movf	??_SetDriveType,w
 12037  0DA6  0021               	movlb	1	; select bank1
 12038  0DA7  05CE               	andwf	_reqCheckLoadPosBit^(0+128),f
 12039                           
 12040                           ;MotorDrive.c: 1557:         reqCorrectBasePosBit &= (UB) (~motorBitOperation);
 12041  0DA8  0974               	comf	_motorBitOperation,w
 12042  0DA9  0020               	movlb	0	; select bank0
 12043  0DAA  00A1               	movwf	??_SetDriveType
 12044  0DAB  0821               	movf	??_SetDriveType,w
 12045  0DAC  05D4               	andwf	_reqCorrectBasePosBit,f
 12046                           
 12047                           ;MotorDrive.c: 1558:         reqCorrectFinePoBit &= (UB) (~motorBitOperation);
 12048  0DAD  0974               	comf	_motorBitOperation,w
 12049  0DAE  00A1               	movwf	??_SetDriveType
 12050  0DAF  0821               	movf	??_SetDriveType,w
 12051  0DB0  0021               	movlb	1	; select bank1
 12052  0DB1  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
 12053                           
 12054                           ;MotorDrive.c: 1559:         actCorrectDriveBit &= (UB) (~motorBitOperation);
 12055  0DB2  0974               	comf	_motorBitOperation,w
 12056  0DB3  0020               	movlb	0	; select bank0
 12057  0DB4  00A1               	movwf	??_SetDriveType
 12058  0DB5  0821               	movf	??_SetDriveType,w
 12059  0DB6  05D3               	andwf	_actCorrectDriveBit,f
 12060                           
 12061                           ;MotorDrive.c: 1560:         break;
 12062  0DB7  0008               	return
 12063  0DB8                     l6064:
 12064                           
 12065                           ;MotorDrive.c: 1564:         addShakePulseBit |= (UB) (motorBitOperation);
 12066  0DB8  0874               	movf	_motorBitOperation,w
 12067  0DB9  00A1               	movwf	??_SetDriveType
 12068  0DBA  0821               	movf	??_SetDriveType,w
 12069  0DBB  04F0               	iorwf	_addShakePulseBit,f
 12070                           
 12071                           ;MotorDrive.c: 1565:         reqSearchBasePosBit |= (UB) (motorBitOperation);
 12072  0DBC  0874               	movf	_motorBitOperation,w
 12073  0DBD  00A1               	movwf	??_SetDriveType
 12074  0DBE  0821               	movf	??_SetDriveType,w
 12075  0DBF  04D5               	iorwf	_reqSearchBasePosBit,f
 12076                           
 12077                           ;MotorDrive.c: 1567:         reqCheckLoadPosBit &= (UB) (~motorBitOperation);
 12078  0DC0  0974               	comf	_motorBitOperation,w
 12079  0DC1  00A1               	movwf	??_SetDriveType
 12080  0DC2  0821               	movf	??_SetDriveType,w
 12081  0DC3  0021               	movlb	1	; select bank1
 12082  0DC4  05CE               	andwf	_reqCheckLoadPosBit^(0+128),f
 12083                           
 12084                           ;MotorDrive.c: 1568:         reqCorrectBasePosBit &= (UB) (~motorBitOperation);
 12085  0DC5  0974               	comf	_motorBitOperation,w
 12086  0DC6  0020               	movlb	0	; select bank0
 12087  0DC7  00A1               	movwf	??_SetDriveType
 12088  0DC8  0821               	movf	??_SetDriveType,w
 12089  0DC9  05D4               	andwf	_reqCorrectBasePosBit,f
 12090                           
 12091                           ;MotorDrive.c: 1569:         reqCorrectFinePoBit &= (UB) (~motorBitOperation);
 12092  0DCA  0974               	comf	_motorBitOperation,w
 12093  0DCB  00A1               	movwf	??_SetDriveType
 12094  0DCC  0821               	movf	??_SetDriveType,w
 12095  0DCD  0021               	movlb	1	; select bank1
 12096  0DCE  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
 12097                           
 12098                           ;MotorDrive.c: 1570:         actCorrectDriveBit &= (UB) (~motorBitOperation);
 12099  0DCF  0974               	comf	_motorBitOperation,w
 12100  0DD0  0020               	movlb	0	; select bank0
 12101  0DD1  00A1               	movwf	??_SetDriveType
 12102  0DD2  0821               	movf	??_SetDriveType,w
 12103  0DD3  05D3               	andwf	_actCorrectDriveBit,f
 12104                           
 12105                           ;MotorDrive.c: 1571:         break;
 12106  0DD4  0008               	return
 12107  0DD5                     l6066:
 12108                           
 12109                           ;MotorDrive.c: 1574:         addShakePulseBit |= (UB) (motorBitOperation);
 12110  0DD5  0874               	movf	_motorBitOperation,w
 12111  0DD6  00A1               	movwf	??_SetDriveType
 12112  0DD7  0821               	movf	??_SetDriveType,w
 12113  0DD8  04F0               	iorwf	_addShakePulseBit,f
 12114                           
 12115                           ;MotorDrive.c: 1575:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12116  0DD9  0974               	comf	_motorBitOperation,w
 12117  0DDA  00A1               	movwf	??_SetDriveType
 12118  0DDB  0821               	movf	??_SetDriveType,w
 12119  0DDC  05D5               	andwf	_reqSearchBasePosBit,f
 12120                           
 12121                           ;MotorDrive.c: 1577:         reqCheckLoadPosBit |= (UB) (motorBitOperation);
 12122  0DDD  0874               	movf	_motorBitOperation,w
 12123  0DDE  00A1               	movwf	??_SetDriveType
 12124  0DDF  0821               	movf	??_SetDriveType,w
 12125  0DE0  0021               	movlb	1	; select bank1
 12126  0DE1  04CE               	iorwf	_reqCheckLoadPosBit^(0+128),f
 12127                           
 12128                           ;MotorDrive.c: 1581:         break;
 12129  0DE2  0008               	return
 12130  0DE3                     l6068:
 12131                           
 12132                           ;MotorDrive.c: 1584:         addShakePulseBit |= (UB) (motorBitOperation);
 12133  0DE3  0874               	movf	_motorBitOperation,w
 12134  0DE4  00A1               	movwf	??_SetDriveType
 12135  0DE5  0821               	movf	??_SetDriveType,w
 12136  0DE6  04F0               	iorwf	_addShakePulseBit,f
 12137                           
 12138                           ;MotorDrive.c: 1585:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12139  0DE7  0974               	comf	_motorBitOperation,w
 12140  0DE8  00A1               	movwf	??_SetDriveType
 12141  0DE9  0821               	movf	??_SetDriveType,w
 12142  0DEA  05D5               	andwf	_reqSearchBasePosBit,f
 12143                           
 12144                           ;MotorDrive.c: 1588:         reqCorrectBasePosBit |= (UB) (motorBitOperation);
 12145  0DEB  0874               	movf	_motorBitOperation,w
 12146  0DEC  00A1               	movwf	??_SetDriveType
 12147  0DED  0821               	movf	??_SetDriveType,w
 12148  0DEE  04D4               	iorwf	_reqCorrectBasePosBit,f
 12149                           
 12150                           ;MotorDrive.c: 1591:         break;
 12151  0DEF  0008               	return
 12152  0DF0                     l6070:
 12153                           
 12154                           ;MotorDrive.c: 1594:         addShakePulseBit &= (UB) (~motorBitOperation);
 12155  0DF0  0974               	comf	_motorBitOperation,w
 12156  0DF1  00A1               	movwf	??_SetDriveType
 12157  0DF2  0821               	movf	??_SetDriveType,w
 12158  0DF3  05F0               	andwf	_addShakePulseBit,f
 12159                           
 12160                           ;MotorDrive.c: 1595:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12161  0DF4  0974               	comf	_motorBitOperation,w
 12162  0DF5  00A1               	movwf	??_SetDriveType
 12163  0DF6  0821               	movf	??_SetDriveType,w
 12164  0DF7  05D5               	andwf	_reqSearchBasePosBit,f
 12165                           
 12166                           ;MotorDrive.c: 1600:         actCorrectDriveBit |= (UB) (motorBitOperation);
 12167  0DF8  0874               	movf	_motorBitOperation,w
 12168  0DF9  00A1               	movwf	??_SetDriveType
 12169  0DFA  0821               	movf	??_SetDriveType,w
 12170  0DFB  04D3               	iorwf	_actCorrectDriveBit,f
 12171  0DFC  0008               	return
 12172  0DFD                     l6074:
 12173  0DFD  0820               	movf	SetDriveType@drive_type,w
 12174  0DFE  00A1               	movwf	??_SetDriveType
 12175  0DFF  01A2               	clrf	??_SetDriveType+1
 12176                           
 12177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12178                           ; Switch size 1, requested type "simple"
 12179                           ; Number of cases is 1, Range of values is 0 to 0
 12180                           ; switch strategies available:
 12181                           ; Name         Instructions Cycles
 12182                           ; simple_byte            4     3 (average)
 12183                           ; direct_byte            8     6 (fixed)
 12184                           ; jumptable            260     6 (fixed)
 12185                           ;	Chosen strategy is simple_byte
 12186  0E00  0822               	movf	??_SetDriveType+1,w
 12187  0E01  3A00               	xorlw	0	; case 0
 12188  0E02  1903               	skipnz
 12189  0E03  2E05               	goto	l6924
 12190  0E04  2E19               	goto	l800
 12191  0E05                     l6924:
 12192                           
 12193                           ; Switch size 1, requested type "simple"
 12194                           ; Number of cases is 6, Range of values is 0 to 5
 12195                           ; switch strategies available:
 12196                           ; Name         Instructions Cycles
 12197                           ; direct_byte           18     6 (fixed)
 12198                           ; simple_byte           19    10 (average)
 12199                           ; jumptable            260     6 (fixed)
 12200                           ;	Chosen strategy is simple_byte
 12201  0E05  0821               	movf	??_SetDriveType,w
 12202  0E06  3A00               	xorlw	0	; case 0
 12203  0E07  1903               	skipnz
 12204  0E08  2D9B               	goto	l6062
 12205  0E09  3A01               	xorlw	1	; case 1
 12206  0E0A  1903               	skipnz
 12207  0E0B  2DB8               	goto	l6064
 12208  0E0C  3A03               	xorlw	3	; case 2
 12209  0E0D  1903               	skipnz
 12210  0E0E  2DD5               	goto	l6066
 12211  0E0F  3A01               	xorlw	1	; case 3
 12212  0E10  1903               	skipnz
 12213  0E11  2DE3               	goto	l6068
 12214  0E12  3A07               	xorlw	7	; case 4
 12215  0E13  1903               	skipnz
 12216  0E14  2DF0               	goto	l6070
 12217  0E15  3A01               	xorlw	1	; case 5
 12218  0E16  1903               	skipnz
 12219  0E17  2DB8               	goto	l6064
 12220  0E18  2E19               	goto	l800
 12221  0E19                     l800:
 12222  0E19  0008               	return
 12223  0E1A                     __end_of_SetDriveType:
 12224                           
 12225                           	psect	text72
 12226  1358                     __ptext72:	
 12227 ;; *************** function _SetMotorEnableExcitating *****************
 12228 ;; Defined at:
 12229 ;;		line 1504 in file "MotorDrive.c"
 12230 ;; Parameters:    Size  Location     Type
 12231 ;;  motor_no        1    wreg     unsigned char 
 12232 ;; Auto vars:     Size  Location     Type
 12233 ;;  motor_no        1    2[BANK0 ] unsigned char 
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  1    wreg      void 
 12236 ;; Registers used:
 12237 ;;		wreg, status,2, status,0
 12238 ;; Tracked objects:
 12239 ;;		On entry : 1F/0
 12240 ;;		On exit  : 1F/1
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12243 ;;      Params:         0       0       0       0       0       0       0       0
 12244 ;;      Locals:         0       1       0       0       0       0       0       0
 12245 ;;      Temps:          0       2       0       0       0       0       0       0
 12246 ;;      Totals:         0       3       0       0       0       0       0       0
 12247 ;;Total ram usage:        3 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    8
 12250 ;; This function calls:
 12251 ;;		Nothing
 12252 ;; This function is called by:
 12253 ;;		_SpiCmdFunc_EnableExcitating
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           
 12258                           ;psect for function _SetMotorEnableExcitating
 12259  1358                     _SetMotorEnableExcitating:
 12260                           
 12261                           ;incstack = 0
 12262                           ; Regs used in _SetMotorEnableExcitating: [wreg+status,2+status,0]
 12263                           ;SetMotorEnableExcitating@motor_no stored from wreg
 12264  1358  00A2               	movwf	SetMotorEnableExcitating@motor_no
 12265                           
 12266                           ;MotorDrive.c: 1504: void SetMotorEnableExcitating(UB motor_no);MotorDrive.c: 1505: {;Mo
      +                          torDrive.c: 1506:     motorBitOperation = (UB) (0x01 << motor_no);
 12267  1359  3001               	movlw	1
 12268  135A  00A0               	movwf	??_SetMotorEnableExcitating
 12269  135B  0A22               	incf	SetMotorEnableExcitating@motor_no,w
 12270  135C  2B5E               	goto	u4674
 12271  135D                     u4675:
 12272  135D  35A0               	lslf	??_SetMotorEnableExcitating,f
 12273  135E                     u4674:
 12274  135E  0B89               	decfsz	9,f
 12275  135F  2B5D               	goto	u4675
 12276  1360  0820               	movf	??_SetMotorEnableExcitating,w
 12277  1361  00A1               	movwf	??_SetMotorEnableExcitating+1
 12278  1362  0821               	movf	??_SetMotorEnableExcitating+1,w
 12279  1363  00F4               	movwf	_motorBitOperation
 12280                           
 12281                           ;MotorDrive.c: 1508:     excitatingEnableBit |= (UB) (motorBitOperation);
 12282  1364  0874               	movf	_motorBitOperation,w
 12283  1365  00A0               	movwf	??_SetMotorEnableExcitating
 12284  1366  0820               	movf	??_SetMotorEnableExcitating,w
 12285  1367  0021               	movlb	1	; select bank1
 12286  1368  04E3               	iorwf	_excitatingEnableBit^(0+128),f
 12287  1369  0008               	return
 12288  136A                     __end_of_SetMotorEnableExcitating:
 12289                           
 12290                           	psect	text73
 12291  1346                     __ptext73:	
 12292 ;; *************** function _SetMotorDisableExcitating *****************
 12293 ;; Defined at:
 12294 ;;		line 1519 in file "MotorDrive.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  motor_no        1    wreg     unsigned char 
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;  motor_no        1    2[BANK0 ] unsigned char 
 12299 ;; Return value:  Size  Location     Type
 12300 ;;                  1    wreg      void 
 12301 ;; Registers used:
 12302 ;;		wreg, status,2, status,0
 12303 ;; Tracked objects:
 12304 ;;		On entry : 1F/0
 12305 ;;		On exit  : 1F/1
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12308 ;;      Params:         0       0       0       0       0       0       0       0
 12309 ;;      Locals:         0       1       0       0       0       0       0       0
 12310 ;;      Temps:          0       2       0       0       0       0       0       0
 12311 ;;      Totals:         0       3       0       0       0       0       0       0
 12312 ;;Total ram usage:        3 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; Hardware stack levels required when called:    8
 12315 ;; This function calls:
 12316 ;;		Nothing
 12317 ;; This function is called by:
 12318 ;;		_SpiCmdFunc_DisableExcitating
 12319 ;; This function uses a non-reentrant model
 12320 ;;
 12321                           
 12322                           
 12323                           ;psect for function _SetMotorDisableExcitating
 12324  1346                     _SetMotorDisableExcitating:
 12325                           
 12326                           ;incstack = 0
 12327                           ; Regs used in _SetMotorDisableExcitating: [wreg+status,2+status,0]
 12328                           ;SetMotorDisableExcitating@motor_no stored from wreg
 12329  1346  00A2               	movwf	SetMotorDisableExcitating@motor_no
 12330                           
 12331                           ;MotorDrive.c: 1519: void SetMotorDisableExcitating(UB motor_no);MotorDrive.c: 1520: {;M
      +                          otorDrive.c: 1521:     motorBitOperation = (UB) (0x01 << motor_no);
 12332  1347  3001               	movlw	1
 12333  1348  00A0               	movwf	??_SetMotorDisableExcitating
 12334  1349  0A22               	incf	SetMotorDisableExcitating@motor_no,w
 12335  134A  2B4C               	goto	u4684
 12336  134B                     u4685:
 12337  134B  35A0               	lslf	??_SetMotorDisableExcitating,f
 12338  134C                     u4684:
 12339  134C  0B89               	decfsz	9,f
 12340  134D  2B4B               	goto	u4685
 12341  134E  0820               	movf	??_SetMotorDisableExcitating,w
 12342  134F  00A1               	movwf	??_SetMotorDisableExcitating+1
 12343  1350  0821               	movf	??_SetMotorDisableExcitating+1,w
 12344  1351  00F4               	movwf	_motorBitOperation
 12345                           
 12346                           ;MotorDrive.c: 1523:     excitatingEnableBit &= (UB) (~motorBitOperation);
 12347  1352  0974               	comf	_motorBitOperation,w
 12348  1353  00A0               	movwf	??_SetMotorDisableExcitating
 12349  1354  0820               	movf	??_SetMotorDisableExcitating,w
 12350  1355  0021               	movlb	1	; select bank1
 12351  1356  05E3               	andwf	_excitatingEnableBit^(0+128),f
 12352  1357  0008               	return
 12353  1358                     __end_of_SetMotorDisableExcitating:
 12354                           
 12355                           	psect	text74
 12356  12CB                     __ptext74:	
 12357 ;; *************** function _InitPulsePositionTable *****************
 12358 ;; Defined at:
 12359 ;;		line 801 in file "MotorDrive.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;  motor_no        1    wreg     unsigned char 
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;  motor_no        1    1[BANK0 ] unsigned char 
 12364 ;; Return value:  Size  Location     Type
 12365 ;;                  1    wreg      void 
 12366 ;; Registers used:
 12367 ;;		wreg, status,2, status,0
 12368 ;; Tracked objects:
 12369 ;;		On entry : 1C/2
 12370 ;;		On exit  : 1F/1
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12373 ;;      Params:         0       0       0       0       0       0       0       0
 12374 ;;      Locals:         0       1       0       0       0       0       0       0
 12375 ;;      Temps:          0       1       0       0       0       0       0       0
 12376 ;;      Totals:         0       2       0       0       0       0       0       0
 12377 ;;Total ram usage:        2 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    8
 12380 ;; This function calls:
 12381 ;;		Nothing
 12382 ;; This function is called by:
 12383 ;;		_main
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           
 12388                           ;psect for function _InitPulsePositionTable
 12389  12CB                     _InitPulsePositionTable:
 12390                           
 12391                           ;incstack = 0
 12392                           ; Regs used in _InitPulsePositionTable: [wreg+status,2+status,0]
 12393                           ;InitPulsePositionTable@motor_no stored from wreg
 12394  12CB  0020               	movlb	0	; select bank0
 12395  12CC  00A1               	movwf	InitPulsePositionTable@motor_no
 12396                           
 12397                           ;MotorDrive.c: 801: void InitPulsePositionTable(UB motor_no);MotorDrive.c: 802: {;MotorD
      +                          rive.c: 803:     if (0 == motor_no) {
 12398  12CD  0821               	movf	InitPulsePositionTable@motor_no,w
 12399  12CE  1D03               	btfss	3,2
 12400  12CF  2AD6               	goto	l6850
 12401                           
 12402                           ;MotorDrive.c: 804:         TblM0PulseChangePositionLast = PULSE_CHANGE_OFF;
 12403  12D0  305B               	movlw	91
 12404  12D1  00A0               	movwf	??_InitPulsePositionTable
 12405  12D2  0820               	movf	??_InitPulsePositionTable,w
 12406  12D3  0021               	movlb	1	; select bank1
 12407  12D4  00EC               	movwf	_TblM0PulseChangePositionLast^(0+128)
 12408                           
 12409                           ;MotorDrive.c: 805:     } else {
 12410  12D5  0008               	return
 12411  12D6                     l6850:
 12412                           
 12413                           ;MotorDrive.c: 806:         TblM1PulseChangePositionLast = PULSE_CHANGE_OFF;
 12414  12D6  305B               	movlw	91
 12415  12D7  00A0               	movwf	??_InitPulsePositionTable
 12416  12D8  0820               	movf	??_InitPulsePositionTable,w
 12417  12D9  0021               	movlb	1	; select bank1
 12418  12DA  00EB               	movwf	_TblM1PulseChangePositionLast^(0+128)
 12419  12DB  0008               	return
 12420  12DC                     __end_of_InitPulsePositionTable:
 12421                           
 12422                           	psect	intentry
 12423  0004                     __pintentry:	
 12424 ;; *************** function _INTERRUPT_InterruptManager *****************
 12425 ;; Defined at:
 12426 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;		None
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;		None
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      void 
 12433 ;; Registers used:
 12434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12440 ;;      Params:         0       0       0       0       0       0       0       0
 12441 ;;      Locals:         0       0       0       0       0       0       0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0
 12443 ;;      Totals:         0       0       0       0       0       0       0       0
 12444 ;;Total ram usage:        0 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    7
 12447 ;; This function calls:
 12448 ;;		_TMR1_ISR
 12449 ;;		_TMR2_ISR
 12450 ;; This function is called by:
 12451 ;;		Interrupt level 1
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455  0004                     _INTERRUPT_InterruptManager:
 12456                           
 12457                           ;incstack = 0
 12458  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12459                           
 12460                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12461  0005  3180               	pagesel	$
 12462                           
 12463                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 12464  0006  1F0B               	btfss	11,6	;volatile
 12465  0007  281A               	goto	i1l85
 12466                           
 12467                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 12468  0008  0021               	movlb	1	; select bank1
 12469  0009  1C91               	btfss	17,1	;volatile
 12470  000A  2812               	goto	i1l80
 12471  000B  0020               	movlb	0	; select bank0
 12472  000C  1C91               	btfss	17,1	;volatile
 12473  000D  2812               	goto	i1l80
 12474                           
 12475                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             TMR2_ISR();
 12476  000E  3190  205B  3180   	fcall	_TMR2_ISR
 12477                           
 12478                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 12479  0011  281A               	goto	i1l85
 12480  0012                     i1l80:	
 12481                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 12482                           
 12483  0012  0021               	movlb	1	; select bank1
 12484  0013  1C11               	btfss	17,0	;volatile
 12485  0014  281A               	goto	i1l85
 12486  0015  0020               	movlb	0	; select bank0
 12487  0016  1C11               	btfss	17,0	;volatile
 12488  0017  281A               	goto	i1l85
 12489                           
 12490                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 12491  0018  3190  20C8         	fcall	_TMR1_ISR
 12492  001A                     i1l85:	
 12493                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 12494                           
 12495                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 12496                           
 12497  001A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12498  001B  0009               	retfie
 12499  001C                     __end_of_INTERRUPT_InterruptManager:
 12500                           
 12501                           	psect	text76
 12502  105B                     __ptext76:	
 12503 ;; *************** function _TMR2_ISR *****************
 12504 ;; Defined at:
 12505 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;		None
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;		None
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      void 
 12512 ;; Registers used:
 12513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12514 ;; Tracked objects:
 12515 ;;		On entry : 1F/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12519 ;;      Params:         0       0       0       0       0       0       0       0
 12520 ;;      Locals:         0       0       0       0       0       0       0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0       0
 12522 ;;      Totals:         0       0       0       0       0       0       0       0
 12523 ;;Total ram usage:        0 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    6
 12526 ;; This function calls:
 12527 ;;		_TMR2_CallBack
 12528 ;; This function is called by:
 12529 ;;		_INTERRUPT_InterruptManager
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           
 12534                           ;psect for function _TMR2_ISR
 12535  105B                     _TMR2_ISR:
 12536                           
 12537                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 12538                           
 12539                           ;incstack = 0
 12540                           ; Regs used in _TMR2_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12541  105B  1091               	bcf	17,1	;volatile
 12542                           
 12543                           ;mcc_generated_files/tmr2.c: 127:     TMR2_CallBack();
 12544  105C  3190  20B2         	fcall	_TMR2_CallBack
 12545  105E  0008               	return
 12546  105F                     __end_of_TMR2_ISR:
 12547                           
 12548                           	psect	text77
 12549  10B2                     __ptext77:	
 12550 ;; *************** function _TMR2_CallBack *****************
 12551 ;; Defined at:
 12552 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 12553 ;; Parameters:    Size  Location     Type
 12554 ;;		None
 12555 ;; Auto vars:     Size  Location     Type
 12556 ;;		None
 12557 ;; Return value:  Size  Location     Type
 12558 ;;                  1    wreg      void 
 12559 ;; Registers used:
 12560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12561 ;; Tracked objects:
 12562 ;;		On entry : 1F/0
 12563 ;;		On exit  : 0/0
 12564 ;;		Unchanged: 0/0
 12565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12566 ;;      Params:         0       0       0       0       0       0       0       0
 12567 ;;      Locals:         0       0       0       0       0       0       0       0
 12568 ;;      Temps:          0       0       0       0       0       0       0       0
 12569 ;;      Totals:         0       0       0       0       0       0       0       0
 12570 ;;Total ram usage:        0 bytes
 12571 ;; Hardware stack levels used:    1
 12572 ;; Hardware stack levels required when called:    5
 12573 ;; This function calls:
 12574 ;;		Absolute function
 12575 ;;		_TMR2_DefaultInterruptHandler
 12576 ;;		_TMR2_Interrupt
 12577 ;;		_TMR2_Interrupt_SPK
 12578 ;; This function is called by:
 12579 ;;		_TMR2_ISR
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function _TMR2_CallBack
 12585  10B2                     _TMR2_CallBack:
 12586                           
 12587                           ;mcc_generated_files/tmr2.c: 134:     if(TMR2_InterruptHandler)
 12588                           
 12589                           ;incstack = 0
 12590                           ; Regs used in _TMR2_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12591  10B2  0022               	movlb	2	; select bank2
 12592  10B3  086C               	movf	_TMR2_InterruptHandler^(0+256),w
 12593  10B4  046D               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 12594  10B5  1903               	btfsc	3,2
 12595  10B6  0008               	return
 12596                           
 12597                           ;mcc_generated_files/tmr2.c: 135:     {;mcc_generated_files/tmr2.c: 136:         TMR2_In
      +                          terruptHandler();
 12598  10B7  086D               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 12599  10B8  008A               	movwf	10
 12600  10B9  086C               	movf	_TMR2_InterruptHandler^(0+256),w
 12601  10BA  000A               	callw
 12602  10BB  3190               	pagesel	$
 12603  10BC  0008               	return
 12604  10BD                     __end_of_TMR2_CallBack:
 12605                           
 12606                           	psect	text78
 12607  03FA                     __ptext78:	
 12608 ;; *************** function _TMR2_Interrupt *****************
 12609 ;; Defined at:
 12610 ;;		line 869 in file "MotorDrive.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;		None
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;		None
 12615 ;; Return value:  Size  Location     Type
 12616 ;;                  1    wreg      void 
 12617 ;; Registers used:
 12618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12619 ;; Tracked objects:
 12620 ;;		On entry : 1F/2
 12621 ;;		On exit  : 1F/0
 12622 ;;		Unchanged: 0/0
 12623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12624 ;;      Params:         0       0       0       0       0       0       0       0
 12625 ;;      Locals:         0       0       0       0       0       0       0       0
 12626 ;;      Temps:          3       0       0       0       0       0       0       0
 12627 ;;      Totals:         3       0       0       0       0       0       0       0
 12628 ;;Total ram usage:        3 bytes
 12629 ;; Hardware stack levels used:    1
 12630 ;; Hardware stack levels required when called:    1
 12631 ;; This function calls:
 12632 ;;		Absolute function
 12633 ;;		_ComparatorOff
 12634 ;;		_ComparatorOn
 12635 ;;		_SetDataTRISxWork_M0_SPK_POL0_OPEN
 12636 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 12637 ;;		_SetDataTRISxWork_M0_SPK_POL1_OPEN
 12638 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 12639 ;;		_SetDataTRISxWork_M1_SPK_POL0_OPEN
 12640 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 12641 ;;		_SetDataTRISxWork_M1_SPK_POL1_OPEN
 12642 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 12643 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 12644 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P1
 12645 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P2
 12646 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 12647 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P1
 12648 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P2
 12649 ;;		_SetPulseOutLATxWork_M0_REV_POL0_OFF
 12650 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P1
 12651 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P2
 12652 ;;		_SetPulseOutLATxWork_M0_REV_POL1_OFF
 12653 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P1
 12654 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P2
 12655 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 12656 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 12657 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 12658 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 12659 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 12660 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P1
 12661 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P2
 12662 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 12663 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P1
 12664 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P2
 12665 ;;		_SetPulseOutLATxWork_M1_REV_POL0_OFF
 12666 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P1
 12667 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P2
 12668 ;;		_SetPulseOutLATxWork_M1_REV_POL1_OFF
 12669 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P1
 12670 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P2
 12671 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 12672 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 12673 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 12674 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 12675 ;;		_VrsCheck
 12676 ;;		i1_TMR2_StopTimer
 12677 ;; This function is called by:
 12678 ;;		_main
 12679 ;;		_SetMotorStopSPK
 12680 ;;		_TMR2_CallBack
 12681 ;; This function uses a non-reentrant model
 12682 ;;
 12683                           
 12684                           
 12685                           ;psect for function _TMR2_Interrupt
 12686  03FA                     _TMR2_Interrupt:
 12687                           
 12688                           ;MotorDrive.c: 875:     if (OutTrisRequestFlug == 1) {
 12689                           
 12690                           ;incstack = 0
 12691                           ; Regs used in _TMR2_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12692  03FA  0021               	movlb	1	; select bank1
 12693  03FB  0355               	decf	_OutTrisRequestFlug^(0+128),w
 12694  03FC  1D03               	btfss	3,2
 12695  03FD  2C32               	goto	i1l5016
 12696                           
 12697                           ;MotorDrive.c: 876:         OutTrisRequestFlug = 0;
 12698  03FE  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 12699                           
 12700                           ;MotorDrive.c: 880:         dataTRISA = TRISA;
 12701  03FF  080C               	movf	12,w	;volatile
 12702  0400  00F7               	movwf	??_TMR2_Interrupt
 12703  0401  0877               	movf	??_TMR2_Interrupt,w
 12704  0402  0020               	movlb	0	; select bank0
 12705  0403  00E1               	movwf	_dataTRISA
 12706                           
 12707                           ;MotorDrive.c: 881:         dataTRISB = TRISB;
 12708  0404  0021               	movlb	1	; select bank1
 12709  0405  080D               	movf	13,w	;volatile
 12710  0406  00F7               	movwf	??_TMR2_Interrupt
 12711  0407  0877               	movf	??_TMR2_Interrupt,w
 12712  0408  0020               	movlb	0	; select bank0
 12713  0409  00E0               	movwf	_dataTRISB
 12714                           
 12715                           ;MotorDrive.c: 882:         dataTRISC = TRISC;
 12716  040A  0021               	movlb	1	; select bank1
 12717  040B  080E               	movf	14,w	;volatile
 12718  040C  00F7               	movwf	??_TMR2_Interrupt
 12719  040D  0877               	movf	??_TMR2_Interrupt,w
 12720  040E  0020               	movlb	0	; select bank0
 12721  040F  00DF               	movwf	_dataTRISC
 12722                           
 12723                           ;MotorDrive.c: 886:         dataTRISB &= (UB) (~(0x00 | 0x00));
 12724  0410  30FD               	movlw	253
 12725  0411  00F7               	movwf	??_TMR2_Interrupt
 12726  0412  0877               	movf	??_TMR2_Interrupt,w
 12727  0413  05E1               	andwf	_dataTRISA,f
 12728                           
 12729                           ;MotorDrive.c: 887:         dataTRISC &= (UB) (~(0x22 | 0x1C));
 12730  0414  30C1               	movlw	193
 12731  0415  00F7               	movwf	??_TMR2_Interrupt
 12732  0416  0877               	movf	??_TMR2_Interrupt,w
 12733  0417  05DF               	andwf	_dataTRISC,f
 12734                           
 12735                           ;MotorDrive.c: 890:         dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 12736  0418  085E               	movf	_dataTRISAWork_M0,w
 12737  0419  045B               	iorwf	_dataTRISAWork_M1,w
 12738  041A  00F7               	movwf	??_TMR2_Interrupt
 12739  041B  0877               	movf	??_TMR2_Interrupt,w
 12740  041C  04E1               	iorwf	_dataTRISA,f
 12741                           
 12742                           ;MotorDrive.c: 891:         dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 12743  041D  085D               	movf	_dataTRISBWork_M0,w
 12744  041E  045A               	iorwf	_dataTRISBWork_M1,w
 12745  041F  00F7               	movwf	??_TMR2_Interrupt
 12746  0420  0877               	movf	??_TMR2_Interrupt,w
 12747  0421  04E0               	iorwf	_dataTRISB,f
 12748                           
 12749                           ;MotorDrive.c: 892:         dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 12750  0422  085C               	movf	_dataTRISCWork_M0,w
 12751  0423  0459               	iorwf	_dataTRISCWork_M1,w
 12752  0424  00F7               	movwf	??_TMR2_Interrupt
 12753  0425  0877               	movf	??_TMR2_Interrupt,w
 12754  0426  04DF               	iorwf	_dataTRISC,f
 12755                           
 12756                           ;MotorDrive.c: 895:         TRISA = dataTRISA;
 12757  0427  0861               	movf	_dataTRISA,w
 12758  0428  0021               	movlb	1	; select bank1
 12759  0429  008C               	movwf	12	;volatile
 12760                           
 12761                           ;MotorDrive.c: 896:         TRISB = dataTRISB;
 12762  042A  0020               	movlb	0	; select bank0
 12763  042B  0860               	movf	_dataTRISB,w
 12764  042C  0021               	movlb	1	; select bank1
 12765  042D  008D               	movwf	13	;volatile
 12766                           
 12767                           ;MotorDrive.c: 897:         TRISC = dataTRISC;
 12768  042E  0020               	movlb	0	; select bank0
 12769  042F  085F               	movf	_dataTRISC,w
 12770  0430  0021               	movlb	1	; select bank1
 12771  0431  008E               	movwf	14	;volatile
 12772  0432                     i1l5016:
 12773                           
 12774                           ;MotorDrive.c: 900:     if (OutRequestFlug == 1) {
 12775  0432  0356               	decf	_OutRequestFlug^(0+128),w
 12776  0433  1D03               	btfss	3,2
 12777  0434  2C6E               	goto	i1l5044
 12778                           
 12779                           ;MotorDrive.c: 901:         OutRequestFlug = 0;
 12780  0435  01D6               	clrf	_OutRequestFlug^(0+128)
 12781                           
 12782                           ;MotorDrive.c: 905:         pulseOutLATA = LATA;
 12783  0436  0022               	movlb	2	; select bank2
 12784  0437  080C               	movf	12,w	;volatile
 12785  0438  00F7               	movwf	??_TMR2_Interrupt
 12786  0439  0877               	movf	??_TMR2_Interrupt,w
 12787  043A  0020               	movlb	0	; select bank0
 12788  043B  00EA               	movwf	_pulseOutLATA
 12789                           
 12790                           ;MotorDrive.c: 906:         pulseOutLATB = LATB;
 12791  043C  0022               	movlb	2	; select bank2
 12792  043D  080D               	movf	13,w	;volatile
 12793  043E  00F7               	movwf	??_TMR2_Interrupt
 12794  043F  0877               	movf	??_TMR2_Interrupt,w
 12795  0440  0020               	movlb	0	; select bank0
 12796  0441  00E9               	movwf	_pulseOutLATB
 12797                           
 12798                           ;MotorDrive.c: 907:         pulseOutLATC = LATC;
 12799  0442  0022               	movlb	2	; select bank2
 12800  0443  080E               	movf	14,w	;volatile
 12801  0444  00F7               	movwf	??_TMR2_Interrupt
 12802  0445  0877               	movf	??_TMR2_Interrupt,w
 12803  0446  0020               	movlb	0	; select bank0
 12804  0447  00E8               	movwf	_pulseOutLATC
 12805                           
 12806                           ;MotorDrive.c: 910:         pulseOutLATA &= (UB) (~(0x32 | 0x00));
 12807  0448  30CD               	movlw	205
 12808  0449  00F7               	movwf	??_TMR2_Interrupt
 12809  044A  0877               	movf	??_TMR2_Interrupt,w
 12810  044B  05EA               	andwf	_pulseOutLATA,f
 12811                           
 12812                           ;MotorDrive.c: 911:         pulseOutLATB &= (UB) (~(0x00 | 0xA0));
 12813  044C  305F               	movlw	95
 12814  044D  00F7               	movwf	??_TMR2_Interrupt
 12815  044E  0877               	movf	??_TMR2_Interrupt,w
 12816  044F  05E9               	andwf	_pulseOutLATB,f
 12817                           
 12818                           ;MotorDrive.c: 912:         pulseOutLATC &= (UB) (~(0x02 | 0x0C));
 12819  0450  30F1               	movlw	241
 12820  0451  00F7               	movwf	??_TMR2_Interrupt
 12821  0452  0877               	movf	??_TMR2_Interrupt,w
 12822  0453  05E8               	andwf	_pulseOutLATC,f
 12823                           
 12824                           ;MotorDrive.c: 915:         pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork
      +                          _M1);
 12825  0454  0867               	movf	_pulseOutLATAWork_M0,w
 12826  0455  0464               	iorwf	_pulseOutLATAWork_M1,w
 12827  0456  00F7               	movwf	??_TMR2_Interrupt
 12828  0457  0877               	movf	??_TMR2_Interrupt,w
 12829  0458  04EA               	iorwf	_pulseOutLATA,f
 12830                           
 12831                           ;MotorDrive.c: 916:         pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork
      +                          _M1);
 12832  0459  0866               	movf	_pulseOutLATBWork_M0,w
 12833  045A  0463               	iorwf	_pulseOutLATBWork_M1,w
 12834  045B  00F7               	movwf	??_TMR2_Interrupt
 12835  045C  0877               	movf	??_TMR2_Interrupt,w
 12836  045D  04E9               	iorwf	_pulseOutLATB,f
 12837                           
 12838                           ;MotorDrive.c: 917:         pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork
      +                          _M1);
 12839  045E  0865               	movf	_pulseOutLATCWork_M0,w
 12840  045F  0462               	iorwf	_pulseOutLATCWork_M1,w
 12841  0460  00F7               	movwf	??_TMR2_Interrupt
 12842  0461  0877               	movf	??_TMR2_Interrupt,w
 12843  0462  04E8               	iorwf	_pulseOutLATC,f
 12844                           
 12845                           ;MotorDrive.c: 920:         LATA = pulseOutLATA;
 12846  0463  086A               	movf	_pulseOutLATA,w
 12847  0464  0022               	movlb	2	; select bank2
 12848  0465  008C               	movwf	12	;volatile
 12849                           
 12850                           ;MotorDrive.c: 921:         LATB = pulseOutLATB;
 12851  0466  0020               	movlb	0	; select bank0
 12852  0467  0869               	movf	_pulseOutLATB,w
 12853  0468  0022               	movlb	2	; select bank2
 12854  0469  008D               	movwf	13	;volatile
 12855                           
 12856                           ;MotorDrive.c: 922:         LATC = pulseOutLATC;
 12857  046A  0020               	movlb	0	; select bank0
 12858  046B  0868               	movf	_pulseOutLATC,w
 12859  046C  0022               	movlb	2	; select bank2
 12860  046D  008E               	movwf	14	;volatile
 12861  046E                     i1l5044:
 12862                           
 12863                           ;MotorDrive.c: 930:     if (reqVrsCheckBit & 0x01) {
 12864  046E  0021               	movlb	1	; select bank1
 12865  046F  1C52               	btfss	_reqVrsCheckBit^(0+128),0
 12866  0470  2C79               	goto	i1l5050
 12867                           
 12868                           ;MotorDrive.c: 931:         reqVrsCheckBit &= ~0x01;
 12869  0471  30FE               	movlw	254
 12870  0472  00F7               	movwf	??_TMR2_Interrupt
 12871  0473  0877               	movf	??_TMR2_Interrupt,w
 12872  0474  05D2               	andwf	_reqVrsCheckBit^(0+128),f
 12873                           
 12874                           ;MotorDrive.c: 932:         VrsCheck(0);
 12875  0475  3000               	movlw	0
 12876  0476  3195  2534  3183   	fcall	_VrsCheck
 12877  0479                     i1l5050:
 12878                           
 12879                           ;MotorDrive.c: 934:     if (reqVrsCheckBit & 0x02) {
 12880  0479  0021               	movlb	1	; select bank1
 12881  047A  1CD2               	btfss	_reqVrsCheckBit^(0+128),1
 12882  047B  2C84               	goto	i1l5056
 12883                           
 12884                           ;MotorDrive.c: 935:         reqVrsCheckBit &= ~0x02;
 12885  047C  30FD               	movlw	253
 12886  047D  00F7               	movwf	??_TMR2_Interrupt
 12887  047E  0877               	movf	??_TMR2_Interrupt,w
 12888  047F  05D2               	andwf	_reqVrsCheckBit^(0+128),f
 12889                           
 12890                           ;MotorDrive.c: 936:         VrsCheck(1);
 12891  0480  3001               	movlw	1
 12892  0481  3195  2534  3183   	fcall	_VrsCheck
 12893  0484                     i1l5056:
 12894                           
 12895                           ;MotorDrive.c: 939:     if (reqComparatorOnBit & 0x01) {
 12896  0484  0021               	movlb	1	; select bank1
 12897  0485  1C54               	btfss	_reqComparatorOnBit^(0+128),0
 12898  0486  2C8F               	goto	i1l5062
 12899                           
 12900                           ;MotorDrive.c: 940:         reqComparatorOnBit &= ~0x01;
 12901  0487  30FE               	movlw	254
 12902  0488  00F7               	movwf	??_TMR2_Interrupt
 12903  0489  0877               	movf	??_TMR2_Interrupt,w
 12904  048A  05D4               	andwf	_reqComparatorOnBit^(0+128),f
 12905                           
 12906                           ;MotorDrive.c: 941:         ComparatorOn(0);
 12907  048B  3000               	movlw	0
 12908  048C  3195  2583  3183   	fcall	_ComparatorOn
 12909  048F                     i1l5062:
 12910                           
 12911                           ;MotorDrive.c: 943:     if (reqComparatorOnBit & 0x02) {
 12912  048F  0021               	movlb	1	; select bank1
 12913  0490  1CD4               	btfss	_reqComparatorOnBit^(0+128),1
 12914  0491  2C9A               	goto	i1l5068
 12915                           
 12916                           ;MotorDrive.c: 944:         reqComparatorOnBit &= ~0x02;
 12917  0492  30FD               	movlw	253
 12918  0493  00F7               	movwf	??_TMR2_Interrupt
 12919  0494  0877               	movf	??_TMR2_Interrupt,w
 12920  0495  05D4               	andwf	_reqComparatorOnBit^(0+128),f
 12921                           
 12922                           ;MotorDrive.c: 945:         ComparatorOn(1);
 12923  0496  3001               	movlw	1
 12924  0497  3195  2583  3183   	fcall	_ComparatorOn
 12925  049A                     i1l5068:
 12926                           
 12927                           ;MotorDrive.c: 948:     if (reqComparatorOffBit & 0x01) {
 12928  049A  0021               	movlb	1	; select bank1
 12929  049B  1C53               	btfss	_reqComparatorOffBit^(0+128),0
 12930  049C  2CA5               	goto	i1l5074
 12931                           
 12932                           ;MotorDrive.c: 949:         reqComparatorOffBit &= ~0x01;
 12933  049D  30FE               	movlw	254
 12934  049E  00F7               	movwf	??_TMR2_Interrupt
 12935  049F  0877               	movf	??_TMR2_Interrupt,w
 12936  04A0  05D3               	andwf	_reqComparatorOffBit^(0+128),f
 12937                           
 12938                           ;MotorDrive.c: 950:         ComparatorOff(0);
 12939  04A1  3000               	movlw	0
 12940  04A2  3193  23C4  3183   	fcall	_ComparatorOff
 12941  04A5                     i1l5074:
 12942                           
 12943                           ;MotorDrive.c: 952:     if (reqComparatorOffBit & 0x02) {
 12944  04A5  0021               	movlb	1	; select bank1
 12945  04A6  1CD3               	btfss	_reqComparatorOffBit^(0+128),1
 12946  04A7  2CB0               	goto	i1l5080
 12947                           
 12948                           ;MotorDrive.c: 953:         reqComparatorOffBit &= ~0x02;
 12949  04A8  30FD               	movlw	253
 12950  04A9  00F7               	movwf	??_TMR2_Interrupt
 12951  04AA  0877               	movf	??_TMR2_Interrupt,w
 12952  04AB  05D3               	andwf	_reqComparatorOffBit^(0+128),f
 12953                           
 12954                           ;MotorDrive.c: 954:         ComparatorOff(1);
 12955  04AC  3001               	movlw	1
 12956  04AD  3193  23C4  3183   	fcall	_ComparatorOff
 12957  04B0                     i1l5080:
 12958                           
 12959                           ;MotorDrive.c: 957:     if (motorActiveBit & 0x01) {
 12960  04B0  0020               	movlb	0	; select bank0
 12961  04B1  1C56               	btfss	_motorActiveBit,0
 12962  04B2  2D4B               	goto	i1l5134
 12963                           
 12964                           ;MotorDrive.c: 963:         m0PulsePositionCt++;
 12965  04B3  3001               	movlw	1
 12966  04B4  00F7               	movwf	??_TMR2_Interrupt
 12967  04B5  0877               	movf	??_TMR2_Interrupt,w
 12968  04B6  0021               	movlb	1	; select bank1
 12969  04B7  07EA               	addwf	_m0PulsePositionCt^(0+128),f
 12970                           
 12971                           ;MotorDrive.c: 964:         if (m0PulsePositionCt == m0PulseChangePosition) {
 12972  04B8  086A               	movf	_m0PulsePositionCt^(0+128),w
 12973  04B9  0667               	xorwf	_m0PulseChangePosition^(0+128),w
 12974  04BA  1D03               	skipz
 12975  04BB  2D4B               	goto	i1l5134
 12976                           
 12977                           ;MotorDrive.c: 967:             m0PulseOutStep++;
 12978  04BC  3001               	movlw	1
 12979  04BD  00F7               	movwf	??_TMR2_Interrupt
 12980  04BE  0877               	movf	??_TMR2_Interrupt,w
 12981  04BF  07F3               	addwf	_m0PulseOutStep,f
 12982                           
 12983                           ;MotorDrive.c: 969:             if (m0PulseOutStep >= ID_PULSE_OUT_STEP_MAX) {
 12984  04C0  301A               	movlw	26
 12985  04C1  0273               	subwf	_m0PulseOutStep,w
 12986  04C2  1C03               	skipc
 12987  04C3  2D2D               	goto	i1l5124
 12988                           
 12989                           ;MotorDrive.c: 971:                 if (0 == (actCorrectDriveBit & 0x01)) {
 12990  04C4  0020               	movlb	0	; select bank0
 12991  04C5  1853               	btfsc	_actCorrectDriveBit,0
 12992  04C6  2CF2               	goto	i1l687
 12993                           
 12994                           ;MotorDrive.c: 972:                     if ((reqSearchBasePosBit | reqCorrectBasePosBit 
      +                          | reqCheckLoadPosBit) & 0x01) {
 12995  04C7  0854               	movf	_reqCorrectBasePosBit,w
 12996  04C8  0455               	iorwf	_reqSearchBasePosBit,w
 12997  04C9  00F7               	movwf	??_TMR2_Interrupt
 12998  04CA  0021               	movlb	1	; select bank1
 12999  04CB  084E               	movf	_reqCheckLoadPosBit^(0+128),w
 13000  04CC  0477               	iorwf	??_TMR2_Interrupt,w
 13001  04CD  00F8               	movwf	??_TMR2_Interrupt+1
 13002  04CE  1C78               	btfss	??_TMR2_Interrupt+1,0
 13003  04CF  2CF2               	goto	i1l687
 13004                           
 13005                           ;MotorDrive.c: 974:                         positionSearchCt[ 0 ]++;
 13006  04D0  3001               	movlw	1
 13007  04D1  07A4               	addwf	_positionSearchCt^(0+128),f
 13008  04D2  3000               	movlw	0
 13009  04D3  3DA5               	addwfc	(_positionSearchCt+1)^(0+128),f
 13010                           
 13011                           ;MotorDrive.c: 976:                         if ((0 == vrsCountValue[ 0 ])
 13012  04D4  083C               	movf	_vrsCountValue^(0+128),w
 13013  04D5  1903               	btfsc	3,2
 13014  04D6  2CEB               	goto	i1l5100
 13015  04D7  3056               	movlw	low (_TblMaxSteps| (0+32768))
 13016  04D8  0084               	movwf	4
 13017  04D9  3098               	movlw	high (_TblMaxSteps| (0+32768))
 13018  04DA  0085               	movwf	5
 13019  04DB  3F00               	moviw [0]fsr0
 13020  04DC  00F7               	movwf	??_TMR2_Interrupt
 13021  04DD  3F01               	moviw [1]fsr0
 13022  04DE  00F8               	movwf	??_TMR2_Interrupt+1
 13023  04DF  0825               	movf	(_positionSearchCt+1)^(0+128),w
 13024  04E0  3A80               	xorlw	128
 13025  04E1  00F9               	movwf	??_TMR2_Interrupt+2
 13026  04E2  0878               	movf	??_TMR2_Interrupt+1,w
 13027  04E3  3A80               	xorlw	128
 13028  04E4  0279               	subwf	??_TMR2_Interrupt+2,w
 13029  04E5  1D03               	skipz
 13030  04E6  2CE9               	goto	u313_25
 13031  04E7  0877               	movf	??_TMR2_Interrupt,w
 13032  04E8  0224               	subwf	_positionSearchCt^(0+128),w
 13033  04E9                     u313_25:
 13034  04E9  1C03               	skipc
 13035  04EA  2CF2               	goto	i1l687
 13036  04EB                     i1l5100:
 13037                           
 13038                           ;MotorDrive.c: 977:                                 || (positionSearchCt[ 0 ] >= TblMaxS
      +                          teps[ 0 ])) {;MotorDrive.c: 978:                             motorActiveBit &= (UB) (~0x
      +                          01);
 13039  04EB  30FE               	movlw	254
 13040  04EC  00F7               	movwf	??_TMR2_Interrupt
 13041  04ED  0877               	movf	??_TMR2_Interrupt,w
 13042  04EE  0020               	movlb	0	; select bank0
 13043  04EF  05D6               	andwf	_motorActiveBit,f
 13044                           
 13045                           ;MotorDrive.c: 979:                             reqAfterDetectLoadFuncBit |= 0x01;
 13046  04F0  0021               	movlb	1	; select bank1
 13047  04F1  1450               	bsf	_reqAfterDetectLoadFuncBit^(0+128),0
 13048  04F2                     i1l687:	
 13049                           ;MotorDrive.c: 985:                 }
 13050                           
 13051                           
 13052                           ;MotorDrive.c: 987:                 if (motorM0StepCounter) {
 13053  04F2  0021               	movlb	1	; select bank1
 13054  04F3  0840               	movf	_motorM0StepCounter^(0+128),w
 13055  04F4  0441               	iorwf	(_motorM0StepCounter+1)^(0+128),w
 13056  04F5  1903               	btfsc	3,2
 13057  04F6  2D13               	goto	i1l5112
 13058                           
 13059                           ;MotorDrive.c: 989:                     motorM0StepCounter--;
 13060  04F7  30FF               	movlw	255
 13061  04F8  07C0               	addwf	_motorM0StepCounter^(0+128),f
 13062  04F9  30FF               	movlw	255
 13063  04FA  3DC1               	addwfc	(_motorM0StepCounter+1)^(0+128),f
 13064                           
 13065                           ;MotorDrive.c: 990:                     if (0 >= motorM0StepCounter) {
 13066  04FB  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
 13067  04FC  3A80               	xorlw	128
 13068  04FD  00F7               	movwf	??_TMR2_Interrupt
 13069  04FE  3080               	movlw	128
 13070  04FF  0277               	subwf	??_TMR2_Interrupt,w
 13071  0500  1D03               	skipz
 13072  0501  2D04               	goto	u315_25
 13073  0502  3001               	movlw	1
 13074  0503  0240               	subwf	_motorM0StepCounter^(0+128),w
 13075  0504                     u315_25:
 13076  0504  1803               	skipnc
 13077  0505  2D13               	goto	i1l5112
 13078                           
 13079                           ;MotorDrive.c: 991:                         actCorrectDriveBit &= (UB) (~0x01);
 13080  0506  30FE               	movlw	254
 13081  0507  00F7               	movwf	??_TMR2_Interrupt
 13082  0508  0877               	movf	??_TMR2_Interrupt,w
 13083  0509  0020               	movlb	0	; select bank0
 13084  050A  05D3               	andwf	_actCorrectDriveBit,f
 13085                           
 13086                           ;MotorDrive.c: 992:                         motorActiveBit &= (UB) (~0x01);
 13087  050B  30FE               	movlw	254
 13088  050C  00F7               	movwf	??_TMR2_Interrupt
 13089  050D  0877               	movf	??_TMR2_Interrupt,w
 13090  050E  05D6               	andwf	_motorActiveBit,f
 13091                           
 13092                           ;MotorDrive.c: 993:                         reqAfterMotorStopFuncBit |= 0x01;
 13093  050F  0021               	movlb	1	; select bank1
 13094  0510  1459               	bsf	_reqAfterMotorStopFuncBit^(0+128),0
 13095                           
 13096                           ;MotorDrive.c: 994:                         motorM0StepCounter = 0;
 13097  0511  01C0               	clrf	_motorM0StepCounter^(0+128)
 13098  0512  01C1               	clrf	(_motorM0StepCounter+1)^(0+128)
 13099  0513                     i1l5112:
 13100                           
 13101                           ;MotorDrive.c: 998:                 if (reqStopMotorBit & 0x01) {
 13102  0513  0021               	movlb	1	; select bank1
 13103  0514  1C58               	btfss	_reqStopMotorBit^(0+128),0
 13104  0515  2D21               	goto	i1l5118
 13105                           
 13106                           ;MotorDrive.c: 999:                     reqStopMotorBit &= (UB) (~0x01);
 13107  0516  30FE               	movlw	254
 13108  0517  00F7               	movwf	??_TMR2_Interrupt
 13109  0518  0877               	movf	??_TMR2_Interrupt,w
 13110  0519  05D8               	andwf	_reqStopMotorBit^(0+128),f
 13111                           
 13112                           ;MotorDrive.c: 1000:                     motorActiveBit &= (UB) (~0x01);
 13113  051A  30FE               	movlw	254
 13114  051B  00F7               	movwf	??_TMR2_Interrupt
 13115  051C  0877               	movf	??_TMR2_Interrupt,w
 13116  051D  0020               	movlb	0	; select bank0
 13117  051E  05D6               	andwf	_motorActiveBit,f
 13118                           
 13119                           ;MotorDrive.c: 1001:                     reqAfterMotorStopFuncBit |= 0x01;
 13120  051F  0021               	movlb	1	; select bank1
 13121  0520  1459               	bsf	_reqAfterMotorStopFuncBit^(0+128),0
 13122  0521                     i1l5118:
 13123                           
 13124                           ;MotorDrive.c: 1004:                 m0PulsePositionCt = m0PulsePositionCtWork;
 13125  0521  0020               	movlb	0	; select bank0
 13126  0522  0858               	movf	_m0PulsePositionCtWork,w
 13127  0523  00F7               	movwf	??_TMR2_Interrupt
 13128  0524  0877               	movf	??_TMR2_Interrupt,w
 13129  0525  0021               	movlb	1	; select bank1
 13130  0526  00EA               	movwf	_m0PulsePositionCt^(0+128)
 13131                           
 13132                           ;MotorDrive.c: 1005:                 m0PulseOutStep = m0PulseOutStepWork;
 13133  0527  0865               	movf	_m0PulseOutStepWork^(0+128),w
 13134  0528  00F7               	movwf	??_TMR2_Interrupt
 13135  0529  0877               	movf	??_TMR2_Interrupt,w
 13136  052A  00F3               	movwf	_m0PulseOutStep
 13137                           
 13138                           ;MotorDrive.c: 1006:                 vrsCountValue[ 0 ] = 0;
 13139  052B  01BC               	clrf	_vrsCountValue^(0+128)
 13140                           
 13141                           ;MotorDrive.c: 1008:             } else {
 13142  052C  2D36               	goto	i1l5128
 13143  052D                     i1l5124:
 13144                           
 13145                           ;MotorDrive.c: 1010:                 if (m0PulseOutChangeFunc) {
 13146  052D  084A               	movf	_m0PulseOutChangeFunc^(0+128),w
 13147  052E  044B               	iorwf	(_m0PulseOutChangeFunc+1)^(0+128),w
 13148  052F  1903               	btfsc	3,2
 13149  0530  2D36               	goto	i1l5128
 13150                           
 13151                           ;MotorDrive.c: 1011:                     m0PulseOutChangeFunc();
 13152  0531  084B               	movf	(_m0PulseOutChangeFunc+1)^(0+128),w
 13153  0532  008A               	movwf	10
 13154  0533  084A               	movf	_m0PulseOutChangeFunc^(0+128),w
 13155  0534  000A               	callw
 13156  0535  3183               	pagesel	$
 13157  0536                     i1l5128:
 13158                           
 13159                           ;MotorDrive.c: 1015:             if (m0PulseOutStep < (ID_PULSE_OUT_STEP_MAX - 1)) {
 13160  0536  3019               	movlw	25
 13161  0537  0273               	subwf	_m0PulseOutStep,w
 13162  0538  1803               	skipnc
 13163  0539  2D46               	goto	i1l5132
 13164                           
 13165                           ;MotorDrive.c: 1016:                 m0PulseChangePosition = TblM0PulseChangePosition[ m
      +                          0PulseOutStep ];
 13166  053A  0873               	movf	_m0PulseOutStep,w
 13167  053B  3E35               	addlw	low (_TblM0PulseChangePosition| (0+32768))
 13168  053C  0084               	movwf	4
 13169  053D  3098               	movlw	high (_TblM0PulseChangePosition| (0+32768))
 13170  053E  1803               	skipnc
 13171  053F  3E01               	addlw	1
 13172  0540  0085               	movwf	5
 13173  0541  0800               	movf	0,w	;code access
 13174  0542  00F7               	movwf	??_TMR2_Interrupt
 13175  0543  0877               	movf	??_TMR2_Interrupt,w
 13176  0544  0021               	movlb	1	; select bank1
 13177  0545  2D4A               	goto	L18
 13178  0546                     i1l5132:	
 13179                           ;MotorDrive.c: 1017:             } else {
 13180                           
 13181                           
 13182                           ;MotorDrive.c: 1018:                 m0PulseChangePosition = TblM0PulseChangePositionLas
      +                          t;
 13183  0546  0021               	movlb	1	; select bank1
 13184  0547  086C               	movf	_TblM0PulseChangePositionLast^(0+128),w
 13185  0548  00F7               	movwf	??_TMR2_Interrupt
 13186  0549  0877               	movf	??_TMR2_Interrupt,w
 13187  054A                     L18:
 13188  054A  00E7               	movwf	_m0PulseChangePosition^(0+128)
 13189  054B                     i1l5134:
 13190                           
 13191                           ;MotorDrive.c: 1027:     if (motorActiveBit & 0x02) {
 13192  054B  0020               	movlb	0	; select bank0
 13193  054C  1CD6               	btfss	_motorActiveBit,1
 13194  054D  2DE4               	goto	i1l5188
 13195                           
 13196                           ;MotorDrive.c: 1033:         m1PulsePositionCt++;
 13197  054E  3001               	movlw	1
 13198  054F  00F7               	movwf	??_TMR2_Interrupt
 13199  0550  0877               	movf	??_TMR2_Interrupt,w
 13200  0551  0021               	movlb	1	; select bank1
 13201  0552  07E9               	addwf	_m1PulsePositionCt^(0+128),f
 13202                           
 13203                           ;MotorDrive.c: 1034:         if (m1PulsePositionCt == m1PulseChangePosition) {
 13204  0553  0869               	movf	_m1PulsePositionCt^(0+128),w
 13205  0554  0666               	xorwf	_m1PulseChangePosition^(0+128),w
 13206  0555  1D03               	skipz
 13207  0556  2DE4               	goto	i1l5188
 13208                           
 13209                           ;MotorDrive.c: 1037:             m1PulseOutStep++;
 13210  0557  3001               	movlw	1
 13211  0558  00F7               	movwf	??_TMR2_Interrupt
 13212  0559  0877               	movf	??_TMR2_Interrupt,w
 13213  055A  07F2               	addwf	_m1PulseOutStep,f
 13214                           
 13215                           ;MotorDrive.c: 1039:             if (m1PulseOutStep >= ID_PULSE_OUT_STEP_MAX) {
 13216  055B  301A               	movlw	26
 13217  055C  0272               	subwf	_m1PulseOutStep,w
 13218  055D  1C03               	skipc
 13219  055E  2DC6               	goto	i1l5178
 13220                           
 13221                           ;MotorDrive.c: 1041:                 if (0 == (actCorrectDriveBit & 0x02)) {
 13222  055F  0020               	movlb	0	; select bank0
 13223  0560  18D3               	btfsc	_actCorrectDriveBit,1
 13224  0561  2D8D               	goto	i1l702
 13225                           
 13226                           ;MotorDrive.c: 1042:                     if ((reqSearchBasePosBit | reqCorrectBasePosBit
      +                           | reqCheckLoadPosBit) & 0x02) {
 13227  0562  0854               	movf	_reqCorrectBasePosBit,w
 13228  0563  0455               	iorwf	_reqSearchBasePosBit,w
 13229  0564  00F7               	movwf	??_TMR2_Interrupt
 13230  0565  0021               	movlb	1	; select bank1
 13231  0566  084E               	movf	_reqCheckLoadPosBit^(0+128),w
 13232  0567  0477               	iorwf	??_TMR2_Interrupt,w
 13233  0568  00F8               	movwf	??_TMR2_Interrupt+1
 13234  0569  1CF8               	btfss	??_TMR2_Interrupt+1,1
 13235  056A  2D8D               	goto	i1l702
 13236                           
 13237                           ;MotorDrive.c: 1044:                         positionSearchCt[ 1 ]++;
 13238  056B  3001               	movlw	1
 13239  056C  07A6               	addwf	(_positionSearchCt^(0+128)+2),f
 13240  056D  3000               	movlw	0
 13241  056E  3DA7               	addwfc	((_positionSearchCt+1)^(0+128)+2),f
 13242                           
 13243                           ;MotorDrive.c: 1046:                         if ((0 == vrsCountValue[ 1 ])
 13244  056F  083D               	movf	(_vrsCountValue^(0+128)+1),w
 13245  0570  1903               	btfsc	3,2
 13246  0571  2D86               	goto	i1l5154
 13247  0572  3058               	movlw	low ((_TblMaxSteps+2)| (0+32768))
 13248  0573  0084               	movwf	4
 13249  0574  3098               	movlw	high ((_TblMaxSteps+2)| (0+32768))
 13250  0575  0085               	movwf	5
 13251  0576  3F00               	moviw [0]fsr0
 13252  0577  00F7               	movwf	??_TMR2_Interrupt
 13253  0578  3F01               	moviw [1]fsr0
 13254  0579  00F8               	movwf	??_TMR2_Interrupt+1
 13255  057A  0827               	movf	((_positionSearchCt+1)^(0+128)+2),w
 13256  057B  3A80               	xorlw	128
 13257  057C  00F9               	movwf	??_TMR2_Interrupt+2
 13258  057D  0878               	movf	??_TMR2_Interrupt+1,w
 13259  057E  3A80               	xorlw	128
 13260  057F  0279               	subwf	??_TMR2_Interrupt+2,w
 13261  0580  1D03               	skipz
 13262  0581  2D84               	goto	u325_25
 13263  0582  0877               	movf	??_TMR2_Interrupt,w
 13264  0583  0226               	subwf	(_positionSearchCt^(0+128)+2),w
 13265  0584                     u325_25:
 13266  0584  1C03               	skipc
 13267  0585  2D8D               	goto	i1l702
 13268  0586                     i1l5154:
 13269                           
 13270                           ;MotorDrive.c: 1047:                                 || (positionSearchCt[ 1 ] >= TblMax
      +                          Steps[ 1 ])) {;MotorDrive.c: 1048:                             motorActiveBit &= (UB) (~
      +                          0x02);
 13271  0586  30FD               	movlw	253
 13272  0587  00F7               	movwf	??_TMR2_Interrupt
 13273  0588  0877               	movf	??_TMR2_Interrupt,w
 13274  0589  0020               	movlb	0	; select bank0
 13275  058A  05D6               	andwf	_motorActiveBit,f
 13276                           
 13277                           ;MotorDrive.c: 1049:                             reqAfterDetectLoadFuncBit |= 0x02;
 13278  058B  0021               	movlb	1	; select bank1
 13279  058C  14D0               	bsf	_reqAfterDetectLoadFuncBit^(0+128),1
 13280  058D                     i1l702:	
 13281                           ;MotorDrive.c: 1055:                 }
 13282                           
 13283                           
 13284                           ;MotorDrive.c: 1057:                 if (motorM1StepCounter) {
 13285  058D  0021               	movlb	1	; select bank1
 13286  058E  083E               	movf	_motorM1StepCounter^(0+128),w
 13287  058F  043F               	iorwf	(_motorM1StepCounter+1)^(0+128),w
 13288  0590  1903               	btfsc	3,2
 13289  0591  2DAE               	goto	i1l5166
 13290                           
 13291                           ;MotorDrive.c: 1059:                     motorM1StepCounter--;
 13292  0592  30FF               	movlw	255
 13293  0593  07BE               	addwf	_motorM1StepCounter^(0+128),f
 13294  0594  30FF               	movlw	255
 13295  0595  3DBF               	addwfc	(_motorM1StepCounter+1)^(0+128),f
 13296                           
 13297                           ;MotorDrive.c: 1060:                     if (0 >= motorM1StepCounter) {
 13298  0596  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
 13299  0597  3A80               	xorlw	128
 13300  0598  00F7               	movwf	??_TMR2_Interrupt
 13301  0599  3080               	movlw	128
 13302  059A  0277               	subwf	??_TMR2_Interrupt,w
 13303  059B  1D03               	skipz
 13304  059C  2D9F               	goto	u327_25
 13305  059D  3001               	movlw	1
 13306  059E  023E               	subwf	_motorM1StepCounter^(0+128),w
 13307  059F                     u327_25:
 13308  059F  1803               	skipnc
 13309  05A0  2DAE               	goto	i1l5166
 13310                           
 13311                           ;MotorDrive.c: 1061:                         actCorrectDriveBit &= (UB) (~0x02);
 13312  05A1  30FD               	movlw	253
 13313  05A2  00F7               	movwf	??_TMR2_Interrupt
 13314  05A3  0877               	movf	??_TMR2_Interrupt,w
 13315  05A4  0020               	movlb	0	; select bank0
 13316  05A5  05D3               	andwf	_actCorrectDriveBit,f
 13317                           
 13318                           ;MotorDrive.c: 1062:                         motorActiveBit &= (UB) (~0x02);
 13319  05A6  30FD               	movlw	253
 13320  05A7  00F7               	movwf	??_TMR2_Interrupt
 13321  05A8  0877               	movf	??_TMR2_Interrupt,w
 13322  05A9  05D6               	andwf	_motorActiveBit,f
 13323                           
 13324                           ;MotorDrive.c: 1063:                         reqAfterMotorStopFuncBit |= 0x02;
 13325  05AA  0021               	movlb	1	; select bank1
 13326  05AB  14D9               	bsf	_reqAfterMotorStopFuncBit^(0+128),1
 13327                           
 13328                           ;MotorDrive.c: 1064:                         motorM1StepCounter = 0;
 13329  05AC  01BE               	clrf	_motorM1StepCounter^(0+128)
 13330  05AD  01BF               	clrf	(_motorM1StepCounter+1)^(0+128)
 13331  05AE                     i1l5166:
 13332                           
 13333                           ;MotorDrive.c: 1068:                 if (reqStopMotorBit & 0x02) {
 13334  05AE  0021               	movlb	1	; select bank1
 13335  05AF  1CD8               	btfss	_reqStopMotorBit^(0+128),1
 13336  05B0  2DBC               	goto	i1l5172
 13337                           
 13338                           ;MotorDrive.c: 1069:                     reqStopMotorBit &= (UB) (~0x02);
 13339  05B1  30FD               	movlw	253
 13340  05B2  00F7               	movwf	??_TMR2_Interrupt
 13341  05B3  0877               	movf	??_TMR2_Interrupt,w
 13342  05B4  05D8               	andwf	_reqStopMotorBit^(0+128),f
 13343                           
 13344                           ;MotorDrive.c: 1070:                     motorActiveBit &= (UB) (~0x02);
 13345  05B5  30FD               	movlw	253
 13346  05B6  00F7               	movwf	??_TMR2_Interrupt
 13347  05B7  0877               	movf	??_TMR2_Interrupt,w
 13348  05B8  0020               	movlb	0	; select bank0
 13349  05B9  05D6               	andwf	_motorActiveBit,f
 13350                           
 13351                           ;MotorDrive.c: 1071:                     reqAfterMotorStopFuncBit |= 0x02;
 13352  05BA  0021               	movlb	1	; select bank1
 13353  05BB  14D9               	bsf	_reqAfterMotorStopFuncBit^(0+128),1
 13354  05BC                     i1l5172:
 13355                           
 13356                           ;MotorDrive.c: 1074:                 m1PulsePositionCt = m1PulsePositionCtWork;
 13357  05BC  0868               	movf	_m1PulsePositionCtWork^(0+128),w
 13358  05BD  00F7               	movwf	??_TMR2_Interrupt
 13359  05BE  0877               	movf	??_TMR2_Interrupt,w
 13360  05BF  00E9               	movwf	_m1PulsePositionCt^(0+128)
 13361                           
 13362                           ;MotorDrive.c: 1075:                 m1PulseOutStep = m1PulseOutStepWork;
 13363  05C0  0864               	movf	_m1PulseOutStepWork^(0+128),w
 13364  05C1  00F7               	movwf	??_TMR2_Interrupt
 13365  05C2  0877               	movf	??_TMR2_Interrupt,w
 13366  05C3  00F2               	movwf	_m1PulseOutStep
 13367                           
 13368                           ;MotorDrive.c: 1076:                 vrsCountValue[ 1 ] = 0;
 13369  05C4  01BD               	clrf	(_vrsCountValue^(0+128)+1)
 13370                           
 13371                           ;MotorDrive.c: 1078:             } else {
 13372  05C5  2DCF               	goto	i1l5182
 13373  05C6                     i1l5178:
 13374                           
 13375                           ;MotorDrive.c: 1080:                 if (m1PulseOutChangeFunc) {
 13376  05C6  0848               	movf	_m1PulseOutChangeFunc^(0+128),w
 13377  05C7  0449               	iorwf	(_m1PulseOutChangeFunc+1)^(0+128),w
 13378  05C8  1903               	btfsc	3,2
 13379  05C9  2DCF               	goto	i1l5182
 13380                           
 13381                           ;MotorDrive.c: 1081:                     m1PulseOutChangeFunc();
 13382  05CA  0849               	movf	(_m1PulseOutChangeFunc+1)^(0+128),w
 13383  05CB  008A               	movwf	10
 13384  05CC  0848               	movf	_m1PulseOutChangeFunc^(0+128),w
 13385  05CD  000A               	callw
 13386  05CE  3183               	pagesel	$
 13387  05CF                     i1l5182:
 13388                           
 13389                           ;MotorDrive.c: 1085:             if (m1PulseOutStep < (ID_PULSE_OUT_STEP_MAX - 1)) {
 13390  05CF  3019               	movlw	25
 13391  05D0  0272               	subwf	_m1PulseOutStep,w
 13392  05D1  1803               	skipnc
 13393  05D2  2DDF               	goto	i1l5186
 13394                           
 13395                           ;MotorDrive.c: 1086:                 m1PulseChangePosition = TblM1PulseChangePosition[ m
      +                          1PulseOutStep ];
 13396  05D3  0872               	movf	_m1PulseOutStep,w
 13397  05D4  3E1C               	addlw	low (_TblM1PulseChangePosition| (0+32768))
 13398  05D5  0084               	movwf	4
 13399  05D6  3098               	movlw	high (_TblM1PulseChangePosition| (0+32768))
 13400  05D7  1803               	skipnc
 13401  05D8  3E01               	addlw	1
 13402  05D9  0085               	movwf	5
 13403  05DA  0800               	movf	0,w	;code access
 13404  05DB  00F7               	movwf	??_TMR2_Interrupt
 13405  05DC  0877               	movf	??_TMR2_Interrupt,w
 13406  05DD  0021               	movlb	1	; select bank1
 13407  05DE  2DE3               	goto	L19
 13408  05DF                     i1l5186:	
 13409                           ;MotorDrive.c: 1087:             } else {
 13410                           
 13411                           
 13412                           ;MotorDrive.c: 1088:                 m1PulseChangePosition = TblM1PulseChangePositionLas
      +                          t;
 13413  05DF  0021               	movlb	1	; select bank1
 13414  05E0  086B               	movf	_TblM1PulseChangePositionLast^(0+128),w
 13415  05E1  00F7               	movwf	??_TMR2_Interrupt
 13416  05E2  0877               	movf	??_TMR2_Interrupt,w
 13417  05E3                     L19:
 13418  05E3  00E6               	movwf	_m1PulseChangePosition^(0+128)
 13419  05E4                     i1l5188:
 13420                           
 13421                           ;MotorDrive.c: 1101:     if (0 == motorActiveBit) {
 13422  05E4  0020               	movlb	0	; select bank0
 13423  05E5  0856               	movf	_motorActiveBit,w
 13424  05E6  1D03               	btfss	3,2
 13425  05E7  0008               	return
 13426                           
 13427                           ;MotorDrive.c: 1102:         TMR2_StopTimer();
 13428  05E8  3180  2002         	fcall	i1_TMR2_StopTimer
 13429  05EA  0008               	return
 13430  05EB                     __end_of_TMR2_Interrupt:
 13431                           
 13432                           	psect	text79
 13433  1048                     __ptext79:	
 13434 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 13435 ;; Defined at:
 13436 ;;		line 144 in file "mcc_generated_files/tmr2.c"
 13437 ;; Parameters:    Size  Location     Type
 13438 ;;		None
 13439 ;; Auto vars:     Size  Location     Type
 13440 ;;		None
 13441 ;; Return value:  Size  Location     Type
 13442 ;;                  1    wreg      void 
 13443 ;; Registers used:
 13444 ;;		None
 13445 ;; Tracked objects:
 13446 ;;		On entry : 1F/2
 13447 ;;		On exit  : 1F/2
 13448 ;;		Unchanged: 1F/0
 13449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13450 ;;      Params:         0       0       0       0       0       0       0       0
 13451 ;;      Locals:         0       0       0       0       0       0       0       0
 13452 ;;      Temps:          0       0       0       0       0       0       0       0
 13453 ;;      Totals:         0       0       0       0       0       0       0       0
 13454 ;;Total ram usage:        0 bytes
 13455 ;; Hardware stack levels used:    1
 13456 ;; This function calls:
 13457 ;;		Nothing
 13458 ;; This function is called by:
 13459 ;;		_TMR2_Initialize
 13460 ;;		_TMR2_CallBack
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           
 13465                           ;psect for function _TMR2_DefaultInterruptHandler
 13466  1048                     _TMR2_DefaultInterruptHandler:
 13467                           
 13468                           ;incstack = 0
 13469                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 13470  1048  0008               	return
 13471  1049                     __end_of_TMR2_DefaultInterruptHandler:
 13472                           
 13473                           	psect	text80
 13474  0784                     __ptext80:	
 13475 ;; *************** function _TMR2_Interrupt_SPK *****************
 13476 ;; Defined at:
 13477 ;;		line 1114 in file "MotorDrive.c"
 13478 ;; Parameters:    Size  Location     Type
 13479 ;;		None
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;		None
 13482 ;; Return value:  Size  Location     Type
 13483 ;;                  1    wreg      void 
 13484 ;; Registers used:
 13485 ;;		wreg, status,2, status,0, pclath, cstack
 13486 ;; Tracked objects:
 13487 ;;		On entry : 1F/2
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13491 ;;      Params:         0       0       0       0       0       0       0       0
 13492 ;;      Locals:         0       0       0       0       0       0       0       0
 13493 ;;      Temps:          1       0       0       0       0       0       0       0
 13494 ;;      Totals:         1       0       0       0       0       0       0       0
 13495 ;;Total ram usage:        1 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    4
 13498 ;; This function calls:
 13499 ;;		Absolute function
 13500 ;;		_SetDataTRISxWork_SPK_OPEN
 13501 ;;		_SetDataTRISxWork_SPK_SHORT
 13502 ;;		_SpkVrsCheck
 13503 ;; This function is called by:
 13504 ;;		_SetMotorStartSPK
 13505 ;;		_TMR2_CallBack
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           
 13510                           ;psect for function _TMR2_Interrupt_SPK
 13511  0784                     _TMR2_Interrupt_SPK:
 13512                           
 13513                           ;MotorDrive.c: 1116:     if (spkOutTrisRequestFlug == 1) {
 13514                           
 13515                           ;incstack = 0
 13516                           ; Regs used in _TMR2_Interrupt_SPK: [wreg+status,2+status,0+pclath+cstack]
 13517  0784  0021               	movlb	1	; select bank1
 13518  0785  035E               	decf	_spkOutTrisRequestFlug^(0+128),w
 13519  0786  1D03               	btfss	3,2
 13520  0787  2FBC               	goto	i1l5218
 13521                           
 13522                           ;MotorDrive.c: 1117:         spkOutTrisRequestFlug = 0;
 13523  0788  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
 13524                           
 13525                           ;MotorDrive.c: 1121:         dataTRISA = TRISA;
 13526  0789  080C               	movf	12,w	;volatile
 13527  078A  00F8               	movwf	??_TMR2_Interrupt_SPK
 13528  078B  0878               	movf	??_TMR2_Interrupt_SPK,w
 13529  078C  0020               	movlb	0	; select bank0
 13530  078D  00E1               	movwf	_dataTRISA
 13531                           
 13532                           ;MotorDrive.c: 1122:         dataTRISB = TRISB;
 13533  078E  0021               	movlb	1	; select bank1
 13534  078F  080D               	movf	13,w	;volatile
 13535  0790  00F8               	movwf	??_TMR2_Interrupt_SPK
 13536  0791  0878               	movf	??_TMR2_Interrupt_SPK,w
 13537  0792  0020               	movlb	0	; select bank0
 13538  0793  00E0               	movwf	_dataTRISB
 13539                           
 13540                           ;MotorDrive.c: 1123:         dataTRISC = TRISC;
 13541  0794  0021               	movlb	1	; select bank1
 13542  0795  080E               	movf	14,w	;volatile
 13543  0796  00F8               	movwf	??_TMR2_Interrupt_SPK
 13544  0797  0878               	movf	??_TMR2_Interrupt_SPK,w
 13545  0798  0020               	movlb	0	; select bank0
 13546  0799  00DF               	movwf	_dataTRISC
 13547                           
 13548                           ;MotorDrive.c: 1128:         dataTRISB &= (UB) (~(0x00 | 0x00));
 13549  079A  30FD               	movlw	253
 13550  079B  00F8               	movwf	??_TMR2_Interrupt_SPK
 13551  079C  0878               	movf	??_TMR2_Interrupt_SPK,w
 13552  079D  05E1               	andwf	_dataTRISA,f
 13553                           
 13554                           ;MotorDrive.c: 1129:         dataTRISC &= (UB) (~(0x22 | 0x1C));
 13555  079E  30C1               	movlw	193
 13556  079F  00F8               	movwf	??_TMR2_Interrupt_SPK
 13557  07A0  0878               	movf	??_TMR2_Interrupt_SPK,w
 13558  07A1  05DF               	andwf	_dataTRISC,f
 13559                           
 13560                           ;MotorDrive.c: 1132:         dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 13561  07A2  085E               	movf	_dataTRISAWork_M0,w
 13562  07A3  045B               	iorwf	_dataTRISAWork_M1,w
 13563  07A4  00F8               	movwf	??_TMR2_Interrupt_SPK
 13564  07A5  0878               	movf	??_TMR2_Interrupt_SPK,w
 13565  07A6  04E1               	iorwf	_dataTRISA,f
 13566                           
 13567                           ;MotorDrive.c: 1133:         dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 13568  07A7  085D               	movf	_dataTRISBWork_M0,w
 13569  07A8  045A               	iorwf	_dataTRISBWork_M1,w
 13570  07A9  00F8               	movwf	??_TMR2_Interrupt_SPK
 13571  07AA  0878               	movf	??_TMR2_Interrupt_SPK,w
 13572  07AB  04E0               	iorwf	_dataTRISB,f
 13573                           
 13574                           ;MotorDrive.c: 1134:         dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 13575  07AC  085C               	movf	_dataTRISCWork_M0,w
 13576  07AD  0459               	iorwf	_dataTRISCWork_M1,w
 13577  07AE  00F8               	movwf	??_TMR2_Interrupt_SPK
 13578  07AF  0878               	movf	??_TMR2_Interrupt_SPK,w
 13579  07B0  04DF               	iorwf	_dataTRISC,f
 13580                           
 13581                           ;MotorDrive.c: 1137:         TRISA = dataTRISA;
 13582  07B1  0861               	movf	_dataTRISA,w
 13583  07B2  0021               	movlb	1	; select bank1
 13584  07B3  008C               	movwf	12	;volatile
 13585                           
 13586                           ;MotorDrive.c: 1138:         TRISB = dataTRISB;
 13587  07B4  0020               	movlb	0	; select bank0
 13588  07B5  0860               	movf	_dataTRISB,w
 13589  07B6  0021               	movlb	1	; select bank1
 13590  07B7  008D               	movwf	13	;volatile
 13591                           
 13592                           ;MotorDrive.c: 1139:         TRISC = dataTRISC;
 13593  07B8  0020               	movlb	0	; select bank0
 13594  07B9  085F               	movf	_dataTRISC,w
 13595  07BA  0021               	movlb	1	; select bank1
 13596  07BB  008E               	movwf	14	;volatile
 13597  07BC                     i1l5218:
 13598                           
 13599                           ;MotorDrive.c: 1142:     if (excitatingOffMaskTime > 0) {
 13600  07BC  0862               	movf	_excitatingOffMaskTime^(0+128),w
 13601  07BD  1903               	btfsc	3,2
 13602  07BE  2FC4               	goto	i1l5226
 13603                           
 13604                           ;MotorDrive.c: 1144:         excitatingOffMaskTime--;
 13605  07BF  3001               	movlw	1
 13606  07C0  02E2               	subwf	_excitatingOffMaskTime^(0+128),f
 13607                           
 13608                           ;MotorDrive.c: 1145:         PIR2bits.C1IF = 0;
 13609  07C1  0020               	movlb	0	; select bank0
 13610  07C2  1292               	bcf	18,5	;volatile
 13611                           
 13612                           ;MotorDrive.c: 1146:         PIR2bits.C2IF = 0;
 13613  07C3  1312               	bcf	18,6	;volatile
 13614  07C4                     i1l5226:
 13615                           
 13616                           ;MotorDrive.c: 1152:     if ((spkReqVrsCheckBit & 0x01) || (spkReqVrsCheckBit & 0x02)) {
 13617  07C4  0021               	movlb	1	; select bank1
 13618  07C5  185D               	btfsc	_spkReqVrsCheckBit^(0+128),0
 13619  07C6  2FC9               	goto	i1l5230
 13620  07C7  1CDD               	btfss	_spkReqVrsCheckBit^(0+128),1
 13621  07C8  2FD3               	goto	i1l5234
 13622  07C9                     i1l5230:
 13623                           
 13624                           ;MotorDrive.c: 1153:         spkReqVrsCheckBit &= (UB) (~(0x01 | 0x02));
 13625  07C9  30FC               	movlw	252
 13626  07CA  00F8               	movwf	??_TMR2_Interrupt_SPK
 13627  07CB  0878               	movf	??_TMR2_Interrupt_SPK,w
 13628  07CC  05DD               	andwf	_spkReqVrsCheckBit^(0+128),f
 13629                           
 13630                           ;MotorDrive.c: 1155:         if (excitatingOffMaskTime == 0) {
 13631  07CD  0862               	movf	_excitatingOffMaskTime^(0+128),w
 13632  07CE  1D03               	btfss	3,2
 13633  07CF  2FD3               	goto	i1l5234
 13634                           
 13635                           ;MotorDrive.c: 1157:             SpkVrsCheck();
 13636  07D0  3190  20ED  3187   	fcall	_SpkVrsCheck
 13637  07D3                     i1l5234:
 13638                           
 13639                           ;MotorDrive.c: 1164:     if (excitatingTime > 0) {
 13640  07D3  0844               	movf	_excitatingTime^(0+128),w
 13641  07D4  0445               	iorwf	(_excitatingTime+1)^(0+128),w
 13642  07D5  1903               	btfsc	3,2
 13643  07D6  2FE8               	goto	i1l5250
 13644                           
 13645                           ;MotorDrive.c: 1166:         excitatingTime--;
 13646  07D7  3001               	movlw	1
 13647  07D8  02C4               	subwf	_excitatingTime^(0+128),f
 13648  07D9  3000               	movlw	0
 13649  07DA  3BC5               	subwfb	(_excitatingTime+1)^(0+128),f
 13650                           
 13651                           ;MotorDrive.c: 1168:         if (excitatingTime == 0) {
 13652  07DB  0844               	movf	_excitatingTime^(0+128),w
 13653  07DC  0445               	iorwf	(_excitatingTime+1)^(0+128),w
 13654  07DD  1D03               	btfss	3,2
 13655  07DE  2FE8               	goto	i1l5250
 13656                           
 13657                           ;MotorDrive.c: 1170:             spkStopStatus = 0;
 13658  07DF  01DB               	clrf	_spkStopStatus^(0+128)
 13659                           
 13660                           ;MotorDrive.c: 1171:             spkReqVrsCheckWait = 1;
 13661  07E0  01DC               	clrf	_spkReqVrsCheckWait^(0+128)
 13662  07E1  0ADC               	incf	_spkReqVrsCheckWait^(0+128),f
 13663                           
 13664                           ;MotorDrive.c: 1174:             spkOutChangeFunc = SetDataTRISxWork_SPK_OPEN;
 13665  07E2  30C8               	movlw	low _SetDataTRISxWork_SPK_OPEN
 13666  07E3  00C2               	movwf	_spkOutChangeFunc^(0+128)
 13667  07E4  3017               	movlw	high _SetDataTRISxWork_SPK_OPEN
 13668  07E5  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
 13669                           
 13670                           ;MotorDrive.c: 1175:             spkChangePosition = 0;
 13671  07E6  01DF               	clrf	_spkChangePosition^(0+128)
 13672                           
 13673                           ;MotorDrive.c: 1176:             spkPositionCt = 0;
 13674  07E7  01E0               	clrf	_spkPositionCt^(0+128)
 13675  07E8                     i1l5250:
 13676                           
 13677                           ;MotorDrive.c: 1183:     spkPositionCt++;
 13678  07E8  3001               	movlw	1
 13679  07E9  00F8               	movwf	??_TMR2_Interrupt_SPK
 13680  07EA  0878               	movf	??_TMR2_Interrupt_SPK,w
 13681  07EB  07E0               	addwf	_spkPositionCt^(0+128),f
 13682                           
 13683                           ;MotorDrive.c: 1185:     if (spkPositionCt == 4) {
 13684  07EC  3004               	movlw	4
 13685  07ED  0660               	xorwf	_spkPositionCt^(0+128),w
 13686  07EE  1903               	btfsc	3,2
 13687                           
 13688                           ;MotorDrive.c: 1187:         spkPositionCt = 0;
 13689  07EF  01E0               	clrf	_spkPositionCt^(0+128)
 13690                           
 13691                           ;MotorDrive.c: 1190:     if (spkPositionCt == spkChangePosition) {
 13692  07F0  0860               	movf	_spkPositionCt^(0+128),w
 13693  07F1  065F               	xorwf	_spkChangePosition^(0+128),w
 13694  07F2  1D03               	skipz
 13695  07F3  0008               	return
 13696                           
 13697                           ;MotorDrive.c: 1193:         if (spkOutChangeFunc) {
 13698  07F4  0842               	movf	_spkOutChangeFunc^(0+128),w
 13699  07F5  0443               	iorwf	(_spkOutChangeFunc+1)^(0+128),w
 13700  07F6  1903               	btfsc	3,2
 13701  07F7  0008               	return
 13702                           
 13703                           ;MotorDrive.c: 1194:             spkOutChangeFunc();
 13704  07F8  0843               	movf	(_spkOutChangeFunc+1)^(0+128),w
 13705  07F9  008A               	movwf	10
 13706  07FA  0842               	movf	_spkOutChangeFunc^(0+128),w
 13707  07FB  000A               	callw
 13708  07FC  3187               	pagesel	$
 13709  07FD  0008               	return
 13710  07FE                     __end_of_TMR2_Interrupt_SPK:
 13711                           
 13712                           	psect	text81
 13713  10ED                     __ptext81:	
 13714 ;; *************** function _SpkVrsCheck *****************
 13715 ;; Defined at:
 13716 ;;		line 2783 in file "MotorDrive.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;		None
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;		None
 13721 ;; Return value:  Size  Location     Type
 13722 ;;                  1    wreg      void 
 13723 ;; Registers used:
 13724 ;;		wreg, status,2, status,0, pclath, cstack
 13725 ;; Tracked objects:
 13726 ;;		On entry : 1F/1
 13727 ;;		On exit  : 1F/1
 13728 ;;		Unchanged: 0/0
 13729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13730 ;;      Params:         0       0       0       0       0       0       0       0
 13731 ;;      Locals:         0       0       0       0       0       0       0       0
 13732 ;;      Temps:          0       0       0       0       0       0       0       0
 13733 ;;      Totals:         0       0       0       0       0       0       0       0
 13734 ;;Total ram usage:        0 bytes
 13735 ;; Hardware stack levels used:    1
 13736 ;; Hardware stack levels required when called:    3
 13737 ;; This function calls:
 13738 ;;		_ExcitatingOutOff
 13739 ;;		_ExcitatingOutOn
 13740 ;; This function is called by:
 13741 ;;		_TMR2_Interrupt_SPK
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           
 13746                           ;psect for function _SpkVrsCheck
 13747  10ED                     _SpkVrsCheck:
 13748                           
 13749                           ;MotorDrive.c: 2785:     if ((PIR2bits.C1IF == 1) || (PIR2bits.C2IF == 1)) {
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _SpkVrsCheck: [wreg+status,2+status,0+pclath+cstack]
 13753  10ED  0020               	movlb	0	; select bank0
 13754  10EE  1A92               	btfsc	18,5	;volatile
 13755  10EF  28F2               	goto	i1l1064
 13756  10F0  1F12               	btfss	18,6	;volatile
 13757  10F1  28F7               	goto	i1l4376
 13758  10F2                     i1l1064:
 13759                           
 13760                           ;MotorDrive.c: 2787:         PIR2bits.C1IF = 0;
 13761  10F2  1292               	bcf	18,5	;volatile
 13762                           
 13763                           ;MotorDrive.c: 2788:         PIR2bits.C2IF = 0;
 13764  10F3  1312               	bcf	18,6	;volatile
 13765                           
 13766                           ;MotorDrive.c: 2790:         ExcitatingOutOn();
 13767  10F4  3196  26F7         	fcall	_ExcitatingOutOn
 13768                           
 13769                           ;MotorDrive.c: 2791:     } else {
 13770  10F6  0008               	return
 13771  10F7                     i1l4376:
 13772                           
 13773                           ;MotorDrive.c: 2792:         ExcitatingOutOff();
 13774  10F7  3190  20E0         	fcall	_ExcitatingOutOff
 13775  10F9  0008               	return
 13776  10FA                     __end_of_SpkVrsCheck:
 13777                           
 13778                           	psect	text82
 13779  16F7                     __ptext82:	
 13780 ;; *************** function _ExcitatingOutOn *****************
 13781 ;; Defined at:
 13782 ;;		line 2857 in file "MotorDrive.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;		None
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;		None
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      void 
 13789 ;; Registers used:
 13790 ;;		wreg, status,2, status,0, pclath, cstack
 13791 ;; Tracked objects:
 13792 ;;		On entry : 1F/0
 13793 ;;		On exit  : 1F/1
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13796 ;;      Params:         0       0       0       0       0       0       0       0
 13797 ;;      Locals:         0       0       0       0       0       0       0       0
 13798 ;;      Temps:          1       0       0       0       0       0       0       0
 13799 ;;      Totals:         1       0       0       0       0       0       0       0
 13800 ;;Total ram usage:        1 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    1
 13803 ;; This function calls:
 13804 ;;		i1_SetOutPutLATX
 13805 ;; This function is called by:
 13806 ;;		_SpkVrsCheck
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           
 13811                           ;psect for function _ExcitatingOutOn
 13812  16F7                     _ExcitatingOutOn:
 13813                           
 13814                           ;MotorDrive.c: 2860:     dataTRISAWork_M0 = 0x00;
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in _ExcitatingOutOn: [wreg+status,2+status,0+pclath+cstack]
 13818  16F7  01DE               	clrf	_dataTRISAWork_M0
 13819                           
 13820                           ;MotorDrive.c: 2861:     dataTRISBWork_M0 = 0x00;
 13821  16F8  01DD               	clrf	_dataTRISBWork_M0
 13822                           
 13823                           ;MotorDrive.c: 2862:     dataTRISCWork_M0 = 0x20;
 13824  16F9  3020               	movlw	32
 13825  16FA  00F6               	movwf	??_ExcitatingOutOn
 13826  16FB  0876               	movf	??_ExcitatingOutOn,w
 13827  16FC  00DC               	movwf	_dataTRISCWork_M0
 13828                           
 13829                           ;MotorDrive.c: 2864:     dataTRISAWork_M1 = 0x00;
 13830  16FD  01DB               	clrf	_dataTRISAWork_M1
 13831                           
 13832                           ;MotorDrive.c: 2865:     dataTRISBWork_M1 = 0x00;
 13833  16FE  01DA               	clrf	_dataTRISBWork_M1
 13834                           
 13835                           ;MotorDrive.c: 2866:     dataTRISCWork_M1 = 0x10;
 13836  16FF  3010               	movlw	16
 13837  1700  00F6               	movwf	??_ExcitatingOutOn
 13838  1701  0876               	movf	??_ExcitatingOutOn,w
 13839  1702  00D9               	movwf	_dataTRISCWork_M1
 13840                           
 13841                           ;MotorDrive.c: 2869:     pulseOutLATAWork_M0 = 0x10;
 13842  1703  3010               	movlw	16
 13843  1704  00F6               	movwf	??_ExcitatingOutOn
 13844  1705  0876               	movf	??_ExcitatingOutOn,w
 13845  1706  00E7               	movwf	_pulseOutLATAWork_M0
 13846                           
 13847                           ;MotorDrive.c: 2870:     pulseOutLATBWork_M0 = 0x00;
 13848  1707  01E6               	clrf	_pulseOutLATBWork_M0
 13849                           
 13850                           ;MotorDrive.c: 2871:     pulseOutLATCWork_M0 = 0x00;
 13851  1708  01E5               	clrf	_pulseOutLATCWork_M0
 13852                           
 13853                           ;MotorDrive.c: 2873:     pulseOutLATAWork_M1 = 0x00;
 13854  1709  01E4               	clrf	_pulseOutLATAWork_M1
 13855                           
 13856                           ;MotorDrive.c: 2874:     pulseOutLATBWork_M1 = 0x80;
 13857  170A  3080               	movlw	128
 13858  170B  00F6               	movwf	??_ExcitatingOutOn
 13859  170C  0876               	movf	??_ExcitatingOutOn,w
 13860  170D  00E3               	movwf	_pulseOutLATBWork_M1
 13861                           
 13862                           ;MotorDrive.c: 2875:     pulseOutLATCWork_M1 = 0x00;
 13863  170E  01E2               	clrf	_pulseOutLATCWork_M1
 13864                           
 13865                           ;MotorDrive.c: 2877:     SetOutPutLATX();
 13866  170F  3189  21CC         	fcall	i1_SetOutPutLATX
 13867                           
 13868                           ;MotorDrive.c: 2878:     LATA |= 0x04;
 13869  1711  150C               	bsf	12,2	;volatile
 13870                           
 13871                           ;MotorDrive.c: 2880:     spkStopStatus = 1;
 13872  1712  0021               	movlb	1	; select bank1
 13873  1713  01DB               	clrf	_spkStopStatus^(0+128)
 13874  1714  0ADB               	incf	_spkStopStatus^(0+128),f
 13875                           
 13876                           ;MotorDrive.c: 2881:     excitatingStatusOn = 1;
 13877  1715  01DA               	clrf	_excitatingStatusOn^(0+128)
 13878  1716  0ADA               	incf	_excitatingStatusOn^(0+128),f
 13879                           
 13880                           ;MotorDrive.c: 2882:     excitatingTime = 8197;
 13881  1717  3005               	movlw	5
 13882  1718  00C4               	movwf	_excitatingTime^(0+128)
 13883  1719  3020               	movlw	32
 13884  171A  00C5               	movwf	(_excitatingTime^(0+128)+1)
 13885  171B  0008               	return
 13886  171C                     __end_of_ExcitatingOutOn:
 13887                           
 13888                           	psect	text83
 13889  10E0                     __ptext83:	
 13890 ;; *************** function _ExcitatingOutOff *****************
 13891 ;; Defined at:
 13892 ;;		line 2804 in file "MotorDrive.c"
 13893 ;; Parameters:    Size  Location     Type
 13894 ;;		None
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;		None
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  1    wreg      void 
 13899 ;; Registers used:
 13900 ;;		wreg, status,2, status,0, pclath, cstack
 13901 ;; Tracked objects:
 13902 ;;		On entry : 1F/0
 13903 ;;		On exit  : 1F/1
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13906 ;;      Params:         0       0       0       0       0       0       0       0
 13907 ;;      Locals:         0       0       0       0       0       0       0       0
 13908 ;;      Temps:          1       0       0       0       0       0       0       0
 13909 ;;      Totals:         1       0       0       0       0       0       0       0
 13910 ;;Total ram usage:        1 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    2
 13913 ;; This function calls:
 13914 ;;		i1_SetExcitatingOutOffData
 13915 ;; This function is called by:
 13916 ;;		_SpkVrsCheck
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           
 13921                           ;psect for function _ExcitatingOutOff
 13922  10E0                     _ExcitatingOutOff:
 13923                           
 13924                           ;MotorDrive.c: 2807:     SetExcitatingOutOffData();
 13925                           
 13926                           ;incstack = 0
 13927                           ; Regs used in _ExcitatingOutOff: [wreg+status,2+status,0+pclath+cstack]
 13928  10E0  3194  24D0  3190   	fcall	i1_SetExcitatingOutOffData
 13929                           
 13930                           ;MotorDrive.c: 2810:     if (excitatingStatusOn) {
 13931  10E3  0021               	movlb	1	; select bank1
 13932  10E4  085A               	movf	_excitatingStatusOn^(0+128),w
 13933  10E5  1903               	btfsc	3,2
 13934  10E6  0008               	return
 13935                           
 13936                           ;MotorDrive.c: 2811:         excitatingStatusOn = 0;
 13937  10E7  01DA               	clrf	_excitatingStatusOn^(0+128)
 13938                           
 13939                           ;MotorDrive.c: 2813:         excitatingOffMaskTime = 82;
 13940  10E8  3052               	movlw	82
 13941  10E9  00F7               	movwf	??_ExcitatingOutOff
 13942  10EA  0877               	movf	??_ExcitatingOutOff,w
 13943  10EB  00E2               	movwf	_excitatingOffMaskTime^(0+128)
 13944  10EC  0008               	return
 13945  10ED                     __end_of_ExcitatingOutOff:
 13946                           
 13947                           	psect	text84
 13948  14D0                     __ptext84:	
 13949 ;; *************** function i1_SetExcitatingOutOffData *****************
 13950 ;; Defined at:
 13951 ;;		line 2825 in file "MotorDrive.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;		None
 13954 ;; Auto vars:     Size  Location     Type
 13955 ;;		None
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  1    wreg      void 
 13958 ;; Registers used:
 13959 ;;		wreg, status,2, status,0, pclath, cstack
 13960 ;; Tracked objects:
 13961 ;;		On entry : 1F/0
 13962 ;;		On exit  : 1F/2
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13965 ;;      Params:         0       0       0       0       0       0       0       0
 13966 ;;      Locals:         0       0       0       0       0       0       0       0
 13967 ;;      Temps:          1       0       0       0       0       0       0       0
 13968 ;;      Totals:         1       0       0       0       0       0       0       0
 13969 ;;Total ram usage:        1 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; Hardware stack levels required when called:    1
 13972 ;; This function calls:
 13973 ;;		i1_SetOutPutLATX
 13974 ;; This function is called by:
 13975 ;;		_ExcitatingOutOff
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           
 13980                           ;psect for function i1_SetExcitatingOutOffData
 13981  14D0                     i1_SetExcitatingOutOffData:
 13982                           
 13983                           ;MotorDrive.c: 2829:     dataTRISAWork_M0 = 0x00;
 13984                           
 13985                           ;incstack = 0
 13986                           ; Regs used in i1_SetExcitatingOutOffData: [wreg+status,2+status,0+pclath+cstack]
 13987  14D0  01DE               	clrf	_dataTRISAWork_M0
 13988                           
 13989                           ;MotorDrive.c: 2830:     dataTRISBWork_M0 = 0x00;
 13990  14D1  01DD               	clrf	_dataTRISBWork_M0
 13991                           
 13992                           ;MotorDrive.c: 2831:     dataTRISCWork_M0 = 0x20;
 13993  14D2  3020               	movlw	32
 13994  14D3  00F6               	movwf	??i1_SetExcitatingOutOffData
 13995  14D4  0876               	movf	??i1_SetExcitatingOutOffData,w
 13996  14D5  00DC               	movwf	_dataTRISCWork_M0
 13997                           
 13998                           ;MotorDrive.c: 2833:     dataTRISAWork_M1 = 0x00;
 13999  14D6  01DB               	clrf	_dataTRISAWork_M1
 14000                           
 14001                           ;MotorDrive.c: 2834:     dataTRISBWork_M1 = 0x00;
 14002  14D7  01DA               	clrf	_dataTRISBWork_M1
 14003                           
 14004                           ;MotorDrive.c: 2835:     dataTRISCWork_M1 = 0x10;
 14005  14D8  3010               	movlw	16
 14006  14D9  00F6               	movwf	??i1_SetExcitatingOutOffData
 14007  14DA  0876               	movf	??i1_SetExcitatingOutOffData,w
 14008  14DB  00D9               	movwf	_dataTRISCWork_M1
 14009                           
 14010                           ;MotorDrive.c: 2837:     pulseOutLATAWork_M0 = 0;
 14011  14DC  01E7               	clrf	_pulseOutLATAWork_M0
 14012                           
 14013                           ;MotorDrive.c: 2838:     pulseOutLATBWork_M0 = 0;
 14014  14DD  01E6               	clrf	_pulseOutLATBWork_M0
 14015                           
 14016                           ;MotorDrive.c: 2839:     pulseOutLATCWork_M0 = 0;
 14017  14DE  01E5               	clrf	_pulseOutLATCWork_M0
 14018                           
 14019                           ;MotorDrive.c: 2841:     pulseOutLATAWork_M1 = 0;
 14020  14DF  01E4               	clrf	_pulseOutLATAWork_M1
 14021                           
 14022                           ;MotorDrive.c: 2842:     pulseOutLATBWork_M1 = 0;
 14023  14E0  01E3               	clrf	_pulseOutLATBWork_M1
 14024                           
 14025                           ;MotorDrive.c: 2843:     pulseOutLATCWork_M1 = 0;
 14026  14E1  01E2               	clrf	_pulseOutLATCWork_M1
 14027                           
 14028                           ;MotorDrive.c: 2845:     SetOutPutLATX();
 14029  14E2  3189  21CC         	fcall	i1_SetOutPutLATX
 14030                           
 14031                           ;MotorDrive.c: 2846:     LATA &= ~0x04;
 14032  14E4  30FB               	movlw	251
 14033  14E5  00F6               	movwf	??i1_SetExcitatingOutOffData
 14034  14E6  0876               	movf	??i1_SetExcitatingOutOffData,w
 14035  14E7  058C               	andwf	12,f	;volatile
 14036  14E8  0008               	return
 14037  14E9                     __end_ofi1_SetExcitatingOutOffData:
 14038                           
 14039                           	psect	text85
 14040  09CC                     __ptext85:	
 14041 ;; *************** function i1_SetOutPutLATX *****************
 14042 ;; Defined at:
 14043 ;;		line 2965 in file "MotorDrive.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;		None
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;		None
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg, status,2, status,0
 14052 ;; Tracked objects:
 14053 ;;		On entry : 1F/0
 14054 ;;		On exit  : 1F/2
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14057 ;;      Params:         0       0       0       0       0       0       0       0
 14058 ;;      Locals:         0       0       0       0       0       0       0       0
 14059 ;;      Temps:          1       0       0       0       0       0       0       0
 14060 ;;      Totals:         1       0       0       0       0       0       0       0
 14061 ;;Total ram usage:        1 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; This function calls:
 14064 ;;		Nothing
 14065 ;; This function is called by:
 14066 ;;		_ExcitatingOutOn
 14067 ;;		i1_SetExcitatingOutOffData
 14068 ;; This function uses a non-reentrant model
 14069 ;;
 14070                           
 14071                           
 14072                           ;psect for function i1_SetOutPutLATX
 14073  09CC                     i1_SetOutPutLATX:
 14074                           
 14075                           ;MotorDrive.c: 2969:     dataTRISA = TRISA;
 14076                           
 14077                           ;incstack = 0
 14078                           ; Regs used in i1_SetOutPutLATX: [wreg+status,2+status,0]
 14079  09CC  0021               	movlb	1	; select bank1
 14080  09CD  080C               	movf	12,w	;volatile
 14081  09CE  00F5               	movwf	??i1_SetOutPutLATX
 14082  09CF  0875               	movf	??i1_SetOutPutLATX,w
 14083  09D0  0020               	movlb	0	; select bank0
 14084  09D1  00E1               	movwf	_dataTRISA
 14085                           
 14086                           ;MotorDrive.c: 2970:     dataTRISB = TRISB;
 14087  09D2  0021               	movlb	1	; select bank1
 14088  09D3  080D               	movf	13,w	;volatile
 14089  09D4  00F5               	movwf	??i1_SetOutPutLATX
 14090  09D5  0875               	movf	??i1_SetOutPutLATX,w
 14091  09D6  0020               	movlb	0	; select bank0
 14092  09D7  00E0               	movwf	_dataTRISB
 14093                           
 14094                           ;MotorDrive.c: 2971:     dataTRISC = TRISC;
 14095  09D8  0021               	movlb	1	; select bank1
 14096  09D9  080E               	movf	14,w	;volatile
 14097  09DA  00F5               	movwf	??i1_SetOutPutLATX
 14098  09DB  0875               	movf	??i1_SetOutPutLATX,w
 14099  09DC  0020               	movlb	0	; select bank0
 14100  09DD  00DF               	movwf	_dataTRISC
 14101                           
 14102                           ;MotorDrive.c: 2976:     dataTRISB &= (UB) (~(0x00 | 0x00));
 14103  09DE  30FD               	movlw	253
 14104  09DF  00F5               	movwf	??i1_SetOutPutLATX
 14105  09E0  0875               	movf	??i1_SetOutPutLATX,w
 14106  09E1  05E1               	andwf	_dataTRISA,f
 14107                           
 14108                           ;MotorDrive.c: 2977:     dataTRISC &= (UB) (~(0x22 | 0x1C));
 14109  09E2  30C1               	movlw	193
 14110  09E3  00F5               	movwf	??i1_SetOutPutLATX
 14111  09E4  0875               	movf	??i1_SetOutPutLATX,w
 14112  09E5  05DF               	andwf	_dataTRISC,f
 14113                           
 14114                           ;MotorDrive.c: 2980:     dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 14115  09E6  085E               	movf	_dataTRISAWork_M0,w
 14116  09E7  045B               	iorwf	_dataTRISAWork_M1,w
 14117  09E8  00F5               	movwf	??i1_SetOutPutLATX
 14118  09E9  0875               	movf	??i1_SetOutPutLATX,w
 14119  09EA  04E1               	iorwf	_dataTRISA,f
 14120                           
 14121                           ;MotorDrive.c: 2981:     dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 14122  09EB  085D               	movf	_dataTRISBWork_M0,w
 14123  09EC  045A               	iorwf	_dataTRISBWork_M1,w
 14124  09ED  00F5               	movwf	??i1_SetOutPutLATX
 14125  09EE  0875               	movf	??i1_SetOutPutLATX,w
 14126  09EF  04E0               	iorwf	_dataTRISB,f
 14127                           
 14128                           ;MotorDrive.c: 2982:     dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 14129  09F0  085C               	movf	_dataTRISCWork_M0,w
 14130  09F1  0459               	iorwf	_dataTRISCWork_M1,w
 14131  09F2  00F5               	movwf	??i1_SetOutPutLATX
 14132  09F3  0875               	movf	??i1_SetOutPutLATX,w
 14133  09F4  04DF               	iorwf	_dataTRISC,f
 14134                           
 14135                           ;MotorDrive.c: 2985:     TRISA = dataTRISA;
 14136  09F5  0861               	movf	_dataTRISA,w
 14137  09F6  0021               	movlb	1	; select bank1
 14138  09F7  008C               	movwf	12	;volatile
 14139                           
 14140                           ;MotorDrive.c: 2986:     TRISB = dataTRISB;
 14141  09F8  0020               	movlb	0	; select bank0
 14142  09F9  0860               	movf	_dataTRISB,w
 14143  09FA  0021               	movlb	1	; select bank1
 14144  09FB  008D               	movwf	13	;volatile
 14145                           
 14146                           ;MotorDrive.c: 2987:     TRISC = dataTRISC;
 14147  09FC  0020               	movlb	0	; select bank0
 14148  09FD  085F               	movf	_dataTRISC,w
 14149  09FE  0021               	movlb	1	; select bank1
 14150  09FF  008E               	movwf	14	;volatile
 14151                           
 14152                           ;MotorDrive.c: 2990:     pulseOutLATA = LATA;
 14153  0A00  0022               	movlb	2	; select bank2
 14154  0A01  080C               	movf	12,w	;volatile
 14155  0A02  00F5               	movwf	??i1_SetOutPutLATX
 14156  0A03  0875               	movf	??i1_SetOutPutLATX,w
 14157  0A04  0020               	movlb	0	; select bank0
 14158  0A05  00EA               	movwf	_pulseOutLATA
 14159                           
 14160                           ;MotorDrive.c: 2991:     pulseOutLATB = LATB;
 14161  0A06  0022               	movlb	2	; select bank2
 14162  0A07  080D               	movf	13,w	;volatile
 14163  0A08  00F5               	movwf	??i1_SetOutPutLATX
 14164  0A09  0875               	movf	??i1_SetOutPutLATX,w
 14165  0A0A  0020               	movlb	0	; select bank0
 14166  0A0B  00E9               	movwf	_pulseOutLATB
 14167                           
 14168                           ;MotorDrive.c: 2992:     pulseOutLATC = LATC;
 14169  0A0C  0022               	movlb	2	; select bank2
 14170  0A0D  080E               	movf	14,w	;volatile
 14171  0A0E  00F5               	movwf	??i1_SetOutPutLATX
 14172  0A0F  0875               	movf	??i1_SetOutPutLATX,w
 14173  0A10  0020               	movlb	0	; select bank0
 14174  0A11  00E8               	movwf	_pulseOutLATC
 14175                           
 14176                           ;MotorDrive.c: 2996:     pulseOutLATA &= (UB) (~(0x32 | 0x00));
 14177  0A12  30CD               	movlw	205
 14178  0A13  00F5               	movwf	??i1_SetOutPutLATX
 14179  0A14  0875               	movf	??i1_SetOutPutLATX,w
 14180  0A15  05EA               	andwf	_pulseOutLATA,f
 14181                           
 14182                           ;MotorDrive.c: 2997:     pulseOutLATB &= (UB) (~(0x00 | 0xA0));
 14183  0A16  305F               	movlw	95
 14184  0A17  00F5               	movwf	??i1_SetOutPutLATX
 14185  0A18  0875               	movf	??i1_SetOutPutLATX,w
 14186  0A19  05E9               	andwf	_pulseOutLATB,f
 14187                           
 14188                           ;MotorDrive.c: 2998:     pulseOutLATC &= (UB) (~(0x02 | 0x0C));
 14189  0A1A  30F1               	movlw	241
 14190  0A1B  00F5               	movwf	??i1_SetOutPutLATX
 14191  0A1C  0875               	movf	??i1_SetOutPutLATX,w
 14192  0A1D  05E8               	andwf	_pulseOutLATC,f
 14193                           
 14194                           ;MotorDrive.c: 3001:     pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork_M1
      +                          );
 14195  0A1E  0867               	movf	_pulseOutLATAWork_M0,w
 14196  0A1F  0464               	iorwf	_pulseOutLATAWork_M1,w
 14197  0A20  00F5               	movwf	??i1_SetOutPutLATX
 14198  0A21  0875               	movf	??i1_SetOutPutLATX,w
 14199  0A22  04EA               	iorwf	_pulseOutLATA,f
 14200                           
 14201                           ;MotorDrive.c: 3002:     pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork_M1
      +                          );
 14202  0A23  0866               	movf	_pulseOutLATBWork_M0,w
 14203  0A24  0463               	iorwf	_pulseOutLATBWork_M1,w
 14204  0A25  00F5               	movwf	??i1_SetOutPutLATX
 14205  0A26  0875               	movf	??i1_SetOutPutLATX,w
 14206  0A27  04E9               	iorwf	_pulseOutLATB,f
 14207                           
 14208                           ;MotorDrive.c: 3003:     pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork_M1
      +                          );
 14209  0A28  0865               	movf	_pulseOutLATCWork_M0,w
 14210  0A29  0462               	iorwf	_pulseOutLATCWork_M1,w
 14211  0A2A  00F5               	movwf	??i1_SetOutPutLATX
 14212  0A2B  0875               	movf	??i1_SetOutPutLATX,w
 14213  0A2C  04E8               	iorwf	_pulseOutLATC,f
 14214                           
 14215                           ;MotorDrive.c: 3006:     LATA = pulseOutLATA;
 14216  0A2D  086A               	movf	_pulseOutLATA,w
 14217  0A2E  0022               	movlb	2	; select bank2
 14218  0A2F  008C               	movwf	12	;volatile
 14219                           
 14220                           ;MotorDrive.c: 3007:     LATB = pulseOutLATB;
 14221  0A30  0020               	movlb	0	; select bank0
 14222  0A31  0869               	movf	_pulseOutLATB,w
 14223  0A32  0022               	movlb	2	; select bank2
 14224  0A33  008D               	movwf	13	;volatile
 14225                           
 14226                           ;MotorDrive.c: 3008:     LATC = pulseOutLATC;
 14227  0A34  0020               	movlb	0	; select bank0
 14228  0A35  0868               	movf	_pulseOutLATC,w
 14229  0A36  0022               	movlb	2	; select bank2
 14230  0A37  008E               	movwf	14	;volatile
 14231  0A38  0008               	return
 14232  0A39                     __end_ofi1_SetOutPutLATX:
 14233                           
 14234                           	psect	text86
 14235  17C8                     __ptext86:	
 14236 ;; *************** function _SetDataTRISxWork_SPK_OPEN *****************
 14237 ;; Defined at:
 14238 ;;		line 2894 in file "MotorDrive.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;		None
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;		None
 14243 ;; Return value:  Size  Location     Type
 14244 ;;                  1    wreg      void 
 14245 ;; Registers used:
 14246 ;;		wreg, status,2, status,0
 14247 ;; Tracked objects:
 14248 ;;		On entry : 1F/1
 14249 ;;		On exit  : 1F/1
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14252 ;;      Params:         0       0       0       0       0       0       0       0
 14253 ;;      Locals:         0       0       0       0       0       0       0       0
 14254 ;;      Temps:          1       0       0       0       0       0       0       0
 14255 ;;      Totals:         1       0       0       0       0       0       0       0
 14256 ;;Total ram usage:        1 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; This function calls:
 14259 ;;		Nothing
 14260 ;; This function is called by:
 14261 ;;		_TMR2_Interrupt_SPK
 14262 ;;		_SetDataTRISxWork_SPK_SHORT
 14263 ;; This function uses a non-reentrant model
 14264 ;;
 14265                           
 14266                           
 14267                           ;psect for function _SetDataTRISxWork_SPK_OPEN
 14268  17C8                     _SetDataTRISxWork_SPK_OPEN:
 14269                           
 14270                           ;MotorDrive.c: 2896:     if (detectSpkTurnBit == 0) {
 14271                           
 14272                           ;incstack = 0
 14273                           ; Regs used in _SetDataTRISxWork_SPK_OPEN: [wreg+status,2+status,0]
 14274  17C8  0861               	movf	_detectSpkTurnBit^(0+128),w
 14275  17C9  1D03               	btfss	3,2
 14276  17CA  2FDD               	goto	i1l4572
 14277                           
 14278                           ;MotorDrive.c: 2897:         dataTRISAWork_M0 = 0x00;
 14279  17CB  0020               	movlb	0	; select bank0
 14280  17CC  01DE               	clrf	_dataTRISAWork_M0
 14281                           
 14282                           ;MotorDrive.c: 2898:         dataTRISBWork_M0 = 0x00;
 14283  17CD  01DD               	clrf	_dataTRISBWork_M0
 14284                           
 14285                           ;MotorDrive.c: 2899:         dataTRISCWork_M0 = 0x02;
 14286  17CE  3002               	movlw	2
 14287  17CF  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14288  17D0  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14289  17D1  00DC               	movwf	_dataTRISCWork_M0
 14290                           
 14291                           ;MotorDrive.c: 2901:         dataTRISAWork_M1 = 0x00;
 14292  17D2  01DB               	clrf	_dataTRISAWork_M1
 14293                           
 14294                           ;MotorDrive.c: 2902:         dataTRISBWork_M1 = 0x00;
 14295  17D3  01DA               	clrf	_dataTRISBWork_M1
 14296                           
 14297                           ;MotorDrive.c: 2903:         dataTRISCWork_M1 = 0x08;
 14298  17D4  3008               	movlw	8
 14299  17D5  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14300  17D6  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14301  17D7  00D9               	movwf	_dataTRISCWork_M1
 14302                           
 14303                           ;MotorDrive.c: 2905:         CM1CON1 = (0x90 | 0x01);
 14304  17D8  3091               	movlw	145
 14305  17D9  0022               	movlb	2	; select bank2
 14306  17DA  0092               	movwf	18	;volatile
 14307                           
 14308                           ;MotorDrive.c: 2906:         CM2CON1 = (0x90 | 0x03);
 14309  17DB  3093               	movlw	147
 14310  17DC  2FEE               	goto	L20
 14311  17DD                     i1l4572:	
 14312                           ;MotorDrive.c: 2908:     } else {
 14313                           
 14314                           
 14315                           ;MotorDrive.c: 2909:         dataTRISAWork_M0 = 0x02;
 14316  17DD  3002               	movlw	2
 14317  17DE  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14318  17DF  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14319  17E0  0020               	movlb	0	; select bank0
 14320  17E1  00DE               	movwf	_dataTRISAWork_M0
 14321                           
 14322                           ;MotorDrive.c: 2910:         dataTRISBWork_M0 = 0x00;
 14323  17E2  01DD               	clrf	_dataTRISBWork_M0
 14324                           
 14325                           ;MotorDrive.c: 2911:         dataTRISCWork_M0 = 0x00;
 14326  17E3  01DC               	clrf	_dataTRISCWork_M0
 14327                           
 14328                           ;MotorDrive.c: 2913:         dataTRISAWork_M1 = 0x00;
 14329  17E4  01DB               	clrf	_dataTRISAWork_M1
 14330                           
 14331                           ;MotorDrive.c: 2914:         dataTRISBWork_M1 = 0x00;
 14332  17E5  01DA               	clrf	_dataTRISBWork_M1
 14333                           
 14334                           ;MotorDrive.c: 2915:         dataTRISCWork_M1 = 0x04;
 14335  17E6  3004               	movlw	4
 14336  17E7  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14337  17E8  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14338  17E9  00D9               	movwf	_dataTRISCWork_M1
 14339                           
 14340                           ;MotorDrive.c: 2917:         CM1CON1 = (0x90 | 0x00);
 14341  17EA  3090               	movlw	144
 14342  17EB  0022               	movlb	2	; select bank2
 14343  17EC  0092               	movwf	18	;volatile
 14344                           
 14345                           ;MotorDrive.c: 2918:         CM2CON1 = (0x90 | 0x02);
 14346  17ED  3092               	movlw	146
 14347  17EE                     L20:
 14348  17EE  0094               	movwf	20	;volatile
 14349                           
 14350                           ;MotorDrive.c: 2921:     spkOutChangeFunc = SetDataTRISxWork_SPK_SHORT;
 14351                           
 14352                           ;MotorDrive.c: 2919:     }
 14353  17EF  309F               	movlw	low _SetDataTRISxWork_SPK_SHORT
 14354  17F0  0021               	movlb	1	; select bank1
 14355  17F1  00C2               	movwf	_spkOutChangeFunc^(0+128)
 14356  17F2  3015               	movlw	high _SetDataTRISxWork_SPK_SHORT
 14357  17F3  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
 14358                           
 14359                           ;MotorDrive.c: 2922:     spkChangePosition = 1;
 14360  17F4  01DF               	clrf	_spkChangePosition^(0+128)
 14361  17F5  0ADF               	incf	_spkChangePosition^(0+128),f
 14362                           
 14363                           ;MotorDrive.c: 2923:     detectSpkTurnBit ^= 0x01;
 14364  17F6  3001               	movlw	1
 14365  17F7  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14366  17F8  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14367  17F9  06E1               	xorwf	_detectSpkTurnBit^(0+128),f
 14368                           
 14369                           ;MotorDrive.c: 2925:     if (0 == spkStopStatus) {
 14370  17FA  085B               	movf	_spkStopStatus^(0+128),w
 14371  17FB  1D03               	btfss	3,2
 14372  17FC  0008               	return
 14373                           
 14374                           ;MotorDrive.c: 2926:         spkOutTrisRequestFlug = 1;
 14375  17FD  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
 14376  17FE  0ADE               	incf	_spkOutTrisRequestFlug^(0+128),f
 14377  17FF  0008               	return
 14378  1800                     __end_of_SetDataTRISxWork_SPK_OPEN:
 14379                           
 14380                           	psect	text87
 14381  159F                     __ptext87:	
 14382 ;; *************** function _SetDataTRISxWork_SPK_SHORT *****************
 14383 ;; Defined at:
 14384 ;;		line 2940 in file "MotorDrive.c"
 14385 ;; Parameters:    Size  Location     Type
 14386 ;;		None
 14387 ;; Auto vars:     Size  Location     Type
 14388 ;;		None
 14389 ;; Return value:  Size  Location     Type
 14390 ;;                  1    wreg      void 
 14391 ;; Registers used:
 14392 ;;		wreg, status,2, status,0
 14393 ;; Tracked objects:
 14394 ;;		On entry : 1F/1
 14395 ;;		On exit  : 1F/1
 14396 ;;		Unchanged: 0/0
 14397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14398 ;;      Params:         0       0       0       0       0       0       0       0
 14399 ;;      Locals:         0       0       0       0       0       0       0       0
 14400 ;;      Temps:          1       0       0       0       0       0       0       0
 14401 ;;      Totals:         1       0       0       0       0       0       0       0
 14402 ;;Total ram usage:        1 bytes
 14403 ;; Hardware stack levels used:    1
 14404 ;; This function calls:
 14405 ;;		Nothing
 14406 ;; This function is called by:
 14407 ;;		_SetMotorStartSPK
 14408 ;;		_SetDataTRISxWork_SPK_OPEN
 14409 ;;		_TMR2_Interrupt_SPK
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           
 14414                           ;psect for function _SetDataTRISxWork_SPK_SHORT
 14415  159F                     _SetDataTRISxWork_SPK_SHORT:
 14416                           
 14417                           ;MotorDrive.c: 2942:     dataTRISAWork_M0 = (0x00 | 0x00);
 14418                           
 14419                           ;incstack = 0
 14420                           ; Regs used in _SetDataTRISxWork_SPK_SHORT: [wreg+status,2+status,0]
 14421  159F  0020               	movlb	0	; select bank0
 14422  15A0  01DE               	clrf	_dataTRISAWork_M0
 14423                           
 14424                           ;MotorDrive.c: 2943:     dataTRISBWork_M0 = (0x00 | 0x00);
 14425  15A1  01DD               	clrf	_dataTRISBWork_M0
 14426                           
 14427                           ;MotorDrive.c: 2944:     dataTRISCWork_M0 = (0x00 | 0x00);
 14428  15A2  01DC               	clrf	_dataTRISCWork_M0
 14429                           
 14430                           ;MotorDrive.c: 2946:     dataTRISAWork_M1 = (0x00 | 0x00);
 14431  15A3  01DB               	clrf	_dataTRISAWork_M1
 14432                           
 14433                           ;MotorDrive.c: 2947:     dataTRISBWork_M1 = (0x00 | 0x00);
 14434  15A4  01DA               	clrf	_dataTRISBWork_M1
 14435                           
 14436                           ;MotorDrive.c: 2948:     dataTRISCWork_M1 = (0x00 | 0x00);
 14437  15A5  01D9               	clrf	_dataTRISCWork_M1
 14438                           
 14439                           ;MotorDrive.c: 2950:     spkOutChangeFunc = SetDataTRISxWork_SPK_OPEN;
 14440  15A6  30C8               	movlw	low _SetDataTRISxWork_SPK_OPEN
 14441  15A7  0021               	movlb	1	; select bank1
 14442  15A8  00C2               	movwf	_spkOutChangeFunc^(0+128)
 14443  15A9  3017               	movlw	high _SetDataTRISxWork_SPK_OPEN
 14444  15AA  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
 14445                           
 14446                           ;MotorDrive.c: 2951:     spkChangePosition = 0;
 14447  15AB  01DF               	clrf	_spkChangePosition^(0+128)
 14448                           
 14449                           ;MotorDrive.c: 2953:     spkOutTrisRequestFlug = 1;
 14450  15AC  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
 14451  15AD  0ADE               	incf	_spkOutTrisRequestFlug^(0+128),f
 14452                           
 14453                           ;MotorDrive.c: 2955:     if (0 == spkStopStatus) {
 14454  15AE  085B               	movf	_spkStopStatus^(0+128),w
 14455  15AF  1D03               	btfss	3,2
 14456  15B0  0008               	return
 14457                           
 14458                           ;MotorDrive.c: 2956:         if (0 == spkReqVrsCheckWait) {
 14459  15B1  085C               	movf	_spkReqVrsCheckWait^(0+128),w
 14460  15B2  1D03               	btfss	3,2
 14461  15B3  2DB9               	goto	i1l4604
 14462                           
 14463                           ;MotorDrive.c: 2957:             spkReqVrsCheckBit |= (0x01 | 0x02);
 14464  15B4  3003               	movlw	3
 14465  15B5  00F5               	movwf	??_SetDataTRISxWork_SPK_SHORT
 14466  15B6  0875               	movf	??_SetDataTRISxWork_SPK_SHORT,w
 14467  15B7  04DD               	iorwf	_spkReqVrsCheckBit^(0+128),f
 14468                           
 14469                           ;MotorDrive.c: 2958:         } else {
 14470  15B8  0008               	return
 14471  15B9                     i1l4604:
 14472                           
 14473                           ;MotorDrive.c: 2959:             spkReqVrsCheckWait = 0;
 14474  15B9  01DC               	clrf	_spkReqVrsCheckWait^(0+128)
 14475  15BA  0008               	return
 14476  15BB                     __end_of_SetDataTRISxWork_SPK_SHORT:
 14477                           
 14478                           	psect	text88
 14479  0002                     __ptext88:	
 14480 ;; *************** function i1_TMR2_StopTimer *****************
 14481 ;; Defined at:
 14482 ;;		line 93 in file "mcc_generated_files/tmr2.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;		None
 14485 ;; Auto vars:     Size  Location     Type
 14486 ;;		None
 14487 ;; Return value:  Size  Location     Type
 14488 ;;                  1    wreg      void 
 14489 ;; Registers used:
 14490 ;;		None
 14491 ;; Tracked objects:
 14492 ;;		On entry : 1F/0
 14493 ;;		On exit  : 1F/0
 14494 ;;		Unchanged: 0/0
 14495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14496 ;;      Params:         0       0       0       0       0       0       0       0
 14497 ;;      Locals:         0       0       0       0       0       0       0       0
 14498 ;;      Temps:          0       0       0       0       0       0       0       0
 14499 ;;      Totals:         0       0       0       0       0       0       0       0
 14500 ;;Total ram usage:        0 bytes
 14501 ;; Hardware stack levels used:    1
 14502 ;; This function calls:
 14503 ;;		Nothing
 14504 ;; This function is called by:
 14505 ;;		_TMR2_Interrupt
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           
 14510                           ;psect for function i1_TMR2_StopTimer
 14511  0002                     i1_TMR2_StopTimer:
 14512                           
 14513                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
 14514                           
 14515                           ;incstack = 0
 14516                           ; Regs used in i1_TMR2_StopTimer: []
 14517  0002  111C               	bcf	28,2	;volatile
 14518  0003  0008               	return
 14519  0004                     __end_ofi1_TMR2_StopTimer:
 14520                           
 14521                           	psect	text89
 14522  1534                     __ptext89:	
 14523 ;; *************** function _VrsCheck *****************
 14524 ;; Defined at:
 14525 ;;		line 2724 in file "MotorDrive.c"
 14526 ;; Parameters:    Size  Location     Type
 14527 ;;  motor_no        1    wreg     unsigned char 
 14528 ;; Auto vars:     Size  Location     Type
 14529 ;;  motor_no        1    1[COMMON] unsigned char 
 14530 ;; Return value:  Size  Location     Type
 14531 ;;                  1    wreg      void 
 14532 ;; Registers used:
 14533 ;;		wreg, status,2, status,0
 14534 ;; Tracked objects:
 14535 ;;		On entry : 1F/1
 14536 ;;		On exit  : 1F/0
 14537 ;;		Unchanged: 0/0
 14538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14539 ;;      Params:         0       0       0       0       0       0       0       0
 14540 ;;      Locals:         1       0       0       0       0       0       0       0
 14541 ;;      Temps:          1       0       0       0       0       0       0       0
 14542 ;;      Totals:         2       0       0       0       0       0       0       0
 14543 ;;Total ram usage:        2 bytes
 14544 ;; Hardware stack levels used:    1
 14545 ;; This function calls:
 14546 ;;		Nothing
 14547 ;; This function is called by:
 14548 ;;		_TMR2_Interrupt
 14549 ;; This function uses a non-reentrant model
 14550 ;;
 14551                           
 14552                           
 14553                           ;psect for function _VrsCheck
 14554  1534                     _VrsCheck:
 14555                           
 14556                           ;incstack = 0
 14557                           ; Regs used in _VrsCheck: [wreg+status,2+status,0]
 14558                           ;VrsCheck@motor_no stored from wreg
 14559  1534  00F6               	movwf	VrsCheck@motor_no
 14560                           
 14561                           ;MotorDrive.c: 2724: void VrsCheck(UB motor_no);MotorDrive.c: 2725: {;MotorDrive.c: 2726
      +                          :     if (motor_no == 0) {
 14562  1535  0876               	movf	VrsCheck@motor_no,w
 14563  1536  1D03               	btfss	3,2
 14564  1537  2D43               	goto	i1l1049
 14565                           
 14566                           ;MotorDrive.c: 2727:         if (PIR2bits.C1IF) {
 14567  1538  0020               	movlb	0	; select bank0
 14568  1539  1E92               	btfss	18,5	;volatile
 14569  153A  2D40               	goto	i1l4332
 14570                           
 14571                           ;MotorDrive.c: 2728:             vrsCountValue[ 0 ]++;
 14572  153B  3001               	movlw	1
 14573  153C  00F5               	movwf	??_VrsCheck
 14574  153D  0875               	movf	??_VrsCheck,w
 14575  153E  0021               	movlb	1	; select bank1
 14576  153F  07BC               	addwf	_vrsCountValue^(0+128),f
 14577  1540                     i1l4332:
 14578                           
 14579                           ;MotorDrive.c: 2731:         PIR2bits.C1IF = 0;
 14580  1540  0020               	movlb	0	; select bank0
 14581  1541  1292               	bcf	18,5	;volatile
 14582                           
 14583                           ;MotorDrive.c: 2732:     } else {
 14584  1542  0008               	return
 14585  1543                     i1l1049:
 14586                           
 14587                           ;MotorDrive.c: 2733:         if (PIR2bits.C2IF) {
 14588  1543  0020               	movlb	0	; select bank0
 14589  1544  1F12               	btfss	18,6	;volatile
 14590  1545  2D4B               	goto	i1l4336
 14591                           
 14592                           ;MotorDrive.c: 2734:             vrsCountValue [ 1 ]++;
 14593  1546  3001               	movlw	1
 14594  1547  00F5               	movwf	??_VrsCheck
 14595  1548  0875               	movf	??_VrsCheck,w
 14596  1549  0021               	movlb	1	; select bank1
 14597  154A  07BD               	addwf	(_vrsCountValue^(0+128)+1),f
 14598  154B                     i1l4336:
 14599                           
 14600                           ;MotorDrive.c: 2736:         PIR2bits.C2IF = 0;
 14601  154B  0020               	movlb	0	; select bank0
 14602  154C  1312               	bcf	18,6	;volatile
 14603  154D  0008               	return
 14604  154E                     __end_of_VrsCheck:
 14605                           
 14606                           	psect	text90
 14607  14B8                     __ptext90:	
 14608 ;; *************** function _SetDataTRISxWork_M1_SPK_POL1_SHORT *****************
 14609 ;; Defined at:
 14610 ;;		line 3593 in file "MotorDrive.c"
 14611 ;; Parameters:    Size  Location     Type
 14612 ;;		None
 14613 ;; Auto vars:     Size  Location     Type
 14614 ;;		None
 14615 ;; Return value:  Size  Location     Type
 14616 ;;                  1    wreg      void 
 14617 ;; Registers used:
 14618 ;;		wreg, status,2, status,0
 14619 ;; Tracked objects:
 14620 ;;		On entry : 1F/1
 14621 ;;		On exit  : 1F/1
 14622 ;;		Unchanged: 0/0
 14623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14624 ;;      Params:         0       0       0       0       0       0       0       0
 14625 ;;      Locals:         0       0       0       0       0       0       0       0
 14626 ;;      Temps:          0       0       0       0       0       0       0       0
 14627 ;;      Totals:         0       0       0       0       0       0       0       0
 14628 ;;Total ram usage:        0 bytes
 14629 ;; Hardware stack levels used:    1
 14630 ;; This function calls:
 14631 ;;		Nothing
 14632 ;; This function is called by:
 14633 ;;		_SetDataTRISxWork_M1_SPK_POL1_OPEN
 14634 ;;		_TMR2_Interrupt
 14635 ;; This function uses a non-reentrant model
 14636 ;;
 14637                           
 14638                           
 14639                           ;psect for function _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14640  14B8                     _SetDataTRISxWork_M1_SPK_POL1_SHORT:
 14641                           
 14642                           ;MotorDrive.c: 3595:     dataTRISAWork_M1 = 0x00;
 14643                           
 14644                           ;incstack = 0
 14645                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL1_SHORT: [wreg+status,2+status,0]
 14646  14B8  0020               	movlb	0	; select bank0
 14647  14B9  01DB               	clrf	_dataTRISAWork_M1
 14648                           
 14649                           ;MotorDrive.c: 3596:     dataTRISBWork_M1 = 0x00;
 14650  14BA  01DA               	clrf	_dataTRISBWork_M1
 14651                           
 14652                           ;MotorDrive.c: 3597:     dataTRISCWork_M1 = 0x00;
 14653  14BB  01D9               	clrf	_dataTRISCWork_M1
 14654                           
 14655                           ;MotorDrive.c: 3599:     if (m1PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 14656  14BC  3016               	movlw	22
 14657  14BD  0672               	xorwf	_m1PulseOutStep,w
 14658  14BE  1D03               	btfss	3,2
 14659  14BF  2CC7               	goto	i1l4968
 14660                           
 14661                           ;MotorDrive.c: 3600:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P1;
 14662  14C0  30F5               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14663  14C1  0021               	movlb	1	; select bank1
 14664  14C2  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14665  14C3  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14666  14C4  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14667                           
 14668                           ;MotorDrive.c: 3601:         reqComparatorOffBit |= 0x02;
 14669  14C5  14D3               	bsf	_reqComparatorOffBit^(0+128),1
 14670                           
 14671                           ;MotorDrive.c: 3602:     } else {
 14672  14C6  2CCC               	goto	i1l4970
 14673  14C7                     i1l4968:
 14674                           
 14675                           ;MotorDrive.c: 3603:         m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_OPEN;
 14676  14C7  307C               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14677  14C8  0021               	movlb	1	; select bank1
 14678  14C9  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14679  14CA  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14680  14CB  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14681  14CC                     i1l4970:
 14682                           
 14683                           ;MotorDrive.c: 3606:     OutTrisRequestFlug = 1;
 14684  14CC  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14685  14CD  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14686                           
 14687                           ;MotorDrive.c: 3607:     reqVrsCheckBit |= 0x02;
 14688  14CE  14D2               	bsf	_reqVrsCheckBit^(0+128),1
 14689  14CF  0008               	return
 14690  14D0                     __end_of_SetDataTRISxWork_M1_SPK_POL1_SHORT:
 14691                           
 14692                           	psect	text91
 14693  127C                     __ptext91:	
 14694 ;; *************** function _SetDataTRISxWork_M1_SPK_POL1_OPEN *****************
 14695 ;; Defined at:
 14696 ;;		line 3581 in file "MotorDrive.c"
 14697 ;; Parameters:    Size  Location     Type
 14698 ;;		None
 14699 ;; Auto vars:     Size  Location     Type
 14700 ;;		None
 14701 ;; Return value:  Size  Location     Type
 14702 ;;                  1    wreg      void 
 14703 ;; Registers used:
 14704 ;;		wreg, status,2
 14705 ;; Tracked objects:
 14706 ;;		On entry : 1F/1
 14707 ;;		On exit  : 1F/1
 14708 ;;		Unchanged: 0/0
 14709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14710 ;;      Params:         0       0       0       0       0       0       0       0
 14711 ;;      Locals:         0       0       0       0       0       0       0       0
 14712 ;;      Temps:          1       0       0       0       0       0       0       0
 14713 ;;      Totals:         1       0       0       0       0       0       0       0
 14714 ;;Total ram usage:        1 bytes
 14715 ;; Hardware stack levels used:    1
 14716 ;; This function calls:
 14717 ;;		Nothing
 14718 ;; This function is called by:
 14719 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 14720 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 14721 ;;		_TMR2_Interrupt
 14722 ;; This function uses a non-reentrant model
 14723 ;;
 14724                           
 14725                           
 14726                           ;psect for function _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14727  127C                     _SetDataTRISxWork_M1_SPK_POL1_OPEN:
 14728                           
 14729                           ;MotorDrive.c: 3583:     dataTRISAWork_M1 = 0x00;
 14730                           
 14731                           ;incstack = 0
 14732                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL1_OPEN: [wreg+status,2]
 14733  127C  0020               	movlb	0	; select bank0
 14734  127D  01DB               	clrf	_dataTRISAWork_M1
 14735                           
 14736                           ;MotorDrive.c: 3584:     dataTRISBWork_M1 = 0x00;
 14737  127E  01DA               	clrf	_dataTRISBWork_M1
 14738                           
 14739                           ;MotorDrive.c: 3585:     dataTRISCWork_M1 = 0x04;
 14740  127F  3004               	movlw	4
 14741  1280  00F5               	movwf	??_SetDataTRISxWork_M1_SPK_POL1_OPEN
 14742  1281  0875               	movf	??_SetDataTRISxWork_M1_SPK_POL1_OPEN,w
 14743  1282  00D9               	movwf	_dataTRISCWork_M1
 14744                           
 14745                           ;MotorDrive.c: 3587:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_SHORT;
 14746  1283  30B8               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14747  1284  0021               	movlb	1	; select bank1
 14748  1285  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14749  1286  3014               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14750  1287  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14751                           
 14752                           ;MotorDrive.c: 3588:     OutTrisRequestFlug = 1;
 14753  1288  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14754  1289  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14755  128A  0008               	return
 14756  128B                     __end_of_SetDataTRISxWork_M1_SPK_POL1_OPEN:
 14757                           
 14758                           	psect	text92
 14759  1334                     __ptext92:	
 14760 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF *****************
 14761 ;; Defined at:
 14762 ;;		line 3562 in file "MotorDrive.c"
 14763 ;; Parameters:    Size  Location     Type
 14764 ;;		None
 14765 ;; Auto vars:     Size  Location     Type
 14766 ;;		None
 14767 ;; Return value:  Size  Location     Type
 14768 ;;                  1    wreg      void 
 14769 ;; Registers used:
 14770 ;;		wreg, status,2
 14771 ;; Tracked objects:
 14772 ;;		On entry : 1F/1
 14773 ;;		On exit  : 1F/1
 14774 ;;		Unchanged: 0/0
 14775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14776 ;;      Params:         0       0       0       0       0       0       0       0
 14777 ;;      Locals:         0       0       0       0       0       0       0       0
 14778 ;;      Temps:          0       0       0       0       0       0       0       0
 14779 ;;      Totals:         0       0       0       0       0       0       0       0
 14780 ;;Total ram usage:        0 bytes
 14781 ;; Hardware stack levels used:    1
 14782 ;; This function calls:
 14783 ;;		Nothing
 14784 ;; This function is called by:
 14785 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 14786 ;;		_TMR2_Interrupt
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           
 14791                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 14792  1334                     _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:
 14793                           
 14794                           ;MotorDrive.c: 3564:     pulseOutLATAWork_M1 = 0;
 14795                           
 14796                           ;incstack = 0
 14797                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF: [wreg+status,2]
 14798  1334  0020               	movlb	0	; select bank0
 14799  1335  01E4               	clrf	_pulseOutLATAWork_M1
 14800                           
 14801                           ;MotorDrive.c: 3565:     pulseOutLATBWork_M1 = 0;
 14802  1336  01E3               	clrf	_pulseOutLATBWork_M1
 14803                           
 14804                           ;MotorDrive.c: 3566:     pulseOutLATCWork_M1 = 0;
 14805  1337  01E2               	clrf	_pulseOutLATCWork_M1
 14806                           
 14807                           ;MotorDrive.c: 3569:     dataTRISAWork_M1 = 0x00;
 14808  1338  01DB               	clrf	_dataTRISAWork_M1
 14809                           
 14810                           ;MotorDrive.c: 3570:     dataTRISBWork_M1 = 0x00;
 14811  1339  01DA               	clrf	_dataTRISBWork_M1
 14812                           
 14813                           ;MotorDrive.c: 3571:     dataTRISCWork_M1 = 0x00;
 14814  133A  01D9               	clrf	_dataTRISCWork_M1
 14815                           
 14816                           ;MotorDrive.c: 3573:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_OPEN;
 14817  133B  307C               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14818  133C  0021               	movlb	1	; select bank1
 14819  133D  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14820  133E  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14821  133F  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14822                           
 14823                           ;MotorDrive.c: 3574:     OutRequestFlug = 1;
 14824  1340  01D6               	clrf	_OutRequestFlug^(0+128)
 14825  1341  0AD6               	incf	_OutRequestFlug^(0+128),f
 14826                           
 14827                           ;MotorDrive.c: 3575:     OutTrisRequestFlug = 1;
 14828  1342  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14829  1343  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14830                           
 14831                           ;MotorDrive.c: 3576:     reqComparatorOnBit |= 0x02;
 14832  1344  14D4               	bsf	_reqComparatorOnBit^(0+128),1
 14833  1345  0008               	return
 14834  1346                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:
 14835                           
 14836                           	psect	text93
 14837  14A0                     __ptext93:	
 14838 ;; *************** function _SetDataTRISxWork_M1_SPK_POL0_SHORT *****************
 14839 ;; Defined at:
 14840 ;;		line 3530 in file "MotorDrive.c"
 14841 ;; Parameters:    Size  Location     Type
 14842 ;;		None
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;		None
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  1    wreg      void 
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : 1F/1
 14851 ;;		On exit  : 1F/1
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14854 ;;      Params:         0       0       0       0       0       0       0       0
 14855 ;;      Locals:         0       0       0       0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0       0
 14857 ;;      Totals:         0       0       0       0       0       0       0       0
 14858 ;;Total ram usage:        0 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; This function calls:
 14861 ;;		Nothing
 14862 ;; This function is called by:
 14863 ;;		_SetDataTRISxWork_M1_SPK_POL0_OPEN
 14864 ;;		_TMR2_Interrupt
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           
 14869                           ;psect for function _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14870  14A0                     _SetDataTRISxWork_M1_SPK_POL0_SHORT:
 14871                           
 14872                           ;MotorDrive.c: 3532:     dataTRISAWork_M1 = 0x00;
 14873                           
 14874                           ;incstack = 0
 14875                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL0_SHORT: [wreg+status,2+status,0]
 14876  14A0  0020               	movlb	0	; select bank0
 14877  14A1  01DB               	clrf	_dataTRISAWork_M1
 14878                           
 14879                           ;MotorDrive.c: 3533:     dataTRISBWork_M1 = 0x00;
 14880  14A2  01DA               	clrf	_dataTRISBWork_M1
 14881                           
 14882                           ;MotorDrive.c: 3534:     dataTRISCWork_M1 = 0x00;
 14883  14A3  01D9               	clrf	_dataTRISCWork_M1
 14884                           
 14885                           ;MotorDrive.c: 3536:     if (m1PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 14886  14A4  3016               	movlw	22
 14887  14A5  0672               	xorwf	_m1PulseOutStep,w
 14888  14A6  1D03               	btfss	3,2
 14889  14A7  2CAF               	goto	i1l4928
 14890                           
 14891                           ;MotorDrive.c: 3537:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P1;
 14892  14A8  3004               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14893  14A9  0021               	movlb	1	; select bank1
 14894  14AA  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14895  14AB  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14896  14AC  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14897                           
 14898                           ;MotorDrive.c: 3538:         reqComparatorOffBit |= 0x02;
 14899  14AD  14D3               	bsf	_reqComparatorOffBit^(0+128),1
 14900                           
 14901                           ;MotorDrive.c: 3539:     } else {
 14902  14AE  2CB4               	goto	i1l4930
 14903  14AF                     i1l4928:
 14904                           
 14905                           ;MotorDrive.c: 3540:         m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_OPEN;
 14906  14AF  306D               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14907  14B0  0021               	movlb	1	; select bank1
 14908  14B1  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14909  14B2  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14910  14B3  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14911  14B4                     i1l4930:
 14912                           
 14913                           ;MotorDrive.c: 3543:     OutTrisRequestFlug = 1;
 14914  14B4  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14915  14B5  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14916                           
 14917                           ;MotorDrive.c: 3544:     reqVrsCheckBit |= 0x02;
 14918  14B6  14D2               	bsf	_reqVrsCheckBit^(0+128),1
 14919  14B7  0008               	return
 14920  14B8                     __end_of_SetDataTRISxWork_M1_SPK_POL0_SHORT:
 14921                           
 14922                           	psect	text94
 14923  126D                     __ptext94:	
 14924 ;; *************** function _SetDataTRISxWork_M1_SPK_POL0_OPEN *****************
 14925 ;; Defined at:
 14926 ;;		line 3518 in file "MotorDrive.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;		None
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;		None
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  1    wreg      void 
 14933 ;; Registers used:
 14934 ;;		wreg, status,2
 14935 ;; Tracked objects:
 14936 ;;		On entry : 1F/1
 14937 ;;		On exit  : 1F/1
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14940 ;;      Params:         0       0       0       0       0       0       0       0
 14941 ;;      Locals:         0       0       0       0       0       0       0       0
 14942 ;;      Temps:          1       0       0       0       0       0       0       0
 14943 ;;      Totals:         1       0       0       0       0       0       0       0
 14944 ;;Total ram usage:        1 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; This function calls:
 14947 ;;		Nothing
 14948 ;; This function is called by:
 14949 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 14950 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 14951 ;;		_TMR2_Interrupt
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           
 14956                           ;psect for function _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14957  126D                     _SetDataTRISxWork_M1_SPK_POL0_OPEN:
 14958                           
 14959                           ;MotorDrive.c: 3520:     dataTRISAWork_M1 = 0x00;
 14960                           
 14961                           ;incstack = 0
 14962                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL0_OPEN: [wreg+status,2]
 14963  126D  0020               	movlb	0	; select bank0
 14964  126E  01DB               	clrf	_dataTRISAWork_M1
 14965                           
 14966                           ;MotorDrive.c: 3521:     dataTRISBWork_M1 = 0x00;
 14967  126F  01DA               	clrf	_dataTRISBWork_M1
 14968                           
 14969                           ;MotorDrive.c: 3522:     dataTRISCWork_M1 = 0x08;
 14970  1270  3008               	movlw	8
 14971  1271  00F5               	movwf	??_SetDataTRISxWork_M1_SPK_POL0_OPEN
 14972  1272  0875               	movf	??_SetDataTRISxWork_M1_SPK_POL0_OPEN,w
 14973  1273  00D9               	movwf	_dataTRISCWork_M1
 14974                           
 14975                           ;MotorDrive.c: 3524:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_SHORT;
 14976  1274  30A0               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14977  1275  0021               	movlb	1	; select bank1
 14978  1276  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14979  1277  3014               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14980  1278  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14981                           
 14982                           ;MotorDrive.c: 3525:     OutTrisRequestFlug = 1;
 14983  1279  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14984  127A  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14985  127B  0008               	return
 14986  127C                     __end_of_SetDataTRISxWork_M1_SPK_POL0_OPEN:
 14987                           
 14988                           	psect	text95
 14989  1322                     __ptext95:	
 14990 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF *****************
 14991 ;; Defined at:
 14992 ;;		line 3499 in file "MotorDrive.c"
 14993 ;; Parameters:    Size  Location     Type
 14994 ;;		None
 14995 ;; Auto vars:     Size  Location     Type
 14996 ;;		None
 14997 ;; Return value:  Size  Location     Type
 14998 ;;                  1    wreg      void 
 14999 ;; Registers used:
 15000 ;;		wreg, status,2
 15001 ;; Tracked objects:
 15002 ;;		On entry : 1F/1
 15003 ;;		On exit  : 1F/1
 15004 ;;		Unchanged: 0/0
 15005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15006 ;;      Params:         0       0       0       0       0       0       0       0
 15007 ;;      Locals:         0       0       0       0       0       0       0       0
 15008 ;;      Temps:          0       0       0       0       0       0       0       0
 15009 ;;      Totals:         0       0       0       0       0       0       0       0
 15010 ;;Total ram usage:        0 bytes
 15011 ;; Hardware stack levels used:    1
 15012 ;; This function calls:
 15013 ;;		Nothing
 15014 ;; This function is called by:
 15015 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15016 ;;		_TMR2_Interrupt
 15017 ;; This function uses a non-reentrant model
 15018 ;;
 15019                           
 15020                           
 15021                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15022  1322                     _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:
 15023                           
 15024                           ;MotorDrive.c: 3501:     pulseOutLATAWork_M1 = 0;
 15025                           
 15026                           ;incstack = 0
 15027                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF: [wreg+status,2]
 15028  1322  0020               	movlb	0	; select bank0
 15029  1323  01E4               	clrf	_pulseOutLATAWork_M1
 15030                           
 15031                           ;MotorDrive.c: 3502:     pulseOutLATBWork_M1 = 0;
 15032  1324  01E3               	clrf	_pulseOutLATBWork_M1
 15033                           
 15034                           ;MotorDrive.c: 3503:     pulseOutLATCWork_M1 = 0;
 15035  1325  01E2               	clrf	_pulseOutLATCWork_M1
 15036                           
 15037                           ;MotorDrive.c: 3506:     dataTRISAWork_M1 = 0x00;
 15038  1326  01DB               	clrf	_dataTRISAWork_M1
 15039                           
 15040                           ;MotorDrive.c: 3507:     dataTRISBWork_M1 = 0x00;
 15041  1327  01DA               	clrf	_dataTRISBWork_M1
 15042                           
 15043                           ;MotorDrive.c: 3508:     dataTRISCWork_M1 = 0x00;
 15044  1328  01D9               	clrf	_dataTRISCWork_M1
 15045                           
 15046                           ;MotorDrive.c: 3510:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_OPEN;
 15047  1329  306D               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_OPEN
 15048  132A  0021               	movlb	1	; select bank1
 15049  132B  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15050  132C  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_OPEN
 15051  132D  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15052                           
 15053                           ;MotorDrive.c: 3511:     OutRequestFlug = 1;
 15054  132E  01D6               	clrf	_OutRequestFlug^(0+128)
 15055  132F  0AD6               	incf	_OutRequestFlug^(0+128),f
 15056                           
 15057                           ;MotorDrive.c: 3512:     OutTrisRequestFlug = 1;
 15058  1330  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15059  1331  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15060                           
 15061                           ;MotorDrive.c: 3513:     reqComparatorOnBit |= 0x02;
 15062  1332  14D4               	bsf	_reqComparatorOnBit^(0+128),1
 15063  1333  0008               	return
 15064  1334                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:
 15065                           
 15066                           	psect	text96
 15067  12BB                     __ptext96:	
 15068 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_OFF *****************
 15069 ;; Defined at:
 15070 ;;		line 3343 in file "MotorDrive.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;		None
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;		None
 15075 ;; Return value:  Size  Location     Type
 15076 ;;                  1    wreg      void 
 15077 ;; Registers used:
 15078 ;;		wreg, status,2, status,0
 15079 ;; Tracked objects:
 15080 ;;		On entry : 1F/1
 15081 ;;		On exit  : 1F/1
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15084 ;;      Params:         0       0       0       0       0       0       0       0
 15085 ;;      Locals:         0       0       0       0       0       0       0       0
 15086 ;;      Temps:          1       0       0       0       0       0       0       0
 15087 ;;      Totals:         1       0       0       0       0       0       0       0
 15088 ;;Total ram usage:        1 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; This function calls:
 15091 ;;		Nothing
 15092 ;; This function is called by:
 15093 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P2
 15094 ;;		_TMR2_Interrupt
 15095 ;; This function uses a non-reentrant model
 15096 ;;
 15097                           
 15098                           
 15099                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_OFF
 15100  12BB                     _SetPulseOutLATxWork_M1_REV_POL1_OFF:
 15101                           
 15102                           ;MotorDrive.c: 3345:     pulseOutLATAWork_M1 = 0;
 15103                           
 15104                           ;incstack = 0
 15105                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_OFF: [wreg+status,2+status,0]
 15106  12BB  0020               	movlb	0	; select bank0
 15107  12BC  01E4               	clrf	_pulseOutLATAWork_M1
 15108                           
 15109                           ;MotorDrive.c: 3346:     pulseOutLATBWork_M1 = 0;
 15110  12BD  01E3               	clrf	_pulseOutLATBWork_M1
 15111                           
 15112                           ;MotorDrive.c: 3347:     pulseOutLATCWork_M1 = 0;
 15113  12BE  01E2               	clrf	_pulseOutLATCWork_M1
 15114                           
 15115                           ;MotorDrive.c: 3349:     polarityBit ^= 0x02;
 15116  12BF  3002               	movlw	2
 15117  12C0  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_OFF
 15118  12C1  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_OFF,w
 15119  12C2  06F1               	xorwf	_polarityBit,f
 15120                           
 15121                           ;MotorDrive.c: 3351:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_P1;
 15122  12C3  3022               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P1
 15123  12C4  0021               	movlb	1	; select bank1
 15124  12C5  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15125  12C6  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P1
 15126  12C7  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15127                           
 15128                           ;MotorDrive.c: 3352:     OutRequestFlug = 1;
 15129  12C8  01D6               	clrf	_OutRequestFlug^(0+128)
 15130  12C9  0AD6               	incf	_OutRequestFlug^(0+128),f
 15131  12CA  0008               	return
 15132  12CB                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_OFF:
 15133                           
 15134                           	psect	text97
 15135  125E                     __ptext97:	
 15136 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_P2 *****************
 15137 ;; Defined at:
 15138 ;;		line 3331 in file "MotorDrive.c"
 15139 ;; Parameters:    Size  Location     Type
 15140 ;;		None
 15141 ;; Auto vars:     Size  Location     Type
 15142 ;;		None
 15143 ;; Return value:  Size  Location     Type
 15144 ;;                  1    wreg      void 
 15145 ;; Registers used:
 15146 ;;		wreg, status,2
 15147 ;; Tracked objects:
 15148 ;;		On entry : 1F/1
 15149 ;;		On exit  : 1F/1
 15150 ;;		Unchanged: 0/0
 15151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15152 ;;      Params:         0       0       0       0       0       0       0       0
 15153 ;;      Locals:         0       0       0       0       0       0       0       0
 15154 ;;      Temps:          1       0       0       0       0       0       0       0
 15155 ;;      Totals:         1       0       0       0       0       0       0       0
 15156 ;;Total ram usage:        1 bytes
 15157 ;; Hardware stack levels used:    1
 15158 ;; This function calls:
 15159 ;;		Nothing
 15160 ;; This function is called by:
 15161 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P1
 15162 ;;		_TMR2_Interrupt
 15163 ;; This function uses a non-reentrant model
 15164 ;;
 15165                           
 15166                           
 15167                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_P2
 15168  125E                     _SetPulseOutLATxWork_M1_REV_POL1_P2:
 15169                           
 15170                           ;MotorDrive.c: 3333:     pulseOutLATAWork_M1 = 0x00;
 15171                           
 15172                           ;incstack = 0
 15173                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_P2: [wreg+status,2]
 15174  125E  0020               	movlb	0	; select bank0
 15175  125F  01E4               	clrf	_pulseOutLATAWork_M1
 15176                           
 15177                           ;MotorDrive.c: 3334:     pulseOutLATBWork_M1 = 0x80;
 15178  1260  3080               	movlw	128
 15179  1261  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_P2
 15180  1262  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_P2,w
 15181  1263  00E3               	movwf	_pulseOutLATBWork_M1
 15182                           
 15183                           ;MotorDrive.c: 3335:     pulseOutLATCWork_M1 = 0x00;
 15184  1264  01E2               	clrf	_pulseOutLATCWork_M1
 15185                           
 15186                           ;MotorDrive.c: 3337:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_OFF;
 15187  1265  30BB               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_OFF
 15188  1266  0021               	movlb	1	; select bank1
 15189  1267  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15190  1268  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_OFF
 15191  1269  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15192                           
 15193                           ;MotorDrive.c: 3338:     OutRequestFlug = 1;
 15194  126A  01D6               	clrf	_OutRequestFlug^(0+128)
 15195  126B  0AD6               	incf	_OutRequestFlug^(0+128),f
 15196  126C  0008               	return
 15197  126D                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_P2:
 15198                           
 15199                           	psect	text98
 15200  12AB                     __ptext98:	
 15201 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_OFF *****************
 15202 ;; Defined at:
 15203 ;;		line 3304 in file "MotorDrive.c"
 15204 ;; Parameters:    Size  Location     Type
 15205 ;;		None
 15206 ;; Auto vars:     Size  Location     Type
 15207 ;;		None
 15208 ;; Return value:  Size  Location     Type
 15209 ;;                  1    wreg      void 
 15210 ;; Registers used:
 15211 ;;		wreg, status,2, status,0
 15212 ;; Tracked objects:
 15213 ;;		On entry : 1F/1
 15214 ;;		On exit  : 1F/1
 15215 ;;		Unchanged: 0/0
 15216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15217 ;;      Params:         0       0       0       0       0       0       0       0
 15218 ;;      Locals:         0       0       0       0       0       0       0       0
 15219 ;;      Temps:          1       0       0       0       0       0       0       0
 15220 ;;      Totals:         1       0       0       0       0       0       0       0
 15221 ;;Total ram usage:        1 bytes
 15222 ;; Hardware stack levels used:    1
 15223 ;; This function calls:
 15224 ;;		Nothing
 15225 ;; This function is called by:
 15226 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P2
 15227 ;;		_TMR2_Interrupt
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           
 15232                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_OFF
 15233  12AB                     _SetPulseOutLATxWork_M1_REV_POL0_OFF:
 15234                           
 15235                           ;MotorDrive.c: 3306:     pulseOutLATAWork_M1 = 0;
 15236                           
 15237                           ;incstack = 0
 15238                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_OFF: [wreg+status,2+status,0]
 15239  12AB  0020               	movlb	0	; select bank0
 15240  12AC  01E4               	clrf	_pulseOutLATAWork_M1
 15241                           
 15242                           ;MotorDrive.c: 3307:     pulseOutLATBWork_M1 = 0;
 15243  12AD  01E3               	clrf	_pulseOutLATBWork_M1
 15244                           
 15245                           ;MotorDrive.c: 3308:     pulseOutLATCWork_M1 = 0;
 15246  12AE  01E2               	clrf	_pulseOutLATCWork_M1
 15247                           
 15248                           ;MotorDrive.c: 3310:     polarityBit ^= 0x02;
 15249  12AF  3002               	movlw	2
 15250  12B0  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_OFF
 15251  12B1  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_OFF,w
 15252  12B2  06F1               	xorwf	_polarityBit,f
 15253                           
 15254                           ;MotorDrive.c: 3312:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_P1;
 15255  12B3  3013               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P1
 15256  12B4  0021               	movlb	1	; select bank1
 15257  12B5  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15258  12B6  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P1
 15259  12B7  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15260                           
 15261                           ;MotorDrive.c: 3313:     OutRequestFlug = 1;
 15262  12B8  01D6               	clrf	_OutRequestFlug^(0+128)
 15263  12B9  0AD6               	incf	_OutRequestFlug^(0+128),f
 15264  12BA  0008               	return
 15265  12BB                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_OFF:
 15266                           
 15267                           	psect	text99
 15268  124F                     __ptext99:	
 15269 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_P2 *****************
 15270 ;; Defined at:
 15271 ;;		line 3292 in file "MotorDrive.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;		None
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  1    wreg      void 
 15278 ;; Registers used:
 15279 ;;		wreg, status,2
 15280 ;; Tracked objects:
 15281 ;;		On entry : 1F/1
 15282 ;;		On exit  : 1F/1
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15285 ;;      Params:         0       0       0       0       0       0       0       0
 15286 ;;      Locals:         0       0       0       0       0       0       0       0
 15287 ;;      Temps:          1       0       0       0       0       0       0       0
 15288 ;;      Totals:         1       0       0       0       0       0       0       0
 15289 ;;Total ram usage:        1 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; This function calls:
 15292 ;;		Nothing
 15293 ;; This function is called by:
 15294 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P1
 15295 ;;		_TMR2_Interrupt
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           
 15300                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_P2
 15301  124F                     _SetPulseOutLATxWork_M1_REV_POL0_P2:
 15302                           
 15303                           ;MotorDrive.c: 3294:     pulseOutLATAWork_M1 = 0x00;
 15304                           
 15305                           ;incstack = 0
 15306                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_P2: [wreg+status,2]
 15307  124F  0020               	movlb	0	; select bank0
 15308  1250  01E4               	clrf	_pulseOutLATAWork_M1
 15309                           
 15310                           ;MotorDrive.c: 3295:     pulseOutLATBWork_M1 = 0x20;
 15311  1251  3020               	movlw	32
 15312  1252  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_P2
 15313  1253  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_P2,w
 15314  1254  00E3               	movwf	_pulseOutLATBWork_M1
 15315                           
 15316                           ;MotorDrive.c: 3296:     pulseOutLATCWork_M1 = 0x00;
 15317  1255  01E2               	clrf	_pulseOutLATCWork_M1
 15318                           
 15319                           ;MotorDrive.c: 3298:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_OFF;
 15320  1256  30AB               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_OFF
 15321  1257  0021               	movlb	1	; select bank1
 15322  1258  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15323  1259  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_OFF
 15324  125A  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15325                           
 15326                           ;MotorDrive.c: 3299:     OutRequestFlug = 1;
 15327  125B  01D6               	clrf	_OutRequestFlug^(0+128)
 15328  125C  0AD6               	incf	_OutRequestFlug^(0+128),f
 15329  125D  0008               	return
 15330  125E                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_P2:
 15331                           
 15332                           	psect	text100
 15333  1459                     __ptext100:	
 15334 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_OFF *****************
 15335 ;; Defined at:
 15336 ;;		line 3259 in file "MotorDrive.c"
 15337 ;; Parameters:    Size  Location     Type
 15338 ;;		None
 15339 ;; Auto vars:     Size  Location     Type
 15340 ;;		None
 15341 ;; Return value:  Size  Location     Type
 15342 ;;                  1    wreg      void 
 15343 ;; Registers used:
 15344 ;;		wreg, status,2, status,0
 15345 ;; Tracked objects:
 15346 ;;		On entry : 1F/1
 15347 ;;		On exit  : 1F/1
 15348 ;;		Unchanged: 0/0
 15349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15350 ;;      Params:         0       0       0       0       0       0       0       0
 15351 ;;      Locals:         0       0       0       0       0       0       0       0
 15352 ;;      Temps:          1       0       0       0       0       0       0       0
 15353 ;;      Totals:         1       0       0       0       0       0       0       0
 15354 ;;Total ram usage:        1 bytes
 15355 ;; Hardware stack levels used:    1
 15356 ;; This function calls:
 15357 ;;		Nothing
 15358 ;; This function is called by:
 15359 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P2
 15360 ;;		_TMR2_Interrupt
 15361 ;; This function uses a non-reentrant model
 15362 ;;
 15363                           
 15364                           
 15365                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15366  1459                     _SetPulseOutLATxWork_M1_FWD_POL1_OFF:
 15367                           
 15368                           ;MotorDrive.c: 3261:     pulseOutLATAWork_M1 = 0;
 15369                           
 15370                           ;incstack = 0
 15371                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_OFF: [wreg+status,2+status,0]
 15372  1459  0020               	movlb	0	; select bank0
 15373  145A  01E4               	clrf	_pulseOutLATAWork_M1
 15374                           
 15375                           ;MotorDrive.c: 3262:     pulseOutLATBWork_M1 = 0;
 15376  145B  01E3               	clrf	_pulseOutLATBWork_M1
 15377                           
 15378                           ;MotorDrive.c: 3263:     pulseOutLATCWork_M1 = 0;
 15379  145C  01E2               	clrf	_pulseOutLATCWork_M1
 15380                           
 15381                           ;MotorDrive.c: 3265:     polarityBit ^= 0x02;
 15382  145D  3002               	movlw	2
 15383  145E  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15384  145F  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_OFF,w
 15385  1460  06F1               	xorwf	_polarityBit,f
 15386                           
 15387                           ;MotorDrive.c: 3267:     if (addShakePulseBit & 0x02) {
 15388  1461  1CF0               	btfss	_addShakePulseBit,1
 15389  1462  2C68               	goto	i1l4762
 15390                           
 15391                           ;MotorDrive.c: 3268:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL0_P0
      +                          ;
 15392  1463  30E6               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15393  1464  0021               	movlb	1	; select bank1
 15394  1465  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15395  1466  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15396  1467  2C6C               	goto	L21
 15397  1468                     i1l4762:	
 15398                           ;MotorDrive.c: 3269:     } else {
 15399                           
 15400                           
 15401                           ;MotorDrive.c: 3270:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P1;
 15402  1468  3004               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15403  1469  0021               	movlb	1	; select bank1
 15404  146A  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15405  146B  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15406  146C                     L21:
 15407  146C  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15408                           
 15409                           ;MotorDrive.c: 3273:     OutRequestFlug = 1;
 15410  146D  01D6               	clrf	_OutRequestFlug^(0+128)
 15411  146E  0AD6               	incf	_OutRequestFlug^(0+128),f
 15412  146F  0008               	return
 15413  1470                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF:
 15414                           
 15415                           	psect	text101
 15416  1240                     __ptext101:	
 15417 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_P2 *****************
 15418 ;; Defined at:
 15419 ;;		line 3247 in file "MotorDrive.c"
 15420 ;; Parameters:    Size  Location     Type
 15421 ;;		None
 15422 ;; Auto vars:     Size  Location     Type
 15423 ;;		None
 15424 ;; Return value:  Size  Location     Type
 15425 ;;                  1    wreg      void 
 15426 ;; Registers used:
 15427 ;;		wreg, status,2
 15428 ;; Tracked objects:
 15429 ;;		On entry : 1F/1
 15430 ;;		On exit  : 1F/1
 15431 ;;		Unchanged: 0/0
 15432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15433 ;;      Params:         0       0       0       0       0       0       0       0
 15434 ;;      Locals:         0       0       0       0       0       0       0       0
 15435 ;;      Temps:          1       0       0       0       0       0       0       0
 15436 ;;      Totals:         1       0       0       0       0       0       0       0
 15437 ;;Total ram usage:        1 bytes
 15438 ;; Hardware stack levels used:    1
 15439 ;; This function calls:
 15440 ;;		Nothing
 15441 ;; This function is called by:
 15442 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P1
 15443 ;;		_TMR2_Interrupt
 15444 ;; This function uses a non-reentrant model
 15445 ;;
 15446                           
 15447                           
 15448                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15449  1240                     _SetPulseOutLATxWork_M1_FWD_POL1_P2:
 15450                           
 15451                           ;MotorDrive.c: 3249:     pulseOutLATAWork_M1 = 0x00;
 15452                           
 15453                           ;incstack = 0
 15454                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_P2: [wreg+status,2]
 15455  1240  0020               	movlb	0	; select bank0
 15456  1241  01E4               	clrf	_pulseOutLATAWork_M1
 15457                           
 15458                           ;MotorDrive.c: 3250:     pulseOutLATBWork_M1 = 0x00;
 15459  1242  01E3               	clrf	_pulseOutLATBWork_M1
 15460                           
 15461                           ;MotorDrive.c: 3251:     pulseOutLATCWork_M1 = 0x08;
 15462  1243  3008               	movlw	8
 15463  1244  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_P2
 15464  1245  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_P2,w
 15465  1246  00E2               	movwf	_pulseOutLATCWork_M1
 15466                           
 15467                           ;MotorDrive.c: 3253:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_OFF;
 15468  1247  3059               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15469  1248  0021               	movlb	1	; select bank1
 15470  1249  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15471  124A  3014               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15472  124B  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15473                           
 15474                           ;MotorDrive.c: 3254:     OutRequestFlug = 1;
 15475  124C  01D6               	clrf	_OutRequestFlug^(0+128)
 15476  124D  0AD6               	incf	_OutRequestFlug^(0+128),f
 15477  124E  0008               	return
 15478  124F                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P2:
 15479                           
 15480                           	psect	text102
 15481  1442                     __ptext102:	
 15482 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_OFF *****************
 15483 ;; Defined at:
 15484 ;;		line 3214 in file "MotorDrive.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;		None
 15487 ;; Auto vars:     Size  Location     Type
 15488 ;;		None
 15489 ;; Return value:  Size  Location     Type
 15490 ;;                  1    wreg      void 
 15491 ;; Registers used:
 15492 ;;		wreg, status,2, status,0
 15493 ;; Tracked objects:
 15494 ;;		On entry : 1F/1
 15495 ;;		On exit  : 1F/1
 15496 ;;		Unchanged: 0/0
 15497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15498 ;;      Params:         0       0       0       0       0       0       0       0
 15499 ;;      Locals:         0       0       0       0       0       0       0       0
 15500 ;;      Temps:          1       0       0       0       0       0       0       0
 15501 ;;      Totals:         1       0       0       0       0       0       0       0
 15502 ;;Total ram usage:        1 bytes
 15503 ;; Hardware stack levels used:    1
 15504 ;; This function calls:
 15505 ;;		Nothing
 15506 ;; This function is called by:
 15507 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P2
 15508 ;;		_TMR2_Interrupt
 15509 ;; This function uses a non-reentrant model
 15510 ;;
 15511                           
 15512                           
 15513                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15514  1442                     _SetPulseOutLATxWork_M1_FWD_POL0_OFF:
 15515                           
 15516                           ;MotorDrive.c: 3216:     pulseOutLATAWork_M1 = 0;
 15517                           
 15518                           ;incstack = 0
 15519                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_OFF: [wreg+status,2+status,0]
 15520  1442  0020               	movlb	0	; select bank0
 15521  1443  01E4               	clrf	_pulseOutLATAWork_M1
 15522                           
 15523                           ;MotorDrive.c: 3217:     pulseOutLATBWork_M1 = 0;
 15524  1444  01E3               	clrf	_pulseOutLATBWork_M1
 15525                           
 15526                           ;MotorDrive.c: 3218:     pulseOutLATCWork_M1 = 0;
 15527  1445  01E2               	clrf	_pulseOutLATCWork_M1
 15528                           
 15529                           ;MotorDrive.c: 3220:     polarityBit ^= 0x02;
 15530  1446  3002               	movlw	2
 15531  1447  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15532  1448  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_OFF,w
 15533  1449  06F1               	xorwf	_polarityBit,f
 15534                           
 15535                           ;MotorDrive.c: 3222:     if (addShakePulseBit & 0x02) {
 15536  144A  1CF0               	btfss	_addShakePulseBit,1
 15537  144B  2C51               	goto	i1l4734
 15538                           
 15539                           ;MotorDrive.c: 3223:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL1_P0
      +                          ;
 15540  144C  30D7               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15541  144D  0021               	movlb	1	; select bank1
 15542  144E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15543  144F  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15544  1450  2C55               	goto	L22
 15545  1451                     i1l4734:	
 15546                           ;MotorDrive.c: 3224:     } else {
 15547                           
 15548                           
 15549                           ;MotorDrive.c: 3225:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P1;
 15550  1451  30F5               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15551  1452  0021               	movlb	1	; select bank1
 15552  1453  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15553  1454  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15554  1455                     L22:
 15555  1455  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15556                           
 15557                           ;MotorDrive.c: 3228:     OutRequestFlug = 1;
 15558  1456  01D6               	clrf	_OutRequestFlug^(0+128)
 15559  1457  0AD6               	incf	_OutRequestFlug^(0+128),f
 15560  1458  0008               	return
 15561  1459                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF:
 15562                           
 15563                           	psect	text103
 15564  1231                     __ptext103:	
 15565 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_P2 *****************
 15566 ;; Defined at:
 15567 ;;		line 3202 in file "MotorDrive.c"
 15568 ;; Parameters:    Size  Location     Type
 15569 ;;		None
 15570 ;; Auto vars:     Size  Location     Type
 15571 ;;		None
 15572 ;; Return value:  Size  Location     Type
 15573 ;;                  1    wreg      void 
 15574 ;; Registers used:
 15575 ;;		wreg, status,2
 15576 ;; Tracked objects:
 15577 ;;		On entry : 1F/1
 15578 ;;		On exit  : 1F/1
 15579 ;;		Unchanged: 0/0
 15580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15581 ;;      Params:         0       0       0       0       0       0       0       0
 15582 ;;      Locals:         0       0       0       0       0       0       0       0
 15583 ;;      Temps:          1       0       0       0       0       0       0       0
 15584 ;;      Totals:         1       0       0       0       0       0       0       0
 15585 ;;Total ram usage:        1 bytes
 15586 ;; Hardware stack levels used:    1
 15587 ;; This function calls:
 15588 ;;		Nothing
 15589 ;; This function is called by:
 15590 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P1
 15591 ;;		_TMR2_Interrupt
 15592 ;; This function uses a non-reentrant model
 15593 ;;
 15594                           
 15595                           
 15596                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15597  1231                     _SetPulseOutLATxWork_M1_FWD_POL0_P2:
 15598                           
 15599                           ;MotorDrive.c: 3204:     pulseOutLATAWork_M1 = 0x00;
 15600                           
 15601                           ;incstack = 0
 15602                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_P2: [wreg+status,2]
 15603  1231  0020               	movlb	0	; select bank0
 15604  1232  01E4               	clrf	_pulseOutLATAWork_M1
 15605                           
 15606                           ;MotorDrive.c: 3205:     pulseOutLATBWork_M1 = 0x00;
 15607  1233  01E3               	clrf	_pulseOutLATBWork_M1
 15608                           
 15609                           ;MotorDrive.c: 3206:     pulseOutLATCWork_M1 = 0x04;
 15610  1234  3004               	movlw	4
 15611  1235  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_P2
 15612  1236  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_P2,w
 15613  1237  00E2               	movwf	_pulseOutLATCWork_M1
 15614                           
 15615                           ;MotorDrive.c: 3208:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_OFF;
 15616  1238  3042               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15617  1239  0021               	movlb	1	; select bank1
 15618  123A  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15619  123B  3014               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15620  123C  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15621                           
 15622                           ;MotorDrive.c: 3209:     OutRequestFlug = 1;
 15623  123D  01D6               	clrf	_OutRequestFlug^(0+128)
 15624  123E  0AD6               	incf	_OutRequestFlug^(0+128),f
 15625  123F  0008               	return
 15626  1240                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P2:
 15627                           
 15628                           	psect	text104
 15629  1222                     __ptext104:	
 15630 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_P1 *****************
 15631 ;; Defined at:
 15632 ;;		line 3280 in file "MotorDrive.c"
 15633 ;; Parameters:    Size  Location     Type
 15634 ;;		None
 15635 ;; Auto vars:     Size  Location     Type
 15636 ;;		None
 15637 ;; Return value:  Size  Location     Type
 15638 ;;                  1    wreg      void 
 15639 ;; Registers used:
 15640 ;;		wreg, status,2
 15641 ;; Tracked objects:
 15642 ;;		On entry : 1F/1
 15643 ;;		On exit  : 1F/1
 15644 ;;		Unchanged: 0/0
 15645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15646 ;;      Params:         0       0       0       0       0       0       0       0
 15647 ;;      Locals:         0       0       0       0       0       0       0       0
 15648 ;;      Temps:          1       0       0       0       0       0       0       0
 15649 ;;      Totals:         1       0       0       0       0       0       0       0
 15650 ;;Total ram usage:        1 bytes
 15651 ;; Hardware stack levels used:    1
 15652 ;; This function calls:
 15653 ;;		Nothing
 15654 ;; This function is called by:
 15655 ;;		_StartPulseOutM1
 15656 ;;		_SetPulseOutLATxWork_M1_REV_POL1_OFF
 15657 ;;		_TMR2_Interrupt
 15658 ;; This function uses a non-reentrant model
 15659 ;;
 15660                           
 15661                           
 15662                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_P1
 15663  1222                     _SetPulseOutLATxWork_M1_REV_POL0_P1:
 15664                           
 15665                           ;MotorDrive.c: 3282:     pulseOutLATAWork_M1 = 0x00;
 15666                           
 15667                           ;incstack = 0
 15668                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_P1: [wreg+status,2]
 15669  1222  0020               	movlb	0	; select bank0
 15670  1223  01E4               	clrf	_pulseOutLATAWork_M1
 15671                           
 15672                           ;MotorDrive.c: 3283:     pulseOutLATBWork_M1 = 0x00;
 15673  1224  01E3               	clrf	_pulseOutLATBWork_M1
 15674                           
 15675                           ;MotorDrive.c: 3284:     pulseOutLATCWork_M1 = 0x08;
 15676  1225  3008               	movlw	8
 15677  1226  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_P1
 15678  1227  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_P1,w
 15679  1228  00E2               	movwf	_pulseOutLATCWork_M1
 15680                           
 15681                           ;MotorDrive.c: 3286:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_P2;
 15682  1229  304F               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P2
 15683  122A  0021               	movlb	1	; select bank1
 15684  122B  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15685  122C  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P2
 15686  122D  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15687                           
 15688                           ;MotorDrive.c: 3287:     OutRequestFlug = 1;
 15689  122E  01D6               	clrf	_OutRequestFlug^(0+128)
 15690  122F  0AD6               	incf	_OutRequestFlug^(0+128),f
 15691  1230  0008               	return
 15692  1231                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_P1:
 15693                           
 15694                           	psect	text105
 15695  1213                     __ptext105:	
 15696 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_P1 *****************
 15697 ;; Defined at:
 15698 ;;		line 3319 in file "MotorDrive.c"
 15699 ;; Parameters:    Size  Location     Type
 15700 ;;		None
 15701 ;; Auto vars:     Size  Location     Type
 15702 ;;		None
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  1    wreg      void 
 15705 ;; Registers used:
 15706 ;;		wreg, status,2
 15707 ;; Tracked objects:
 15708 ;;		On entry : 1F/1
 15709 ;;		On exit  : 1F/1
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15712 ;;      Params:         0       0       0       0       0       0       0       0
 15713 ;;      Locals:         0       0       0       0       0       0       0       0
 15714 ;;      Temps:          1       0       0       0       0       0       0       0
 15715 ;;      Totals:         1       0       0       0       0       0       0       0
 15716 ;;Total ram usage:        1 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; This function calls:
 15719 ;;		Nothing
 15720 ;; This function is called by:
 15721 ;;		_StartPulseOutM1
 15722 ;;		_SetPulseOutLATxWork_M1_REV_POL0_OFF
 15723 ;;		_TMR2_Interrupt
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727                           
 15728                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_P1
 15729  1213                     _SetPulseOutLATxWork_M1_REV_POL1_P1:
 15730                           
 15731                           ;MotorDrive.c: 3321:     pulseOutLATAWork_M1 = 0x00;
 15732                           
 15733                           ;incstack = 0
 15734                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_P1: [wreg+status,2]
 15735  1213  0020               	movlb	0	; select bank0
 15736  1214  01E4               	clrf	_pulseOutLATAWork_M1
 15737                           
 15738                           ;MotorDrive.c: 3322:     pulseOutLATBWork_M1 = 0x00;
 15739  1215  01E3               	clrf	_pulseOutLATBWork_M1
 15740                           
 15741                           ;MotorDrive.c: 3323:     pulseOutLATCWork_M1 = 0x04;
 15742  1216  3004               	movlw	4
 15743  1217  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_P1
 15744  1218  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_P1,w
 15745  1219  00E2               	movwf	_pulseOutLATCWork_M1
 15746                           
 15747                           ;MotorDrive.c: 3325:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_P2;
 15748  121A  305E               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P2
 15749  121B  0021               	movlb	1	; select bank1
 15750  121C  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15751  121D  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P2
 15752  121E  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15753                           
 15754                           ;MotorDrive.c: 3326:     OutRequestFlug = 1;
 15755  121F  01D6               	clrf	_OutRequestFlug^(0+128)
 15756  1220  0AD6               	incf	_OutRequestFlug^(0+128),f
 15757  1221  0008               	return
 15758  1222                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_P1:
 15759                           
 15760                           	psect	text106
 15761  1204                     __ptext106:	
 15762 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_P1 *****************
 15763 ;; Defined at:
 15764 ;;		line 3190 in file "MotorDrive.c"
 15765 ;; Parameters:    Size  Location     Type
 15766 ;;		None
 15767 ;; Auto vars:     Size  Location     Type
 15768 ;;		None
 15769 ;; Return value:  Size  Location     Type
 15770 ;;                  1    wreg      void 
 15771 ;; Registers used:
 15772 ;;		wreg, status,2
 15773 ;; Tracked objects:
 15774 ;;		On entry : 1F/1
 15775 ;;		On exit  : 1F/1
 15776 ;;		Unchanged: 0/0
 15777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15778 ;;      Params:         0       0       0       0       0       0       0       0
 15779 ;;      Locals:         0       0       0       0       0       0       0       0
 15780 ;;      Temps:          1       0       0       0       0       0       0       0
 15781 ;;      Totals:         1       0       0       0       0       0       0       0
 15782 ;;Total ram usage:        1 bytes
 15783 ;; Hardware stack levels used:    1
 15784 ;; This function calls:
 15785 ;;		Nothing
 15786 ;; This function is called by:
 15787 ;;		_StartPulseOutM1
 15788 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15789 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 15790 ;;		_TMR2_Interrupt
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794                           
 15795                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15796  1204                     _SetPulseOutLATxWork_M1_FWD_POL0_P1:
 15797                           
 15798                           ;MotorDrive.c: 3192:     pulseOutLATAWork_M1 = 0x00;
 15799                           
 15800                           ;incstack = 0
 15801                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_P1: [wreg+status,2]
 15802  1204  0020               	movlb	0	; select bank0
 15803  1205  01E4               	clrf	_pulseOutLATAWork_M1
 15804                           
 15805                           ;MotorDrive.c: 3193:     pulseOutLATBWork_M1 = 0x80;
 15806  1206  3080               	movlw	128
 15807  1207  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_P1
 15808  1208  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_P1,w
 15809  1209  00E3               	movwf	_pulseOutLATBWork_M1
 15810                           
 15811                           ;MotorDrive.c: 3194:     pulseOutLATCWork_M1 = 0x00;
 15812  120A  01E2               	clrf	_pulseOutLATCWork_M1
 15813                           
 15814                           ;MotorDrive.c: 3196:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P2;
 15815  120B  3031               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15816  120C  0021               	movlb	1	; select bank1
 15817  120D  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15818  120E  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15819  120F  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15820                           
 15821                           ;MotorDrive.c: 3197:     OutRequestFlug = 1;
 15822  1210  01D6               	clrf	_OutRequestFlug^(0+128)
 15823  1211  0AD6               	incf	_OutRequestFlug^(0+128),f
 15824  1212  0008               	return
 15825  1213                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P1:
 15826                           
 15827                           	psect	text107
 15828  11F5                     __ptext107:	
 15829 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_P1 *****************
 15830 ;; Defined at:
 15831 ;;		line 3235 in file "MotorDrive.c"
 15832 ;; Parameters:    Size  Location     Type
 15833 ;;		None
 15834 ;; Auto vars:     Size  Location     Type
 15835 ;;		None
 15836 ;; Return value:  Size  Location     Type
 15837 ;;                  1    wreg      void 
 15838 ;; Registers used:
 15839 ;;		wreg, status,2
 15840 ;; Tracked objects:
 15841 ;;		On entry : 1F/1
 15842 ;;		On exit  : 1F/1
 15843 ;;		Unchanged: 0/0
 15844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15845 ;;      Params:         0       0       0       0       0       0       0       0
 15846 ;;      Locals:         0       0       0       0       0       0       0       0
 15847 ;;      Temps:          1       0       0       0       0       0       0       0
 15848 ;;      Totals:         1       0       0       0       0       0       0       0
 15849 ;;Total ram usage:        1 bytes
 15850 ;; Hardware stack levels used:    1
 15851 ;; This function calls:
 15852 ;;		Nothing
 15853 ;; This function is called by:
 15854 ;;		_StartPulseOutM1
 15855 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15856 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 15857 ;;		_TMR2_Interrupt
 15858 ;; This function uses a non-reentrant model
 15859 ;;
 15860                           
 15861                           
 15862                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15863  11F5                     _SetPulseOutLATxWork_M1_FWD_POL1_P1:
 15864                           
 15865                           ;MotorDrive.c: 3237:     pulseOutLATAWork_M1 = 0x00;
 15866                           
 15867                           ;incstack = 0
 15868                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_P1: [wreg+status,2]
 15869  11F5  0020               	movlb	0	; select bank0
 15870  11F6  01E4               	clrf	_pulseOutLATAWork_M1
 15871                           
 15872                           ;MotorDrive.c: 3238:     pulseOutLATBWork_M1 = 0x20;
 15873  11F7  3020               	movlw	32
 15874  11F8  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_P1
 15875  11F9  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_P1,w
 15876  11FA  00E3               	movwf	_pulseOutLATBWork_M1
 15877                           
 15878                           ;MotorDrive.c: 3239:     pulseOutLATCWork_M1 = 0x00;
 15879  11FB  01E2               	clrf	_pulseOutLATCWork_M1
 15880                           
 15881                           ;MotorDrive.c: 3241:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P2;
 15882  11FC  3040               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15883  11FD  0021               	movlb	1	; select bank1
 15884  11FE  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15885  11FF  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15886  1200  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15887                           
 15888                           ;MotorDrive.c: 3242:     OutRequestFlug = 1;
 15889  1201  01D6               	clrf	_OutRequestFlug^(0+128)
 15890  1202  0AD6               	incf	_OutRequestFlug^(0+128),f
 15891  1203  0008               	return
 15892  1204                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P1:
 15893                           
 15894                           	psect	text108
 15895  11E6                     __ptext108:	
 15896 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 *****************
 15897 ;; Defined at:
 15898 ;;		line 3487 in file "MotorDrive.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;		None
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;		None
 15903 ;; Return value:  Size  Location     Type
 15904 ;;                  1    wreg      void 
 15905 ;; Registers used:
 15906 ;;		wreg, status,2
 15907 ;; Tracked objects:
 15908 ;;		On entry : 1F/1
 15909 ;;		On exit  : 1F/1
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15912 ;;      Params:         0       0       0       0       0       0       0       0
 15913 ;;      Locals:         0       0       0       0       0       0       0       0
 15914 ;;      Temps:          1       0       0       0       0       0       0       0
 15915 ;;      Totals:         1       0       0       0       0       0       0       0
 15916 ;;Total ram usage:        1 bytes
 15917 ;; Hardware stack levels used:    1
 15918 ;; This function calls:
 15919 ;;		Nothing
 15920 ;; This function is called by:
 15921 ;;		_StartPulseOutM1
 15922 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15923 ;;		_TMR2_Interrupt
 15924 ;; This function uses a non-reentrant model
 15925 ;;
 15926                           
 15927                           
 15928                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15929  11E6                     _SetPulseOutLATxWork_M1_SHAKE_POL0_P0:
 15930                           
 15931                           ;MotorDrive.c: 3489:     pulseOutLATAWork_M1 = 0x00;
 15932                           
 15933                           ;incstack = 0
 15934                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL0_P0: [wreg+status,2]
 15935  11E6  0020               	movlb	0	; select bank0
 15936  11E7  01E4               	clrf	_pulseOutLATAWork_M1
 15937                           
 15938                           ;MotorDrive.c: 3490:     pulseOutLATBWork_M1 = 0x80;
 15939  11E8  3080               	movlw	128
 15940  11E9  00F5               	movwf	??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15941  11EA  0875               	movf	??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0,w
 15942  11EB  00E3               	movwf	_pulseOutLATBWork_M1
 15943                           
 15944                           ;MotorDrive.c: 3491:     pulseOutLATCWork_M1 = 0x00;
 15945  11EC  01E2               	clrf	_pulseOutLATCWork_M1
 15946                           
 15947                           ;MotorDrive.c: 3493:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL0_OFF;
 15948  11ED  3022               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15949  11EE  0021               	movlb	1	; select bank1
 15950  11EF  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15951  11F0  3013               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15952  11F1  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15953                           
 15954                           ;MotorDrive.c: 3494:     OutRequestFlug = 1;
 15955  11F2  01D6               	clrf	_OutRequestFlug^(0+128)
 15956  11F3  0AD6               	incf	_OutRequestFlug^(0+128),f
 15957  11F4  0008               	return
 15958  11F5                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:
 15959                           
 15960                           	psect	text109
 15961  11D7                     __ptext109:	
 15962 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 *****************
 15963 ;; Defined at:
 15964 ;;		line 3550 in file "MotorDrive.c"
 15965 ;; Parameters:    Size  Location     Type
 15966 ;;		None
 15967 ;; Auto vars:     Size  Location     Type
 15968 ;;		None
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  1    wreg      void 
 15971 ;; Registers used:
 15972 ;;		wreg, status,2
 15973 ;; Tracked objects:
 15974 ;;		On entry : 1F/1
 15975 ;;		On exit  : 1F/1
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15978 ;;      Params:         0       0       0       0       0       0       0       0
 15979 ;;      Locals:         0       0       0       0       0       0       0       0
 15980 ;;      Temps:          1       0       0       0       0       0       0       0
 15981 ;;      Totals:         1       0       0       0       0       0       0       0
 15982 ;;Total ram usage:        1 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; This function calls:
 15985 ;;		Nothing
 15986 ;; This function is called by:
 15987 ;;		_StartPulseOutM1
 15988 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15989 ;;		_TMR2_Interrupt
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           
 15994                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15995  11D7                     _SetPulseOutLATxWork_M1_SHAKE_POL1_P0:
 15996                           
 15997                           ;MotorDrive.c: 3552:     pulseOutLATAWork_M1 = 0x00;
 15998                           
 15999                           ;incstack = 0
 16000                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL1_P0: [wreg+status,2]
 16001  11D7  0020               	movlb	0	; select bank0
 16002  11D8  01E4               	clrf	_pulseOutLATAWork_M1
 16003                           
 16004                           ;MotorDrive.c: 3553:     pulseOutLATBWork_M1 = 0x20;
 16005  11D9  3020               	movlw	32
 16006  11DA  00F5               	movwf	??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 16007  11DB  0875               	movf	??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0,w
 16008  11DC  00E3               	movwf	_pulseOutLATBWork_M1
 16009                           
 16010                           ;MotorDrive.c: 3554:     pulseOutLATCWork_M1 = 0x00;
 16011  11DD  01E2               	clrf	_pulseOutLATCWork_M1
 16012                           
 16013                           ;MotorDrive.c: 3556:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL1_OFF;
 16014  11DE  3034               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 16015  11DF  0021               	movlb	1	; select bank1
 16016  11E0  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 16017  11E1  3013               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 16018  11E2  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 16019                           
 16020                           ;MotorDrive.c: 3557:     OutRequestFlug = 1;
 16021  11E3  01D6               	clrf	_OutRequestFlug^(0+128)
 16022  11E4  0AD6               	incf	_OutRequestFlug^(0+128),f
 16023  11E5  0008               	return
 16024  11E6                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:
 16025                           
 16026                           	psect	text110
 16027  1488                     __ptext110:	
 16028 ;; *************** function _SetDataTRISxWork_M0_SPK_POL1_SHORT *****************
 16029 ;; Defined at:
 16030 ;;		line 3466 in file "MotorDrive.c"
 16031 ;; Parameters:    Size  Location     Type
 16032 ;;		None
 16033 ;; Auto vars:     Size  Location     Type
 16034 ;;		None
 16035 ;; Return value:  Size  Location     Type
 16036 ;;                  1    wreg      void 
 16037 ;; Registers used:
 16038 ;;		wreg, status,2, status,0
 16039 ;; Tracked objects:
 16040 ;;		On entry : 1F/1
 16041 ;;		On exit  : 1F/1
 16042 ;;		Unchanged: 0/0
 16043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16044 ;;      Params:         0       0       0       0       0       0       0       0
 16045 ;;      Locals:         0       0       0       0       0       0       0       0
 16046 ;;      Temps:          0       0       0       0       0       0       0       0
 16047 ;;      Totals:         0       0       0       0       0       0       0       0
 16048 ;;Total ram usage:        0 bytes
 16049 ;; Hardware stack levels used:    1
 16050 ;; This function calls:
 16051 ;;		Nothing
 16052 ;; This function is called by:
 16053 ;;		_SetDataTRISxWork_M0_SPK_POL1_OPEN
 16054 ;;		_TMR2_Interrupt
 16055 ;; This function uses a non-reentrant model
 16056 ;;
 16057                           
 16058                           
 16059                           ;psect for function _SetDataTRISxWork_M0_SPK_POL1_SHORT
 16060  1488                     _SetDataTRISxWork_M0_SPK_POL1_SHORT:
 16061                           
 16062                           ;MotorDrive.c: 3468:     dataTRISAWork_M0 = 0x00;
 16063                           
 16064                           ;incstack = 0
 16065                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL1_SHORT: [wreg+status,2+status,0]
 16066  1488  0020               	movlb	0	; select bank0
 16067  1489  01DE               	clrf	_dataTRISAWork_M0
 16068                           
 16069                           ;MotorDrive.c: 3469:     dataTRISBWork_M0 = 0x00;
 16070  148A  01DD               	clrf	_dataTRISBWork_M0
 16071                           
 16072                           ;MotorDrive.c: 3470:     dataTRISCWork_M0 = 0x00;
 16073  148B  01DC               	clrf	_dataTRISCWork_M0
 16074                           
 16075                           ;MotorDrive.c: 3472:     if (m0PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 16076  148C  3016               	movlw	22
 16077  148D  0673               	xorwf	_m0PulseOutStep,w
 16078  148E  1D03               	btfss	3,2
 16079  148F  2C97               	goto	i1l4888
 16080                           
 16081                           ;MotorDrive.c: 3473:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P1;
 16082  1490  3041               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16083  1491  0021               	movlb	1	; select bank1
 16084  1492  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16085  1493  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16086  1494  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16087                           
 16088                           ;MotorDrive.c: 3474:         reqComparatorOffBit |= 0x01;
 16089  1495  1453               	bsf	_reqComparatorOffBit^(0+128),0
 16090                           
 16091                           ;MotorDrive.c: 3475:     } else {
 16092  1496  2C9C               	goto	i1l4890
 16093  1497                     i1l4888:
 16094                           
 16095                           ;MotorDrive.c: 3476:         m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_OPEN;
 16096  1497  30C8               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16097  1498  0021               	movlb	1	; select bank1
 16098  1499  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16099  149A  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16100  149B  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16101  149C                     i1l4890:
 16102                           
 16103                           ;MotorDrive.c: 3479:     OutTrisRequestFlug = 1;
 16104  149C  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16105  149D  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16106                           
 16107                           ;MotorDrive.c: 3480:     reqVrsCheckBit |= 0x01;
 16108  149E  1452               	bsf	_reqVrsCheckBit^(0+128),0
 16109  149F  0008               	return
 16110  14A0                     __end_of_SetDataTRISxWork_M0_SPK_POL1_SHORT:
 16111                           
 16112                           	psect	text111
 16113  11C8                     __ptext111:	
 16114 ;; *************** function _SetDataTRISxWork_M0_SPK_POL1_OPEN *****************
 16115 ;; Defined at:
 16116 ;;		line 3454 in file "MotorDrive.c"
 16117 ;; Parameters:    Size  Location     Type
 16118 ;;		None
 16119 ;; Auto vars:     Size  Location     Type
 16120 ;;		None
 16121 ;; Return value:  Size  Location     Type
 16122 ;;                  1    wreg      void 
 16123 ;; Registers used:
 16124 ;;		wreg, status,2
 16125 ;; Tracked objects:
 16126 ;;		On entry : 1F/1
 16127 ;;		On exit  : 1F/1
 16128 ;;		Unchanged: 0/0
 16129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16130 ;;      Params:         0       0       0       0       0       0       0       0
 16131 ;;      Locals:         0       0       0       0       0       0       0       0
 16132 ;;      Temps:          1       0       0       0       0       0       0       0
 16133 ;;      Totals:         1       0       0       0       0       0       0       0
 16134 ;;Total ram usage:        1 bytes
 16135 ;; Hardware stack levels used:    1
 16136 ;; This function calls:
 16137 ;;		Nothing
 16138 ;; This function is called by:
 16139 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 16140 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 16141 ;;		_TMR2_Interrupt
 16142 ;; This function uses a non-reentrant model
 16143 ;;
 16144                           
 16145                           
 16146                           ;psect for function _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16147  11C8                     _SetDataTRISxWork_M0_SPK_POL1_OPEN:
 16148                           
 16149                           ;MotorDrive.c: 3456:     dataTRISAWork_M0 = 0x02;
 16150                           
 16151                           ;incstack = 0
 16152                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL1_OPEN: [wreg+status,2]
 16153  11C8  3002               	movlw	2
 16154  11C9  00F5               	movwf	??_SetDataTRISxWork_M0_SPK_POL1_OPEN
 16155  11CA  0875               	movf	??_SetDataTRISxWork_M0_SPK_POL1_OPEN,w
 16156  11CB  0020               	movlb	0	; select bank0
 16157  11CC  00DE               	movwf	_dataTRISAWork_M0
 16158                           
 16159                           ;MotorDrive.c: 3457:     dataTRISBWork_M0 = 0x00;
 16160  11CD  01DD               	clrf	_dataTRISBWork_M0
 16161                           
 16162                           ;MotorDrive.c: 3458:     dataTRISCWork_M0 = 0x00;
 16163  11CE  01DC               	clrf	_dataTRISCWork_M0
 16164                           
 16165                           ;MotorDrive.c: 3460:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_SHORT;
 16166  11CF  3088               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_SHORT
 16167  11D0  0021               	movlb	1	; select bank1
 16168  11D1  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16169  11D2  3014               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_SHORT
 16170  11D3  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16171                           
 16172                           ;MotorDrive.c: 3461:     OutTrisRequestFlug = 1;
 16173  11D4  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16174  11D5  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16175  11D6  0008               	return
 16176  11D7                     __end_of_SetDataTRISxWork_M0_SPK_POL1_OPEN:
 16177                           
 16178                           	psect	text112
 16179  1310                     __ptext112:	
 16180 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF *****************
 16181 ;; Defined at:
 16182 ;;		line 3435 in file "MotorDrive.c"
 16183 ;; Parameters:    Size  Location     Type
 16184 ;;		None
 16185 ;; Auto vars:     Size  Location     Type
 16186 ;;		None
 16187 ;; Return value:  Size  Location     Type
 16188 ;;                  1    wreg      void 
 16189 ;; Registers used:
 16190 ;;		wreg, status,2
 16191 ;; Tracked objects:
 16192 ;;		On entry : 1F/1
 16193 ;;		On exit  : 1F/1
 16194 ;;		Unchanged: 0/0
 16195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16196 ;;      Params:         0       0       0       0       0       0       0       0
 16197 ;;      Locals:         0       0       0       0       0       0       0       0
 16198 ;;      Temps:          0       0       0       0       0       0       0       0
 16199 ;;      Totals:         0       0       0       0       0       0       0       0
 16200 ;;Total ram usage:        0 bytes
 16201 ;; Hardware stack levels used:    1
 16202 ;; This function calls:
 16203 ;;		Nothing
 16204 ;; This function is called by:
 16205 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16206 ;;		_TMR2_Interrupt
 16207 ;; This function uses a non-reentrant model
 16208 ;;
 16209                           
 16210                           
 16211                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 16212  1310                     _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:
 16213                           
 16214                           ;MotorDrive.c: 3437:     pulseOutLATAWork_M0 = 0;
 16215                           
 16216                           ;incstack = 0
 16217                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF: [wreg+status,2]
 16218  1310  0020               	movlb	0	; select bank0
 16219  1311  01E7               	clrf	_pulseOutLATAWork_M0
 16220                           
 16221                           ;MotorDrive.c: 3438:     pulseOutLATBWork_M0 = 0;
 16222  1312  01E6               	clrf	_pulseOutLATBWork_M0
 16223                           
 16224                           ;MotorDrive.c: 3439:     pulseOutLATCWork_M0 = 0;
 16225  1313  01E5               	clrf	_pulseOutLATCWork_M0
 16226                           
 16227                           ;MotorDrive.c: 3442:     dataTRISAWork_M0 = 0x00;
 16228  1314  01DE               	clrf	_dataTRISAWork_M0
 16229                           
 16230                           ;MotorDrive.c: 3443:     dataTRISBWork_M0 = 0x00;
 16231  1315  01DD               	clrf	_dataTRISBWork_M0
 16232                           
 16233                           ;MotorDrive.c: 3444:     dataTRISCWork_M0 = 0x00;
 16234  1316  01DC               	clrf	_dataTRISCWork_M0
 16235                           
 16236                           ;MotorDrive.c: 3446:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_OPEN;
 16237  1317  30C8               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16238  1318  0021               	movlb	1	; select bank1
 16239  1319  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16240  131A  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16241  131B  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16242                           
 16243                           ;MotorDrive.c: 3447:     OutRequestFlug = 1;
 16244  131C  01D6               	clrf	_OutRequestFlug^(0+128)
 16245  131D  0AD6               	incf	_OutRequestFlug^(0+128),f
 16246                           
 16247                           ;MotorDrive.c: 3448:     OutTrisRequestFlug = 1;
 16248  131E  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16249  131F  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16250                           
 16251                           ;MotorDrive.c: 3449:     reqComparatorOnBit |= 0x01;
 16252  1320  1454               	bsf	_reqComparatorOnBit^(0+128),0
 16253  1321  0008               	return
 16254  1322                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:
 16255                           
 16256                           	psect	text113
 16257  1470                     __ptext113:	
 16258 ;; *************** function _SetDataTRISxWork_M0_SPK_POL0_SHORT *****************
 16259 ;; Defined at:
 16260 ;;		line 3403 in file "MotorDrive.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;		None
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;		None
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      void 
 16267 ;; Registers used:
 16268 ;;		wreg, status,2, status,0
 16269 ;; Tracked objects:
 16270 ;;		On entry : 1F/1
 16271 ;;		On exit  : 1F/1
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16274 ;;      Params:         0       0       0       0       0       0       0       0
 16275 ;;      Locals:         0       0       0       0       0       0       0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0       0
 16277 ;;      Totals:         0       0       0       0       0       0       0       0
 16278 ;;Total ram usage:        0 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; This function calls:
 16281 ;;		Nothing
 16282 ;; This function is called by:
 16283 ;;		_SetDataTRISxWork_M0_SPK_POL0_OPEN
 16284 ;;		_TMR2_Interrupt
 16285 ;; This function uses a non-reentrant model
 16286 ;;
 16287                           
 16288                           
 16289                           ;psect for function _SetDataTRISxWork_M0_SPK_POL0_SHORT
 16290  1470                     _SetDataTRISxWork_M0_SPK_POL0_SHORT:
 16291                           
 16292                           ;MotorDrive.c: 3405:     dataTRISAWork_M0 = 0x00;
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL0_SHORT: [wreg+status,2+status,0]
 16296  1470  0020               	movlb	0	; select bank0
 16297  1471  01DE               	clrf	_dataTRISAWork_M0
 16298                           
 16299                           ;MotorDrive.c: 3406:     dataTRISBWork_M0 = 0x00;
 16300  1472  01DD               	clrf	_dataTRISBWork_M0
 16301                           
 16302                           ;MotorDrive.c: 3407:     dataTRISCWork_M0 = 0x00;
 16303  1473  01DC               	clrf	_dataTRISCWork_M0
 16304                           
 16305                           ;MotorDrive.c: 3409:     if (m0PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 16306  1474  3016               	movlw	22
 16307  1475  0673               	xorwf	_m0PulseOutStep,w
 16308  1476  1D03               	btfss	3,2
 16309  1477  2C7F               	goto	i1l4848
 16310                           
 16311                           ;MotorDrive.c: 3410:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P1;
 16312  1478  3050               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16313  1479  0021               	movlb	1	; select bank1
 16314  147A  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16315  147B  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16316  147C  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16317                           
 16318                           ;MotorDrive.c: 3411:         reqComparatorOffBit |= 0x01;
 16319  147D  1453               	bsf	_reqComparatorOffBit^(0+128),0
 16320                           
 16321                           ;MotorDrive.c: 3412:     } else {
 16322  147E  2C84               	goto	i1l4850
 16323  147F                     i1l4848:
 16324                           
 16325                           ;MotorDrive.c: 3413:         m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_OPEN;
 16326  147F  30B9               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16327  1480  0021               	movlb	1	; select bank1
 16328  1481  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16329  1482  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16330  1483  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16331  1484                     i1l4850:
 16332                           
 16333                           ;MotorDrive.c: 3416:     OutTrisRequestFlug = 1;
 16334  1484  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16335  1485  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16336                           
 16337                           ;MotorDrive.c: 3417:     reqVrsCheckBit |= 0x01;
 16338  1486  1452               	bsf	_reqVrsCheckBit^(0+128),0
 16339  1487  0008               	return
 16340  1488                     __end_of_SetDataTRISxWork_M0_SPK_POL0_SHORT:
 16341                           
 16342                           	psect	text114
 16343  11B9                     __ptext114:	
 16344 ;; *************** function _SetDataTRISxWork_M0_SPK_POL0_OPEN *****************
 16345 ;; Defined at:
 16346 ;;		line 3391 in file "MotorDrive.c"
 16347 ;; Parameters:    Size  Location     Type
 16348 ;;		None
 16349 ;; Auto vars:     Size  Location     Type
 16350 ;;		None
 16351 ;; Return value:  Size  Location     Type
 16352 ;;                  1    wreg      void 
 16353 ;; Registers used:
 16354 ;;		wreg, status,2
 16355 ;; Tracked objects:
 16356 ;;		On entry : 1F/1
 16357 ;;		On exit  : 1F/1
 16358 ;;		Unchanged: 0/0
 16359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16360 ;;      Params:         0       0       0       0       0       0       0       0
 16361 ;;      Locals:         0       0       0       0       0       0       0       0
 16362 ;;      Temps:          1       0       0       0       0       0       0       0
 16363 ;;      Totals:         1       0       0       0       0       0       0       0
 16364 ;;Total ram usage:        1 bytes
 16365 ;; Hardware stack levels used:    1
 16366 ;; This function calls:
 16367 ;;		Nothing
 16368 ;; This function is called by:
 16369 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 16370 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 16371 ;;		_TMR2_Interrupt
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375                           
 16376                           ;psect for function _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16377  11B9                     _SetDataTRISxWork_M0_SPK_POL0_OPEN:
 16378                           
 16379                           ;MotorDrive.c: 3393:     dataTRISAWork_M0 = 0x00;
 16380                           
 16381                           ;incstack = 0
 16382                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL0_OPEN: [wreg+status,2]
 16383  11B9  0020               	movlb	0	; select bank0
 16384  11BA  01DE               	clrf	_dataTRISAWork_M0
 16385                           
 16386                           ;MotorDrive.c: 3394:     dataTRISBWork_M0 = 0x00;
 16387  11BB  01DD               	clrf	_dataTRISBWork_M0
 16388                           
 16389                           ;MotorDrive.c: 3395:     dataTRISCWork_M0 = 0x02;
 16390  11BC  3002               	movlw	2
 16391  11BD  00F5               	movwf	??_SetDataTRISxWork_M0_SPK_POL0_OPEN
 16392  11BE  0875               	movf	??_SetDataTRISxWork_M0_SPK_POL0_OPEN,w
 16393  11BF  00DC               	movwf	_dataTRISCWork_M0
 16394                           
 16395                           ;MotorDrive.c: 3397:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_SHORT;
 16396  11C0  3070               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_SHORT
 16397  11C1  0021               	movlb	1	; select bank1
 16398  11C2  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16399  11C3  3014               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_SHORT
 16400  11C4  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16401                           
 16402                           ;MotorDrive.c: 3398:     OutTrisRequestFlug = 1;
 16403  11C5  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16404  11C6  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16405  11C7  0008               	return
 16406  11C8                     __end_of_SetDataTRISxWork_M0_SPK_POL0_OPEN:
 16407                           
 16408                           	psect	text115
 16409  12FE                     __ptext115:	
 16410 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF *****************
 16411 ;; Defined at:
 16412 ;;		line 3372 in file "MotorDrive.c"
 16413 ;; Parameters:    Size  Location     Type
 16414 ;;		None
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;		None
 16417 ;; Return value:  Size  Location     Type
 16418 ;;                  1    wreg      void 
 16419 ;; Registers used:
 16420 ;;		wreg, status,2
 16421 ;; Tracked objects:
 16422 ;;		On entry : 1F/1
 16423 ;;		On exit  : 1F/1
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16426 ;;      Params:         0       0       0       0       0       0       0       0
 16427 ;;      Locals:         0       0       0       0       0       0       0       0
 16428 ;;      Temps:          0       0       0       0       0       0       0       0
 16429 ;;      Totals:         0       0       0       0       0       0       0       0
 16430 ;;Total ram usage:        0 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; This function calls:
 16433 ;;		Nothing
 16434 ;; This function is called by:
 16435 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16436 ;;		_TMR2_Interrupt
 16437 ;; This function uses a non-reentrant model
 16438 ;;
 16439                           
 16440                           
 16441                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 16442  12FE                     _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:
 16443                           
 16444                           ;MotorDrive.c: 3374:     pulseOutLATAWork_M0 = 0;
 16445                           
 16446                           ;incstack = 0
 16447                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF: [wreg+status,2]
 16448  12FE  0020               	movlb	0	; select bank0
 16449  12FF  01E7               	clrf	_pulseOutLATAWork_M0
 16450                           
 16451                           ;MotorDrive.c: 3375:     pulseOutLATBWork_M0 = 0;
 16452  1300  01E6               	clrf	_pulseOutLATBWork_M0
 16453                           
 16454                           ;MotorDrive.c: 3376:     pulseOutLATCWork_M0 = 0;
 16455  1301  01E5               	clrf	_pulseOutLATCWork_M0
 16456                           
 16457                           ;MotorDrive.c: 3379:     dataTRISAWork_M0 = 0x00;
 16458  1302  01DE               	clrf	_dataTRISAWork_M0
 16459                           
 16460                           ;MotorDrive.c: 3380:     dataTRISBWork_M0 = 0x00;
 16461  1303  01DD               	clrf	_dataTRISBWork_M0
 16462                           
 16463                           ;MotorDrive.c: 3381:     dataTRISCWork_M0 = 0x00;
 16464  1304  01DC               	clrf	_dataTRISCWork_M0
 16465                           
 16466                           ;MotorDrive.c: 3383:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_OPEN;
 16467  1305  30B9               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16468  1306  0021               	movlb	1	; select bank1
 16469  1307  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16470  1308  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16471  1309  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16472                           
 16473                           ;MotorDrive.c: 3384:     OutRequestFlug = 1;
 16474  130A  01D6               	clrf	_OutRequestFlug^(0+128)
 16475  130B  0AD6               	incf	_OutRequestFlug^(0+128),f
 16476                           
 16477                           ;MotorDrive.c: 3385:     OutTrisRequestFlug = 1;
 16478  130C  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16479  130D  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16480                           
 16481                           ;MotorDrive.c: 3386:     reqComparatorOnBit |= 0x01;
 16482  130E  1454               	bsf	_reqComparatorOnBit^(0+128),0
 16483  130F  0008               	return
 16484  1310                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:
 16485                           
 16486                           	psect	text116
 16487  129B                     __ptext116:	
 16488 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_OFF *****************
 16489 ;; Defined at:
 16490 ;;		line 3174 in file "MotorDrive.c"
 16491 ;; Parameters:    Size  Location     Type
 16492 ;;		None
 16493 ;; Auto vars:     Size  Location     Type
 16494 ;;		None
 16495 ;; Return value:  Size  Location     Type
 16496 ;;                  1    wreg      void 
 16497 ;; Registers used:
 16498 ;;		wreg, status,2, status,0
 16499 ;; Tracked objects:
 16500 ;;		On entry : 1F/1
 16501 ;;		On exit  : 1F/1
 16502 ;;		Unchanged: 0/0
 16503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16504 ;;      Params:         0       0       0       0       0       0       0       0
 16505 ;;      Locals:         0       0       0       0       0       0       0       0
 16506 ;;      Temps:          1       0       0       0       0       0       0       0
 16507 ;;      Totals:         1       0       0       0       0       0       0       0
 16508 ;;Total ram usage:        1 bytes
 16509 ;; Hardware stack levels used:    1
 16510 ;; This function calls:
 16511 ;;		Nothing
 16512 ;; This function is called by:
 16513 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P2
 16514 ;;		_TMR2_Interrupt
 16515 ;; This function uses a non-reentrant model
 16516 ;;
 16517                           
 16518                           
 16519                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16520  129B                     _SetPulseOutLATxWork_M0_REV_POL1_OFF:
 16521                           
 16522                           ;MotorDrive.c: 3176:     pulseOutLATAWork_M0 = 0;
 16523                           
 16524                           ;incstack = 0
 16525                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_OFF: [wreg+status,2+status,0]
 16526  129B  0020               	movlb	0	; select bank0
 16527  129C  01E7               	clrf	_pulseOutLATAWork_M0
 16528                           
 16529                           ;MotorDrive.c: 3177:     pulseOutLATBWork_M0 = 0;
 16530  129D  01E6               	clrf	_pulseOutLATBWork_M0
 16531                           
 16532                           ;MotorDrive.c: 3178:     pulseOutLATCWork_M0 = 0;
 16533  129E  01E5               	clrf	_pulseOutLATCWork_M0
 16534                           
 16535                           ;MotorDrive.c: 3180:     polarityBit ^= 0x01;
 16536  129F  3001               	movlw	1
 16537  12A0  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_OFF
 16538  12A1  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_OFF,w
 16539  12A2  06F1               	xorwf	_polarityBit,f
 16540                           
 16541                           ;MotorDrive.c: 3182:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_P1;
 16542  12A3  306E               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P1
 16543  12A4  0021               	movlb	1	; select bank1
 16544  12A5  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16545  12A6  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P1
 16546  12A7  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16547                           
 16548                           ;MotorDrive.c: 3183:     OutRequestFlug = 1;
 16549  12A8  01D6               	clrf	_OutRequestFlug^(0+128)
 16550  12A9  0AD6               	incf	_OutRequestFlug^(0+128),f
 16551  12AA  0008               	return
 16552  12AB                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_OFF:
 16553                           
 16554                           	psect	text117
 16555  11AA                     __ptext117:	
 16556 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_P2 *****************
 16557 ;; Defined at:
 16558 ;;		line 3162 in file "MotorDrive.c"
 16559 ;; Parameters:    Size  Location     Type
 16560 ;;		None
 16561 ;; Auto vars:     Size  Location     Type
 16562 ;;		None
 16563 ;; Return value:  Size  Location     Type
 16564 ;;                  1    wreg      void 
 16565 ;; Registers used:
 16566 ;;		wreg, status,2
 16567 ;; Tracked objects:
 16568 ;;		On entry : 1F/1
 16569 ;;		On exit  : 1F/1
 16570 ;;		Unchanged: 0/0
 16571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16572 ;;      Params:         0       0       0       0       0       0       0       0
 16573 ;;      Locals:         0       0       0       0       0       0       0       0
 16574 ;;      Temps:          1       0       0       0       0       0       0       0
 16575 ;;      Totals:         1       0       0       0       0       0       0       0
 16576 ;;Total ram usage:        1 bytes
 16577 ;; Hardware stack levels used:    1
 16578 ;; This function calls:
 16579 ;;		Nothing
 16580 ;; This function is called by:
 16581 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P1
 16582 ;;		_TMR2_Interrupt
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           
 16587                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_P2
 16588  11AA                     _SetPulseOutLATxWork_M0_REV_POL1_P2:
 16589                           
 16590                           ;MotorDrive.c: 3164:     pulseOutLATAWork_M0 = 0x10;
 16591                           
 16592                           ;incstack = 0
 16593                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_P2: [wreg+status,2]
 16594  11AA  3010               	movlw	16
 16595  11AB  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_P2
 16596  11AC  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_P2,w
 16597  11AD  0020               	movlb	0	; select bank0
 16598  11AE  00E7               	movwf	_pulseOutLATAWork_M0
 16599                           
 16600                           ;MotorDrive.c: 3165:     pulseOutLATBWork_M0 = 0x00;
 16601  11AF  01E6               	clrf	_pulseOutLATBWork_M0
 16602                           
 16603                           ;MotorDrive.c: 3166:     pulseOutLATCWork_M0 = 0x00;
 16604  11B0  01E5               	clrf	_pulseOutLATCWork_M0
 16605                           
 16606                           ;MotorDrive.c: 3168:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_OFF;
 16607  11B1  309B               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16608  11B2  0021               	movlb	1	; select bank1
 16609  11B3  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16610  11B4  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16611  11B5  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16612                           
 16613                           ;MotorDrive.c: 3169:     OutRequestFlug = 1;
 16614  11B6  01D6               	clrf	_OutRequestFlug^(0+128)
 16615  11B7  0AD6               	incf	_OutRequestFlug^(0+128),f
 16616  11B8  0008               	return
 16617  11B9                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_P2:
 16618                           
 16619                           	psect	text118
 16620  128B                     __ptext118:	
 16621 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_OFF *****************
 16622 ;; Defined at:
 16623 ;;		line 3135 in file "MotorDrive.c"
 16624 ;; Parameters:    Size  Location     Type
 16625 ;;		None
 16626 ;; Auto vars:     Size  Location     Type
 16627 ;;		None
 16628 ;; Return value:  Size  Location     Type
 16629 ;;                  1    wreg      void 
 16630 ;; Registers used:
 16631 ;;		wreg, status,2, status,0
 16632 ;; Tracked objects:
 16633 ;;		On entry : 1F/1
 16634 ;;		On exit  : 1F/1
 16635 ;;		Unchanged: 0/0
 16636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16637 ;;      Params:         0       0       0       0       0       0       0       0
 16638 ;;      Locals:         0       0       0       0       0       0       0       0
 16639 ;;      Temps:          1       0       0       0       0       0       0       0
 16640 ;;      Totals:         1       0       0       0       0       0       0       0
 16641 ;;Total ram usage:        1 bytes
 16642 ;; Hardware stack levels used:    1
 16643 ;; This function calls:
 16644 ;;		Nothing
 16645 ;; This function is called by:
 16646 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P2
 16647 ;;		_TMR2_Interrupt
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651                           
 16652                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16653  128B                     _SetPulseOutLATxWork_M0_REV_POL0_OFF:
 16654                           
 16655                           ;MotorDrive.c: 3137:     pulseOutLATAWork_M0 = 0;
 16656                           
 16657                           ;incstack = 0
 16658                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_OFF: [wreg+status,2+status,0]
 16659  128B  0020               	movlb	0	; select bank0
 16660  128C  01E7               	clrf	_pulseOutLATAWork_M0
 16661                           
 16662                           ;MotorDrive.c: 3138:     pulseOutLATBWork_M0 = 0;
 16663  128D  01E6               	clrf	_pulseOutLATBWork_M0
 16664                           
 16665                           ;MotorDrive.c: 3139:     pulseOutLATCWork_M0 = 0;
 16666  128E  01E5               	clrf	_pulseOutLATCWork_M0
 16667                           
 16668                           ;MotorDrive.c: 3141:     polarityBit ^= 0x01;
 16669  128F  3001               	movlw	1
 16670  1290  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_OFF
 16671  1291  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_OFF,w
 16672  1292  06F1               	xorwf	_polarityBit,f
 16673                           
 16674                           ;MotorDrive.c: 3143:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_P1;
 16675  1293  305F               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P1
 16676  1294  0021               	movlb	1	; select bank1
 16677  1295  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16678  1296  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P1
 16679  1297  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16680                           
 16681                           ;MotorDrive.c: 3144:     OutRequestFlug = 1;
 16682  1298  01D6               	clrf	_OutRequestFlug^(0+128)
 16683  1299  0AD6               	incf	_OutRequestFlug^(0+128),f
 16684  129A  0008               	return
 16685  129B                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_OFF:
 16686                           
 16687                           	psect	text119
 16688  119B                     __ptext119:	
 16689 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_P2 *****************
 16690 ;; Defined at:
 16691 ;;		line 3123 in file "MotorDrive.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      void 
 16698 ;; Registers used:
 16699 ;;		wreg, status,2
 16700 ;; Tracked objects:
 16701 ;;		On entry : 1F/1
 16702 ;;		On exit  : 1F/1
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16705 ;;      Params:         0       0       0       0       0       0       0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0
 16707 ;;      Temps:          1       0       0       0       0       0       0       0
 16708 ;;      Totals:         1       0       0       0       0       0       0       0
 16709 ;;Total ram usage:        1 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; This function calls:
 16712 ;;		Nothing
 16713 ;; This function is called by:
 16714 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P1
 16715 ;;		_TMR2_Interrupt
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           
 16720                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_P2
 16721  119B                     _SetPulseOutLATxWork_M0_REV_POL0_P2:
 16722                           
 16723                           ;MotorDrive.c: 3125:     pulseOutLATAWork_M0 = 0x20;
 16724                           
 16725                           ;incstack = 0
 16726                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_P2: [wreg+status,2]
 16727  119B  3020               	movlw	32
 16728  119C  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_P2
 16729  119D  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_P2,w
 16730  119E  0020               	movlb	0	; select bank0
 16731  119F  00E7               	movwf	_pulseOutLATAWork_M0
 16732                           
 16733                           ;MotorDrive.c: 3126:     pulseOutLATBWork_M0 = 0x00;
 16734  11A0  01E6               	clrf	_pulseOutLATBWork_M0
 16735                           
 16736                           ;MotorDrive.c: 3127:     pulseOutLATCWork_M0 = 0x00;
 16737  11A1  01E5               	clrf	_pulseOutLATCWork_M0
 16738                           
 16739                           ;MotorDrive.c: 3129:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_OFF;
 16740  11A2  308B               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16741  11A3  0021               	movlb	1	; select bank1
 16742  11A4  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16743  11A5  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16744  11A6  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16745                           
 16746                           ;MotorDrive.c: 3130:     OutRequestFlug = 1;
 16747  11A7  01D6               	clrf	_OutRequestFlug^(0+128)
 16748  11A8  0AD6               	incf	_OutRequestFlug^(0+128),f
 16749  11A9  0008               	return
 16750  11AA                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_P2:
 16751                           
 16752                           	psect	text120
 16753  142B                     __ptext120:	
 16754 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_OFF *****************
 16755 ;; Defined at:
 16756 ;;		line 3090 in file "MotorDrive.c"
 16757 ;; Parameters:    Size  Location     Type
 16758 ;;		None
 16759 ;; Auto vars:     Size  Location     Type
 16760 ;;		None
 16761 ;; Return value:  Size  Location     Type
 16762 ;;                  1    wreg      void 
 16763 ;; Registers used:
 16764 ;;		wreg, status,2, status,0
 16765 ;; Tracked objects:
 16766 ;;		On entry : 1F/1
 16767 ;;		On exit  : 1F/1
 16768 ;;		Unchanged: 0/0
 16769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16770 ;;      Params:         0       0       0       0       0       0       0       0
 16771 ;;      Locals:         0       0       0       0       0       0       0       0
 16772 ;;      Temps:          1       0       0       0       0       0       0       0
 16773 ;;      Totals:         1       0       0       0       0       0       0       0
 16774 ;;Total ram usage:        1 bytes
 16775 ;; Hardware stack levels used:    1
 16776 ;; This function calls:
 16777 ;;		Nothing
 16778 ;; This function is called by:
 16779 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P2
 16780 ;;		_TMR2_Interrupt
 16781 ;; This function uses a non-reentrant model
 16782 ;;
 16783                           
 16784                           
 16785                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16786  142B                     _SetPulseOutLATxWork_M0_FWD_POL1_OFF:
 16787                           
 16788                           ;MotorDrive.c: 3092:     pulseOutLATAWork_M0 = 0;
 16789                           
 16790                           ;incstack = 0
 16791                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_OFF: [wreg+status,2+status,0]
 16792  142B  0020               	movlb	0	; select bank0
 16793  142C  01E7               	clrf	_pulseOutLATAWork_M0
 16794                           
 16795                           ;MotorDrive.c: 3093:     pulseOutLATBWork_M0 = 0;
 16796  142D  01E6               	clrf	_pulseOutLATBWork_M0
 16797                           
 16798                           ;MotorDrive.c: 3094:     pulseOutLATCWork_M0 = 0;
 16799  142E  01E5               	clrf	_pulseOutLATCWork_M0
 16800                           
 16801                           ;MotorDrive.c: 3096:     polarityBit ^= 0x01;
 16802  142F  3001               	movlw	1
 16803  1430  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16804  1431  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_OFF,w
 16805  1432  06F1               	xorwf	_polarityBit,f
 16806                           
 16807                           ;MotorDrive.c: 3098:     if (addShakePulseBit & 0x01) {
 16808  1433  1C70               	btfss	_addShakePulseBit,0
 16809  1434  2C3A               	goto	i1l4658
 16810                           
 16811                           ;MotorDrive.c: 3099:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL0_P0
      +                          ;
 16812  1435  3032               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16813  1436  0021               	movlb	1	; select bank1
 16814  1437  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16815  1438  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16816  1439  2C3E               	goto	L23
 16817  143A                     i1l4658:	
 16818                           ;MotorDrive.c: 3100:     } else {
 16819                           
 16820                           
 16821                           ;MotorDrive.c: 3101:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P1;
 16822  143A  3050               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16823  143B  0021               	movlb	1	; select bank1
 16824  143C  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16825  143D  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16826  143E                     L23:
 16827  143E  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16828                           
 16829                           ;MotorDrive.c: 3104:     OutRequestFlug = 1;
 16830  143F  01D6               	clrf	_OutRequestFlug^(0+128)
 16831  1440  0AD6               	incf	_OutRequestFlug^(0+128),f
 16832  1441  0008               	return
 16833  1442                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF:
 16834                           
 16835                           	psect	text121
 16836  118C                     __ptext121:	
 16837 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_P2 *****************
 16838 ;; Defined at:
 16839 ;;		line 3078 in file "MotorDrive.c"
 16840 ;; Parameters:    Size  Location     Type
 16841 ;;		None
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;		None
 16844 ;; Return value:  Size  Location     Type
 16845 ;;                  1    wreg      void 
 16846 ;; Registers used:
 16847 ;;		wreg, status,2
 16848 ;; Tracked objects:
 16849 ;;		On entry : 1F/1
 16850 ;;		On exit  : 1F/1
 16851 ;;		Unchanged: 0/0
 16852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16853 ;;      Params:         0       0       0       0       0       0       0       0
 16854 ;;      Locals:         0       0       0       0       0       0       0       0
 16855 ;;      Temps:          1       0       0       0       0       0       0       0
 16856 ;;      Totals:         1       0       0       0       0       0       0       0
 16857 ;;Total ram usage:        1 bytes
 16858 ;; Hardware stack levels used:    1
 16859 ;; This function calls:
 16860 ;;		Nothing
 16861 ;; This function is called by:
 16862 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P1
 16863 ;;		_TMR2_Interrupt
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867                           
 16868                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_P2
 16869  118C                     _SetPulseOutLATxWork_M0_FWD_POL1_P2:
 16870                           
 16871                           ;MotorDrive.c: 3080:     pulseOutLATAWork_M0 = 0x00;
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_P2: [wreg+status,2]
 16875  118C  0020               	movlb	0	; select bank0
 16876  118D  01E7               	clrf	_pulseOutLATAWork_M0
 16877                           
 16878                           ;MotorDrive.c: 3081:     pulseOutLATBWork_M0 = 0x00;
 16879  118E  01E6               	clrf	_pulseOutLATBWork_M0
 16880                           
 16881                           ;MotorDrive.c: 3082:     pulseOutLATCWork_M0 = 0x02;
 16882  118F  3002               	movlw	2
 16883  1190  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_P2
 16884  1191  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_P2,w
 16885  1192  00E5               	movwf	_pulseOutLATCWork_M0
 16886                           
 16887                           ;MotorDrive.c: 3084:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_OFF;
 16888  1193  302B               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16889  1194  0021               	movlb	1	; select bank1
 16890  1195  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16891  1196  3014               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16892  1197  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16893                           
 16894                           ;MotorDrive.c: 3085:     OutRequestFlug = 1;
 16895  1198  01D6               	clrf	_OutRequestFlug^(0+128)
 16896  1199  0AD6               	incf	_OutRequestFlug^(0+128),f
 16897  119A  0008               	return
 16898  119B                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P2:
 16899                           
 16900                           	psect	text122
 16901  1414                     __ptext122:	
 16902 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_OFF *****************
 16903 ;; Defined at:
 16904 ;;		line 3045 in file "MotorDrive.c"
 16905 ;; Parameters:    Size  Location     Type
 16906 ;;		None
 16907 ;; Auto vars:     Size  Location     Type
 16908 ;;		None
 16909 ;; Return value:  Size  Location     Type
 16910 ;;                  1    wreg      void 
 16911 ;; Registers used:
 16912 ;;		wreg, status,2, status,0
 16913 ;; Tracked objects:
 16914 ;;		On entry : 1F/1
 16915 ;;		On exit  : 1F/1
 16916 ;;		Unchanged: 0/0
 16917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16918 ;;      Params:         0       0       0       0       0       0       0       0
 16919 ;;      Locals:         0       0       0       0       0       0       0       0
 16920 ;;      Temps:          1       0       0       0       0       0       0       0
 16921 ;;      Totals:         1       0       0       0       0       0       0       0
 16922 ;;Total ram usage:        1 bytes
 16923 ;; Hardware stack levels used:    1
 16924 ;; This function calls:
 16925 ;;		Nothing
 16926 ;; This function is called by:
 16927 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P2
 16928 ;;		_TMR2_Interrupt
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932                           
 16933                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16934  1414                     _SetPulseOutLATxWork_M0_FWD_POL0_OFF:
 16935                           
 16936                           ;MotorDrive.c: 3047:     pulseOutLATAWork_M0 = 0;
 16937                           
 16938                           ;incstack = 0
 16939                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_OFF: [wreg+status,2+status,0]
 16940  1414  0020               	movlb	0	; select bank0
 16941  1415  01E7               	clrf	_pulseOutLATAWork_M0
 16942                           
 16943                           ;MotorDrive.c: 3048:     pulseOutLATBWork_M0 = 0;
 16944  1416  01E6               	clrf	_pulseOutLATBWork_M0
 16945                           
 16946                           ;MotorDrive.c: 3049:     pulseOutLATCWork_M0 = 0;
 16947  1417  01E5               	clrf	_pulseOutLATCWork_M0
 16948                           
 16949                           ;MotorDrive.c: 3051:     polarityBit ^= 0x01;
 16950  1418  3001               	movlw	1
 16951  1419  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16952  141A  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_OFF,w
 16953  141B  06F1               	xorwf	_polarityBit,f
 16954                           
 16955                           ;MotorDrive.c: 3053:     if (addShakePulseBit & 0x01) {
 16956  141C  1C70               	btfss	_addShakePulseBit,0
 16957  141D  2C23               	goto	i1l4630
 16958                           
 16959                           ;MotorDrive.c: 3054:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL1_P0
      +                          ;
 16960  141E  3023               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16961  141F  0021               	movlb	1	; select bank1
 16962  1420  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16963  1421  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16964  1422  2C27               	goto	L24
 16965  1423                     i1l4630:	
 16966                           ;MotorDrive.c: 3055:     } else {
 16967                           
 16968                           
 16969                           ;MotorDrive.c: 3056:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P1;
 16970  1423  3041               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16971  1424  0021               	movlb	1	; select bank1
 16972  1425  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16973  1426  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16974  1427                     L24:
 16975  1427  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16976                           
 16977                           ;MotorDrive.c: 3059:     OutRequestFlug = 1;
 16978  1428  01D6               	clrf	_OutRequestFlug^(0+128)
 16979  1429  0AD6               	incf	_OutRequestFlug^(0+128),f
 16980  142A  0008               	return
 16981  142B                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF:
 16982                           
 16983                           	psect	text123
 16984  117D                     __ptext123:	
 16985 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_P2 *****************
 16986 ;; Defined at:
 16987 ;;		line 3033 in file "MotorDrive.c"
 16988 ;; Parameters:    Size  Location     Type
 16989 ;;		None
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;		None
 16992 ;; Return value:  Size  Location     Type
 16993 ;;                  1    wreg      void 
 16994 ;; Registers used:
 16995 ;;		wreg, status,2
 16996 ;; Tracked objects:
 16997 ;;		On entry : 1F/1
 16998 ;;		On exit  : 1F/1
 16999 ;;		Unchanged: 0/0
 17000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17001 ;;      Params:         0       0       0       0       0       0       0       0
 17002 ;;      Locals:         0       0       0       0       0       0       0       0
 17003 ;;      Temps:          1       0       0       0       0       0       0       0
 17004 ;;      Totals:         1       0       0       0       0       0       0       0
 17005 ;;Total ram usage:        1 bytes
 17006 ;; Hardware stack levels used:    1
 17007 ;; This function calls:
 17008 ;;		Nothing
 17009 ;; This function is called by:
 17010 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P1
 17011 ;;		_TMR2_Interrupt
 17012 ;; This function uses a non-reentrant model
 17013 ;;
 17014                           
 17015                           
 17016                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_P2
 17017  117D                     _SetPulseOutLATxWork_M0_FWD_POL0_P2:
 17018                           
 17019                           ;MotorDrive.c: 3035:     pulseOutLATAWork_M0 = 0x02;
 17020                           
 17021                           ;incstack = 0
 17022                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_P2: [wreg+status,2]
 17023  117D  3002               	movlw	2
 17024  117E  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_P2
 17025  117F  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_P2,w
 17026  1180  0020               	movlb	0	; select bank0
 17027  1181  00E7               	movwf	_pulseOutLATAWork_M0
 17028                           
 17029                           ;MotorDrive.c: 3036:     pulseOutLATBWork_M0 = 0x00;
 17030  1182  01E6               	clrf	_pulseOutLATBWork_M0
 17031                           
 17032                           ;MotorDrive.c: 3037:     pulseOutLATCWork_M0 = 0x00;
 17033  1183  01E5               	clrf	_pulseOutLATCWork_M0
 17034                           
 17035                           ;MotorDrive.c: 3039:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_OFF;
 17036  1184  3014               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17037  1185  0021               	movlb	1	; select bank1
 17038  1186  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17039  1187  3014               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17040  1188  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17041                           
 17042                           ;MotorDrive.c: 3040:     OutRequestFlug = 1;
 17043  1189  01D6               	clrf	_OutRequestFlug^(0+128)
 17044  118A  0AD6               	incf	_OutRequestFlug^(0+128),f
 17045  118B  0008               	return
 17046  118C                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P2:
 17047                           
 17048                           	psect	text124
 17049  116E                     __ptext124:	
 17050 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_P1 *****************
 17051 ;; Defined at:
 17052 ;;		line 3111 in file "MotorDrive.c"
 17053 ;; Parameters:    Size  Location     Type
 17054 ;;		None
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;		None
 17057 ;; Return value:  Size  Location     Type
 17058 ;;                  1    wreg      void 
 17059 ;; Registers used:
 17060 ;;		wreg, status,2
 17061 ;; Tracked objects:
 17062 ;;		On entry : 1F/1
 17063 ;;		On exit  : 1F/1
 17064 ;;		Unchanged: 0/0
 17065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17066 ;;      Params:         0       0       0       0       0       0       0       0
 17067 ;;      Locals:         0       0       0       0       0       0       0       0
 17068 ;;      Temps:          1       0       0       0       0       0       0       0
 17069 ;;      Totals:         1       0       0       0       0       0       0       0
 17070 ;;Total ram usage:        1 bytes
 17071 ;; Hardware stack levels used:    1
 17072 ;; This function calls:
 17073 ;;		Nothing
 17074 ;; This function is called by:
 17075 ;;		_StartPulseOutM0
 17076 ;;		_SetPulseOutLATxWork_M0_REV_POL1_OFF
 17077 ;;		_TMR2_Interrupt
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           
 17082                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_P1
 17083  116E                     _SetPulseOutLATxWork_M0_REV_POL0_P1:
 17084                           
 17085                           ;MotorDrive.c: 3113:     pulseOutLATAWork_M0 = 0x00;
 17086                           
 17087                           ;incstack = 0
 17088                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_P1: [wreg+status,2]
 17089  116E  0020               	movlb	0	; select bank0
 17090  116F  01E7               	clrf	_pulseOutLATAWork_M0
 17091                           
 17092                           ;MotorDrive.c: 3114:     pulseOutLATBWork_M0 = 0x00;
 17093  1170  01E6               	clrf	_pulseOutLATBWork_M0
 17094                           
 17095                           ;MotorDrive.c: 3115:     pulseOutLATCWork_M0 = 0x02;
 17096  1171  3002               	movlw	2
 17097  1172  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_P1
 17098  1173  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_P1,w
 17099  1174  00E5               	movwf	_pulseOutLATCWork_M0
 17100                           
 17101                           ;MotorDrive.c: 3117:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_P2;
 17102  1175  309B               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P2
 17103  1176  0021               	movlb	1	; select bank1
 17104  1177  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17105  1178  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P2
 17106  1179  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17107                           
 17108                           ;MotorDrive.c: 3118:     OutRequestFlug = 1;
 17109  117A  01D6               	clrf	_OutRequestFlug^(0+128)
 17110  117B  0AD6               	incf	_OutRequestFlug^(0+128),f
 17111  117C  0008               	return
 17112  117D                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_P1:
 17113                           
 17114                           	psect	text125
 17115  115F                     __ptext125:	
 17116 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_P1 *****************
 17117 ;; Defined at:
 17118 ;;		line 3150 in file "MotorDrive.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;		None
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;		None
 17123 ;; Return value:  Size  Location     Type
 17124 ;;                  1    wreg      void 
 17125 ;; Registers used:
 17126 ;;		wreg, status,2
 17127 ;; Tracked objects:
 17128 ;;		On entry : 1F/1
 17129 ;;		On exit  : 1F/1
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17132 ;;      Params:         0       0       0       0       0       0       0       0
 17133 ;;      Locals:         0       0       0       0       0       0       0       0
 17134 ;;      Temps:          1       0       0       0       0       0       0       0
 17135 ;;      Totals:         1       0       0       0       0       0       0       0
 17136 ;;Total ram usage:        1 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; This function calls:
 17139 ;;		Nothing
 17140 ;; This function is called by:
 17141 ;;		_StartPulseOutM0
 17142 ;;		_SetPulseOutLATxWork_M0_REV_POL0_OFF
 17143 ;;		_TMR2_Interrupt
 17144 ;; This function uses a non-reentrant model
 17145 ;;
 17146                           
 17147                           
 17148                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_P1
 17149  115F                     _SetPulseOutLATxWork_M0_REV_POL1_P1:
 17150                           
 17151                           ;MotorDrive.c: 3152:     pulseOutLATAWork_M0 = 0x02;
 17152                           
 17153                           ;incstack = 0
 17154                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_P1: [wreg+status,2]
 17155  115F  3002               	movlw	2
 17156  1160  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_P1
 17157  1161  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_P1,w
 17158  1162  0020               	movlb	0	; select bank0
 17159  1163  00E7               	movwf	_pulseOutLATAWork_M0
 17160                           
 17161                           ;MotorDrive.c: 3153:     pulseOutLATBWork_M0 = 0x00;
 17162  1164  01E6               	clrf	_pulseOutLATBWork_M0
 17163                           
 17164                           ;MotorDrive.c: 3154:     pulseOutLATCWork_M0 = 0x00;
 17165  1165  01E5               	clrf	_pulseOutLATCWork_M0
 17166                           
 17167                           ;MotorDrive.c: 3156:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_P2;
 17168  1166  30AA               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P2
 17169  1167  0021               	movlb	1	; select bank1
 17170  1168  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17171  1169  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P2
 17172  116A  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17173                           
 17174                           ;MotorDrive.c: 3157:     OutRequestFlug = 1;
 17175  116B  01D6               	clrf	_OutRequestFlug^(0+128)
 17176  116C  0AD6               	incf	_OutRequestFlug^(0+128),f
 17177  116D  0008               	return
 17178  116E                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_P1:
 17179                           
 17180                           	psect	text126
 17181  1150                     __ptext126:	
 17182 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_P1 *****************
 17183 ;; Defined at:
 17184 ;;		line 3021 in file "MotorDrive.c"
 17185 ;; Parameters:    Size  Location     Type
 17186 ;;		None
 17187 ;; Auto vars:     Size  Location     Type
 17188 ;;		None
 17189 ;; Return value:  Size  Location     Type
 17190 ;;                  1    wreg      void 
 17191 ;; Registers used:
 17192 ;;		wreg, status,2
 17193 ;; Tracked objects:
 17194 ;;		On entry : 1F/1
 17195 ;;		On exit  : 1F/1
 17196 ;;		Unchanged: 0/0
 17197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17198 ;;      Params:         0       0       0       0       0       0       0       0
 17199 ;;      Locals:         0       0       0       0       0       0       0       0
 17200 ;;      Temps:          1       0       0       0       0       0       0       0
 17201 ;;      Totals:         1       0       0       0       0       0       0       0
 17202 ;;Total ram usage:        1 bytes
 17203 ;; Hardware stack levels used:    1
 17204 ;; This function calls:
 17205 ;;		Nothing
 17206 ;; This function is called by:
 17207 ;;		_StartPulseOutM0
 17208 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 17209 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 17210 ;;		_TMR2_Interrupt
 17211 ;; This function uses a non-reentrant model
 17212 ;;
 17213                           
 17214                           
 17215                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_P1
 17216  1150                     _SetPulseOutLATxWork_M0_FWD_POL0_P1:
 17217                           
 17218                           ;MotorDrive.c: 3023:     pulseOutLATAWork_M0 = 0x10;
 17219                           
 17220                           ;incstack = 0
 17221                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_P1: [wreg+status,2]
 17222  1150  3010               	movlw	16
 17223  1151  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_P1
 17224  1152  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_P1,w
 17225  1153  0020               	movlb	0	; select bank0
 17226  1154  00E7               	movwf	_pulseOutLATAWork_M0
 17227                           
 17228                           ;MotorDrive.c: 3024:     pulseOutLATBWork_M0 = 0x00;
 17229  1155  01E6               	clrf	_pulseOutLATBWork_M0
 17230                           
 17231                           ;MotorDrive.c: 3025:     pulseOutLATCWork_M0 = 0x00;
 17232  1156  01E5               	clrf	_pulseOutLATCWork_M0
 17233                           
 17234                           ;MotorDrive.c: 3027:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P2;
 17235  1157  307D               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P2
 17236  1158  0021               	movlb	1	; select bank1
 17237  1159  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17238  115A  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P2
 17239  115B  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17240                           
 17241                           ;MotorDrive.c: 3028:     OutRequestFlug = 1;
 17242  115C  01D6               	clrf	_OutRequestFlug^(0+128)
 17243  115D  0AD6               	incf	_OutRequestFlug^(0+128),f
 17244  115E  0008               	return
 17245  115F                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P1:
 17246                           
 17247                           	psect	text127
 17248  1141                     __ptext127:	
 17249 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_P1 *****************
 17250 ;; Defined at:
 17251 ;;		line 3066 in file "MotorDrive.c"
 17252 ;; Parameters:    Size  Location     Type
 17253 ;;		None
 17254 ;; Auto vars:     Size  Location     Type
 17255 ;;		None
 17256 ;; Return value:  Size  Location     Type
 17257 ;;                  1    wreg      void 
 17258 ;; Registers used:
 17259 ;;		wreg, status,2
 17260 ;; Tracked objects:
 17261 ;;		On entry : 1F/1
 17262 ;;		On exit  : 1F/1
 17263 ;;		Unchanged: 0/0
 17264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17265 ;;      Params:         0       0       0       0       0       0       0       0
 17266 ;;      Locals:         0       0       0       0       0       0       0       0
 17267 ;;      Temps:          1       0       0       0       0       0       0       0
 17268 ;;      Totals:         1       0       0       0       0       0       0       0
 17269 ;;Total ram usage:        1 bytes
 17270 ;; Hardware stack levels used:    1
 17271 ;; This function calls:
 17272 ;;		Nothing
 17273 ;; This function is called by:
 17274 ;;		_StartPulseOutM0
 17275 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17276 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 17277 ;;		_TMR2_Interrupt
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           
 17282                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_P1
 17283  1141                     _SetPulseOutLATxWork_M0_FWD_POL1_P1:
 17284                           
 17285                           ;MotorDrive.c: 3068:     pulseOutLATAWork_M0 = 0x20;
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_P1: [wreg+status,2]
 17289  1141  3020               	movlw	32
 17290  1142  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_P1
 17291  1143  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_P1,w
 17292  1144  0020               	movlb	0	; select bank0
 17293  1145  00E7               	movwf	_pulseOutLATAWork_M0
 17294                           
 17295                           ;MotorDrive.c: 3069:     pulseOutLATBWork_M0 = 0x00;
 17296  1146  01E6               	clrf	_pulseOutLATBWork_M0
 17297                           
 17298                           ;MotorDrive.c: 3070:     pulseOutLATCWork_M0 = 0x00;
 17299  1147  01E5               	clrf	_pulseOutLATCWork_M0
 17300                           
 17301                           ;MotorDrive.c: 3072:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P2;
 17302  1148  308C               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P2
 17303  1149  0021               	movlb	1	; select bank1
 17304  114A  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17305  114B  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P2
 17306  114C  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17307                           
 17308                           ;MotorDrive.c: 3073:     OutRequestFlug = 1;
 17309  114D  01D6               	clrf	_OutRequestFlug^(0+128)
 17310  114E  0AD6               	incf	_OutRequestFlug^(0+128),f
 17311  114F  0008               	return
 17312  1150                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P1:
 17313                           
 17314                           	psect	text128
 17315  1132                     __ptext128:	
 17316 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 *****************
 17317 ;; Defined at:
 17318 ;;		line 3360 in file "MotorDrive.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;		None
 17321 ;; Auto vars:     Size  Location     Type
 17322 ;;		None
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  1    wreg      void 
 17325 ;; Registers used:
 17326 ;;		wreg, status,2
 17327 ;; Tracked objects:
 17328 ;;		On entry : 1F/1
 17329 ;;		On exit  : 1F/1
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17332 ;;      Params:         0       0       0       0       0       0       0       0
 17333 ;;      Locals:         0       0       0       0       0       0       0       0
 17334 ;;      Temps:          1       0       0       0       0       0       0       0
 17335 ;;      Totals:         1       0       0       0       0       0       0       0
 17336 ;;Total ram usage:        1 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_StartPulseOutM0
 17342 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 17343 ;;		_TMR2_Interrupt
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           
 17348                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 17349  1132                     _SetPulseOutLATxWork_M0_SHAKE_POL0_P0:
 17350                           
 17351                           ;MotorDrive.c: 3362:     pulseOutLATAWork_M0 = 0x10;
 17352                           
 17353                           ;incstack = 0
 17354                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL0_P0: [wreg+status,2]
 17355  1132  3010               	movlw	16
 17356  1133  00F5               	movwf	??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 17357  1134  0875               	movf	??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0,w
 17358  1135  0020               	movlb	0	; select bank0
 17359  1136  00E7               	movwf	_pulseOutLATAWork_M0
 17360                           
 17361                           ;MotorDrive.c: 3363:     pulseOutLATBWork_M0 = 0x00;
 17362  1137  01E6               	clrf	_pulseOutLATBWork_M0
 17363                           
 17364                           ;MotorDrive.c: 3364:     pulseOutLATCWork_M0 = 0x00;
 17365  1138  01E5               	clrf	_pulseOutLATCWork_M0
 17366                           
 17367                           ;MotorDrive.c: 3366:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL0_OFF;
 17368  1139  30FE               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 17369  113A  0021               	movlb	1	; select bank1
 17370  113B  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17371  113C  3012               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 17372  113D  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17373                           
 17374                           ;MotorDrive.c: 3367:     OutRequestFlug = 1;
 17375  113E  01D6               	clrf	_OutRequestFlug^(0+128)
 17376  113F  0AD6               	incf	_OutRequestFlug^(0+128),f
 17377  1140  0008               	return
 17378  1141                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:
 17379                           
 17380                           	psect	text129
 17381  1123                     __ptext129:	
 17382 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 *****************
 17383 ;; Defined at:
 17384 ;;		line 3423 in file "MotorDrive.c"
 17385 ;; Parameters:    Size  Location     Type
 17386 ;;		None
 17387 ;; Auto vars:     Size  Location     Type
 17388 ;;		None
 17389 ;; Return value:  Size  Location     Type
 17390 ;;                  1    wreg      void 
 17391 ;; Registers used:
 17392 ;;		wreg, status,2
 17393 ;; Tracked objects:
 17394 ;;		On entry : 1F/1
 17395 ;;		On exit  : 1F/1
 17396 ;;		Unchanged: 0/0
 17397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17398 ;;      Params:         0       0       0       0       0       0       0       0
 17399 ;;      Locals:         0       0       0       0       0       0       0       0
 17400 ;;      Temps:          1       0       0       0       0       0       0       0
 17401 ;;      Totals:         1       0       0       0       0       0       0       0
 17402 ;;Total ram usage:        1 bytes
 17403 ;; Hardware stack levels used:    1
 17404 ;; This function calls:
 17405 ;;		Nothing
 17406 ;; This function is called by:
 17407 ;;		_StartPulseOutM0
 17408 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17409 ;;		_TMR2_Interrupt
 17410 ;; This function uses a non-reentrant model
 17411 ;;
 17412                           
 17413                           
 17414                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 17415  1123                     _SetPulseOutLATxWork_M0_SHAKE_POL1_P0:
 17416                           
 17417                           ;MotorDrive.c: 3425:     pulseOutLATAWork_M0 = 0x20;
 17418                           
 17419                           ;incstack = 0
 17420                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL1_P0: [wreg+status,2]
 17421  1123  3020               	movlw	32
 17422  1124  00F5               	movwf	??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 17423  1125  0875               	movf	??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0,w
 17424  1126  0020               	movlb	0	; select bank0
 17425  1127  00E7               	movwf	_pulseOutLATAWork_M0
 17426                           
 17427                           ;MotorDrive.c: 3426:     pulseOutLATBWork_M0 = 0x00;
 17428  1128  01E6               	clrf	_pulseOutLATBWork_M0
 17429                           
 17430                           ;MotorDrive.c: 3427:     pulseOutLATCWork_M0 = 0x00;
 17431  1129  01E5               	clrf	_pulseOutLATCWork_M0
 17432                           
 17433                           ;MotorDrive.c: 3429:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL1_OFF;
 17434  112A  3010               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 17435  112B  0021               	movlb	1	; select bank1
 17436  112C  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17437  112D  3013               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 17438  112E  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17439                           
 17440                           ;MotorDrive.c: 3430:     OutRequestFlug = 1;
 17441  112F  01D6               	clrf	_OutRequestFlug^(0+128)
 17442  1130  0AD6               	incf	_OutRequestFlug^(0+128),f
 17443  1131  0008               	return
 17444  1132                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:
 17445                           
 17446                           	psect	text130
 17447  1583                     __ptext130:	
 17448 ;; *************** function _ComparatorOn *****************
 17449 ;; Defined at:
 17450 ;;		line 2689 in file "MotorDrive.c"
 17451 ;; Parameters:    Size  Location     Type
 17452 ;;  motor_no        1    wreg     unsigned char 
 17453 ;; Auto vars:     Size  Location     Type
 17454 ;;  motor_no        1    0[COMMON] unsigned char 
 17455 ;; Return value:  Size  Location     Type
 17456 ;;                  1    wreg      void 
 17457 ;; Registers used:
 17458 ;;		wreg, status,2, status,0
 17459 ;; Tracked objects:
 17460 ;;		On entry : 1F/1
 17461 ;;		On exit  : 1F/0
 17462 ;;		Unchanged: 0/0
 17463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17464 ;;      Params:         0       0       0       0       0       0       0       0
 17465 ;;      Locals:         1       0       0       0       0       0       0       0
 17466 ;;      Temps:          0       0       0       0       0       0       0       0
 17467 ;;      Totals:         1       0       0       0       0       0       0       0
 17468 ;;Total ram usage:        1 bytes
 17469 ;; Hardware stack levels used:    1
 17470 ;; This function calls:
 17471 ;;		Nothing
 17472 ;; This function is called by:
 17473 ;;		_TMR2_Interrupt
 17474 ;; This function uses a non-reentrant model
 17475 ;;
 17476                           
 17477                           
 17478                           ;psect for function _ComparatorOn
 17479  1583                     _ComparatorOn:
 17480                           
 17481                           ;incstack = 0
 17482                           ; Regs used in _ComparatorOn: [wreg+status,2+status,0]
 17483                           ;ComparatorOn@motor_no stored from wreg
 17484  1583  00F5               	movwf	ComparatorOn@motor_no
 17485                           
 17486                           ;MotorDrive.c: 2689: void ComparatorOn(UB motor_no);MotorDrive.c: 2690: {;MotorDrive.c: 
      +                          2691:     if (motor_no == 0) {
 17487  1584  0875               	movf	ComparatorOn@motor_no,w
 17488  1585  1D03               	btfss	3,2
 17489  1586  2D93               	goto	i1l4350
 17490                           
 17491                           ;MotorDrive.c: 2692:         CM1CON0 = (0x14 | 0x80);
 17492  1587  3094               	movlw	148
 17493  1588  0022               	movlb	2	; select bank2
 17494  1589  0091               	movwf	17	;volatile
 17495                           
 17496                           ;MotorDrive.c: 2693:         if (polarityBit & 0x01) {
 17497  158A  1C71               	btfss	_polarityBit,0
 17498  158B  2D8E               	goto	i1l4346
 17499                           
 17500                           ;MotorDrive.c: 2695:             CM1CON1 = (0x90 | 0x00);
 17501  158C  3090               	movlw	144
 17502  158D  2D8F               	goto	L25
 17503  158E                     i1l4346:	
 17504                           ;MotorDrive.c: 2696:         } else {
 17505                           
 17506                           
 17507                           ;MotorDrive.c: 2698:             CM1CON1 = (0x90 | 0x01);
 17508  158E  3091               	movlw	145
 17509  158F                     L25:
 17510  158F  0092               	movwf	18	;volatile
 17511                           
 17512                           ;MotorDrive.c: 2700:         PIR2bits.C1IF = 0;
 17513  1590  0020               	movlb	0	; select bank0
 17514  1591  1292               	bcf	18,5	;volatile
 17515                           
 17516                           ;MotorDrive.c: 2702:     } else {
 17517  1592  0008               	return
 17518  1593                     i1l4350:
 17519                           
 17520                           ;MotorDrive.c: 2704:         CM2CON0 = (0x14 | 0x80);
 17521  1593  3094               	movlw	148
 17522  1594  0022               	movlb	2	; select bank2
 17523  1595  0093               	movwf	19	;volatile
 17524                           
 17525                           ;MotorDrive.c: 2705:         if (polarityBit & 0x02) {
 17526  1596  1CF1               	btfss	_polarityBit,1
 17527  1597  2D9A               	goto	i1l4356
 17528                           
 17529                           ;MotorDrive.c: 2707:             CM2CON1 = (0x90 | 0x02);
 17530  1598  3092               	movlw	146
 17531  1599  2D9B               	goto	L26
 17532  159A                     i1l4356:	
 17533                           ;MotorDrive.c: 2708:         } else {
 17534                           
 17535                           
 17536                           ;MotorDrive.c: 2710:             CM2CON1 = (0x90 | 0x03);
 17537  159A  3093               	movlw	147
 17538  159B                     L26:
 17539  159B  0094               	movwf	20	;volatile
 17540                           
 17541                           ;MotorDrive.c: 2712:         PIR2bits.C2IF = 0;
 17542  159C  0020               	movlb	0	; select bank0
 17543  159D  1312               	bcf	18,6	;volatile
 17544  159E  0008               	return
 17545  159F                     __end_of_ComparatorOn:
 17546                           
 17547                           	psect	text131
 17548  13C4                     __ptext131:	
 17549 ;; *************** function _ComparatorOff *****************
 17550 ;; Defined at:
 17551 ;;		line 2670 in file "MotorDrive.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;  motor_no        1    wreg     unsigned char 
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;  motor_no        1    0[COMMON] unsigned char 
 17556 ;; Return value:  Size  Location     Type
 17557 ;;                  1    wreg      void 
 17558 ;; Registers used:
 17559 ;;		wreg, status,2, status,0
 17560 ;; Tracked objects:
 17561 ;;		On entry : 1F/1
 17562 ;;		On exit  : 1F/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17565 ;;      Params:         0       0       0       0       0       0       0       0
 17566 ;;      Locals:         1       0       0       0       0       0       0       0
 17567 ;;      Temps:          0       0       0       0       0       0       0       0
 17568 ;;      Totals:         1       0       0       0       0       0       0       0
 17569 ;;Total ram usage:        1 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; This function calls:
 17572 ;;		Nothing
 17573 ;; This function is called by:
 17574 ;;		_TMR2_Interrupt
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           
 17579                           ;psect for function _ComparatorOff
 17580  13C4                     _ComparatorOff:
 17581                           
 17582                           ;incstack = 0
 17583                           ; Regs used in _ComparatorOff: [wreg+status,2+status,0]
 17584                           ;ComparatorOff@motor_no stored from wreg
 17585  13C4  00F5               	movwf	ComparatorOff@motor_no
 17586                           
 17587                           ;MotorDrive.c: 2670: void ComparatorOff(UB motor_no);MotorDrive.c: 2671: {;MotorDrive.c:
      +                           2672:     if (motor_no == 0) {
 17588  13C5  0875               	movf	ComparatorOff@motor_no,w
 17589  13C6  1D03               	btfss	3,2
 17590  13C7  2BCE               	goto	i1l4364
 17591                           
 17592                           ;MotorDrive.c: 2673:         CM1CON0 = 0x14;
 17593  13C8  3014               	movlw	20
 17594  13C9  0022               	movlb	2	; select bank2
 17595  13CA  0091               	movwf	17	;volatile
 17596                           
 17597                           ;MotorDrive.c: 2674:         CM1CON1 = 0x90;
 17598  13CB  3090               	movlw	144
 17599  13CC  0092               	movwf	18	;volatile
 17600                           
 17601                           ;MotorDrive.c: 2675:     } else {
 17602  13CD  2BD3               	goto	i1l4366
 17603  13CE                     i1l4364:
 17604                           
 17605                           ;MotorDrive.c: 2676:         CM2CON0 = 0x14;
 17606  13CE  3014               	movlw	20
 17607  13CF  0022               	movlb	2	; select bank2
 17608  13D0  0093               	movwf	19	;volatile
 17609                           
 17610                           ;MotorDrive.c: 2677:         CM2CON1 = 0x90;
 17611  13D1  3090               	movlw	144
 17612  13D2  0094               	movwf	20	;volatile
 17613  13D3                     i1l4366:
 17614                           
 17615                           ;MotorDrive.c: 2679:     PIR2bits.C1IF = 0;
 17616  13D3  0020               	movlb	0	; select bank0
 17617  13D4  1292               	bcf	18,5	;volatile
 17618                           
 17619                           ;MotorDrive.c: 2680:     PIR2bits.C2IF = 0;
 17620  13D5  1312               	bcf	18,6	;volatile
 17621  13D6  0008               	return
 17622  13D7                     __end_of_ComparatorOff:
 17623                           
 17624                           	psect	text132
 17625  10C8                     __ptext132:	
 17626 ;; *************** function _TMR1_ISR *****************
 17627 ;; Defined at:
 17628 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;		None
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;                  1    wreg      void 
 17635 ;; Registers used:
 17636 ;;		wreg, status,2, status,0, pclath, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 1F/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17642 ;;      Params:         0       0       0       0       0       0       0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0       0
 17644 ;;      Temps:          0       0       0       0       0       0       0       0
 17645 ;;      Totals:         0       0       0       0       0       0       0       0
 17646 ;;Total ram usage:        0 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    2
 17649 ;; This function calls:
 17650 ;;		_TMR1_CallBack
 17651 ;;		_TMR1_WriteTimer
 17652 ;; This function is called by:
 17653 ;;		_INTERRUPT_InterruptManager
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           
 17658                           ;psect for function _TMR1_ISR
 17659  10C8                     _TMR1_ISR:
 17660                           
 17661                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 17662                           
 17663                           ;incstack = 0
 17664                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 17665  10C8  1011               	bcf	17,0	;volatile
 17666                           
 17667                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 17668  10C9  0022               	movlb	2	; select bank2
 17669  10CA  086B               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 17670  10CB  00F6               	movwf	TMR1_WriteTimer@timerVal+1
 17671  10CC  086A               	movf	_timer1ReloadVal^(0+256),w	;volatile
 17672  10CD  00F5               	movwf	TMR1_WriteTimer@timerVal
 17673  10CE  3191  2114  3190   	fcall	_TMR1_WriteTimer
 17674                           
 17675                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 17676  10D1  3190  20A7         	fcall	_TMR1_CallBack
 17677  10D3  0008               	return
 17678  10D4                     __end_of_TMR1_ISR:
 17679                           
 17680                           	psect	text133
 17681  1114                     __ptext133:	
 17682 ;; *************** function _TMR1_WriteTimer *****************
 17683 ;; Defined at:
 17684 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 17685 ;; Parameters:    Size  Location     Type
 17686 ;;  timerVal        2    0[COMMON] unsigned short 
 17687 ;; Auto vars:     Size  Location     Type
 17688 ;;		None
 17689 ;; Return value:  Size  Location     Type
 17690 ;;                  1    wreg      void 
 17691 ;; Registers used:
 17692 ;;		wreg
 17693 ;; Tracked objects:
 17694 ;;		On entry : 1F/2
 17695 ;;		On exit  : 1F/0
 17696 ;;		Unchanged: 0/0
 17697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17698 ;;      Params:         2       0       0       0       0       0       0       0
 17699 ;;      Locals:         0       0       0       0       0       0       0       0
 17700 ;;      Temps:          0       0       0       0       0       0       0       0
 17701 ;;      Totals:         2       0       0       0       0       0       0       0
 17702 ;;Total ram usage:        2 bytes
 17703 ;; Hardware stack levels used:    1
 17704 ;; This function calls:
 17705 ;;		Nothing
 17706 ;; This function is called by:
 17707 ;;		_TMR1_ISR
 17708 ;; This function uses a non-reentrant model
 17709 ;;
 17710                           
 17711                           
 17712                           ;psect for function _TMR1_WriteTimer
 17713  1114                     _TMR1_WriteTimer:
 17714                           
 17715                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 17716                           
 17717                           ;incstack = 0
 17718                           ; Regs used in _TMR1_WriteTimer: [wreg]
 17719  1114  0020               	movlb	0	; select bank0
 17720  1115  1D18               	btfss	24,2	;volatile
 17721  1116  291E               	goto	i1l5644
 17722                           
 17723                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 17724  1117  1018               	bcf	24,0	;volatile
 17725                           
 17726                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 17727  1118  0876               	movf	TMR1_WriteTimer@timerVal+1,w
 17728  1119  0097               	movwf	23	;volatile
 17729                           
 17730                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 17731  111A  0875               	movf	TMR1_WriteTimer@timerVal,w
 17732  111B  0096               	movwf	22	;volatile
 17733                           
 17734                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 17735  111C  1418               	bsf	24,0	;volatile
 17736                           
 17737                           ;mcc_generated_files/tmr1.c: 133:     }
 17738  111D  0008               	return
 17739  111E                     i1l5644:
 17740                           
 17741                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 17742  111E  0876               	movf	TMR1_WriteTimer@timerVal+1,w
 17743  111F  0097               	movwf	23	;volatile
 17744                           
 17745                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 17746  1120  0875               	movf	TMR1_WriteTimer@timerVal,w
 17747  1121  0096               	movwf	22	;volatile
 17748  1122  0008               	return
 17749  1123                     __end_of_TMR1_WriteTimer:
 17750                           
 17751                           	psect	text134
 17752  10A7                     __ptext134:	
 17753 ;; *************** function _TMR1_CallBack *****************
 17754 ;; Defined at:
 17755 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 17756 ;; Parameters:    Size  Location     Type
 17757 ;;		None
 17758 ;; Auto vars:     Size  Location     Type
 17759 ;;		None
 17760 ;; Return value:  Size  Location     Type
 17761 ;;                  1    wreg      void 
 17762 ;; Registers used:
 17763 ;;		wreg, status,2, status,0, pclath, cstack
 17764 ;; Tracked objects:
 17765 ;;		On entry : 1F/0
 17766 ;;		On exit  : 0/0
 17767 ;;		Unchanged: 0/0
 17768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17769 ;;      Params:         0       0       0       0       0       0       0       0
 17770 ;;      Locals:         0       0       0       0       0       0       0       0
 17771 ;;      Temps:          0       0       0       0       0       0       0       0
 17772 ;;      Totals:         0       0       0       0       0       0       0       0
 17773 ;;Total ram usage:        0 bytes
 17774 ;; Hardware stack levels used:    1
 17775 ;; Hardware stack levels required when called:    1
 17776 ;; This function calls:
 17777 ;;		Absolute function
 17778 ;;		_TMR1_DefaultInterruptHandler
 17779 ;; This function is called by:
 17780 ;;		_TMR1_ISR
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           
 17785                           ;psect for function _TMR1_CallBack
 17786  10A7                     _TMR1_CallBack:
 17787                           
 17788                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 17789                           
 17790                           ;incstack = 0
 17791                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 17792  10A7  0022               	movlb	2	; select bank2
 17793  10A8  0868               	movf	_TMR1_InterruptHandler^(0+256),w
 17794  10A9  0469               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 17795  10AA  1903               	btfsc	3,2
 17796  10AB  0008               	return
 17797                           
 17798                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 17799  10AC  0869               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 17800  10AD  008A               	movwf	10
 17801  10AE  0868               	movf	_TMR1_InterruptHandler^(0+256),w
 17802  10AF  000A               	callw
 17803  10B0  3190               	pagesel	$
 17804  10B1  0008               	return
 17805  10B2                     __end_of_TMR1_CallBack:
 17806                           
 17807                           	psect	text135
 17808  1047                     __ptext135:	
 17809 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 17810 ;; Defined at:
 17811 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 17812 ;; Parameters:    Size  Location     Type
 17813 ;;		None
 17814 ;; Auto vars:     Size  Location     Type
 17815 ;;		None
 17816 ;; Return value:  Size  Location     Type
 17817 ;;                  1    wreg      void 
 17818 ;; Registers used:
 17819 ;;		None
 17820 ;; Tracked objects:
 17821 ;;		On entry : 1F/2
 17822 ;;		On exit  : 1F/2
 17823 ;;		Unchanged: 1F/0
 17824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17825 ;;      Params:         0       0       0       0       0       0       0       0
 17826 ;;      Locals:         0       0       0       0       0       0       0       0
 17827 ;;      Temps:          0       0       0       0       0       0       0       0
 17828 ;;      Totals:         0       0       0       0       0       0       0       0
 17829 ;;Total ram usage:        0 bytes
 17830 ;; Hardware stack levels used:    1
 17831 ;; This function calls:
 17832 ;;		Nothing
 17833 ;; This function is called by:
 17834 ;;		_TMR1_Initialize
 17835 ;;		_TMR1_CallBack
 17836 ;; This function uses a non-reentrant model
 17837 ;;
 17838                           
 17839                           
 17840                           ;psect for function _TMR1_DefaultInterruptHandler
 17841  1047                     _TMR1_DefaultInterruptHandler:
 17842                           
 17843                           ;incstack = 0
 17844                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 17845  1047  0008               	return
 17846  1048                     __end_of_TMR1_DefaultInterruptHandler:
 17847  007E                     btemp	set	126	;btemp
 17848  007E                     int$flags	set	126
 17849  007E                     wtemp0	set	126
 17850  2138                     
 17851                           	psect	config
 17852                           
 17853                           ;Config register CONFIG1 @ 0x8007
 17854                           ;	Oscillator Selection Bits
 17855                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17856                           ;	Watchdog Timer Enable
 17857                           ;	WDTE = OFF, WDT disabled
 17858                           ;	Power-up Timer Enable
 17859                           ;	PWRTE = OFF, PWRT disabled
 17860                           ;	MCLR Pin Function Select
 17861                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17862                           ;	Flash Program Memory Code Protection
 17863                           ;	CP = OFF, Program memory code protection is disabled
 17864                           ;	Brown-out Reset Enable
 17865                           ;	BOREN = ON, Brown-out Reset enabled
 17866                           ;	Clock Out Enable
 17867                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17868                           ;	Internal/External Switchover Mode
 17869                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 17870                           ;	Fail-Safe Clock Monitor Enable
 17871                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17872  8007                     	org	32775
 17873  8007  3FE4               	dw	16356
 17874                           
 17875                           ;Config register CONFIG2 @ 0x8008
 17876                           ;	Flash Memory Self-Write Protection
 17877                           ;	WRT = OFF, Write protection off
 17878                           ;	Stack Overflow/Underflow Reset Enable
 17879                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17880                           ;	Brown-out Reset Voltage Selection
 17881                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17882                           ;	Low-Power Brown Out Reset
 17883                           ;	LPBOR = OFF, Low-Power BOR is disabled
 17884                           ;	Low-Voltage Programming Enable
 17885                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
 17886  8008                     	org	32776
 17887  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    94
    Data        0
    BSS         235
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     47      80
    BANK1            80      1      80
    BANK2            80      2      80
    BANK3            72      1      47
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    SPIControl_ExecuteCommand$2146	const PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    SPIControl_ExecuteCommand$2141	const PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    SpiCmmandFunction	const PTR FTN(unsigned char ,)void [14] size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    CorrectPosition@pos	PTR short  size(2) Largest target is 92
		 -> detectBasePosition(BANK2[4]), missingDetectFinePosition(BANK1[2]), detectLoadPosition(BIGRAM[92]), currentPosition(BANK0[4]), 
		 -> targetPosition(BANK2[4]), 

    detectLoadPositionTypePtr	PTR unsigned char [2] size(1) Largest target is 46
		 -> detectLoadPositionType(BANK2[46]), 

    detectLoadPositionPtr	PTR short [2] size(2) Largest target is 92
		 -> detectLoadPosition(BIGRAM[92]), 

    sp__GetAfterDetectLoadFunc	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    SetAfterDetectLoadFunc@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> VerifyHandPosition_LoadPosition(), AfterDetectedLoadPosition(), 

    SetAfterMotorStopFunc@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), SPIControl_SetNotification(), 

    cbAfterMotorStopFunc	PTR FTN(unsigned char ,)void [2] size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), SPIControl_SetNotification(), 
		 -> NULL(NULL[0]), 

    WatchMotorDriveFinish@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), VerifyHandPosition_LoadPosition(), 
		 -> SPIControl_SetNotification(), AfterDetectedLoadPosition(), NULL(NULL[0]), 

    cbAfterDetectLoadFunc	PTR FTN(unsigned char ,)void [2] size(2) Largest target is 1
		 -> VerifyHandPosition_LoadPosition(), AfterDetectedLoadPosition(), NULL(NULL[0]), 

    spkOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_SPK_SHORT(), SetDataTRISxWork_SPK_OPEN(), Absolute function(), 

    m1PulseOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_M1_SPK_POL1_SHORT(), SetDataTRISxWork_M1_SPK_POL1_OPEN(), SetPulseOutLATxWork_M1_SHAKE_POL1_OFF(), SetDataTRISxWork_M1_SPK_POL0_SHORT(), 
		 -> SetDataTRISxWork_M1_SPK_POL0_OPEN(), SetPulseOutLATxWork_M1_SHAKE_POL0_OFF(), SetPulseOutLATxWork_M1_REV_POL1_OFF(), SetPulseOutLATxWork_M1_REV_POL1_P2(), 
		 -> SetPulseOutLATxWork_M1_REV_POL0_OFF(), SetPulseOutLATxWork_M1_REV_POL0_P2(), SetPulseOutLATxWork_M1_FWD_POL1_OFF(), SetPulseOutLATxWork_M1_FWD_POL1_P2(), 
		 -> SetPulseOutLATxWork_M1_FWD_POL0_OFF(), SetPulseOutLATxWork_M1_FWD_POL0_P2(), SetPulseOutLATxWork_M1_REV_POL0_P1(), SetPulseOutLATxWork_M1_REV_POL1_P1(), 
		 -> SetPulseOutLATxWork_M1_FWD_POL0_P1(), SetPulseOutLATxWork_M1_FWD_POL1_P1(), SetPulseOutLATxWork_M1_SHAKE_POL0_P0(), SetPulseOutLATxWork_M1_SHAKE_POL1_P0(), 
		 -> Absolute function(), 

    m0PulseOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_M0_SPK_POL1_SHORT(), SetDataTRISxWork_M0_SPK_POL1_OPEN(), SetPulseOutLATxWork_M0_SHAKE_POL1_OFF(), SetDataTRISxWork_M0_SPK_POL0_SHORT(), 
		 -> SetDataTRISxWork_M0_SPK_POL0_OPEN(), SetPulseOutLATxWork_M0_SHAKE_POL0_OFF(), SetPulseOutLATxWork_M0_REV_POL1_OFF(), SetPulseOutLATxWork_M0_REV_POL1_P2(), 
		 -> SetPulseOutLATxWork_M0_REV_POL0_OFF(), SetPulseOutLATxWork_M0_REV_POL0_P2(), SetPulseOutLATxWork_M0_FWD_POL1_OFF(), SetPulseOutLATxWork_M0_FWD_POL1_P2(), 
		 -> SetPulseOutLATxWork_M0_FWD_POL0_OFF(), SetPulseOutLATxWork_M0_FWD_POL0_P2(), SetPulseOutLATxWork_M0_REV_POL0_P1(), SetPulseOutLATxWork_M0_REV_POL1_P1(), 
		 -> SetPulseOutLATxWork_M0_FWD_POL0_P1(), SetPulseOutLATxWork_M0_FWD_POL1_P1(), SetPulseOutLATxWork_M0_SHAKE_POL0_P0(), SetPulseOutLATxWork_M0_SHAKE_POL1_P0(), 
		 -> Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Interrupt_SPK(), TMR2_Interrupt(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Interrupt_SPK(), TMR2_Interrupt(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_TMR2_Interrupt
    _SpkVrsCheck->_ExcitatingOutOff
    _ExcitatingOutOn->i1_SetOutPutLATX
    _ExcitatingOutOff->i1_SetExcitatingOutOffData
    i1_SetExcitatingOutOffData->i1_SetOutPutLATX
    _TMR2_Interrupt->_VrsCheck
    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _SPIControl_RecieveComannd->_WatchMotorDriveFinish
    _WatchMotorDriveFinish->_VerifyHandPosition_LoadPosition
    _VerifyHandPosition_LoadPosition->_MoveTargetPosition
    _SetMotorCorrectPositionStart->_InitPositionSearch
    _AfterDetectedLoadPosition->_MoveTargetPosition
    _UpdateCurrentPositionByFinePosition->___wmul
    _UpdataHandPosition->_CorrectPosition
    _SaveLoadPosition->___wmul
    _MoveTargetPosition->_CalcMotorStepCounter
    _DetermineBasePosition->_CorrectPosition
    _SPIControl_ExecuteCommand->_SpiCmdFunc_FwdPulseWithCorrect
    _SetMotorStopSPK->_SetExcitatingOutOffData
    _SetMotorStopSPK->_TMR2_SetInterruptHandler
    _SetMotorStartSPK->_SetExcitatingOutOffData
    _SetMotorStartSPK->_TMR2_SetInterruptHandler
    _SetExcitatingOutOffData->_SetOutPutLATX
    _SetMotorPositionSearchStart->_InitPositionSearch
    _InitPositionSearch->___wmul
    _UpdateTargetPosition->_CorrectPosition
    _CalcMotorStepCounter->_PriorUpdateCorrentPosition
    _SetMotorStepCounter->_PriorUpdateCorrentPosition
    _PriorUpdateCorrentPosition->_CorrectPosition
    _CorrectPosition->___wmul
    _SetMotorStart->_StartPulseOutM0
    _SetMotorStart->_StartPulseOutM1

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SPIControl_RecieveComannd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _SPIControl_RecieveComannd->_WatchMotorDriveFinish

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  233837
                                              0 BANK3      1     1      0
             _InitPulsePositionTable
          _SPIControl_RecieveComannd
                           _SPI_Open
                  _SYSTEM_Initialize
              _SetMotorAddShakePulse
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
                     _TMR1_StopTimer
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorAddShakePulse                                4     3      1     242
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     512
                     _DAC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     391
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Open                                             4     4      0      88
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPIControl_RecieveComannd                            1     1      0  226918
                                              0 BANK1      1     1      0
          _SPIControl_ExecuteCommand
                       _SPI_ReadByte
              _WatchMotorDriveFinish
 ---------------------------------------------------------------------------------
 (2) _WatchMotorDriveFinish                                3     3      0  151040
                                             46 BANK0      1     1      0
                                              0 BANK2      2     2      0
          _AfterDetectedLoadPosition *
         _SPIControl_SetNotification *
         _SetFwdPulseWithCorrectProc *
       _SpiCmdFunc_DisableExcitating *
        _SpiCmdFunc_EnableExcitating *
          _SpiCmdFunc_FwdPulseNormal *
     _SpiCmdFunc_FwdPulsePositionCtl *
     _SpiCmdFunc_FwdPulseWithCorrect *
       _SpiCmdFunc_FwdPulseWithShake *
          _SpiCmdFunc_RevPulseNormal *
     _SpiCmdFunc_RevPulsePositionCtl *
      _SpiCmdFunc_Search1008Position *
      _SpiCmdFunc_SearchBasePosition *
      _SpiCmdFunc_SearchLoadPosition *
          _SpiCmdFunc_StartDetectVrs *
           _SpiCmdFunc_StopDetectVrs *
                    _SpiCmdFunc_Test *
    _VerifyHandPosition_LoadPosition *
 ---------------------------------------------------------------------------------
 (3) _VerifyHandPosition_LoadPosition                     19    18      1   21394
                                             29 BANK0     17    16      1
                    _CorrectPosition
                 _MoveTargetPosition
       _SetMotorCorrectPositionStart
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetMotorCorrectPositionStart                         3     3      0    6392
                                             16 BANK0      3     3      0
                 _InitPositionSearch
             _SetAfterDetectLoadFunc
 ---------------------------------------------------------------------------------
 (3) _SPIControl_SetNotification                           2     1      1       0
                                             29 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _AfterDetectedLoadPosition                           11    10      1   42663
                                             29 BANK0     11    10      1
               _ActivateHandPosition
                    _CorrectPosition
              _DetermineBasePosition
                 _InitPositionSearch
                 _MoveTargetPosition
                   _SaveLoadPosition
             _SetAfterDetectLoadFunc
              _SetAfterMotorStopFunc
                       _SetDriveType
                 _SetMotorBitMotorNo
                      _SetMotorStart
                 _UpdataHandPosition
_UpdateCurrentPositionByFinePosition
 ---------------------------------------------------------------------------------
 (4) _UpdateCurrentPositionByFinePosition                 14    14      0    5517
                                              6 BANK0     12    12      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _UpdataHandPosition                                  12    12      0    6752
                                             13 BANK0     12    12      0
                    _CorrectPosition
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetMotorBitMotorNo                                   3     3      0      62
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _SaveLoadPosition                                    18    18      0    5480
                                              6 BANK0     18    18      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _MoveTargetPosition                                   2     2      0    7528
                                             27 BANK0      2     2      0
               _CalcMotorStepCounter
                  _SetMotorFrequency
                      _SetMotorStart
 ---------------------------------------------------------------------------------
 (4) _DetermineBasePosition                               12    12      0    7273
                                             13 BANK0     12    12      0
                    _CorrectPosition
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ActivateHandPosition                                 3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _SPI_ReadByte                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPIControl_ExecuteCommand                            5     5      0   75878
                                             32 BANK0      5     5      0
                   _GetIsMotorActive
              _SetAfterMotorStopFunc
       _SpiCmdFunc_DisableExcitating *
        _SpiCmdFunc_EnableExcitating *
          _SpiCmdFunc_FwdPulseNormal *
     _SpiCmdFunc_FwdPulsePositionCtl *
     _SpiCmdFunc_FwdPulseWithCorrect *
       _SpiCmdFunc_FwdPulseWithShake *
          _SpiCmdFunc_RevPulseNormal *
     _SpiCmdFunc_RevPulsePositionCtl *
      _SpiCmdFunc_Search1008Position *
      _SpiCmdFunc_SearchBasePosition *
      _SpiCmdFunc_SearchLoadPosition *
          _SpiCmdFunc_StartDetectVrs *
           _SpiCmdFunc_StopDetectVrs *
                    _SpiCmdFunc_Test *
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_Test                                      1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_StopDetectVrs                             1     0      1     391
                                             29 BANK0      1     0      1
                    _SetMotorStopSPK
 ---------------------------------------------------------------------------------
 (4) _SetMotorStopSPK                                      1     1      0     391
                                              2 BANK0      1     1      0
            _SetExcitatingOutOffData
                   _SpkComparatorOff
           _TMR2_SetInterruptHandler
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (5) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SpkComparatorOff                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_StartDetectVrs                            1     0      1     391
                                             29 BANK0      1     0      1
                   _SetMotorStartSPK
 ---------------------------------------------------------------------------------
 (4) _SetMotorStartSPK                                     0     0      0     391
            _SetExcitatingOutOffData
                    _SpkComparatorOn
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     391
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SpkComparatorOn                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetExcitatingOutOffData                              1     1      0       0
                                              1 BANK0      1     1      0
                      _SetOutPutLATX
 ---------------------------------------------------------------------------------
 (6) _SetOutPutLATX                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_SearchLoadPosition                        1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_SearchBasePosition                        2     1      1   13319
                                             29 BANK0      2     1      1
             _DeactivateHandPosition
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
        _SetMotorPositionSearchStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_Search1008Position                        2     1      1   13449
                                             29 BANK0      2     1      1
             _DeactivateHandPosition
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
        _SetMotorPositionSearchStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (4) _SetMotorPositionSearchStart                          1     1      0    6454
                                             16 BANK0      1     1      0
                 _InitPositionSearch
             _SetAfterDetectLoadFunc
                      _SetMotorStart
 ---------------------------------------------------------------------------------
 (5) _InitPositionSearch                                  10    10      0    5666
                                              6 BANK0     10    10      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4686
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     416
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _DeactivateHandPosition                               3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_RevPulsePositionCtl                       2     1      1   10696
                                             29 BANK0      2     1      1
               _CalcMotorStepCounter
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_RevPulseNormal                            2     1      1    6834
                                             29 BANK0      2     1      1
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseWithShake                         1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseWithCorrect                       3     2      1   12351
                                             29 BANK0      3     2      1
                   _GetIsMotorActive
              _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
                       _SetMotorStop
 ---------------------------------------------------------------------------------
 (4) _SetMotorStop                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _SetFwdPulseWithCorrectProc                           4     3      1   11762
                                             29 BANK0      4     3      1
               _CalcMotorStepCounter
             _SetAfterDetectLoadFunc
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (5) _SetAfterDetectLoadFunc                               3     1      2     602
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _SetAfterMotorStopFunc                                3     1      2     332
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetIsMotorActive                                     4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulsePositionCtl                       2     1      1   10696
                                             29 BANK0      2     1      1
               _CalcMotorStepCounter
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (4) _UpdateTargetPosition                                 5     3      2    2082
                                             13 BANK0      5     3      2
                    _CorrectPosition
 ---------------------------------------------------------------------------------
 (5) _CalcMotorStepCounter                                11    11      0    5170
                                             16 BANK0     11    11      0
                    _CorrectPosition
         _PriorUpdateCorrentPosition
                  _SetMotorDirection
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseNormal                            2     1      1    6834
                                             29 BANK0      2     1      1
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (1) _SetMotorStepCounter                                  3     1      2    2538
                                             16 BANK0      3     1      2
         _PriorUpdateCorrentPosition
 ---------------------------------------------------------------------------------
 (2) _PriorUpdateCorrentPosition                           3     3      0    1905
                                             13 BANK0      3     3      0
                    _CorrectPosition
 ---------------------------------------------------------------------------------
 (3) _CorrectPosition                                      7     3      4    1688
                                              6 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorStart                                        1     1      0      31
                                              1 BANK0      1     1      0
                    _StartPulseOutM0
                    _StartPulseOutM1
 ---------------------------------------------------------------------------------
 (2) _StartPulseOutM1                                      1     1      0       0
                                              0 BANK0      1     1      0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _StartPulseOutM0                                      1     1      0       0
                                              0 BANK0      1     1      0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorFrequency                                    4     2      2    2234
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _SetMotorDirection                                    4     3      1     852
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _SetDriveType                                         4     3      1    1024
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_EnableExcitating                          1     0      1      62
                                             29 BANK0      1     0      1
           _SetMotorEnableExcitating
 ---------------------------------------------------------------------------------
 (4) _SetMotorEnableExcitating                             3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_DisableExcitating                         1     0      1      62
                                             29 BANK0      1     0      1
          _SetMotorDisableExcitating
 ---------------------------------------------------------------------------------
 (4) _SetMotorDisableExcitating                            3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPulsePositionTable                               2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     295
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0      66
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR2_CallBack                                       0     0      0      66
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                     _TMR2_Interrupt *
                 _TMR2_Interrupt_SPK *
 ---------------------------------------------------------------------------------
 (11) _TMR2_Interrupt_SPK                                  1     1      0       0
                                              3 COMMON     1     1      0
                   Absolute function *
          _SetDataTRISxWork_SPK_OPEN *
         _SetDataTRISxWork_SPK_SHORT *
                        _SpkVrsCheck
 ---------------------------------------------------------------------------------
 (12) _SpkVrsCheck                                         0     0      0       0
                   _ExcitatingOutOff
                    _ExcitatingOutOn
 ---------------------------------------------------------------------------------
 (13) _ExcitatingOutOn                                     1     1      0       0
                                              1 COMMON     1     1      0
                    i1_SetOutPutLATX
 ---------------------------------------------------------------------------------
 (13) _ExcitatingOutOff                                    1     1      0       0
                                              2 COMMON     1     1      0
          i1_SetExcitatingOutOffData
 ---------------------------------------------------------------------------------
 (14) i1_SetExcitatingOutOffData                           1     1      0       0
                                              1 COMMON     1     1      0
                    i1_SetOutPutLATX
 ---------------------------------------------------------------------------------
 (14) i1_SetOutPutLATX                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_SPK_SHORT                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_SPK_OPEN                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_Interrupt                                      3     3      0      66
                                              2 COMMON     3     3      0
                   Absolute function *
                      _ComparatorOff
                       _ComparatorOn
  _SetDataTRISxWork_M0_SPK_POL0_OPEN *
 _SetDataTRISxWork_M0_SPK_POL0_SHORT *
  _SetDataTRISxWork_M0_SPK_POL1_OPEN *
 _SetDataTRISxWork_M0_SPK_POL1_SHORT *
  _SetDataTRISxWork_M1_SPK_POL0_OPEN *
 _SetDataTRISxWork_M1_SPK_POL0_SHORT *
  _SetDataTRISxWork_M1_SPK_POL1_OPEN *
 _SetDataTRISxWork_M1_SPK_POL1_SHORT *
_SetPulseOutLATxWork_M0_FWD_POL0_OFF *
 _SetPulseOutLATxWork_M0_FWD_POL0_P1 *
 _SetPulseOutLATxWork_M0_FWD_POL0_P2 *
_SetPulseOutLATxWork_M0_FWD_POL1_OFF *
 _SetPulseOutLATxWork_M0_FWD_POL1_P1 *
 _SetPulseOutLATxWork_M0_FWD_POL1_P2 *
_SetPulseOutLATxWork_M0_REV_POL0_OFF *
 _SetPulseOutLATxWork_M0_REV_POL0_P1 *
 _SetPulseOutLATxWork_M0_REV_POL0_P2 *
_SetPulseOutLATxWork_M0_REV_POL1_OFF *
 _SetPulseOutLATxWork_M0_REV_POL1_P1 *
 _SetPulseOutLATxWork_M0_REV_POL1_P2 *
_SetPulseOutLATxWork_M0_SHAKE_POL0_O *
_SetPulseOutLATxWork_M0_SHAKE_POL0_P *
_SetPulseOutLATxWork_M0_SHAKE_POL1_O *
_SetPulseOutLATxWork_M0_SHAKE_POL1_P *
_SetPulseOutLATxWork_M1_FWD_POL0_OFF *
 _SetPulseOutLATxWork_M1_FWD_POL0_P1 *
 _SetPulseOutLATxWork_M1_FWD_POL0_P2 *
_SetPulseOutLATxWork_M1_FWD_POL1_OFF *
 _SetPulseOutLATxWork_M1_FWD_POL1_P1 *
 _SetPulseOutLATxWork_M1_FWD_POL1_P2 *
_SetPulseOutLATxWork_M1_REV_POL0_OFF *
 _SetPulseOutLATxWork_M1_REV_POL0_P1 *
 _SetPulseOutLATxWork_M1_REV_POL0_P2 *
_SetPulseOutLATxWork_M1_REV_POL1_OFF *
 _SetPulseOutLATxWork_M1_REV_POL1_P1 *
 _SetPulseOutLATxWork_M1_REV_POL1_P2 *
_SetPulseOutLATxWork_M1_SHAKE_POL0_O *
_SetPulseOutLATxWork_M1_SHAKE_POL0_P *
_SetPulseOutLATxWork_M1_SHAKE_POL1_O *
_SetPulseOutLATxWork_M1_SHAKE_POL1_P *
                           _VrsCheck
                   i1_TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR2_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _VrsCheck                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL1_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL0_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL1_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL0_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL1_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL1_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL0_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL0_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL1_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL1_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL0_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL0_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ComparatorOn                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ComparatorOff                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPulsePositionTable
   _SPIControl_RecieveComannd
     _SPIControl_ExecuteCommand
       _GetIsMotorActive
       _SetAfterMotorStopFunc
       _SpiCmdFunc_DisableExcitating *
         _SetMotorDisableExcitating
       _SpiCmdFunc_EnableExcitating *
         _SetMotorEnableExcitating
       _SpiCmdFunc_FwdPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_FwdPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_FwdPulseWithCorrect *
         _GetIsMotorActive
         _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetAfterDetectLoadFunc
           _SetDriveType
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
           _UpdateTargetPosition
             _CorrectPosition
               ___wmul (ARG)
         _SetMotorStop
       _SpiCmdFunc_FwdPulseWithShake *
       _SpiCmdFunc_RevPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_RevPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_Search1008Position *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchBasePosition *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchLoadPosition *
       _SpiCmdFunc_StartDetectVrs *
         _SetMotorStartSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOn
           _TMR2_SetInterruptHandler
           _TMR2_StartTimer
       _SpiCmdFunc_StopDetectVrs *
         _SetMotorStopSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOff
           _TMR2_SetInterruptHandler
           _TMR2_StopTimer
       _SpiCmdFunc_Test *
     _SPI_ReadByte
     _WatchMotorDriveFinish
       _AfterDetectedLoadPosition *
         _ActivateHandPosition
         _CorrectPosition
           ___wmul (ARG)
         _DetermineBasePosition
           _CorrectPosition
             ___wmul (ARG)
           ___bmul
           ___wmul
         _InitPositionSearch
           ___bmul
           ___wmul
         _MoveTargetPosition
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SaveLoadPosition
           ___bmul
           ___wmul
         _SetAfterDetectLoadFunc
         _SetAfterMotorStopFunc
         _SetDriveType
         _SetMotorBitMotorNo
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdataHandPosition
           _CorrectPosition
             ___wmul (ARG)
           ___wmul
         _UpdateCurrentPositionByFinePosition
           ___bmul
           ___wmul
       _SPIControl_SetNotification *
       _SetFwdPulseWithCorrectProc *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetAfterDetectLoadFunc
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_DisableExcitating *
         _SetMotorDisableExcitating
       _SpiCmdFunc_EnableExcitating *
         _SetMotorEnableExcitating
       _SpiCmdFunc_FwdPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_FwdPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_FwdPulseWithCorrect *
         _GetIsMotorActive
         _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetAfterDetectLoadFunc
           _SetDriveType
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
           _UpdateTargetPosition
             _CorrectPosition
               ___wmul (ARG)
         _SetMotorStop
       _SpiCmdFunc_FwdPulseWithShake *
       _SpiCmdFunc_RevPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_RevPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_Search1008Position *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchBasePosition *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchLoadPosition *
       _SpiCmdFunc_StartDetectVrs *
         _SetMotorStartSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOn
           _TMR2_SetInterruptHandler
           _TMR2_StartTimer
       _SpiCmdFunc_StopDetectVrs *
         _SetMotorStopSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOff
           _TMR2_SetInterruptHandler
           _TMR2_StopTimer
       _SpiCmdFunc_Test *
       _VerifyHandPosition_LoadPosition *
         _CorrectPosition
           ___wmul (ARG)
         _MoveTargetPosition
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorCorrectPositionStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
         ___bmul
         ___wmul
   _SPI_Open
   _SYSTEM_Initialize
     _DAC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _SetMotorAddShakePulse
   _SetMotorDirection
   _SetMotorFrequency
   _SetMotorStart
     _StartPulseOutM0
       _TMR2_StartTimer
     _StartPulseOutM1
       _TMR2_StartTimer
   _SetMotorStepCounter
     _PriorUpdateCorrentPosition
       _CorrectPosition
         ___wmul (ARG)
   _TMR1_StopTimer
   _TMR2_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _TMR2_Interrupt *
         Absolute function(Fake) *
         _ComparatorOff *
         _ComparatorOn *
         _SetDataTRISxWork_M0_SPK_POL0_OPEN *
         _SetDataTRISxWork_M0_SPK_POL0_SHORT *
         _SetDataTRISxWork_M0_SPK_POL1_OPEN *
         _SetDataTRISxWork_M0_SPK_POL1_SHORT *
         _SetDataTRISxWork_M1_SPK_POL0_OPEN *
         _SetDataTRISxWork_M1_SPK_POL0_SHORT *
         _SetDataTRISxWork_M1_SPK_POL1_OPEN *
         _SetDataTRISxWork_M1_SPK_POL1_SHORT *
         _SetPulseOutLATxWork_M0_FWD_POL0_OFF *
         _SetPulseOutLATxWork_M0_FWD_POL0_P1 *
         _SetPulseOutLATxWork_M0_FWD_POL0_P2 *
         _SetPulseOutLATxWork_M0_FWD_POL1_OFF *
         _SetPulseOutLATxWork_M0_FWD_POL1_P1 *
         _SetPulseOutLATxWork_M0_FWD_POL1_P2 *
         _SetPulseOutLATxWork_M0_REV_POL0_OFF *
         _SetPulseOutLATxWork_M0_REV_POL0_P1 *
         _SetPulseOutLATxWork_M0_REV_POL0_P2 *
         _SetPulseOutLATxWork_M0_REV_POL1_OFF *
         _SetPulseOutLATxWork_M0_REV_POL1_P1 *
         _SetPulseOutLATxWork_M0_REV_POL1_P2 *
         _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF *
         _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 *
         _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF *
         _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 *
         _SetPulseOutLATxWork_M1_FWD_POL0_OFF *
         _SetPulseOutLATxWork_M1_FWD_POL0_P1 *
         _SetPulseOutLATxWork_M1_FWD_POL0_P2 *
         _SetPulseOutLATxWork_M1_FWD_POL1_OFF *
         _SetPulseOutLATxWork_M1_FWD_POL1_P1 *
         _SetPulseOutLATxWork_M1_FWD_POL1_P2 *
         _SetPulseOutLATxWork_M1_REV_POL0_OFF *
         _SetPulseOutLATxWork_M1_REV_POL0_P1 *
         _SetPulseOutLATxWork_M1_REV_POL0_P2 *
         _SetPulseOutLATxWork_M1_REV_POL1_OFF *
         _SetPulseOutLATxWork_M1_REV_POL1_P1 *
         _SetPulseOutLATxWork_M1_REV_POL1_P2 *
         _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF *
         _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 *
         _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF *
         _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 *
         _VrsCheck *
         i1_TMR2_StopTimer *
       _TMR2_Interrupt_SPK *
         Absolute function(Fake) *
         _SetDataTRISxWork_SPK_OPEN *
         _SetDataTRISxWork_SPK_SHORT *
         _SpkVrsCheck *
           _ExcitatingOutOff
             i1_SetExcitatingOutOffData
               i1_SetOutPutLATX
           _ExcitatingOutOn
             i1_SetOutPutLATX

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     129       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2F      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      1      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      2      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               48      1      2F      12       65.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     129      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Sep 09 22:08:26 2021

                  __end_of_SetAfterDetectLoadFunc 10C8                             __end_of_SetOutPutLATX 0AA6  
                                  _SPI_Initialize 109D                        MoveTargetPosition@motor_no 003C  
                __end_of_TMR2_SetInterruptHandler 1081                SetFwdPulseWithCorrectProc@motor_no 003D  
                            SetMotorDirection@dir 0020                                    ??_ComparatorOn 0075  
                               _motorBitOperation 0074                        __end_of_offsetBasePosition 1852  
                                  ___bmul@product 0022                         _detectLoadPositionTypePtr 00B8  
             SetFwdPulseWithCorrectProc@motor_bit 0040             SpiCmdFunc_SearchBasePosition@motor_no 003D  
                                 ??_ComparatorOff 0075                               ___wmul@multiplicand 0022  
                                    _pulseOutLATA 006A                                      _pulseOutLATB 0069  
                                    _pulseOutLATC 0068                      CalcMotorStepCounter@motor_no 003A  
                              _m1PulseOutStepWork 00E4        __end_of_SetPulseOutLATxWork_M1_REV_POL0_P1 1231  
     __size_of_SetPulseOutLATxWork_M1_REV_POL0_P1 000F              ??_SetPulseOutLATxWork_M1_REV_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M1_REV_POL0_P1 0075                _SetPulseOutLATxWork_M1_REV_POL0_P1 1222  
      __end_of_SetPulseOutLATxWork_M1_REV_POL0_P2 125E       __size_of_SetPulseOutLATxWork_M1_REV_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M1_REV_POL0_P2 0075               ?_SetPulseOutLATxWork_M1_REV_POL0_P2 0075  
              _SetPulseOutLATxWork_M1_REV_POL0_P2 124F                            ?_WatchMotorDriveFinish 0075  
      __end_of_SetPulseOutLATxWork_M1_REV_POL1_P1 1222       __size_of_SetPulseOutLATxWork_M1_REV_POL1_P1 000F  
            ??_SetPulseOutLATxWork_M1_REV_POL1_P1 0075               ?_SetPulseOutLATxWork_M1_REV_POL1_P1 0075  
              _SetPulseOutLATxWork_M1_REV_POL1_P1 1213        __end_of_SetPulseOutLATxWork_M1_REV_POL1_P2 126D  
     __size_of_SetPulseOutLATxWork_M1_REV_POL1_P2 000F              ??_SetPulseOutLATxWork_M1_REV_POL1_P2 0075  
             ?_SetPulseOutLATxWork_M1_REV_POL1_P2 0075                _SetPulseOutLATxWork_M1_REV_POL1_P2 125E  
          __end_of_SpiCmdFunc_FwdPulsePositionCtl 166E           __size_of_SpiCmdFunc_FwdPulsePositionCtl 0021  
                  _SpiCmdFunc_FwdPulsePositionCtl 164D                         i1_SetExcitatingOutOffData 14D0  
             __size_of_SetDataTRISxWork_SPK_SHORT 001C                                               l800 0E19  
                                             l746 0AD7                                               l747 0ACB  
                                             l763 0B45                                               l764 0B39  
                                             l956 0352                                               l885 080F  
                                             l888 0839                                               _PR2 001B  
                                 _timer1ReloadVal 016A                                   _TMR2_Initialize 13B2  
                                             wreg 0009                     CalcMotorStepCounter@motor_bit 0037  
                     __size_of_SetMotorBitMotorNo 0011                           ??_SetMotorAddShakePulse 0021  
     __end_of_SetPulseOutLATxWork_M1_REV_POL0_OFF 12BB      __size_of_SetPulseOutLATxWork_M1_REV_POL0_OFF 0010  
           ??_SetPulseOutLATxWork_M1_REV_POL0_OFF 0075              ?_SetPulseOutLATxWork_M1_REV_POL0_OFF 0075  
             _SetPulseOutLATxWork_M1_REV_POL0_OFF 12AB       __end_of_SetPulseOutLATxWork_M1_REV_POL1_OFF 12CB  
    __size_of_SetPulseOutLATxWork_M1_REV_POL1_OFF 0010             ??_SetPulseOutLATxWork_M1_REV_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M1_REV_POL1_OFF 0075               _SetPulseOutLATxWork_M1_REV_POL1_OFF 12BB  
            __size_of_SpiCmdFunc_EnableExcitating 0005                                 _spkChangePosition 00DF  
                  ??_SpiCmdFunc_FwdPulseWithShake 003E            __end_of_SpiCmdFunc_FwdPulseWithCorrect 160F  
         __size_of_SpiCmdFunc_FwdPulseWithCorrect 001C                    _SpiCmdFunc_FwdPulseWithCorrect 15F3  
                                            l1326 0BAC                                              l1318 13A0  
                                            l1360 08A4                                              l1456 1570  
                          ?_SetAfterMotorStopFunc 0020                                              l6100 0633  
                                            l6030 1090                                              l6110 0677  
                                            l6016 086C                                              l6024 0879  
                                            l6008 0853                                              l6018 0875  
                                            l6116 06B3                                              l6108 0661  
                                            l6070 0DF0                                              l6062 0D9B  
                                            l6142 0E4B                                              l6064 0DB8  
                                            l6320 0CF9                                              l6066 0DD5  
                                            l6074 0DFD                                              l6250 0F7B  
                                            l6242 0F5C                                              l6314 0D48  
                                            l6068 0DE3                                              l6092 0617  
                                            l6332 13FD                                              l6420 01AB  
                                            l6190 17C5                                              l6262 0FA3  
                                            l6318 0D7F                                              l6406 0165  
                                            l6096 0626                                              l6088 0609  
                                            l6280 0EE6                                              l6512 030A  
                                            l6416 018B                                              l6602 0778  
                                            l6426 01BA                                              l6346 08BE  
                                            l5900 0B40                                              l6612 0734  
                                            l6620 0779                                              l6604 0700  
                                            l6540 038C                                              l6524 035A  
                                            l6444 021B                                              l6380 0102  
                                            l6452 0230                                              l6364 0090  
                                            l6542 0394                                              l6382 0105  
                                            l6358 0076                                              l5840 0AAE  
                                            l5904 0B4C                                              l6288 0C76  
                                            l6624 0780                                              l6616 073D  
                                            l6560 03C1                                              l6464 0251  
                                            l6472 0265                                              l6456 0240  
                                            l6368 00B6                                              l5834 14FD  
                                            l5850 0AC1                                              l5906 0B5D  
                                            l6810 0BA1                                              l6618 0741  
                                            l6538 0386                                              l6546 039F  
                                            l6554 03B0                                              l6466 0261  
                                            l6458 0242                                              l6394 0141  
                                            l6378 00E8                                              l5916 0B81  
                                            l5828 082F                                              l6484 027D  
                                            l6396 0144                                              l6660 1608  
                                            l5862 0ADE                                              l5918 0B86  
                                            l5926 08E7                                              l6822 0BCC  
                                            l6814 0BA8                                              l6494 0296  
                                            l6902 09C8                                              l5864 0AED  
                                            l5928 08F9                                              l6576 03EB  
                                            l6496 029C                                              l6850 12D6  
                                            l5858 0AD2                                              l5874 0B0F  
                                            l5882 0B1E                                              l6826 0BE6  
                                            l6578 03EF                                              l6924 0E05  
                                            l5876 0B14                                              l5892 0B31  
                                            l6588 06CD                                              l6772 0C17  
                                            l5974 156A                                              l6782 0C34  
                                            l5992 12E4                                              l6792 0C53  
                                            l6864 13AE                                              l6856 152F  
                                            l5988 12DE                                              _LATA 010C  
                                            _LATB 010D                                              _LATC 010E  
                                            u5015 016F                                              u5045 0189  
                                            u4255 0821                                              u4274 14EF  
                                            u4434 08C8                                              u4275 14EE  
                                            u4435 08C7                                              u5075 01D5  
                                            u5085 01E9                                              u5095 01FD  
                                            u4704 1370                                              u4705 136F  
                                            u4714 12F7                                              u4475 1571  
                                            u4715 12F6                                              u5604 1521  
                                            u4645 0696                                              u4485 1576  
                                            u4805 0D51                                              u5365 0776  
                                            u5605 1520                                              i1l80 0012  
                                            u4584 0D8B                                              u4824 1382  
                                            u4585 0D8A                                              u4825 1381  
                                            u5385 072F                                              u4905 00B2  
                                            u4674 135E                                              u4594 05F1  
                                            u4834 13F1                                              u4675 135D  
                                            u4595 05F0                                              u4835 13F0  
                                            u5395 073B                                              u4915 00C0  
                                            u4684 134C                                              i1l85 001A  
                                            u4685 134B                                              u4925 00CC  
                                            u5637 15E2                                              u4774 1394  
                                            u4694 174B                                              u4854 0888  
                                            u4775 1393                                              u4695 174A  
                                            u4935 00D8                                              u5647 15ED  
                                            u4855 0887                                              u4965 0125  
                                            u4975 013F                                              u4985 014E  
                                            u4995 015A                                              _TMR2 001A  
                                            _WPUA 020C                                              _WPUB 020D  
                      __end_of_MoveTargetPosition 13EA                     ??_SetMotorPositionSearchStart 0030  
                                            _main 0966             __end_of_SpiCmdFunc_Search1008Position 179A  
          __size_of_SpiCmdFunc_Search1008Position 002B                     _SpiCmdFunc_Search1008Position 176F  
              __end_of_SetFwdPulseWithCorrectProc 08C2                        _SetFwdPulseWithCorrectProc 0882  
                                            fsr0h 0005                                              fsr1h 0007  
                                            indf0 0000                                              fsr0l 0004  
                                            indf1 0001                                              fsr1l 0006  
                                            btemp 007E                           __end_of_SpiCmdFunc_Test 104A  
               __end_of_SpiCmdFunc_StartDetectVrs 1058                       __end_of_SetMotorStepCounter 1107  
                                            start 001C                 SPIControl_ExecuteCommand@cmd_type 0043  
                           ?_UpdateTargetPosition 002D                            __end_of_SPI_Initialize 10A7  
                      ??_TMR1_SetInterruptHandler 0022                                 ___bmul@multiplier 0023  
                 ??_SpiCmdFunc_SearchBasePosition 003E                    __size_of_DetermineBasePosition 00A6  
                              _reqCheckLoadPosBit 00CE                                  _SaveLoadPosition 0C74  
                   __end_of_DetermineBasePosition 1000                __size_of_AfterDetectedLoadPosition 039D  
                  InitPulsePositionTable@motor_no 0021                        __end_of_TMR2_Interrupt_SPK 07FE  
                  __size_of_OSCILLATOR_Initialize 0006                     __end_of_OSCILLATOR_Initialize 1079  
                                           ?_main 0075                                 ??_SpkComparatorOn 0020  
                                           _T1CON 0018                                             _T2CON 001C  
                                           _LATC0 0870                                             i1l702 058D  
                                           i1l687 04F2                      AfterDetectedLoadPosition@res 0043  
                                           _TMR1H 0017                                             _TMR1L 0016  
                                           _TRISA 008C                                             _TRISB 008D  
                                           _TRISC 008E                         _SPIControl_RecieveComannd 13A0  
                                  _reqVrsCheckBit 00D2                               _finishPositionCtSet 00C6  
                        __end_ofi1_TMR2_StopTimer 0004                                 _driveDirectionBit 0057  
                                __end_of_TMR1_ISR 10D4                                  __end_of_TMR2_ISR 105F  
                            _CalcMotorStepCounter 05EB                                    _WDT_Initialize 105F  
                                ?_SetMotorStopSPK 0075         __end_of_SetDataTRISxWork_M0_SPK_POL0_OPEN 11C8  
      __size_of_SetDataTRISxWork_M0_SPK_POL0_OPEN 000F               ??_SetDataTRISxWork_M0_SPK_POL0_OPEN 0075  
              ?_SetDataTRISxWork_M0_SPK_POL0_OPEN 0075                 _SetDataTRISxWork_M0_SPK_POL0_OPEN 11B9  
       __end_of_SetDataTRISxWork_M0_SPK_POL1_OPEN 11D7        __size_of_SetDataTRISxWork_M0_SPK_POL1_OPEN 000F  
             ??_SetDataTRISxWork_M0_SPK_POL1_OPEN 0075                ?_SetDataTRISxWork_M0_SPK_POL1_OPEN 0075  
               _SetDataTRISxWork_M0_SPK_POL1_OPEN 11C8                                 _spkReqVrsCheckBit 00DD  
                        _reqAfterMotorStopFuncBit 00D9                                _actCorrectDriveBit 0053  
                                __end_of_SPI_Open 0966                           __end_of_TMR1_Initialize 1568  
                                           pclath 000A                         ??_SetExcitatingOutOffData 0021  
                                           status 0003                          ??_DeactivateHandPosition 0020  
                       SetAfterMotorStopFunc@func 0020                                             wtemp0 007E  
                                 _TMR2_StartTimer 104C                               InitPositionSearch@i 002E  
                __end_of_TblM0PulseChangePosition 184E                                   _TMR1_WriteTimer 1114  
                     __size_of_UpdataHandPosition 00A0                                   ?_SPI_Initialize 0075  
                               ??_ExcitatingOutOn 0076                                  ??_DAC_Initialize 0020  
                                 __initialization 001E                                    _doubleInterval 00CD  
                      ?_SpiCmdFunc_FwdPulseNormal 003D                                      __end_of_main 09CC  
             SetMotorPositionSearchStart@motor_no 0030                           __end_of_TMR2_Initialize 13C4  
                     ?_INTERRUPT_InterruptManager 0075                          _TMR2_SetInterruptHandler 1079  
                                          ??_main 01CE                        ?_SpiCmdFunc_RevPulseNormal 003D  
                              _reqComparatorOnBit 00D4                              _cbAfterMotorStopFunc 00AC  
                        ??_InitPulsePositionTable 0020                                  _motorNoOperation 006B  
                          __end_of_WDT_Initialize 1063                             ?_CalcMotorStepCounter 0075  
                               ?_SpkComparatorOff 0075                             _cbAfterDetectLoadFunc 0120  
                                __end_of_VrsCheck 154E                                  _searchTotalSteps 0124  
                                   _vrsCountValue 00BC                                ??_SpkComparatorOff 0020  
                                          _APFCON 011D                                            _ANSELA 018C  
                                          _ANSELB 018D                                            _ANSELC 018E  
          SpiCmdFunc_FwdPulseWithCorrect@motor_no 003D                              __end_of_ComparatorOn 159F  
                                          _BORCON 0116                                            _T1GCON 0019  
                          _detectLoadPositionType 0132                           TMR1_WriteTimer@timerVal 0075  
                                          i1l1064 10F2                                            i1l1049 1543  
                                          i1l5100 04EB                                            i1l5112 0513  
                                          i1l5016 0432                                            i1l5050 0479  
                                          i1l4332 1540                                            i1l5132 0546  
                                          i1l5124 052D                                            i1l5044 046E  
                                          i1l4350 1593                                            i1l5230 07C9  
                                          i1l5118 0521                                            i1l5134 054B  
                                          i1l5062 048F                                            i1l4336 154B  
                                          i1l5128 0536                                            i1l5080 04B0  
                                          i1l5056 0484                                            i1l4346 158E  
                                          i1l5250 07E8                                            i1l5234 07D3  
                                          i1l5226 07C4                                            i1l5218 07BC  
                                          i1l5154 0586                                            i1l5074 04A5  
                                          i1l4364 13CE                                            i1l4356 159A  
                                          i1l4604 15B9                                            i1l5172 05BC  
                                          i1l5068 049A                                            i1l4366 13D3  
                                          i1l4630 1423                                            i1l5182 05CF  
                                          i1l5166 05AE                                            i1l4376 10F7  
                                          i1l5186 05DF                                            i1l5178 05C6  
                                          i1l4572 17DD                                            i1l5188 05E4  
                                          i1l4734 1451                                            i1l4658 143A  
                                          i1l4850 1484                                            i1l4762 1468  
                                          i1l4930 14B4                                            i1l5644 111E  
                                          i1l4848 147F                                            i1l4928 14AF  
                                          i1l4890 149C                                            i1l4970 14CC  
                                          i1l4888 1497                                            i1l4968 14C7  
                                          u313_25 04E9                                  _dataTRISAWork_M0 005E  
                                _dataTRISAWork_M1 005B                                            u315_25 0504  
                                          u325_25 0584                                            u327_25 059F  
                                          _OSCCON 0099                                  _dataTRISBWork_M0 005D  
                                _dataTRISBWork_M1 005A                                  _dataTRISCWork_M0 005C  
                                _dataTRISCWork_M1 0059                                            _WDTCON 0097  
                   SetMotorAddShakePulse@motor_no 0023                               __end_of_TblMaxSteps 185A  
                          ??_UpdateTargetPosition 002F                                  ?_SpiCmdFunc_Test 003D  
                     ??_SetDataTRISxWork_SPK_OPEN 0075                                CorrectPosition@max 0028  
                              CorrectPosition@pos 0026                                 _correctDriveSteps 012E  
                     ?_SPIControl_SetNotification 003D              __end_of_TMR1_DefaultInterruptHandler 1048  
           __size_of_TMR1_DefaultInterruptHandler 0001                      _TMR1_DefaultInterruptHandler 1047  
                  ?_SpiCmdFunc_Search1008Position 003D                                            ___bmul 12DC  
                                          ___wmul 1568                           SpiCmdFunc_Test@motor_no 003D  
               __end_of_SpiCmdFunc_FwdPulseNormal 16F7                                _InitPositionSearch 0E1A  
                               ?_SetMotorStartSPK 0075             __end_of_SpiCmdFunc_SearchBasePosition 1745  
          __size_of_SpiCmdFunc_SearchBasePosition 0029                     _SpiCmdFunc_SearchBasePosition 171C  
                              _spkReqVrsCheckWait 00DC                                ??_SetMotorStartSPK 0022  
                                   ?_SetDriveType 0020                        ??_SpiCmdFunc_StopDetectVrs 003E  
                           ComparatorOff@motor_no 0075                             _m1PulsePositionCtWork 00E8  
                ??_SpiCmdFunc_RevPulsePositionCtl 003E                   ?_SpiCmdFunc_RevPulsePositionCtl 003D  
               __end_of_SpiCmdFunc_RevPulseNormal 16B1                               ?_InitPositionSearch 0075  
                                   ??_SpkVrsCheck 0078                          __size_ofi1_SetOutPutLATX 006D  
                                 ?_WDT_Initialize 0075                                   _currentPosition 006C  
                        SetMotorStepCounter@steps 0030                           __end_of_TMR2_StartTimer 104F  
        TMR1_SetInterruptHandler@InterruptHandler 0020          TMR2_SetInterruptHandler@InterruptHandler 0020  
            SpiCmdFunc_FwdPulseWithShake@motor_no 003D                           __end_of_TMR1_WriteTimer 1123  
              __size_ofi1_SetExcitatingOutOffData 0019                             __end_of_TMR1_CallBack 10B2  
                                  _m0PulseOutStep 0073                                  ?_TMR1_Initialize 0075  
                               _SYSTEM_Initialize 13FF                                   _reqStopMotorBit 00D8  
                         __end_of__initialization 0059                             __end_of_TMR2_CallBack 10BD  
                               ?_ExcitatingOutOff 0075                       ??_SpiCmdFunc_StartDetectVrs 003E  
                             UpdataHandPosition@i 0037                   __size_of_DeactivateHandPosition 0012  
                              ?_SYSTEM_Initialize 0075                              ??_InitPositionSearch 0026  
                       __size_of_GetIsMotorActive 0015                                ??_ExcitatingOutOff 0077  
                                   ?_SetMotorStop 0075                               ___bmul@multiplicand 0020  
                        __size_of_CorrectPosition 003A                                    __pcstackCOMMON 0075  
                        __size_of_StartPulseOutM0 0070                          __size_of_StartPulseOutM1 0072  
                        _TblM0PulseChangePosition 1835                               ??_SYSTEM_Initialize 0022  
                         ??_WatchMotorDriveFinish 004E                                         ?_TMR1_ISR 0075  
                                       ?_TMR2_ISR 0075                     ?_TMR1_DefaultInterruptHandler 0075  
                   __size_of_ActivateHandPosition 0012                                  ?_TMR2_Initialize 0075  
                    ?_SpiCmdFunc_EnableExcitating 003D              SetMotorCorrectPositionStart@motor_no 0032  
                                  ??_SetDriveType 0021                                         ?_SPI_Open 0075  
                       _SetDataTRISxWork_SPK_OPEN 17C8                              SetMotorStop@motor_no 0022  
                                  _OPTION_REGbits 0095                            ??_CalcMotorStepCounter 0030  
                      ?_SetMotorDisableExcitating 0075                             _handPositionActiveBit 00D1  
                 __size_of_InitPulsePositionTable 0011                             _m1PulseChangePosition 00E6  
                         ??_SetAfterMotorStopFunc 0022                 __size_of_SetMotorEnableExcitating 0012  
                              _offsetBasePosition 184E                         ?_SetMotorEnableExcitating 0075  
                        __end_of_SaveLoadPosition 0CF7                                       _TblMaxSteps 1856  
                       __end_of_SYSTEM_Initialize 1414                               _reqComparatorOffBit 00D3  
                  __size_of_SetMotorAddShakePulse 0019                     __end_of_SetMotorAddShakePulse 1534  
                                      __pbssBANK0 004F                                        __pbssBANK1 00A0  
                                      __pbssBANK2 0120                                        __pbssBANK3 01A0  
                             __end_of_SpkVrsCheck 10FA                         WatchMotorDriveFinish@func 016E  
                                  _m1PulseOutStep 0072                __size_of_SPIControl_RecieveComannd 0012  
                    ??_PriorUpdateCorrentPosition 002D                       ?_SetFwdPulseWithCorrectProc 003D  
                              _detectLoadPosition 2194                           __size_of_TMR2_Interrupt 01F1  
                                  ??_SetMotorStop 0020                               _reqSearchBasePosBit 0055  
                                 _SpkComparatorOn 0800                                        __pmaintext 0966  
                                         ?___bmul 0020                                _positionSearchStat 00B0  
                       _missingDetectFinePosition 00ED                             _spkOutTrisRequestFlug 00DE  
                                         ?___wmul 0020                                 _SetMotorDirection 14E9  
                                      ??_TMR1_ISR 0077                                        ??_TMR2_ISR 007A  
                              _MoveTargetPosition 13D7                                        __pintentry 0004  
                                       ?_VrsCheck 0075                                           _DACCON0 0118  
                                         _DACCON1 0119                                           _CM1CON0 0111  
                                         _CM1CON1 0112                                _excitatingStatusOn 00DA  
                                         _CM2CON0 0113                                           _CM2CON1 0114  
              PriorUpdateCorrentPosition@motor_no 002F        __end_of_SetDataTRISxWork_M1_SPK_POL0_SHORT 14B8  
     __size_of_SetDataTRISxWork_M1_SPK_POL0_SHORT 0018              ??_SetDataTRISxWork_M1_SPK_POL0_SHORT 0075  
             ?_SetDataTRISxWork_M1_SPK_POL0_SHORT 0075                _SetDataTRISxWork_M1_SPK_POL0_SHORT 14A0  
      __end_of_SetDataTRISxWork_M1_SPK_POL1_SHORT 14D0       __size_of_SetDataTRISxWork_M1_SPK_POL1_SHORT 0018  
            ??_SetDataTRISxWork_M1_SPK_POL1_SHORT 0075               ?_SetDataTRISxWork_M1_SPK_POL1_SHORT 0075  
              _SetDataTRISxWork_M1_SPK_POL1_SHORT 14B8                                ?_SetMotorDirection 0020  
                      ?_SPIControl_ExecuteCommand 0075                                        ??_SPI_Open 0020  
                         _detectLoadPositionIndex 00BA                         _SpiCmdFunc_StartDetectVrs 1055  
                          _DeactivateHandPosition 137C                             __end_of_ComparatorOff 13D7  
                         __size_of_TMR1_StopTimer 0002                     ??_SpiCmdFunc_EnableExcitating 003E  
                      __end_of_SetMotorBitMotorNo 12FE                         CalcMotorStepCounter@steps 0038  
                             ?_MoveTargetPosition 0075                                 _TblMaxSearchSteps 1852  
                                  _targetPosition 0164                                 _SetMotorFrequency 0845  
                           __size_of_ComparatorOn 001C                               ??_SetMotorDirection 0021  
                  ?_SpiCmdFunc_SearchBasePosition 003D                 __end_of_SetMotorDisableExcitating 1358  
                          __size_of_SetMotorStart 000A                 SpiCmdFunc_FwdPulseNormal@motor_no 003D  
                               ?i1_TMR2_StopTimer 0075                                           _SSP1ADD 0212  
                                         _SSP1BUF 0211                                ?_SetMotorFrequency 0020  
                         __size_of_TMR2_StopTimer 0003           __end_of_VerifyHandPosition_LoadPosition 0784  
        __size_of_VerifyHandPosition_LoadPosition 00C4                 ??_VerifyHandPosition_LoadPosition 003E  
                ?_VerifyHandPosition_LoadPosition 003D                   _VerifyHandPosition_LoadPosition 06C0  
             __size_of_SPIControl_SetNotification 001C                                  ?_TMR2_StartTimer 0075  
                              _TMR2_Interrupt_SPK 0784                                   _ExcitatingOutOn 16F7  
                          __size_of_SetOutPutLATX 006D                                  ?_TMR1_WriteTimer 0075  
                            SetDriveType@motor_no 0023                                ??i1_TMR2_StopTimer 0075  
       __end_of_SetDataTRISxWork_M1_SPK_POL0_OPEN 127C        __size_of_SetDataTRISxWork_M1_SPK_POL0_OPEN 000F  
             ??_SetDataTRISxWork_M1_SPK_POL0_OPEN 0075                ?_SetDataTRISxWork_M1_SPK_POL0_OPEN 0075  
               _SetDataTRISxWork_M1_SPK_POL0_OPEN 126D         __end_of_SetDataTRISxWork_M1_SPK_POL1_OPEN 128B  
      __size_of_SetDataTRISxWork_M1_SPK_POL1_OPEN 000F               ??_SetDataTRISxWork_M1_SPK_POL1_OPEN 0075  
              ?_SetDataTRISxWork_M1_SPK_POL1_OPEN 0075                 _SetDataTRISxWork_M1_SPK_POL1_OPEN 127C  
                               ??i1_SetOutPutLATX 0075                                  ??_SPI_Initialize 0020  
                           SetMotorStart@motor_no 0021                 SpiCmdFunc_RevPulseNormal@motor_no 003D  
                    ??_SetDataTRISxWork_SPK_SHORT 0075                               ??_SetMotorFrequency 0022  
                            ??_MoveTargetPosition 003B                               ?_TMR2_Interrupt_SPK 0075  
                               _SpiCmmandFunction 1800                            _InitPulsePositionTable 12CB  
                       __end_of_SetMotorDirection 1502                        ??_TMR2_SetInterruptHandler 0022  
                                 __size_of___bmul 0011                       ??_SpiCmdFunc_FwdPulseNormal 003E  
                                 __size_of___wmul 001B                      __size_of_SetMotorStepCounter 000D  
                                      ??_VrsCheck 0075                                      _ComparatorOn 1583  
                           _DetermineBasePosition 0F5A                                 ??_CorrectPosition 002A  
                       __end_of_TblMaxSearchSteps 1856                                           __ptext1 07FE  
                                         __ptext2 151B                                           __ptext3 13FF  
                                         __ptext4 105F                                           __ptext5 13B2  
                                         __ptext6 154E                                           __ptext7 1081  
                                         __ptext8 109D                                           __ptext9 1502  
               __end_of_SPIControl_ExecuteCommand 0BFB                                 ??_StartPulseOutM0 0020  
                               ??_StartPulseOutM1 0020                         __end_of_SetMotorFrequency 0882  
                  ??_TMR1_DefaultInterruptHandler 0075                       ??_SpiCmdFunc_RevPulseNormal 003E  
                            ??_TMR2_Interrupt_SPK 0078                            SetDriveType@drive_type 0020  
                                       _T1CONbits 0018                             _OSCILLATOR_Initialize 1073  
                                       _T2CONbits 001C                 __size_of_TMR1_SetInterruptHandler 0008  
                                     _SpkVrsCheck 10ED                          ??_PIN_MANAGER_Initialize 0020  
   __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 1334    __size_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0012  
         ??_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0075            ?_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0075  
           _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 1322                         ?_TMR1_SetInterruptHandler 0020  
   __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 1346    __size_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0012  
         ??_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0075            ?_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0075  
           _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 1334                        __size_of_SYSTEM_Initialize 0015  
                                         clrloop0 10D5               __end_of_SetMotorPositionSearchStart 164D  
                     _SetMotorPositionSearchStart 162D                              end_of_initialization 0059  
    __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 1141     __size_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 000F  
          ??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 0075             ?_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 0075  
            _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 1132      __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 1132  
   __size_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 000F            ??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 0075  
           ?_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 0075              _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 1123  
                         __end_of_SpkComparatorOn 080B                         __end_of_SpiCmmandFunction 181C  
                      __end_of_UpdataHandPosition 0F5A                      ActivateHandPosition@motor_no 0022  
                            __end_of_SetDriveType 0E1A                          ??_SetAfterDetectLoadFunc 0022  
                                  _detectLoadCont 004F                                  _GetIsMotorActive 13EA  
                                  _detectLoadType 0051                          __size_of_SetMotorStopSPK 001E  
                                   _SetMotorStart 1089                         __size_of_SpkComparatorOff 000D  
                                  _OutRequestFlug 00D6                                     _SetOutPutLATX 0A39  
                   SetAfterMotorStopFunc@motor_no 0022                                  ??_WDT_Initialize 0020  
                      ?_AfterDetectedLoadPosition 003D                                 _spi_configuration 185A  
                 ??_SpiCmdFunc_SearchLoadPosition 003E                  VerifyHandPosition_LoadPosition@i 004B  
                         __end_of_ExcitatingOutOn 171C                             _excitatingOffMaskTime 00E2  
                                  _motorActiveBit 0056                              __end_of_SetMotorStop 137C  
             __size_of_SetFwdPulseWithCorrectProc 0040                                         _TRISBbits 008D  
           SPIControl_ExecuteCommand@motor_select 0044              SpiCmdFunc_DisableExcitating@motor_no 003D  
                       _SpiCmdFunc_FwdPulseNormal 16D4                          ?_SetExcitatingOutOffData 0075  
                       __size_of_SetMotorStartSPK 002E                      _TblM1PulseChangePositionLast 00EB  
              __size_of_SetDataTRISxWork_SPK_OPEN 0038                                 _m1PulsePositionCt 00E9  
              __end_of_PriorUpdateCorrentPosition 0910                        _PriorUpdateCorrentPosition 08C2  
          __end_of_SpiCmdFunc_RevPulsePositionCtl 168F           __size_of_SpiCmdFunc_RevPulsePositionCtl 0021  
                  _SpiCmdFunc_RevPulsePositionCtl 166E                         _SpiCmdFunc_RevPulseNormal 168F  
           SpiCmdFunc_SearchLoadPosition@motor_no 003D                                    _excitatingTime 00C4  
                              _motorM0StepCounter 00C0                                    _TMR2_Interrupt 03FA  
                                  ?_SetMotorStart 0075                     __size_of_UpdateTargetPosition 0023  
                                   ?_SPI_ReadByte 0075                        __size_of_SetMotorDirection 0019  
                                  ?_SetOutPutLATX 0075                            ?_DetermineBasePosition 0075  
                SpiCmdFunc_StopDetectVrs@motor_no 003D                              _m0PulseOutChangeFunc 00CA  
                        _correctDriveDirectionBit 00D7              __end_of_TMR2_DefaultInterruptHandler 1049  
           __size_of_TMR2_DefaultInterruptHandler 0001                      _TMR2_DefaultInterruptHandler 1048  
                __end_of_SetMotorEnableExcitating 136A                                    __end_of___bmul 12ED  
            UpdateCurrentPositionByFinePosition@i 0030                          __size_of_SpiCmdFunc_Test 0001  
                       __end_of_spi_configuration 185E                    __size_of_WatchMotorDriveFinish 0079  
                                  __end_of___wmul 1583                     __end_of_WatchMotorDriveFinish 0C74  
                               __size_of_TMR1_ISR 000C                                 __size_of_TMR2_ISR 0004  
                       __size_of_ExcitatingOutOff 000D                                    _TMR1_StopTimer 07FE  
                          ?_OSCILLATOR_Initialize 0075                        __size_of_SetMotorFrequency 003D  
                              _motorM1StepCounter 00BE                             _m0PulsePositionCtWork 0058  
               __end_of_AfterDetectedLoadPosition 03FA                           __size_of_DAC_Initialize 0006  
                               __size_of_SPI_Open 0056                       ??_SetMotorDisableExcitating 0020  
                             start_initialization 001E               SpiCmdFunc_EnableExcitating@motor_no 003D  
                      SetMotorBitMotorNo@motor_no 0022                   __size_of_PIN_MANAGER_Initialize 0019  
                                  _TMR2_StopTimer 104F              __end_of_SetMotorCorrectPositionStart 176F  
           __size_of_SetMotorCorrectPositionStart 002A                      _SetMotorCorrectPositionStart 1745  
                  __size_of_SetAfterMotorStopFunc 000A                     __end_of_SetAfterMotorStopFunc 109D  
              __size_of_SpiCmdFunc_StartDetectVrs 0003                                 ?_SaveLoadPosition 0075  
             DetermineBasePosition@base_pos_index 0037                      __end_of_ActivateHandPosition 13A0  
              __end_of_SetDataTRISxWork_SPK_SHORT 15BB                        _SetDataTRISxWork_SPK_SHORT 159F  
                          __end_of_TMR2_Interrupt 05EB                                ??_SaveLoadPosition 0026  
                                ?_SpkComparatorOn 0075                 __size_of_SpiCmdFunc_StopDetectVrs 0003  
                       ?_SpiCmdFunc_StopDetectVrs 003D                             _detectLoadPositionPtr 0128  
     UpdateCurrentPositionByFinePosition@motor_no 0031                   __size_of_SetAfterDetectLoadFunc 000B  
                     __size_of_InitPositionSearch 00A0                                    ??_SPI_ReadByte 0020  
                       SetMotorFrequency@set_freq 0021                         SetMotorFrequency@motor_no 0023  
                  SPI_Open@spiUniqueConfiguration 0023                 SetMotorDisableExcitating@motor_no 0022  
                        __size_of_TMR1_Initialize 001A                                 SaveLoadPosition@i 0037  
                             _excitatingEnableBit 00E3                                          ??___bmul 0021  
                                        ??___wmul 0024                           ?_DeactivateHandPosition 0075  
                                _addShakePulseBit 0070                                 ??_SetMotorStopSPK 0022  
                          __end_of_TMR1_StopTimer 0800                  SetMotorEnableExcitating@motor_no 0022  
                   ?_TMR2_DefaultInterruptHandler 0075                              ComparatorOn@motor_no 0075  
                                    _loadPosition 2138                               GetIsMotorActive@res 0023  
                          __size_of_TMR1_CallBack 000B                       ??_SPIControl_ExecuteCommand 0040  
                               __size_of_VrsCheck 001A                                   i1_SetOutPutLATX 09CC  
                          __size_of_TMR2_CallBack 000B                                       __pbssBIGRAM 2138  
                                ?_ExcitatingOutOn 0075                   __end_of_SetExcitatingOutOffData 15D7  
                          __end_of_TMR2_StopTimer 1052                         UpdateTargetPosition@steps 002D  
             AfterDetectedLoadPosition@move_steps 0044                                       __pbssCOMMON 0070  
                                       ___latbits 0002                             _m0PulseChangePosition 00E7  
                                   __pcstackBANK0 0020                                     __pcstackBANK1 00EF  
                                   __pcstackBANK2 016E                                     __pcstackBANK3 01CE  
                        __size_of_TMR2_Initialize 0012                     __size_of_CalcMotorStepCounter 00D5  
           __end_of_SpiCmdFunc_SearchLoadPosition 104C            __size_of_SpiCmdFunc_SearchLoadPosition 0001  
                   _SpiCmdFunc_SearchLoadPosition 104B                             __size_of_SetDriveType 0095  
                             _SetMotorStepCounter 10FA                     ?_SetMotorCorrectPositionStart 0075  
     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF 142B      __size_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0017  
           ??_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0075              ?_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0075  
             _SetPulseOutLATxWork_M0_FWD_POL0_OFF 1414       __end_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF 1442  
    __size_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0017             ??_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0075               _SetPulseOutLATxWork_M0_FWD_POL1_OFF 142B  
                              _SetMotorBitMotorNo 12ED                                   ?_TMR2_Interrupt 0075  
                                       _dataTRISA 0061                                         _dataTRISB 0060  
                                       _dataTRISC 005F                           ?_InitPulsePositionTable 0075  
                           _SetMotorAddShakePulse 151B                                   ??_SetMotorStart 0021  
                      ?i1_SetExcitatingOutOffData 0075                                         __pnvBANK2 0168  
                       _SetMotorDisableExcitating 1346                                   _CorrectPosition 080B  
               SpiCmdFunc_StartDetectVrs@motor_no 003D                                  _SpkComparatorOff 1107  
                                 ??_SetOutPutLATX 0020                                   _StartPulseOutM0 0AA6  
                                 _StartPulseOutM1 0B16                               ?_SetMotorBitMotorNo 0075  
                          _PIN_MANAGER_Initialize 1502                         __size_ofi1_TMR2_StopTimer 0002  
                  __end_of_DeactivateHandPosition 138E                         _reqAfterDetectLoadFuncBit 00D0  
                __end_of_TMR1_SetInterruptHandler 1089                    DeactivateHandPosition@motor_no 0022  
                                       __ptext100 1459                                         __ptext101 1240  
                                       __ptext110 1488                                         __ptext102 1442  
                                       __ptext111 11C8                                         __ptext103 1231  
                                       __ptext120 142B                                         __ptext112 1310  
                                       __ptext104 1222                                         __ptext121 118C  
                                       __ptext113 1470                                         __ptext105 1213  
                                       __ptext130 1583                                         __ptext122 1414  
                                       __ptext114 11B9                                         __ptext106 1204  
                                       __ptext131 13C4                                         __ptext123 117D  
                                       __ptext115 12FE                                         __ptext107 11F5  
                                       __ptext132 10C8                                         __ptext124 116E  
                                       __ptext116 129B                                         __ptext108 11E6  
                                       __ptext133 1114                                         __ptext125 115F  
                                       __ptext117 11AA                                         __ptext109 11D7  
                                       __ptext134 10A7                                         __ptext126 1150  
                                       __ptext118 128B                                         __ptext135 1047  
                                       __ptext127 1141                                         __ptext119 119B  
                                       __ptext128 1132                                         __ptext129 1123  
                            ?_SetMotorStepCounter 0030                                   ?_TMR1_StopTimer 0075  
                           __size_of_SetMotorStop 0012                      ??_INTERRUPT_InterruptManager 007A  
                          _SetAfterDetectLoadFunc 10BD                        SetAfterDetectLoadFunc@func 0020  
                                    _SetDriveType 0D85                          _SetMotorEnableExcitating 1358  
                        __end_of_GetIsMotorActive 13FF                                         _driveType 0130  
                               ??_SpiCmdFunc_Test 003E                                   ?_TMR2_StopTimer 0075  
                                    ?_SpkVrsCheck 0075                              ??_SetMotorBitMotorNo 0020  
                  SetAfterDetectLoadFunc@motor_no 0022                SPIControl_SetNotification@motor_no 003D  
                                _SetMotorStartSPK 179A                    __end_of_InitPulsePositionTable 12DC  
                       _SPIControl_ExecuteCommand 0B88      __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 11F5  
   __size_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 000F            ??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 0075  
           ?_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 0075              _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 11E6  
    __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 11E6     __size_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 000F  
          ??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 0075             ?_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 0075  
            _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 11D7                                     _TMR1_CallBack 10A7  
                 _correctDriveFinishPositionCtSet 012C                                    ___wmul@product 0024  
                ??_SpiCmdFunc_FwdPulsePositionCtl 003E                   ?_SpiCmdFunc_FwdPulsePositionCtl 003D  
                     __size_of_MoveTargetPosition 0013                                         clear_ram0 10D4  
                                   _TMR2_CallBack 10B2                __size_of_SpiCmdFunc_FwdPulseNormal 0023  
                                        _PIE1bits 0091                 __end_ofi1_SetExcitatingOutOffData 14E9  
                          __size_of_ComparatorOff 0013                          __size_of_TMR2_StartTimer 0003  
                      ?_SPIControl_RecieveComannd 0075                                 _loadPositionIndex 00B6  
                        __size_of_TMR1_WriteTimer 000F               __size_of_INTERRUPT_InterruptManager 0018  
                                    _SetMotorStop 136A                                          _PIR1bits 0011  
                                        _PIR2bits 0012            SpiCmdFunc_FwdPulsePositionCtl@motor_no 003D  
            __size_of_SetMotorPositionSearchStart 0020                      ??_SPIControl_SetNotification 003E  
                           ??_SetMotorStepCounter 0032                           __end_ofi1_SetOutPutLATX 0A39  
                                        _SSP1CON1 0215                                          _SSP1CON2 0216  
              __size_of_SpiCmdFunc_RevPulseNormal 0022                                          _TMR1_ISR 10C8  
                                        _TMR2_ISR 105B                                          _SSP1STAT 0214  
                              _UpdataHandPosition 0EBA                          GetIsMotorActive@motor_no 0022  
             __end_of_SpiCmdFunc_EnableExcitating 1068                       _SpiCmdFunc_EnableExcitating 1063  
                                _spkOutChangeFunc 00C2                  ??_SpiCmdFunc_FwdPulseWithCorrect 003E  
                 ?_SpiCmdFunc_FwdPulseWithCorrect 003D                              _ActivateHandPosition 138E  
                                _ExcitatingOutOff 10E0                                          _SPI_Open 0910  
                               ??_TMR1_Initialize 0022                             SetMotorFrequency@type 0020  
                               ___wmul@multiplier 0020                                    _DAC_Initialize 106D  
                     ??_AfterDetectedLoadPosition 003C                       __size_of_TMR2_Interrupt_SPK 007A  
                             ?_UpdataHandPosition 0075                 AfterDetectedLoadPosition@motor_no 003D  
                            __end_of_SPI_ReadByte 1055                    ??_TMR2_DefaultInterruptHandler 0075  
               __size_of_TMR2_SetInterruptHandler 0008                         ?_TMR2_SetInterruptHandler 0020  
            __end_of_SpiCmdFunc_DisableExcitating 106D             __size_of_SpiCmdFunc_DisableExcitating 0005  
                    _SpiCmdFunc_DisableExcitating 1068                           SetMotorAddShakePulse@sw 0020  
                         __end_of_CorrectPosition 0845                                    ?_TMR1_CallBack 0075  
                          ?_SetMotorAddShakePulse 0020                           __end_of_StartPulseOutM0 0B16  
                         __end_of_StartPulseOutM1 0B88       __end_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF 1459  
    __size_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0017             ??_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0075  
            ?_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0075               _SetPulseOutLATxWork_M1_FWD_POL0_OFF 1442  
     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF 1470      __size_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0017  
           ??_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0075              ?_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0075  
             _SetPulseOutLATxWork_M1_FWD_POL1_OFF 1459                    ?_SpiCmdFunc_SearchLoadPosition 003D  
                     ?_PriorUpdateCorrentPosition 0075                      UpdateTargetPosition@motor_no 0031  
                               ??_TMR2_Initialize 0022                                    ?_TMR2_CallBack 0075  
                            ??_UpdataHandPosition 002D                  __end_of_TblM1PulseChangePosition 1835  
                  ??_SetMotorCorrectPositionStart 0030                           ??_DetermineBasePosition 002D  
               __end_of_SPIControl_RecieveComannd 13B2                  __size_of_SetExcitatingOutOffData 001C  
      __end_of_SetDataTRISxWork_M0_SPK_POL0_SHORT 1488       __size_of_SetDataTRISxWork_M0_SPK_POL0_SHORT 0018  
            ??_SetDataTRISxWork_M0_SPK_POL0_SHORT 0075               ?_SetDataTRISxWork_M0_SPK_POL0_SHORT 0075  
              _SetDataTRISxWork_M0_SPK_POL0_SHORT 1470        __end_of_SetDataTRISxWork_M0_SPK_POL1_SHORT 14A0  
     __size_of_SetDataTRISxWork_M0_SPK_POL1_SHORT 0018              ??_SetDataTRISxWork_M0_SPK_POL1_SHORT 0075  
             ?_SetDataTRISxWork_M0_SPK_POL1_SHORT 0075                _SetDataTRISxWork_M0_SPK_POL1_SHORT 1488  
                   DetermineBasePosition@motor_no 0038                           __size_of_SPI_Initialize 000A  
                         ??_OSCILLATOR_Initialize 0020                                          _VrsCheck 1534  
                             _motorStepCounterSet 00A8                             ?_ActivateHandPosition 0075  
          SpiCmdFunc_RevPulsePositionCtl@motor_no 003D                            __end_of_DAC_Initialize 1073  
           SpiCmdFunc_Search1008Position@motor_no 003D                          _TMR1_SetInterruptHandler 1081  
            __end_of_SpiCmdFunc_FwdPulseWithShake 104B             __size_of_SpiCmdFunc_FwdPulseWithShake 0001  
                    _SpiCmdFunc_FwdPulseWithShake 104A                                _OutTrisRequestFlug 00D5  
      __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P1 115F       __size_of_SetPulseOutLATxWork_M0_FWD_POL0_P1 000F  
            ??_SetPulseOutLATxWork_M0_FWD_POL0_P1 0075               ?_SetPulseOutLATxWork_M0_FWD_POL0_P1 0075  
              _SetPulseOutLATxWork_M0_FWD_POL0_P1 1150        __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P2 118C  
     __size_of_SetPulseOutLATxWork_M0_FWD_POL0_P2 000F              ??_SetPulseOutLATxWork_M0_FWD_POL0_P2 0075  
             ?_SetPulseOutLATxWork_M0_FWD_POL0_P2 0075                _SetPulseOutLATxWork_M0_FWD_POL0_P2 117D  
      __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P1 1150       __size_of_SetPulseOutLATxWork_M0_FWD_POL1_P1 000F  
            ??_SetPulseOutLATxWork_M0_FWD_POL1_P1 0075               ?_SetPulseOutLATxWork_M0_FWD_POL1_P1 0075  
              _SetPulseOutLATxWork_M0_FWD_POL1_P1 1141        __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P2 119B  
     __size_of_SetPulseOutLATxWork_M0_FWD_POL1_P2 000F              ??_SetPulseOutLATxWork_M0_FWD_POL1_P2 0075  
             ?_SetPulseOutLATxWork_M0_FWD_POL1_P2 0075                _SetPulseOutLATxWork_M0_FWD_POL1_P2 118C  
                           _TMR1_InterruptHandler 0168                                     _ComparatorOff 13C4  
                       SetMotorDirection@motor_no 0023                      __end_of_UpdateTargetPosition 16D4  
                      UpdataHandPosition@motor_no 0038                  __end_of_SpiCmdFunc_StopDetectVrs 105B  
              DetermineBasePosition@load_pos_type 0035                                  _positionSearchCt 00A4  
                                        __ptext10 1073                                          __ptext11 106D  
                                        __ptext20 1055                                          __ptext12 0910  
                    _TblM0PulseChangePositionLast 00EC                                          __ptext21 166E  
                                        __ptext13 13A0                                          __ptext30 15D7  
                                        __ptext22 164D                                          __ptext14 0BFB  
                                        __ptext31 005D                                          __ptext23 15F3  
                                        __ptext15 0882                                          __ptext40 138E  
                                        __ptext32 06C0                                          __ptext24 171C  
                                        __ptext16 176F                                          __ptext41 1052  
                                        __ptext33 1745                                          __ptext25 104B  
                                        __ptext17 1068                                          __ptext50 0A39  
                                        __ptext42 0B88                                          __ptext34 0CF7  
                                        __ptext26 104A                                          __ptext18 1063  
                                        __ptext51 162D                                          __ptext43 160F  
                                        __ptext35 0EBA                                          __ptext27 168F  
                                        __ptext19 1058                                          __ptext60 16B1  
                                        __ptext52 0E1A                                          __ptext44 104F  
                                        __ptext36 12ED                                          __ptext28 16D4  
                                        __ptext61 05EB                                          __ptext53 1568  
                                        __ptext45 1107                                          __ptext37 0C74  
                                        __ptext29 1049                                          __ptext70 14E9  
                                        __ptext62 10FA                                          __ptext54 12DC  
                                        __ptext46 179A                                          __ptext38 13D7  
                                        __ptext71 0D85                                          __ptext63 08C2  
                                        __ptext55 137C                                          __ptext47 1079  
                                        __ptext39 0F5A                                          __ptext80 0784  
                                        __ptext72 1358                                          __ptext64 080B  
                                        __ptext56 136A                                          __ptext48 0800  
                                        __ptext81 10ED                                          __ptext73 1346  
                                        __ptext65 1089                                          __ptext57 10BD  
                                        __ptext49 15BB                                          __ptext90 14B8  
                                        __ptext82 16F7                                          __ptext74 12CB  
                                        __ptext66 0B16                                          __ptext58 1093  
                                        __ptext91 127C                                          __ptext83 10E0  
                                        __ptext67 0AA6                                          __ptext59 13EA  
                                        __ptext92 1334                                          __ptext84 14D0  
                                        __ptext76 105B                                          __ptext68 104C  
                                        __ptext93 14A0                                          __ptext85 09CC  
                                        __ptext77 10B2                                          __ptext69 0845  
                                        __ptext94 126D                                          __ptext86 17C8  
                                        __ptext78 03FA                                          __ptext95 1322  
                                        __ptext87 159F                                          __ptext79 1048  
                                        __ptext96 12BB                                          __ptext88 0002  
                                        __ptext97 125E                                          __ptext89 1534  
                                        __ptext98 12AB                                          __ptext99 124F  
                                    _SSP1CON1bits 0215                     ?_SpiCmdFunc_DisableExcitating 003D  
                     SetMotorStepCounter@motor_no 0032                       ?_SetDataTRISxWork_SPK_SHORT 0075  
                       _AfterDetectedLoadPosition 005D                                     __size_of_main 0066  
                                 _SetMotorStopSPK 160F                      ??_SetFwdPulseWithCorrectProc 003E  
                            _reqCorrectBasePosBit 0054                                  i1_TMR2_StopTimer 0002  
                                _loadPositionType 01A0                         __size_of_SaveLoadPosition 0083  
                                   _spkPositionCt 00E0                                          int$flags 007E  
                            _m1PulseOutChangeFunc 00C8                                  ?i1_SetOutPutLATX 0075  
                               ??_TMR2_StartTimer 0020                __end_of_INTERRUPT_InterruptManager 001C  
                      _INTERRUPT_InterruptManager 0004                                   ?_DAC_Initialize 0075  
                               ??_TMR1_WriteTimer 0077                __size_of_SetMotorDisableExcitating 0012  
                                  ?_ComparatorOff 0075     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 1310  
  __size_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0012           ??_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0075  
          ?_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0075             _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 12FE  
   __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 1322    __size_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0012  
         ??_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0075            ?_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0075  
           _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 1310                                    _recieveCommand 00CC  
                           _WatchMotorDriveFinish 0BFB           UpdateCurrentPositionByFinePosition@diff 002E  
                                 _detectFinePosCt 00B4        __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P1 1213  
     __size_of_SetPulseOutLATxWork_M1_FWD_POL0_P1 000F              ??_SetPulseOutLATxWork_M1_FWD_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M1_FWD_POL0_P1 0075                _SetPulseOutLATxWork_M1_FWD_POL0_P1 1204  
      __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P2 1240       __size_of_SetPulseOutLATxWork_M1_FWD_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M1_FWD_POL0_P2 0075               ?_SetPulseOutLATxWork_M1_FWD_POL0_P2 0075  
              _SetPulseOutLATxWork_M1_FWD_POL0_P2 1231        __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P1 1204  
     __size_of_SetPulseOutLATxWork_M1_FWD_POL1_P1 000F              ??_SetPulseOutLATxWork_M1_FWD_POL1_P1 0075  
             ?_SetPulseOutLATxWork_M1_FWD_POL1_P1 0075                _SetPulseOutLATxWork_M1_FWD_POL1_P1 11F5  
      __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P2 124F       __size_of_SetPulseOutLATxWork_M1_FWD_POL1_P2 000F  
            ??_SetPulseOutLATxWork_M1_FWD_POL1_P2 0075               ?_SetPulseOutLATxWork_M1_FWD_POL1_P2 0075  
              _SetPulseOutLATxWork_M1_FWD_POL1_P2 1240                     ?_SpiCmdFunc_FwdPulseWithShake 003D  
                                      _INTCONbits 000B                          __end_of_SpkComparatorOff 1114  
     __end_of_SetPulseOutLATxWork_M0_REV_POL0_OFF 129B      __size_of_SetPulseOutLATxWork_M0_REV_POL0_OFF 0010  
           ??_SetPulseOutLATxWork_M0_REV_POL0_OFF 0075              ?_SetPulseOutLATxWork_M0_REV_POL0_OFF 0075  
             _SetPulseOutLATxWork_M0_REV_POL0_OFF 128B       __end_of_SetPulseOutLATxWork_M0_REV_POL1_OFF 12AB  
    __size_of_SetPulseOutLATxWork_M0_REV_POL1_OFF 0010             ??_SetPulseOutLATxWork_M0_REV_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M0_REV_POL1_OFF 0075               _SetPulseOutLATxWork_M0_REV_POL1_OFF 129B  
                                ??_TMR2_Interrupt 0077                                     _spkStopStatus 00DB  
                              _detectBasePosition 0160                                   ??_TMR1_CallBack 0075  
                            __size_of_SpkVrsCheck 000D                   ??_SpiCmdFunc_Search1008Position 003E  
                         __size_of_WDT_Initialize 0004                                  ?_CorrectPosition 0026  
                                        intlevel1 0000                                   ??_TMR2_CallBack 007A  
                            _detectRoughTotalMove 00A0                             _SetAfterMotorStopFunc 1093  
                                _detectSpkTurnBit 00E1                                  ?_StartPulseOutM0 0075  
                                ?_StartPulseOutM1 0075                        __end_of_InitPositionSearch 0EBA  
                         ?_PIN_MANAGER_Initialize 0075                        InitPositionSearch@motor_no 002F  
                                VrsCheck@motor_no 0076                       ??i1_SetExcitatingOutOffData 0076  
                      ?_SetDataTRISxWork_SPK_OPEN 0075  VerifyHandPosition_LoadPosition@misalignment_flag 0048  
                                ??_TMR1_StopTimer 0020                                  _detectRoughPosCt 00B2  
                    __end_of_CalcMotorStepCounter 06C0                __end_of_SPIControl_SetNotification 15F3  
                      _SPIControl_SetNotification 15D7                                _m0PulseOutStepWork 00E5  
              __size_of_SPIControl_ExecuteCommand 0073                        ??_SetMotorEnableExcitating 0020  
                        __size_of_SpkComparatorOn 000B                          _TblM1PulseChangePosition 181C  
                                 _SpiCmdFunc_Test 1049                            ??_ActivateHandPosition 0020  
                        __end_of_SetMotorStartSPK 17C8                           ?_SetAfterDetectLoadFunc 0020  
     VerifyHandPosition_LoadPosition@remain_steps 0046                                     ?_ComparatorOn 0075  
                        SaveLoadPosition@motor_no 0036                                  ??_TMR2_StopTimer 0020  
                             _pulseOutLATAWork_M0 0067                               _pulseOutLATAWork_M1 0064  
                                     _polarityBit 0071                             __size_of_SPI_ReadByte 0003  
                             _pulseOutLATBWork_M0 0066                               _pulseOutLATBWork_M1 0063  
      __end_of_SetPulseOutLATxWork_M0_REV_POL0_P1 117D       __size_of_SetPulseOutLATxWork_M0_REV_POL0_P1 000F  
            ??_SetPulseOutLATxWork_M0_REV_POL0_P1 0075               ?_SetPulseOutLATxWork_M0_REV_POL0_P1 0075  
              _SetPulseOutLATxWork_M0_REV_POL0_P1 116E        __end_of_SetPulseOutLATxWork_M0_REV_POL0_P2 11AA  
     __size_of_SetPulseOutLATxWork_M0_REV_POL0_P2 000F              ??_SetPulseOutLATxWork_M0_REV_POL0_P2 0075  
             ?_SetPulseOutLATxWork_M0_REV_POL0_P2 0075                _SetPulseOutLATxWork_M0_REV_POL0_P2 119B  
      __end_of_SetPulseOutLATxWork_M0_REV_POL1_P1 116E       __size_of_SetPulseOutLATxWork_M0_REV_POL1_P1 000F  
            ??_SetPulseOutLATxWork_M0_REV_POL1_P1 0075               ?_SetPulseOutLATxWork_M0_REV_POL1_P1 0075  
              _SetPulseOutLATxWork_M0_REV_POL1_P1 115F        __end_of_SetPulseOutLATxWork_M0_REV_POL1_P2 11B9  
     __size_of_SetPulseOutLATxWork_M0_REV_POL1_P2 000F              ??_SetPulseOutLATxWork_M0_REV_POL1_P2 0075  
             ?_SetPulseOutLATxWork_M0_REV_POL1_P2 0075                _SetPulseOutLATxWork_M0_REV_POL1_P2 11AA  
                                   __pstringtext1 1800                                     __pstringtext2 181C  
                                   __pstringtext3 1835                                     __pstringtext4 184E  
                                   __pstringtext5 1852                                     __pstringtext6 1856  
                                   __pstringtext7 185A                               _pulseOutLATCWork_M0 0065  
                             _pulseOutLATCWork_M1 0062                               _reqCorrectFinePoBit 00CF  
             __size_of_PriorUpdateCorrentPosition 004E                                 ?_GetIsMotorActive 0075  
                              ??_GetIsMotorActive 0020           VerifyHandPosition_LoadPosition@load_pos 004C  
                         __end_of_SetMotorStopSPK 162D           VerifyHandPosition_LoadPosition@curt_pos 0049  
                               _m0PulsePositionCt 00EA                          _SpiCmdFunc_StopDetectVrs 1058  
                    ?_SetMotorPositionSearchStart 0075                    __end_of_PIN_MANAGER_Initialize 151B  
                        __size_of_ExcitatingOutOn 0025                          __end_of_ExcitatingOutOff 10ED  
                      ?_SpiCmdFunc_StartDetectVrs 003D           VerifyHandPosition_LoadPosition@motor_no 003D  
     __end_of_UpdateCurrentPositionByFinePosition 0D85      __size_of_UpdateCurrentPositionByFinePosition 008E  
           ??_UpdateCurrentPositionByFinePosition 0026              ?_UpdateCurrentPositionByFinePosition 0075  
             _UpdateCurrentPositionByFinePosition 0CF7                    ??_SpiCmdFunc_DisableExcitating 003E  
                           _TMR2_InterruptHandler 016C                             __end_of_SetMotorStart 1093  
               __end_of_SetDataTRISxWork_SPK_OPEN 1800                                   _TMR1_Initialize 154E  
                         _SetExcitatingOutOffData 15BB                              _UpdateTargetPosition 16B1  
                     ??_SPIControl_RecieveComannd 00EF                                      _SPI_ReadByte 1052  
