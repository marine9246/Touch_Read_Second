

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Aug 24 11:28:43 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16LF1509
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text55,local,class=CODE,merge=1,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2
    87                           	psect	text63,local,class=CODE,merge=1,delta=2
    88                           	psect	text64,local,class=CODE,merge=1,delta=2
    89                           	psect	text65,local,class=CODE,merge=1,delta=2
    90                           	psect	text66,local,class=CODE,merge=1,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,delta=2
    92                           	psect	text68,local,class=CODE,merge=1,delta=2
    93                           	psect	text69,local,class=CODE,merge=1,delta=2
    94                           	psect	text70,local,class=CODE,merge=1,delta=2
    95                           	psect	text71,local,class=CODE,merge=1,delta=2
    96                           	psect	text72,local,class=CODE,merge=1,delta=2
    97                           	psect	text73,local,class=CODE,merge=1,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,delta=2
    99                           	psect	intentry,global,class=CODE,delta=2
   100                           	psect	text76,local,class=CODE,merge=1,delta=2
   101                           	psect	text77,local,class=CODE,merge=1,delta=2
   102                           	psect	text78,local,class=CODE,merge=1,delta=2
   103                           	psect	text79,local,class=CODE,merge=1,delta=2
   104                           	psect	text80,local,class=CODE,merge=1,delta=2
   105                           	psect	text81,local,class=CODE,merge=1,delta=2
   106                           	psect	text82,local,class=CODE,merge=1,delta=2
   107                           	psect	text83,local,class=CODE,merge=1,delta=2
   108                           	psect	text84,local,class=CODE,merge=1,delta=2
   109                           	psect	text85,local,class=CODE,merge=1,delta=2
   110                           	psect	text86,local,class=CODE,merge=1,delta=2
   111                           	psect	text87,local,class=CODE,merge=1,delta=2
   112                           	psect	text88,local,class=CODE,merge=1,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,delta=2
   118                           	psect	text94,local,class=CODE,merge=1,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	psect	text98,local,class=CODE,merge=1,delta=2
   123                           	psect	text99,local,class=CODE,merge=1,delta=2
   124                           	psect	text100,local,class=CODE,merge=1,delta=2
   125                           	psect	text101,local,class=CODE,merge=1,delta=2
   126                           	psect	text102,local,class=CODE,merge=1,delta=2
   127                           	psect	text103,local,class=CODE,merge=1,delta=2
   128                           	psect	text104,local,class=CODE,merge=1,delta=2
   129                           	psect	text105,local,class=CODE,merge=1,delta=2
   130                           	psect	text106,local,class=CODE,merge=1,delta=2
   131                           	psect	text107,local,class=CODE,merge=1,delta=2
   132                           	psect	text108,local,class=CODE,merge=1,delta=2
   133                           	psect	text109,local,class=CODE,merge=1,delta=2
   134                           	psect	text110,local,class=CODE,merge=1,delta=2
   135                           	psect	text111,local,class=CODE,merge=1,delta=2
   136                           	psect	text112,local,class=CODE,merge=1,delta=2
   137                           	psect	text113,local,class=CODE,merge=1,delta=2
   138                           	psect	text114,local,class=CODE,merge=1,delta=2
   139                           	psect	text115,local,class=CODE,merge=1,delta=2
   140                           	psect	text116,local,class=CODE,merge=1,delta=2
   141                           	psect	text117,local,class=CODE,merge=1,delta=2
   142                           	psect	text118,local,class=CODE,merge=1,delta=2
   143                           	psect	text119,local,class=CODE,merge=1,delta=2
   144                           	psect	text120,local,class=CODE,merge=1,delta=2
   145                           	psect	text121,local,class=CODE,merge=1,delta=2
   146                           	psect	text122,local,class=CODE,merge=1,delta=2
   147                           	psect	text123,local,class=CODE,merge=1,delta=2
   148                           	psect	text124,local,class=CODE,merge=1,delta=2
   149                           	psect	text125,local,class=CODE,merge=1,delta=2
   150                           	psect	text126,local,class=CODE,merge=1,delta=2
   151                           	psect	text127,local,class=CODE,merge=1,delta=2
   152                           	psect	text128,local,class=CODE,merge=1,delta=2
   153                           	psect	text129,local,class=CODE,merge=1,delta=2
   154                           	psect	text130,local,class=CODE,merge=1,delta=2
   155                           	psect	text131,local,class=CODE,merge=1,delta=2
   156                           	psect	text132,local,class=CODE,merge=1,delta=2
   157                           	psect	text133,local,class=CODE,merge=1,delta=2
   158                           	psect	text134,local,class=CODE,merge=1,delta=2
   159                           	psect	text135,local,class=CODE,merge=1,delta=2
   160                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   161                           	dabs	1,0x320,16
   162                           	dabs	1,0x2A4,76
   163                           	dabs	1,0x2A0,4
   164                           	dabs	1,0x220,80
   165                           	dabs	1,0x1E8,8
   166                           	dabs	1,0x2138,0,_loadPosition
   167                           	dabs	1,0x2194,0,_detectLoadPosition
   168                           	dabs	1,0x7E,2
   169  0000                     
   170                           ; Version 2.20
   171                           ; Generated 12/02/2020 GMT
   172                           ; 
   173                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   174                           ; All rights reserved.
   175                           ; 
   176                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   177                           ; 
   178                           ; Redistribution and use in source and binary forms, with or without modification, are
   179                           ; permitted provided that the following conditions are met:
   180                           ; 
   181                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   182                           ;        conditions and the following disclaimer.
   183                           ; 
   184                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   185                           ;        of conditions and the following disclaimer in the documentation and/or other
   186                           ;        materials provided with the distribution.
   187                           ; 
   188                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   189                           ;        software without specific prior written permission.
   190                           ; 
   191                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   192                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   193                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   194                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   195                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   196                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   197                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   198                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   199                           ; 
   200                           ; 
   201                           ; Code-generator required, PIC16LF1509 Definitions
   202                           ; 
   203                           ; SFR Addresses
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  0111                     	;# 
   252  0112                     	;# 
   253  0113                     	;# 
   254  0114                     	;# 
   255  0115                     	;# 
   256  0116                     	;# 
   257  0117                     	;# 
   258  0118                     	;# 
   259  0119                     	;# 
   260  011D                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  018E                     	;# 
   264  0191                     	;# 
   265  0191                     	;# 
   266  0192                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0194                     	;# 
   270  0195                     	;# 
   271  0196                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019D                     	;# 
   278  019E                     	;# 
   279  019F                     	;# 
   280  020C                     	;# 
   281  020D                     	;# 
   282  0211                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0212                     	;# 
   286  0213                     	;# 
   287  0213                     	;# 
   288  0214                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0216                     	;# 
   294  0216                     	;# 
   295  0217                     	;# 
   296  0217                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  0498                     	;# 
   304  0498                     	;# 
   305  0499                     	;# 
   306  049A                     	;# 
   307  049B                     	;# 
   308  049B                     	;# 
   309  049C                     	;# 
   310  049D                     	;# 
   311  049E                     	;# 
   312  049F                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0613                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0616                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  0619                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061C                     	;# 
   329  0691                     	;# 
   330  0692                     	;# 
   331  0693                     	;# 
   332  0694                     	;# 
   333  0695                     	;# 
   334  0F0F                     	;# 
   335  0F10                     	;# 
   336  0F11                     	;# 
   337  0F12                     	;# 
   338  0F13                     	;# 
   339  0F14                     	;# 
   340  0F15                     	;# 
   341  0F16                     	;# 
   342  0F17                     	;# 
   343  0F18                     	;# 
   344  0F19                     	;# 
   345  0F1A                     	;# 
   346  0F1B                     	;# 
   347  0F1C                     	;# 
   348  0F1D                     	;# 
   349  0F1E                     	;# 
   350  0F1F                     	;# 
   351  0F20                     	;# 
   352  0F21                     	;# 
   353  0F22                     	;# 
   354  0F23                     	;# 
   355  0F24                     	;# 
   356  0F25                     	;# 
   357  0F26                     	;# 
   358  0F27                     	;# 
   359  0F28                     	;# 
   360  0F29                     	;# 
   361  0F2A                     	;# 
   362  0F2B                     	;# 
   363  0F2C                     	;# 
   364  0F2D                     	;# 
   365  0F2E                     	;# 
   366  0F2F                     	;# 
   367  0F8C                     	;# 
   368  0F8D                     	;# 
   369  0F91                     	;# 
   370  0F95                     	;# 
   371  0F96                     	;# 
   372  0F97                     	;# 
   373  0F9C                     	;# 
   374  0F9D                     	;# 
   375  0F9E                     	;# 
   376  0FE3                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0013                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  009F                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0111                     	;# 
   436  0112                     	;# 
   437  0113                     	;# 
   438  0114                     	;# 
   439  0115                     	;# 
   440  0116                     	;# 
   441  0117                     	;# 
   442  0118                     	;# 
   443  0119                     	;# 
   444  011D                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  018E                     	;# 
   448  0191                     	;# 
   449  0191                     	;# 
   450  0192                     	;# 
   451  0193                     	;# 
   452  0193                     	;# 
   453  0194                     	;# 
   454  0195                     	;# 
   455  0196                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019C                     	;# 
   461  019D                     	;# 
   462  019E                     	;# 
   463  019F                     	;# 
   464  020C                     	;# 
   465  020D                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0216                     	;# 
   478  0216                     	;# 
   479  0217                     	;# 
   480  0217                     	;# 
   481  0391                     	;# 
   482  0392                     	;# 
   483  0393                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0498                     	;# 
   488  0498                     	;# 
   489  0499                     	;# 
   490  049A                     	;# 
   491  049B                     	;# 
   492  049B                     	;# 
   493  049C                     	;# 
   494  049D                     	;# 
   495  049E                     	;# 
   496  049F                     	;# 
   497  0611                     	;# 
   498  0612                     	;# 
   499  0613                     	;# 
   500  0613                     	;# 
   501  0614                     	;# 
   502  0615                     	;# 
   503  0616                     	;# 
   504  0616                     	;# 
   505  0617                     	;# 
   506  0618                     	;# 
   507  0619                     	;# 
   508  0619                     	;# 
   509  061A                     	;# 
   510  061B                     	;# 
   511  061C                     	;# 
   512  061C                     	;# 
   513  0691                     	;# 
   514  0692                     	;# 
   515  0693                     	;# 
   516  0694                     	;# 
   517  0695                     	;# 
   518  0F0F                     	;# 
   519  0F10                     	;# 
   520  0F11                     	;# 
   521  0F12                     	;# 
   522  0F13                     	;# 
   523  0F14                     	;# 
   524  0F15                     	;# 
   525  0F16                     	;# 
   526  0F17                     	;# 
   527  0F18                     	;# 
   528  0F19                     	;# 
   529  0F1A                     	;# 
   530  0F1B                     	;# 
   531  0F1C                     	;# 
   532  0F1D                     	;# 
   533  0F1E                     	;# 
   534  0F1F                     	;# 
   535  0F20                     	;# 
   536  0F21                     	;# 
   537  0F22                     	;# 
   538  0F23                     	;# 
   539  0F24                     	;# 
   540  0F25                     	;# 
   541  0F26                     	;# 
   542  0F27                     	;# 
   543  0F28                     	;# 
   544  0F29                     	;# 
   545  0F2A                     	;# 
   546  0F2B                     	;# 
   547  0F2C                     	;# 
   548  0F2D                     	;# 
   549  0F2E                     	;# 
   550  0F2F                     	;# 
   551  0F8C                     	;# 
   552  0F8D                     	;# 
   553  0F91                     	;# 
   554  0F95                     	;# 
   555  0F96                     	;# 
   556  0F97                     	;# 
   557  0F9C                     	;# 
   558  0F9D                     	;# 
   559  0F9E                     	;# 
   560  0FE3                     	;# 
   561  0FE4                     	;# 
   562  0FE5                     	;# 
   563  0FE6                     	;# 
   564  0FE7                     	;# 
   565  0FE8                     	;# 
   566  0FE9                     	;# 
   567  0FEA                     	;# 
   568  0FEB                     	;# 
   569  0FED                     	;# 
   570  0FEE                     	;# 
   571  0FEF                     	;# 
   572  0000                     	;# 
   573  0001                     	;# 
   574  0002                     	;# 
   575  0003                     	;# 
   576  0004                     	;# 
   577  0005                     	;# 
   578  0006                     	;# 
   579  0007                     	;# 
   580  0008                     	;# 
   581  0009                     	;# 
   582  000A                     	;# 
   583  000B                     	;# 
   584  000C                     	;# 
   585  000D                     	;# 
   586  000E                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  008C                     	;# 
   600  008D                     	;# 
   601  008E                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0093                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  009F                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011D                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019F                     	;# 
   648  020C                     	;# 
   649  020D                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0216                     	;# 
   663  0217                     	;# 
   664  0217                     	;# 
   665  0391                     	;# 
   666  0392                     	;# 
   667  0393                     	;# 
   668  0394                     	;# 
   669  0395                     	;# 
   670  0396                     	;# 
   671  0498                     	;# 
   672  0498                     	;# 
   673  0499                     	;# 
   674  049A                     	;# 
   675  049B                     	;# 
   676  049B                     	;# 
   677  049C                     	;# 
   678  049D                     	;# 
   679  049E                     	;# 
   680  049F                     	;# 
   681  0611                     	;# 
   682  0612                     	;# 
   683  0613                     	;# 
   684  0613                     	;# 
   685  0614                     	;# 
   686  0615                     	;# 
   687  0616                     	;# 
   688  0616                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0F0F                     	;# 
   703  0F10                     	;# 
   704  0F11                     	;# 
   705  0F12                     	;# 
   706  0F13                     	;# 
   707  0F14                     	;# 
   708  0F15                     	;# 
   709  0F16                     	;# 
   710  0F17                     	;# 
   711  0F18                     	;# 
   712  0F19                     	;# 
   713  0F1A                     	;# 
   714  0F1B                     	;# 
   715  0F1C                     	;# 
   716  0F1D                     	;# 
   717  0F1E                     	;# 
   718  0F1F                     	;# 
   719  0F20                     	;# 
   720  0F21                     	;# 
   721  0F22                     	;# 
   722  0F23                     	;# 
   723  0F24                     	;# 
   724  0F25                     	;# 
   725  0F26                     	;# 
   726  0F27                     	;# 
   727  0F28                     	;# 
   728  0F29                     	;# 
   729  0F2A                     	;# 
   730  0F2B                     	;# 
   731  0F2C                     	;# 
   732  0F2D                     	;# 
   733  0F2E                     	;# 
   734  0F2F                     	;# 
   735  0F8C                     	;# 
   736  0F8D                     	;# 
   737  0F91                     	;# 
   738  0F95                     	;# 
   739  0F96                     	;# 
   740  0F97                     	;# 
   741  0F9C                     	;# 
   742  0F9D                     	;# 
   743  0F9E                     	;# 
   744  0FE3                     	;# 
   745  0FE4                     	;# 
   746  0FE5                     	;# 
   747  0FE6                     	;# 
   748  0FE7                     	;# 
   749  0FE8                     	;# 
   750  0FE9                     	;# 
   751  0FEA                     	;# 
   752  0FEB                     	;# 
   753  0FED                     	;# 
   754  0FEE                     	;# 
   755  0FEF                     	;# 
   756  0000                     	;# 
   757  0001                     	;# 
   758  0002                     	;# 
   759  0003                     	;# 
   760  0004                     	;# 
   761  0005                     	;# 
   762  0006                     	;# 
   763  0007                     	;# 
   764  0008                     	;# 
   765  0009                     	;# 
   766  000A                     	;# 
   767  000B                     	;# 
   768  000C                     	;# 
   769  000D                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008D                     	;# 
   785  008E                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0093                     	;# 
   789  0095                     	;# 
   790  0096                     	;# 
   791  0097                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  009F                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  0111                     	;# 
   804  0112                     	;# 
   805  0113                     	;# 
   806  0114                     	;# 
   807  0115                     	;# 
   808  0116                     	;# 
   809  0117                     	;# 
   810  0118                     	;# 
   811  0119                     	;# 
   812  011D                     	;# 
   813  018C                     	;# 
   814  018D                     	;# 
   815  018E                     	;# 
   816  0191                     	;# 
   817  0191                     	;# 
   818  0192                     	;# 
   819  0193                     	;# 
   820  0193                     	;# 
   821  0194                     	;# 
   822  0195                     	;# 
   823  0196                     	;# 
   824  0199                     	;# 
   825  019A                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019C                     	;# 
   829  019D                     	;# 
   830  019E                     	;# 
   831  019F                     	;# 
   832  020C                     	;# 
   833  020D                     	;# 
   834  0211                     	;# 
   835  0211                     	;# 
   836  0212                     	;# 
   837  0212                     	;# 
   838  0213                     	;# 
   839  0213                     	;# 
   840  0214                     	;# 
   841  0214                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0215                     	;# 
   845  0216                     	;# 
   846  0216                     	;# 
   847  0217                     	;# 
   848  0217                     	;# 
   849  0391                     	;# 
   850  0392                     	;# 
   851  0393                     	;# 
   852  0394                     	;# 
   853  0395                     	;# 
   854  0396                     	;# 
   855  0498                     	;# 
   856  0498                     	;# 
   857  0499                     	;# 
   858  049A                     	;# 
   859  049B                     	;# 
   860  049B                     	;# 
   861  049C                     	;# 
   862  049D                     	;# 
   863  049E                     	;# 
   864  049F                     	;# 
   865  0611                     	;# 
   866  0612                     	;# 
   867  0613                     	;# 
   868  0613                     	;# 
   869  0614                     	;# 
   870  0615                     	;# 
   871  0616                     	;# 
   872  0616                     	;# 
   873  0617                     	;# 
   874  0618                     	;# 
   875  0619                     	;# 
   876  0619                     	;# 
   877  061A                     	;# 
   878  061B                     	;# 
   879  061C                     	;# 
   880  061C                     	;# 
   881  0691                     	;# 
   882  0692                     	;# 
   883  0693                     	;# 
   884  0694                     	;# 
   885  0695                     	;# 
   886  0F0F                     	;# 
   887  0F10                     	;# 
   888  0F11                     	;# 
   889  0F12                     	;# 
   890  0F13                     	;# 
   891  0F14                     	;# 
   892  0F15                     	;# 
   893  0F16                     	;# 
   894  0F17                     	;# 
   895  0F18                     	;# 
   896  0F19                     	;# 
   897  0F1A                     	;# 
   898  0F1B                     	;# 
   899  0F1C                     	;# 
   900  0F1D                     	;# 
   901  0F1E                     	;# 
   902  0F1F                     	;# 
   903  0F20                     	;# 
   904  0F21                     	;# 
   905  0F22                     	;# 
   906  0F23                     	;# 
   907  0F24                     	;# 
   908  0F25                     	;# 
   909  0F26                     	;# 
   910  0F27                     	;# 
   911  0F28                     	;# 
   912  0F29                     	;# 
   913  0F2A                     	;# 
   914  0F2B                     	;# 
   915  0F2C                     	;# 
   916  0F2D                     	;# 
   917  0F2E                     	;# 
   918  0F2F                     	;# 
   919  0F8C                     	;# 
   920  0F8D                     	;# 
   921  0F91                     	;# 
   922  0F95                     	;# 
   923  0F96                     	;# 
   924  0F97                     	;# 
   925  0F9C                     	;# 
   926  0F9D                     	;# 
   927  0F9E                     	;# 
   928  0FE3                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0011                     	;# 
   956  0012                     	;# 
   957  0013                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0093                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  009F                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0111                     	;# 
   988  0112                     	;# 
   989  0113                     	;# 
   990  0114                     	;# 
   991  0115                     	;# 
   992  0116                     	;# 
   993  0117                     	;# 
   994  0118                     	;# 
   995  0119                     	;# 
   996  011D                     	;# 
   997  018C                     	;# 
   998  018D                     	;# 
   999  018E                     	;# 
  1000  0191                     	;# 
  1001  0191                     	;# 
  1002  0192                     	;# 
  1003  0193                     	;# 
  1004  0193                     	;# 
  1005  0194                     	;# 
  1006  0195                     	;# 
  1007  0196                     	;# 
  1008  0199                     	;# 
  1009  019A                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020C                     	;# 
  1017  020D                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0391                     	;# 
  1034  0392                     	;# 
  1035  0393                     	;# 
  1036  0394                     	;# 
  1037  0395                     	;# 
  1038  0396                     	;# 
  1039  0498                     	;# 
  1040  0498                     	;# 
  1041  0499                     	;# 
  1042  049A                     	;# 
  1043  049B                     	;# 
  1044  049B                     	;# 
  1045  049C                     	;# 
  1046  049D                     	;# 
  1047  049E                     	;# 
  1048  049F                     	;# 
  1049  0611                     	;# 
  1050  0612                     	;# 
  1051  0613                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  0615                     	;# 
  1055  0616                     	;# 
  1056  0616                     	;# 
  1057  0617                     	;# 
  1058  0618                     	;# 
  1059  0619                     	;# 
  1060  0619                     	;# 
  1061  061A                     	;# 
  1062  061B                     	;# 
  1063  061C                     	;# 
  1064  061C                     	;# 
  1065  0691                     	;# 
  1066  0692                     	;# 
  1067  0693                     	;# 
  1068  0694                     	;# 
  1069  0695                     	;# 
  1070  0F0F                     	;# 
  1071  0F10                     	;# 
  1072  0F11                     	;# 
  1073  0F12                     	;# 
  1074  0F13                     	;# 
  1075  0F14                     	;# 
  1076  0F15                     	;# 
  1077  0F16                     	;# 
  1078  0F17                     	;# 
  1079  0F18                     	;# 
  1080  0F19                     	;# 
  1081  0F1A                     	;# 
  1082  0F1B                     	;# 
  1083  0F1C                     	;# 
  1084  0F1D                     	;# 
  1085  0F1E                     	;# 
  1086  0F1F                     	;# 
  1087  0F20                     	;# 
  1088  0F21                     	;# 
  1089  0F22                     	;# 
  1090  0F23                     	;# 
  1091  0F24                     	;# 
  1092  0F25                     	;# 
  1093  0F26                     	;# 
  1094  0F27                     	;# 
  1095  0F28                     	;# 
  1096  0F29                     	;# 
  1097  0F2A                     	;# 
  1098  0F2B                     	;# 
  1099  0F2C                     	;# 
  1100  0F2D                     	;# 
  1101  0F2E                     	;# 
  1102  0F2F                     	;# 
  1103  0F8C                     	;# 
  1104  0F8D                     	;# 
  1105  0F91                     	;# 
  1106  0F95                     	;# 
  1107  0F96                     	;# 
  1108  0F97                     	;# 
  1109  0F9C                     	;# 
  1110  0F9D                     	;# 
  1111  0F9E                     	;# 
  1112  0FE3                     	;# 
  1113  0FE4                     	;# 
  1114  0FE5                     	;# 
  1115  0FE6                     	;# 
  1116  0FE7                     	;# 
  1117  0FE8                     	;# 
  1118  0FE9                     	;# 
  1119  0FEA                     	;# 
  1120  0FEB                     	;# 
  1121  0FED                     	;# 
  1122  0FEE                     	;# 
  1123  0FEF                     	;# 
  1124  0000                     	;# 
  1125  0001                     	;# 
  1126  0002                     	;# 
  1127  0003                     	;# 
  1128  0004                     	;# 
  1129  0005                     	;# 
  1130  0006                     	;# 
  1131  0007                     	;# 
  1132  0008                     	;# 
  1133  0009                     	;# 
  1134  000A                     	;# 
  1135  000B                     	;# 
  1136  000C                     	;# 
  1137  000D                     	;# 
  1138  000E                     	;# 
  1139  0011                     	;# 
  1140  0012                     	;# 
  1141  0013                     	;# 
  1142  0015                     	;# 
  1143  0016                     	;# 
  1144  0016                     	;# 
  1145  0017                     	;# 
  1146  0018                     	;# 
  1147  0019                     	;# 
  1148  001A                     	;# 
  1149  001B                     	;# 
  1150  001C                     	;# 
  1151  008C                     	;# 
  1152  008D                     	;# 
  1153  008E                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0095                     	;# 
  1158  0096                     	;# 
  1159  0097                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010D                     	;# 
  1170  010E                     	;# 
  1171  0111                     	;# 
  1172  0112                     	;# 
  1173  0113                     	;# 
  1174  0114                     	;# 
  1175  0115                     	;# 
  1176  0116                     	;# 
  1177  0117                     	;# 
  1178  0118                     	;# 
  1179  0119                     	;# 
  1180  011D                     	;# 
  1181  018C                     	;# 
  1182  018D                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0216                     	;# 
  1214  0216                     	;# 
  1215  0217                     	;# 
  1216  0217                     	;# 
  1217  0391                     	;# 
  1218  0392                     	;# 
  1219  0393                     	;# 
  1220  0394                     	;# 
  1221  0395                     	;# 
  1222  0396                     	;# 
  1223  0498                     	;# 
  1224  0498                     	;# 
  1225  0499                     	;# 
  1226  049A                     	;# 
  1227  049B                     	;# 
  1228  049B                     	;# 
  1229  049C                     	;# 
  1230  049D                     	;# 
  1231  049E                     	;# 
  1232  049F                     	;# 
  1233  0611                     	;# 
  1234  0612                     	;# 
  1235  0613                     	;# 
  1236  0613                     	;# 
  1237  0614                     	;# 
  1238  0615                     	;# 
  1239  0616                     	;# 
  1240  0616                     	;# 
  1241  0617                     	;# 
  1242  0618                     	;# 
  1243  0619                     	;# 
  1244  0619                     	;# 
  1245  061A                     	;# 
  1246  061B                     	;# 
  1247  061C                     	;# 
  1248  061C                     	;# 
  1249  0691                     	;# 
  1250  0692                     	;# 
  1251  0693                     	;# 
  1252  0694                     	;# 
  1253  0695                     	;# 
  1254  0F0F                     	;# 
  1255  0F10                     	;# 
  1256  0F11                     	;# 
  1257  0F12                     	;# 
  1258  0F13                     	;# 
  1259  0F14                     	;# 
  1260  0F15                     	;# 
  1261  0F16                     	;# 
  1262  0F17                     	;# 
  1263  0F18                     	;# 
  1264  0F19                     	;# 
  1265  0F1A                     	;# 
  1266  0F1B                     	;# 
  1267  0F1C                     	;# 
  1268  0F1D                     	;# 
  1269  0F1E                     	;# 
  1270  0F1F                     	;# 
  1271  0F20                     	;# 
  1272  0F21                     	;# 
  1273  0F22                     	;# 
  1274  0F23                     	;# 
  1275  0F24                     	;# 
  1276  0F25                     	;# 
  1277  0F26                     	;# 
  1278  0F27                     	;# 
  1279  0F28                     	;# 
  1280  0F29                     	;# 
  1281  0F2A                     	;# 
  1282  0F2B                     	;# 
  1283  0F2C                     	;# 
  1284  0F2D                     	;# 
  1285  0F2E                     	;# 
  1286  0F2F                     	;# 
  1287  0F8C                     	;# 
  1288  0F8D                     	;# 
  1289  0F91                     	;# 
  1290  0F95                     	;# 
  1291  0F96                     	;# 
  1292  0F97                     	;# 
  1293  0F9C                     	;# 
  1294  0F9D                     	;# 
  1295  0F9E                     	;# 
  1296  0FE3                     	;# 
  1297  0FE4                     	;# 
  1298  0FE5                     	;# 
  1299  0FE6                     	;# 
  1300  0FE7                     	;# 
  1301  0FE8                     	;# 
  1302  0FE9                     	;# 
  1303  0FEA                     	;# 
  1304  0FEB                     	;# 
  1305  0FED                     	;# 
  1306  0FEE                     	;# 
  1307  0FEF                     	;# 
  1308  0000                     	;# 
  1309  0001                     	;# 
  1310  0002                     	;# 
  1311  0003                     	;# 
  1312  0004                     	;# 
  1313  0005                     	;# 
  1314  0006                     	;# 
  1315  0007                     	;# 
  1316  0008                     	;# 
  1317  0009                     	;# 
  1318  000A                     	;# 
  1319  000B                     	;# 
  1320  000C                     	;# 
  1321  000D                     	;# 
  1322  000E                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0013                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0111                     	;# 
  1356  0112                     	;# 
  1357  0113                     	;# 
  1358  0114                     	;# 
  1359  0115                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  0118                     	;# 
  1363  0119                     	;# 
  1364  011D                     	;# 
  1365  018C                     	;# 
  1366  018D                     	;# 
  1367  018E                     	;# 
  1368  0191                     	;# 
  1369  0191                     	;# 
  1370  0192                     	;# 
  1371  0193                     	;# 
  1372  0193                     	;# 
  1373  0194                     	;# 
  1374  0195                     	;# 
  1375  0196                     	;# 
  1376  0199                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019E                     	;# 
  1383  019F                     	;# 
  1384  020C                     	;# 
  1385  020D                     	;# 
  1386  0211                     	;# 
  1387  0211                     	;# 
  1388  0212                     	;# 
  1389  0212                     	;# 
  1390  0213                     	;# 
  1391  0213                     	;# 
  1392  0214                     	;# 
  1393  0214                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0216                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0217                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  0498                     	;# 
  1408  0498                     	;# 
  1409  0499                     	;# 
  1410  049A                     	;# 
  1411  049B                     	;# 
  1412  049B                     	;# 
  1413  049C                     	;# 
  1414  049D                     	;# 
  1415  049E                     	;# 
  1416  049F                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0615                     	;# 
  1423  0616                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061C                     	;# 
  1433  0691                     	;# 
  1434  0692                     	;# 
  1435  0693                     	;# 
  1436  0694                     	;# 
  1437  0695                     	;# 
  1438  0F0F                     	;# 
  1439  0F10                     	;# 
  1440  0F11                     	;# 
  1441  0F12                     	;# 
  1442  0F13                     	;# 
  1443  0F14                     	;# 
  1444  0F15                     	;# 
  1445  0F16                     	;# 
  1446  0F17                     	;# 
  1447  0F18                     	;# 
  1448  0F19                     	;# 
  1449  0F1A                     	;# 
  1450  0F1B                     	;# 
  1451  0F1C                     	;# 
  1452  0F1D                     	;# 
  1453  0F1E                     	;# 
  1454  0F1F                     	;# 
  1455  0F20                     	;# 
  1456  0F21                     	;# 
  1457  0F22                     	;# 
  1458  0F23                     	;# 
  1459  0F24                     	;# 
  1460  0F25                     	;# 
  1461  0F26                     	;# 
  1462  0F27                     	;# 
  1463  0F28                     	;# 
  1464  0F29                     	;# 
  1465  0F2A                     	;# 
  1466  0F2B                     	;# 
  1467  0F2C                     	;# 
  1468  0F2D                     	;# 
  1469  0F2E                     	;# 
  1470  0F2F                     	;# 
  1471  0F8C                     	;# 
  1472  0F8D                     	;# 
  1473  0F91                     	;# 
  1474  0F95                     	;# 
  1475  0F96                     	;# 
  1476  0F97                     	;# 
  1477  0F9C                     	;# 
  1478  0F9D                     	;# 
  1479  0F9E                     	;# 
  1480  0FE3                     	;# 
  1481  0FE4                     	;# 
  1482  0FE5                     	;# 
  1483  0FE6                     	;# 
  1484  0FE7                     	;# 
  1485  0FE8                     	;# 
  1486  0FE9                     	;# 
  1487  0FEA                     	;# 
  1488  0FEB                     	;# 
  1489  0FED                     	;# 
  1490  0FEE                     	;# 
  1491  0FEF                     	;# 
  1492  0000                     	;# 
  1493  0001                     	;# 
  1494  0002                     	;# 
  1495  0003                     	;# 
  1496  0004                     	;# 
  1497  0005                     	;# 
  1498  0006                     	;# 
  1499  0007                     	;# 
  1500  0008                     	;# 
  1501  0009                     	;# 
  1502  000A                     	;# 
  1503  000B                     	;# 
  1504  000C                     	;# 
  1505  000D                     	;# 
  1506  000E                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0013                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001C                     	;# 
  1519  008C                     	;# 
  1520  008D                     	;# 
  1521  008E                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0093                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020C                     	;# 
  1569  020D                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0391                     	;# 
  1586  0392                     	;# 
  1587  0393                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0498                     	;# 
  1592  0498                     	;# 
  1593  0499                     	;# 
  1594  049A                     	;# 
  1595  049B                     	;# 
  1596  049B                     	;# 
  1597  049C                     	;# 
  1598  049D                     	;# 
  1599  049E                     	;# 
  1600  049F                     	;# 
  1601  0611                     	;# 
  1602  0612                     	;# 
  1603  0613                     	;# 
  1604  0613                     	;# 
  1605  0614                     	;# 
  1606  0615                     	;# 
  1607  0616                     	;# 
  1608  0616                     	;# 
  1609  0617                     	;# 
  1610  0618                     	;# 
  1611  0619                     	;# 
  1612  0619                     	;# 
  1613  061A                     	;# 
  1614  061B                     	;# 
  1615  061C                     	;# 
  1616  061C                     	;# 
  1617  0691                     	;# 
  1618  0692                     	;# 
  1619  0693                     	;# 
  1620  0694                     	;# 
  1621  0695                     	;# 
  1622  0F0F                     	;# 
  1623  0F10                     	;# 
  1624  0F11                     	;# 
  1625  0F12                     	;# 
  1626  0F13                     	;# 
  1627  0F14                     	;# 
  1628  0F15                     	;# 
  1629  0F16                     	;# 
  1630  0F17                     	;# 
  1631  0F18                     	;# 
  1632  0F19                     	;# 
  1633  0F1A                     	;# 
  1634  0F1B                     	;# 
  1635  0F1C                     	;# 
  1636  0F1D                     	;# 
  1637  0F1E                     	;# 
  1638  0F1F                     	;# 
  1639  0F20                     	;# 
  1640  0F21                     	;# 
  1641  0F22                     	;# 
  1642  0F23                     	;# 
  1643  0F24                     	;# 
  1644  0F25                     	;# 
  1645  0F26                     	;# 
  1646  0F27                     	;# 
  1647  0F28                     	;# 
  1648  0F29                     	;# 
  1649  0F2A                     	;# 
  1650  0F2B                     	;# 
  1651  0F2C                     	;# 
  1652  0F2D                     	;# 
  1653  0F2E                     	;# 
  1654  0F2F                     	;# 
  1655  0F8C                     	;# 
  1656  0F8D                     	;# 
  1657  0F91                     	;# 
  1658  0F95                     	;# 
  1659  0F96                     	;# 
  1660  0F97                     	;# 
  1661  0F9C                     	;# 
  1662  0F9D                     	;# 
  1663  0F9E                     	;# 
  1664  0FE3                     	;# 
  1665  0FE4                     	;# 
  1666  0FE5                     	;# 
  1667  0FE6                     	;# 
  1668  0FE7                     	;# 
  1669  0FE8                     	;# 
  1670  0FE9                     	;# 
  1671  0FEA                     	;# 
  1672  0FEB                     	;# 
  1673  0FED                     	;# 
  1674  0FEE                     	;# 
  1675  0FEF                     	;# 
  1676  0000                     	;# 
  1677  0001                     	;# 
  1678  0002                     	;# 
  1679  0003                     	;# 
  1680  0004                     	;# 
  1681  0005                     	;# 
  1682  0006                     	;# 
  1683  0007                     	;# 
  1684  0008                     	;# 
  1685  0009                     	;# 
  1686  000A                     	;# 
  1687  000B                     	;# 
  1688  000C                     	;# 
  1689  000D                     	;# 
  1690  000E                     	;# 
  1691  0011                     	;# 
  1692  0012                     	;# 
  1693  0013                     	;# 
  1694  0015                     	;# 
  1695  0016                     	;# 
  1696  0016                     	;# 
  1697  0017                     	;# 
  1698  0018                     	;# 
  1699  0019                     	;# 
  1700  001A                     	;# 
  1701  001B                     	;# 
  1702  001C                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  0091                     	;# 
  1707  0092                     	;# 
  1708  0093                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  009F                     	;# 
  1720  010C                     	;# 
  1721  010D                     	;# 
  1722  010E                     	;# 
  1723  0111                     	;# 
  1724  0112                     	;# 
  1725  0113                     	;# 
  1726  0114                     	;# 
  1727  0115                     	;# 
  1728  0116                     	;# 
  1729  0117                     	;# 
  1730  0118                     	;# 
  1731  0119                     	;# 
  1732  011D                     	;# 
  1733  018C                     	;# 
  1734  018D                     	;# 
  1735  018E                     	;# 
  1736  0191                     	;# 
  1737  0191                     	;# 
  1738  0192                     	;# 
  1739  0193                     	;# 
  1740  0193                     	;# 
  1741  0194                     	;# 
  1742  0195                     	;# 
  1743  0196                     	;# 
  1744  0199                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019C                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019F                     	;# 
  1752  020C                     	;# 
  1753  020D                     	;# 
  1754  0211                     	;# 
  1755  0211                     	;# 
  1756  0212                     	;# 
  1757  0212                     	;# 
  1758  0213                     	;# 
  1759  0213                     	;# 
  1760  0214                     	;# 
  1761  0214                     	;# 
  1762  0215                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0216                     	;# 
  1766  0216                     	;# 
  1767  0217                     	;# 
  1768  0217                     	;# 
  1769  0391                     	;# 
  1770  0392                     	;# 
  1771  0393                     	;# 
  1772  0394                     	;# 
  1773  0395                     	;# 
  1774  0396                     	;# 
  1775  0498                     	;# 
  1776  0498                     	;# 
  1777  0499                     	;# 
  1778  049A                     	;# 
  1779  049B                     	;# 
  1780  049B                     	;# 
  1781  049C                     	;# 
  1782  049D                     	;# 
  1783  049E                     	;# 
  1784  049F                     	;# 
  1785  0611                     	;# 
  1786  0612                     	;# 
  1787  0613                     	;# 
  1788  0613                     	;# 
  1789  0614                     	;# 
  1790  0615                     	;# 
  1791  0616                     	;# 
  1792  0616                     	;# 
  1793  0617                     	;# 
  1794  0618                     	;# 
  1795  0619                     	;# 
  1796  0619                     	;# 
  1797  061A                     	;# 
  1798  061B                     	;# 
  1799  061C                     	;# 
  1800  061C                     	;# 
  1801  0691                     	;# 
  1802  0692                     	;# 
  1803  0693                     	;# 
  1804  0694                     	;# 
  1805  0695                     	;# 
  1806  0F0F                     	;# 
  1807  0F10                     	;# 
  1808  0F11                     	;# 
  1809  0F12                     	;# 
  1810  0F13                     	;# 
  1811  0F14                     	;# 
  1812  0F15                     	;# 
  1813  0F16                     	;# 
  1814  0F17                     	;# 
  1815  0F18                     	;# 
  1816  0F19                     	;# 
  1817  0F1A                     	;# 
  1818  0F1B                     	;# 
  1819  0F1C                     	;# 
  1820  0F1D                     	;# 
  1821  0F1E                     	;# 
  1822  0F1F                     	;# 
  1823  0F20                     	;# 
  1824  0F21                     	;# 
  1825  0F22                     	;# 
  1826  0F23                     	;# 
  1827  0F24                     	;# 
  1828  0F25                     	;# 
  1829  0F26                     	;# 
  1830  0F27                     	;# 
  1831  0F28                     	;# 
  1832  0F29                     	;# 
  1833  0F2A                     	;# 
  1834  0F2B                     	;# 
  1835  0F2C                     	;# 
  1836  0F2D                     	;# 
  1837  0F2E                     	;# 
  1838  0F2F                     	;# 
  1839  0F8C                     	;# 
  1840  0F8D                     	;# 
  1841  0F91                     	;# 
  1842  0F95                     	;# 
  1843  0F96                     	;# 
  1844  0F97                     	;# 
  1845  0F9C                     	;# 
  1846  0F9D                     	;# 
  1847  0F9E                     	;# 
  1848  0FE3                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  0011                     	;# 
  1876  0012                     	;# 
  1877  0013                     	;# 
  1878  0015                     	;# 
  1879  0016                     	;# 
  1880  0016                     	;# 
  1881  0017                     	;# 
  1882  0018                     	;# 
  1883  0019                     	;# 
  1884  001A                     	;# 
  1885  001B                     	;# 
  1886  001C                     	;# 
  1887  008C                     	;# 
  1888  008D                     	;# 
  1889  008E                     	;# 
  1890  0091                     	;# 
  1891  0092                     	;# 
  1892  0093                     	;# 
  1893  0095                     	;# 
  1894  0096                     	;# 
  1895  0097                     	;# 
  1896  0099                     	;# 
  1897  009A                     	;# 
  1898  009B                     	;# 
  1899  009B                     	;# 
  1900  009C                     	;# 
  1901  009D                     	;# 
  1902  009E                     	;# 
  1903  009F                     	;# 
  1904  010C                     	;# 
  1905  010D                     	;# 
  1906  010E                     	;# 
  1907  0111                     	;# 
  1908  0112                     	;# 
  1909  0113                     	;# 
  1910  0114                     	;# 
  1911  0115                     	;# 
  1912  0116                     	;# 
  1913  0117                     	;# 
  1914  0118                     	;# 
  1915  0119                     	;# 
  1916  011D                     	;# 
  1917  018C                     	;# 
  1918  018D                     	;# 
  1919  018E                     	;# 
  1920  0191                     	;# 
  1921  0191                     	;# 
  1922  0192                     	;# 
  1923  0193                     	;# 
  1924  0193                     	;# 
  1925  0194                     	;# 
  1926  0195                     	;# 
  1927  0196                     	;# 
  1928  0199                     	;# 
  1929  019A                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019C                     	;# 
  1933  019D                     	;# 
  1934  019E                     	;# 
  1935  019F                     	;# 
  1936  020C                     	;# 
  1937  020D                     	;# 
  1938  0211                     	;# 
  1939  0211                     	;# 
  1940  0212                     	;# 
  1941  0212                     	;# 
  1942  0213                     	;# 
  1943  0213                     	;# 
  1944  0214                     	;# 
  1945  0214                     	;# 
  1946  0215                     	;# 
  1947  0215                     	;# 
  1948  0215                     	;# 
  1949  0216                     	;# 
  1950  0216                     	;# 
  1951  0217                     	;# 
  1952  0217                     	;# 
  1953  0391                     	;# 
  1954  0392                     	;# 
  1955  0393                     	;# 
  1956  0394                     	;# 
  1957  0395                     	;# 
  1958  0396                     	;# 
  1959  0498                     	;# 
  1960  0498                     	;# 
  1961  0499                     	;# 
  1962  049A                     	;# 
  1963  049B                     	;# 
  1964  049B                     	;# 
  1965  049C                     	;# 
  1966  049D                     	;# 
  1967  049E                     	;# 
  1968  049F                     	;# 
  1969  0611                     	;# 
  1970  0612                     	;# 
  1971  0613                     	;# 
  1972  0613                     	;# 
  1973  0614                     	;# 
  1974  0615                     	;# 
  1975  0616                     	;# 
  1976  0616                     	;# 
  1977  0617                     	;# 
  1978  0618                     	;# 
  1979  0619                     	;# 
  1980  0619                     	;# 
  1981  061A                     	;# 
  1982  061B                     	;# 
  1983  061C                     	;# 
  1984  061C                     	;# 
  1985  0691                     	;# 
  1986  0692                     	;# 
  1987  0693                     	;# 
  1988  0694                     	;# 
  1989  0695                     	;# 
  1990  0F0F                     	;# 
  1991  0F10                     	;# 
  1992  0F11                     	;# 
  1993  0F12                     	;# 
  1994  0F13                     	;# 
  1995  0F14                     	;# 
  1996  0F15                     	;# 
  1997  0F16                     	;# 
  1998  0F17                     	;# 
  1999  0F18                     	;# 
  2000  0F19                     	;# 
  2001  0F1A                     	;# 
  2002  0F1B                     	;# 
  2003  0F1C                     	;# 
  2004  0F1D                     	;# 
  2005  0F1E                     	;# 
  2006  0F1F                     	;# 
  2007  0F20                     	;# 
  2008  0F21                     	;# 
  2009  0F22                     	;# 
  2010  0F23                     	;# 
  2011  0F24                     	;# 
  2012  0F25                     	;# 
  2013  0F26                     	;# 
  2014  0F27                     	;# 
  2015  0F28                     	;# 
  2016  0F29                     	;# 
  2017  0F2A                     	;# 
  2018  0F2B                     	;# 
  2019  0F2C                     	;# 
  2020  0F2D                     	;# 
  2021  0F2E                     	;# 
  2022  0F2F                     	;# 
  2023  0F8C                     	;# 
  2024  0F8D                     	;# 
  2025  0F91                     	;# 
  2026  0F95                     	;# 
  2027  0F96                     	;# 
  2028  0F97                     	;# 
  2029  0F9C                     	;# 
  2030  0F9D                     	;# 
  2031  0F9E                     	;# 
  2032  0FE3                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;_loadPosition
  2044                           
  2045                           	psect	stringtext1
  2046  1800                     __pstringtext1:
  2047  1800                     _SpiCmmandFunction:
  2048  1800  3451               	retlw	low _SpiCmdFunc_Test
  2049  1801  3410               	retlw	high _SpiCmdFunc_Test
  2050  1802  34D6               	retlw	low _SpiCmdFunc_FwdPulseNormal
  2051  1803  3416               	retlw	high _SpiCmdFunc_FwdPulseNormal
  2052  1804  3491               	retlw	low _SpiCmdFunc_RevPulseNormal
  2053  1805  3416               	retlw	high _SpiCmdFunc_RevPulseNormal
  2054  1806  3452               	retlw	low _SpiCmdFunc_FwdPulseWithShake
  2055  1807  3410               	retlw	high _SpiCmdFunc_FwdPulseWithShake
  2056  1808  3453               	retlw	low _SpiCmdFunc_SearchLoadPosition
  2057  1809  3410               	retlw	high _SpiCmdFunc_SearchLoadPosition
  2058  180A  341E               	retlw	low _SpiCmdFunc_SearchBasePosition
  2059  180B  3417               	retlw	high _SpiCmdFunc_SearchBasePosition
  2060  180C  3413               	retlw	low _SpiCmdFunc_FwdPulseWithCorrect
  2061  180D  3416               	retlw	high _SpiCmdFunc_FwdPulseWithCorrect
  2062  180E  344F               	retlw	low _SpiCmdFunc_FwdPulsePositionCtl
  2063  180F  3416               	retlw	high _SpiCmdFunc_FwdPulsePositionCtl
  2064  1810  3470               	retlw	low _SpiCmdFunc_RevPulsePositionCtl
  2065  1811  3416               	retlw	high _SpiCmdFunc_RevPulsePositionCtl
  2066  1812  345D               	retlw	low _SpiCmdFunc_StartDetectVrs
  2067  1813  3410               	retlw	high _SpiCmdFunc_StartDetectVrs
  2068  1814  3460               	retlw	low _SpiCmdFunc_StopDetectVrs
  2069  1815  3410               	retlw	high _SpiCmdFunc_StopDetectVrs
  2070  1816  346B               	retlw	low _SpiCmdFunc_EnableExcitating
  2071  1817  3410               	retlw	high _SpiCmdFunc_EnableExcitating
  2072  1818  3470               	retlw	low _SpiCmdFunc_DisableExcitating
  2073  1819  3410               	retlw	high _SpiCmdFunc_DisableExcitating
  2074  181A  3471               	retlw	low _SpiCmdFunc_Search1008Position
  2075  181B  3417               	retlw	high _SpiCmdFunc_Search1008Position
  2076  181C                     __end_of_SpiCmmandFunction:
  2077                           
  2078                           	psect	stringtext2
  2079  181C                     __pstringtext2:
  2080  181C                     _TblM1PulseChangePosition:
  2081  181C  3401               	retlw	1
  2082  181D  3406               	retlw	6
  2083  181E  340A               	retlw	10
  2084  181F  340B               	retlw	11
  2085  1820  340E               	retlw	14
  2086  1821  340F               	retlw	15
  2087  1822  3412               	retlw	18
  2088  1823  3413               	retlw	19
  2089  1824  3416               	retlw	22
  2090  1825  3417               	retlw	23
  2091  1826  341A               	retlw	26
  2092  1827  341B               	retlw	27
  2093  1828  341E               	retlw	30
  2094  1829  341F               	retlw	31
  2095  182A  3422               	retlw	34
  2096  182B  3423               	retlw	35
  2097  182C  3426               	retlw	38
  2098  182D  3427               	retlw	39
  2099  182E  342A               	retlw	42
  2100  182F  342B               	retlw	43
  2101  1830  342E               	retlw	46
  2102  1831  342F               	retlw	47
  2103  1832  3432               	retlw	50
  2104  1833  3438               	retlw	56
  2105  1834  3448               	retlw	72
  2106  1835                     __end_of_TblM1PulseChangePosition:
  2107                           
  2108                           	psect	stringtext3
  2109  1835                     __pstringtext3:
  2110  1835                     _TblM0PulseChangePosition:
  2111  1835  3401               	retlw	1
  2112  1836  3406               	retlw	6
  2113  1837  340A               	retlw	10
  2114  1838  340B               	retlw	11
  2115  1839  340E               	retlw	14
  2116  183A  340F               	retlw	15
  2117  183B  3412               	retlw	18
  2118  183C  3413               	retlw	19
  2119  183D  3416               	retlw	22
  2120  183E  3417               	retlw	23
  2121  183F  341A               	retlw	26
  2122  1840  341B               	retlw	27
  2123  1841  341E               	retlw	30
  2124  1842  341F               	retlw	31
  2125  1843  3422               	retlw	34
  2126  1844  3423               	retlw	35
  2127  1845  3426               	retlw	38
  2128  1846  3427               	retlw	39
  2129  1847  342A               	retlw	42
  2130  1848  342B               	retlw	43
  2131  1849  342E               	retlw	46
  2132  184A  342F               	retlw	47
  2133  184B  3432               	retlw	50
  2134  184C  3438               	retlw	56
  2135  184D  3448               	retlw	72
  2136  184E                     __end_of_TblM0PulseChangePosition:
  2137                           
  2138                           	psect	stringtext4
  2139  184E                     __pstringtext4:
  2140  184E                     _offsetBasePosition:
  2141  184E  34E8               	retlw	232
  2142  184F  34FF               	retlw	255
  2143  1850  34F0               	retlw	240
  2144  1851  34FF               	retlw	255
  2145  1852                     __end_of_offsetBasePosition:
  2146                           
  2147                           	psect	stringtext5
  2148  1852                     __pstringtext5:
  2149  1852                     _TblMaxSearchSteps:
  2150  1852  3438               	retlw	56
  2151  1853  3404               	retlw	4
  2152  1854  3438               	retlw	56
  2153  1855  3404               	retlw	4
  2154  1856                     __end_of_TblMaxSearchSteps:
  2155                           
  2156                           	psect	stringtext6
  2157  1856                     __pstringtext6:
  2158  1856                     _TblMaxSteps:
  2159  1856  3468               	retlw	104
  2160  1857  3401               	retlw	1
  2161  1858  3468               	retlw	104
  2162  1859  3401               	retlw	1
  2163  185A                     __end_of_TblMaxSteps:
  2164                           
  2165                           	psect	stringtext7
  2166  185A                     __pstringtext7:
  2167  185A                     _spi_configuration:
  2168  185A  3414               	retlw	20
  2169  185B  3400               	retlw	0
  2170  185C  3400               	retlw	0
  2171  185D  3401               	retlw	1
  2172  185E                     __end_of_spi_configuration:
  2173                           
  2174                           	psect	nvBANK2
  2175  0168                     __pnvBANK2:
  2176  0168                     _TMR1_InterruptHandler:
  2177  0168                     	ds	2
  2178  016A                     _timer1ReloadVal:
  2179  016A                     	ds	2
  2180  016C                     _TMR2_InterruptHandler:
  2181  016C                     	ds	2
  2182  0012                     _PIR2bits	set	18
  2183  0018                     _T1CONbits	set	24
  2184  0018                     _T1CON	set	24
  2185  0016                     _TMR1L	set	22
  2186  0017                     _TMR1H	set	23
  2187  0019                     _T1GCON	set	25
  2188  000B                     _INTCONbits	set	11
  2189  001C                     _T2CONbits	set	28
  2190  001C                     _T2CON	set	28
  2191  0011                     _PIR1bits	set	17
  2192  001A                     _TMR2	set	26
  2193  001B                     _PR2	set	27
  2194  008D                     _TRISBbits	set	141
  2195  0095                     _OPTION_REGbits	set	149
  2196  008E                     _TRISC	set	142
  2197  008D                     _TRISB	set	141
  2198  008C                     _TRISA	set	140
  2199  0097                     _WDTCON	set	151
  2200  0099                     _OSCCON	set	153
  2201  0091                     _PIE1bits	set	145
  2202  0114                     _CM2CON1	set	276
  2203  0113                     _CM2CON0	set	275
  2204  0112                     _CM1CON1	set	274
  2205  0111                     _CM1CON0	set	273
  2206  011D                     _APFCON	set	285
  2207  010E                     _LATC	set	270
  2208  010D                     _LATB	set	269
  2209  010C                     _LATA	set	268
  2210  0116                     _BORCON	set	278
  2211  0119                     _DACCON1	set	281
  2212  0118                     _DACCON0	set	280
  2213  0870                     _LATC0	set	2160
  2214  018C                     _ANSELA	set	396
  2215  018D                     _ANSELB	set	397
  2216  018E                     _ANSELC	set	398
  2217  0211                     _SSP1BUF	set	529
  2218  0216                     _SSP1CON2	set	534
  2219  0215                     _SSP1CON1bits	set	533
  2220  0212                     _SSP1ADD	set	530
  2221  0215                     _SSP1CON1	set	533
  2222  0214                     _SSP1STAT	set	532
  2223  020C                     _WPUA	set	524
  2224  020D                     _WPUB	set	525
  2225                           
  2226                           	psect	cinit
  2227  001E                     start_initialization:	
  2228                           ; #config settings
  2229                           
  2230  001E                     __initialization:	;BIGRAM
  2231                           
  2232                           ; Clear objects allocated to BIGRAM
  2233  001E  3038               	movlw	low (0+8504)
  2234  001F  0084               	movwf	4
  2235  0020  3021               	movlw	high (0+8504)
  2236  0021  0085               	movwf	5
  2237  0022  30B8               	movlw	184
  2238  0023  00FE               	movwf	btemp
  2239  0024  3000               	movlw	0
  2240  0025  00FF               	movwf	btemp+1
  2241  0026  3190  20DC  3180   	fcall	clear_ram0
  2242                           
  2243                           ; Clear objects allocated to COMMON
  2244  0029  01F0               	clrf	__pbssCOMMON& (0+127)
  2245  002A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2246  002B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2247  002C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2248  002D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2249                           
  2250                           ; Clear objects allocated to BANK0
  2251  002E  304F               	movlw	low __pbssBANK0
  2252  002F  0084               	movwf	4
  2253  0030  3000               	movlw	high __pbssBANK0
  2254  0031  0085               	movwf	5
  2255  0032  3021               	movlw	33
  2256  0033  00FE               	movwf	btemp
  2257  0034  3000               	movlw	0
  2258  0035  00FF               	movwf	btemp+1
  2259  0036  3190  20DC  3180   	fcall	clear_ram0
  2260                           
  2261                           ; Clear objects allocated to BANK1
  2262  0039  30A0               	movlw	low __pbssBANK1
  2263  003A  0084               	movwf	4
  2264  003B  3000               	movlw	high __pbssBANK1
  2265  003C  0085               	movwf	5
  2266  003D  304F               	movlw	79
  2267  003E  00FE               	movwf	btemp
  2268  003F  3000               	movlw	0
  2269  0040  00FF               	movwf	btemp+1
  2270  0041  3190  20DC  3180   	fcall	clear_ram0
  2271                           
  2272                           ; Clear objects allocated to BANK2
  2273  0044  3020               	movlw	low __pbssBANK2
  2274  0045  0084               	movwf	4
  2275  0046  3001               	movlw	high __pbssBANK2
  2276  0047  0085               	movwf	5
  2277  0048  3048               	movlw	72
  2278  0049  00FE               	movwf	btemp
  2279  004A  3000               	movlw	0
  2280  004B  00FF               	movwf	btemp+1
  2281  004C  3190  20DC  3180   	fcall	clear_ram0
  2282                           
  2283                           ; Clear objects allocated to BANK3
  2284  004F  30A0               	movlw	low __pbssBANK3
  2285  0050  0084               	movwf	4
  2286  0051  3001               	movlw	high __pbssBANK3
  2287  0052  0085               	movwf	5
  2288  0053  302E               	movlw	46
  2289  0054  00FE               	movwf	btemp
  2290  0055  3000               	movlw	0
  2291  0056  00FF               	movwf	btemp+1
  2292  0057  3190  20DC         	fcall	clear_ram0
  2293  0059                     end_of_initialization:	
  2294                           ;End of C runtime variable initialization code
  2295                           
  2296  0059                     __end_of__initialization:
  2297  0059  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2298  005A  0020               	movlb	0
  2299  005B  3189  2966         	ljmp	_main	;jump to C main() function
  2300                           
  2301                           	psect	bssCOMMON
  2302  0070                     __pbssCOMMON:
  2303  0070                     _addShakePulseBit:
  2304  0070                     	ds	1
  2305  0071                     _polarityBit:
  2306  0071                     	ds	1
  2307  0072                     _m1PulseOutStep:
  2308  0072                     	ds	1
  2309  0073                     _m0PulseOutStep:
  2310  0073                     	ds	1
  2311  0074                     _motorBitOperation:
  2312  0074                     	ds	1
  2313                           
  2314                           	psect	bssBANK0
  2315  004F                     __pbssBANK0:
  2316  004F                     _detectLoadCont:
  2317  004F                     	ds	2
  2318  0051                     _detectLoadType:
  2319  0051                     	ds	2
  2320  0053                     _actCorrectDriveBit:
  2321  0053                     	ds	1
  2322  0054                     _reqCorrectBasePosBit:
  2323  0054                     	ds	1
  2324  0055                     _reqSearchBasePosBit:
  2325  0055                     	ds	1
  2326  0056                     _motorActiveBit:
  2327  0056                     	ds	1
  2328  0057                     _driveDirectionBit:
  2329  0057                     	ds	1
  2330  0058                     _m0PulsePositionCtWork:
  2331  0058                     	ds	1
  2332  0059                     _dataTRISCWork_M1:
  2333  0059                     	ds	1
  2334  005A                     _dataTRISBWork_M1:
  2335  005A                     	ds	1
  2336  005B                     _dataTRISAWork_M1:
  2337  005B                     	ds	1
  2338  005C                     _dataTRISCWork_M0:
  2339  005C                     	ds	1
  2340  005D                     _dataTRISBWork_M0:
  2341  005D                     	ds	1
  2342  005E                     _dataTRISAWork_M0:
  2343  005E                     	ds	1
  2344  005F                     _dataTRISC:
  2345  005F                     	ds	1
  2346  0060                     _dataTRISB:
  2347  0060                     	ds	1
  2348  0061                     _dataTRISA:
  2349  0061                     	ds	1
  2350  0062                     _pulseOutLATCWork_M1:
  2351  0062                     	ds	1
  2352  0063                     _pulseOutLATBWork_M1:
  2353  0063                     	ds	1
  2354  0064                     _pulseOutLATAWork_M1:
  2355  0064                     	ds	1
  2356  0065                     _pulseOutLATCWork_M0:
  2357  0065                     	ds	1
  2358  0066                     _pulseOutLATBWork_M0:
  2359  0066                     	ds	1
  2360  0067                     _pulseOutLATAWork_M0:
  2361  0067                     	ds	1
  2362  0068                     _pulseOutLATC:
  2363  0068                     	ds	1
  2364  0069                     _pulseOutLATB:
  2365  0069                     	ds	1
  2366  006A                     _pulseOutLATA:
  2367  006A                     	ds	1
  2368  006B                     _motorNoOperation:
  2369  006B                     	ds	1
  2370  006C                     _currentPosition:
  2371  006C                     	ds	4
  2372                           
  2373                           	psect	bssBANK1
  2374  00A0                     __pbssBANK1:
  2375  00A0                     _detectRoughTotalMove:
  2376  00A0                     	ds	4
  2377  00A4                     _positionSearchCt:
  2378  00A4                     	ds	4
  2379  00A8                     _motorStepCounterSet:
  2380  00A8                     	ds	4
  2381  00AC                     _cbAfterMotorStopFunc:
  2382  00AC                     	ds	4
  2383  00B0                     _positionSearchStat:
  2384  00B0                     	ds	2
  2385  00B2                     _detectRoughPosCt:
  2386  00B2                     	ds	2
  2387  00B4                     _detectFinePosCt:
  2388  00B4                     	ds	2
  2389  00B6                     _loadPositionIndex:
  2390  00B6                     	ds	2
  2391  00B8                     _detectLoadPositionTypePtr:
  2392  00B8                     	ds	2
  2393  00BA                     _detectLoadPositionIndex:
  2394  00BA                     	ds	2
  2395  00BC                     _vrsCountValue:
  2396  00BC                     	ds	2
  2397  00BE                     _motorM1StepCounter:
  2398  00BE                     	ds	2
  2399  00C0                     _motorM0StepCounter:
  2400  00C0                     	ds	2
  2401  00C2                     _spkOutChangeFunc:
  2402  00C2                     	ds	2
  2403  00C4                     _excitatingTime:
  2404  00C4                     	ds	2
  2405  00C6                     _finishPositionCtSet:
  2406  00C6                     	ds	2
  2407  00C8                     _m1PulseOutChangeFunc:
  2408  00C8                     	ds	2
  2409  00CA                     _m0PulseOutChangeFunc:
  2410  00CA                     	ds	2
  2411  00CC                     _recieveCommand:
  2412  00CC                     	ds	1
  2413  00CD                     _doubleInterval:
  2414  00CD                     	ds	1
  2415  00CE                     _reqCheckLoadPosBit:
  2416  00CE                     	ds	1
  2417  00CF                     _reqCorrectFinePoBit:
  2418  00CF                     	ds	1
  2419  00D0                     _reqAfterDetectLoadFuncBit:
  2420  00D0                     	ds	1
  2421  00D1                     _handPositionActiveBit:
  2422  00D1                     	ds	1
  2423  00D2                     _reqVrsCheckBit:
  2424  00D2                     	ds	1
  2425  00D3                     _reqComparatorOffBit:
  2426  00D3                     	ds	1
  2427  00D4                     _reqComparatorOnBit:
  2428  00D4                     	ds	1
  2429  00D5                     _OutTrisRequestFlug:
  2430  00D5                     	ds	1
  2431  00D6                     _OutRequestFlug:
  2432  00D6                     	ds	1
  2433  00D7                     _correctDriveDirectionBit:
  2434  00D7                     	ds	1
  2435  00D8                     _reqStopMotorBit:
  2436  00D8                     	ds	1
  2437  00D9                     _reqAfterMotorStopFuncBit:
  2438  00D9                     	ds	1
  2439  00DA                     _excitatingStatusOn:
  2440  00DA                     	ds	1
  2441  00DB                     _spkStopStatus:
  2442  00DB                     	ds	1
  2443  00DC                     _spkReqVrsCheckWait:
  2444  00DC                     	ds	1
  2445  00DD                     _spkReqVrsCheckBit:
  2446  00DD                     	ds	1
  2447  00DE                     _spkOutTrisRequestFlug:
  2448  00DE                     	ds	1
  2449  00DF                     _spkChangePosition:
  2450  00DF                     	ds	1
  2451  00E0                     _spkPositionCt:
  2452  00E0                     	ds	1
  2453  00E1                     _detectSpkTurnBit:
  2454  00E1                     	ds	1
  2455  00E2                     _excitatingOffMaskTime:
  2456  00E2                     	ds	1
  2457  00E3                     _excitatingEnableBit:
  2458  00E3                     	ds	1
  2459  00E4                     _m1PulseOutStepWork:
  2460  00E4                     	ds	1
  2461  00E5                     _m0PulseOutStepWork:
  2462  00E5                     	ds	1
  2463  00E6                     _m1PulseChangePosition:
  2464  00E6                     	ds	1
  2465  00E7                     _m0PulseChangePosition:
  2466  00E7                     	ds	1
  2467  00E8                     _m1PulsePositionCtWork:
  2468  00E8                     	ds	1
  2469  00E9                     _m1PulsePositionCt:
  2470  00E9                     	ds	1
  2471  00EA                     _m0PulsePositionCt:
  2472  00EA                     	ds	1
  2473  00EB                     _TblM1PulseChangePositionLast:
  2474  00EB                     	ds	1
  2475  00EC                     _TblM0PulseChangePositionLast:
  2476  00EC                     	ds	1
  2477  00ED                     _missingDetectFinePosition:
  2478  00ED                     	ds	2
  2479                           
  2480                           	psect	bssBANK2
  2481  0120                     __pbssBANK2:
  2482  0120                     _cbAfterDetectLoadFunc:
  2483  0120                     	ds	4
  2484  0124                     _searchTotalSteps:
  2485  0124                     	ds	4
  2486  0128                     _detectLoadPositionPtr:
  2487  0128                     	ds	4
  2488  012C                     _correctDriveFinishPositionCtSet:
  2489  012C                     	ds	2
  2490  012E                     _correctDriveSteps:
  2491  012E                     	ds	2
  2492  0130                     _driveType:
  2493  0130                     	ds	2
  2494  0132                     _detectLoadPositionType:
  2495  0132                     	ds	46
  2496  0160                     _detectBasePosition:
  2497  0160                     	ds	4
  2498  0164                     _targetPosition:
  2499  0164                     	ds	4
  2500                           
  2501                           	psect	bssBANK3
  2502  01A0                     __pbssBANK3:
  2503  01A0                     _loadPositionType:
  2504  01A0                     	ds	46
  2505                           
  2506                           	psect	clrtext
  2507  10DC                     clear_ram0:	
  2508                           ;	Called with FSR0 containing the base address, and
  2509                           ;	btemp/btemp+1 has the size to clear
  2510                           
  2511  10DC  0064               	clrwdt	;clear the watchdog before getting into this loop
  2512  10DD                     clrloop0:
  2513  10DD  0180               	clrf	0	;clear RAM location pointed to by FSR
  2514  10DE  3101               	addfsr 0,1
  2515  10DF  3001               	movlw	1
  2516  10E0  02FE               	subwf	126,f
  2517  10E1  3000               	movlw	0
  2518  10E2  3BFF               	subwfb	127,f
  2519  10E3  087F               	movf	127,w
  2520  10E4  047E               	iorwf	126,w
  2521  10E5  1903               	btfsc	3,2
  2522  10E6  3400               	retlw	0	;all done for this memory range, return
  2523  10E7  28DD               	goto	clrloop0	;have we reached the end yet?
  2524                           
  2525                           	psect	cstackBANK3
  2526  01CE                     __pcstackBANK3:
  2527  01CE                     ??_main:
  2528                           
  2529                           ; 1 bytes @ 0x0
  2530  01CE                     	ds	1
  2531                           
  2532                           	psect	cstackBANK2
  2533  016E                     __pcstackBANK2:
  2534  016E                     WatchMotorDriveFinish@func:
  2535                           
  2536                           ; 2 bytes @ 0x0
  2537  016E                     	ds	2
  2538                           
  2539                           	psect	cstackBANK1
  2540  00EF                     __pcstackBANK1:
  2541  00EF                     ??_SPIControl_RecieveComannd:
  2542                           
  2543                           ; 1 bytes @ 0x0
  2544  00EF                     	ds	1
  2545                           
  2546                           	psect	cstackCOMMON
  2547  0075                     __pcstackCOMMON:
  2548  0075                     ?_TMR2_DefaultInterruptHandler:
  2549  0075                     ??_TMR2_DefaultInterruptHandler:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0075                     ?_TMR2_CallBack:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0075                     ?_TMR1_ISR:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0075                     ?_SPI_Initialize:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0075                     ?_PIN_MANAGER_Initialize:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0075                     ?_OSCILLATOR_Initialize:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0075                     ?_WDT_Initialize:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0075                     ?_TMR1_Initialize:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0075                     ?_TMR1_DefaultInterruptHandler:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0075                     ??_TMR1_DefaultInterruptHandler:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0075                     ?_TMR1_CallBack:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0075                     ??_TMR1_CallBack:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0075                     ?_TMR2_Interrupt:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0075                     ?_InitPulsePositionTable:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0075                     ?_SetMotorStart:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0075                     ?_SPIControl_RecieveComannd:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0075                     ?_VrsCheck:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0075                     ??_VrsCheck:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0075                     ?_ComparatorOn:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0075                     ??_ComparatorOn:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0075                     ?_ComparatorOff:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0075                     ??_ComparatorOff:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0075                     ?_SpkVrsCheck:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0075                     ?_SetDataTRISxWork_SPK_OPEN:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0075                     ??_SetDataTRISxWork_SPK_OPEN:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_P1:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_P1:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_P1:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_P1:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_P1:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_P1:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_P1:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_P1:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_P1:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_P1:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_P1:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_P1:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_P1:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_P1:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_P1:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_P1:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0075                     ?_SpkComparatorOn:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0075                     ?_SetDataTRISxWork_SPK_SHORT:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0075                     ??_SetDataTRISxWork_SPK_SHORT:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0075                     ?_SetExcitatingOutOffData:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0075                     ?_SpkComparatorOff:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0075                     ?_PriorUpdateCorrentPosition:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0075                     ?_InitPositionSearch:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0075                     ?_SetMotorBitMotorNo:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0075                     ?_DetermineBasePosition:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0075                     ?_UpdataHandPosition:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0075                     ?_SaveLoadPosition:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0075                     ?_ActivateHandPosition:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0075                     ?_MoveTargetPosition:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0075                     ?_UpdateCurrentPositionByFinePosition:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0075                     ?_ExcitatingOutOn:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0075                     ?_ExcitatingOutOff:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0075                     ?_SetOutPutLATX:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_P2:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_P2:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_OFF:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_OFF:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_P2:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_P2:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_OFF:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_OFF:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_P2:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_P2:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_OFF:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_OFF:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_P2:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_P2:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_OFF:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_OFF:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_P2:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_P2:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_OFF:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_OFF:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_P2:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_P2:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_OFF:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_OFF:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_P2:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_P2:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_OFF:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_OFF:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_P2:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_P2:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_OFF:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_OFF:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0075                     ?_SetDataTRISxWork_M0_SPK_POL0_OPEN:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0075                     ??_SetDataTRISxWork_M0_SPK_POL0_OPEN:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0075                     ?_SetDataTRISxWork_M0_SPK_POL0_SHORT:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0075                     ??_SetDataTRISxWork_M0_SPK_POL0_SHORT:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0075                     ?_SetDataTRISxWork_M0_SPK_POL1_OPEN:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0075                     ??_SetDataTRISxWork_M0_SPK_POL1_OPEN:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0075                     ?_SetDataTRISxWork_M0_SPK_POL1_SHORT:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0075                     ??_SetDataTRISxWork_M0_SPK_POL1_SHORT:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0075                     ?_SetDataTRISxWork_M1_SPK_POL0_OPEN:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0075                     ??_SetDataTRISxWork_M1_SPK_POL0_OPEN:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0075                     ?_SetDataTRISxWork_M1_SPK_POL0_SHORT:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0075                     ??_SetDataTRISxWork_M1_SPK_POL0_SHORT:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0075                     ?_SetDataTRISxWork_M1_SPK_POL1_OPEN:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0075                     ??_SetDataTRISxWork_M1_SPK_POL1_OPEN:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0075                     ?_SetDataTRISxWork_M1_SPK_POL1_SHORT:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0075                     ??_SetDataTRISxWork_M1_SPK_POL1_SHORT:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0075                     ?_SPIControl_ExecuteCommand:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0075                     ?_TMR2_Initialize:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0075                     ?_TMR2_StartTimer:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0075                     ?_TMR2_StopTimer:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0075                     ?_TMR2_ISR:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0075                     ?_DAC_Initialize:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0075                     ?_INTERRUPT_InterruptManager:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0075                     ?_SYSTEM_Initialize:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0075                     ?_TMR1_StopTimer:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0075                     ?_TMR1_WriteTimer:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0075                     ?_SPI_Open:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0075                     ?_SPI_ReadByte:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0075                     ?_main:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0075                     ?_TMR2_Interrupt_SPK:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0075                     ?_WatchMotorDriveFinish:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0075                     ?_StartPulseOutM0:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0075                     ?_StartPulseOutM1:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0075                     ?_SetMotorStartSPK:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0075                     ?_SetMotorStopSPK:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0075                     ?_SetMotorEnableExcitating:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0075                     ?_SetMotorDisableExcitating:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0075                     ?_CalcMotorStepCounter:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0075                     ?_SetMotorPositionSearchStart:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0075                     ?_SetMotorCorrectPositionStart:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0075                     ?_SetMotorStop:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0075                     ?_DeactivateHandPosition:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0075                     ?_GetIsMotorActive:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0075                     ?i1_TMR2_StopTimer:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0075                     ??i1_TMR2_StopTimer:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0075                     ?i1_SetExcitatingOutOffData:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0075                     ?i1_SetOutPutLATX:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0075                     ??i1_SetOutPutLATX:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0075                     ComparatorOff@motor_no:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0075                     ComparatorOn@motor_no:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0075                     TMR1_WriteTimer@timerVal:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020                           
  3021                           ; 2 bytes @ 0x0
  3022  0075                     	ds	1
  3023  0076                     ??_ExcitatingOutOn:
  3024  0076                     ??i1_SetExcitatingOutOffData:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0076                     VrsCheck@motor_no:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030                           
  3031                           ; 1 bytes @ 0x1
  3032  0076                     	ds	1
  3033  0077                     ??_TMR1_ISR:
  3034  0077                     ??_TMR2_Interrupt:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0077                     ??_ExcitatingOutOff:	
  3038                           ; 1 bytes @ 0x2
  3039                           
  3040  0077                     ??_TMR1_WriteTimer:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043                           
  3044                           ; 1 bytes @ 0x2
  3045  0077                     	ds	1
  3046  0078                     ??_SpkVrsCheck:
  3047  0078                     ??_TMR2_Interrupt_SPK:	
  3048                           ; 1 bytes @ 0x3
  3049                           
  3050                           
  3051                           ; 1 bytes @ 0x3
  3052  0078                     	ds	2
  3053  007A                     ??_TMR2_CallBack:
  3054  007A                     ??_TMR2_ISR:	
  3055                           ; 1 bytes @ 0x5
  3056                           
  3057  007A                     ??_INTERRUPT_InterruptManager:	
  3058                           ; 1 bytes @ 0x5
  3059                           
  3060                           
  3061                           	psect	cstackBANK0
  3062  0020                     __pcstackBANK0:	
  3063                           ; 1 bytes @ 0x5
  3064                           
  3065  0020                     ?_TMR2_SetInterruptHandler:
  3066  0020                     ??_SPI_Initialize:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0020                     ??_PIN_MANAGER_Initialize:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0020                     ??_OSCILLATOR_Initialize:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0020                     ??_WDT_Initialize:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0020                     ?_TMR1_SetInterruptHandler:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0020                     ??_InitPulsePositionTable:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0020                     ?_SetMotorDirection:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0020                     ?_SetMotorAddShakePulse:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0020                     ?_SetMotorFrequency:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0020                     ??_SpkComparatorOn:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0020                     ??_SpkComparatorOff:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0020                     ??_SetMotorBitMotorNo:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0020                     ??_ActivateHandPosition:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0020                     ??_SetOutPutLATX:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0020                     ??_TMR2_StartTimer:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0020                     ??_TMR2_StopTimer:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0020                     ??_DAC_Initialize:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0020                     ??_TMR1_StopTimer:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0020                     ??_SPI_Open:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0020                     ??_SPI_ReadByte:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0020                     ??_StartPulseOutM0:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0020                     ??_StartPulseOutM1:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     ??_SetMotorEnableExcitating:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0020                     ??_SetMotorDisableExcitating:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0020                     ?_SetDriveType:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0020                     ?_SetAfterMotorStopFunc:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0020                     ?_SetAfterDetectLoadFunc:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0020                     ??_SetMotorStop:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0020                     ??_DeactivateHandPosition:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0020                     ??_GetIsMotorActive:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     ?___bmul:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     ?___wmul:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     SetDriveType@drive_type:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165  0020                     SetMotorDirection@dir:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     SetMotorAddShakePulse@sw:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     SetMotorFrequency@type:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     ___bmul@multiplicand:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183  0020                     SetAfterMotorStopFunc@func:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     SetAfterDetectLoadFunc@func:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ___wmul@multiplier:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192                           
  3193                           ; 2 bytes @ 0x0
  3194  0020                     	ds	1
  3195  0021                     ??_SetMotorDirection:
  3196  0021                     ??_SetMotorAddShakePulse:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0021                     ??_SetMotorStart:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0021                     ??_SetExcitatingOutOffData:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0021                     ??_SetDriveType:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208  0021                     ??___bmul:	
  3209                           ; 1 bytes @ 0x1
  3210                           
  3211  0021                     InitPulsePositionTable@motor_no:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0021                     SetMotorFrequency@set_freq:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     SetMotorStart@motor_no:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220                           
  3221                           ; 1 bytes @ 0x1
  3222  0021                     	ds	1
  3223  0022                     ??_TMR2_SetInterruptHandler:
  3224  0022                     ??_TMR1_Initialize:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     ??_TMR1_SetInterruptHandler:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     ??_SetMotorFrequency:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     ??_TMR2_Initialize:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     ??_SYSTEM_Initialize:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     ??_SetMotorStartSPK:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     ??_SetMotorStopSPK:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0022                     ??_SetAfterMotorStopFunc:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0022                     ??_SetAfterDetectLoadFunc:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0022                     SetMotorEnableExcitating@motor_no:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0022                     SetMotorDisableExcitating@motor_no:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0022                     SetAfterMotorStopFunc@motor_no:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0022                     SetAfterDetectLoadFunc@motor_no:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0022                     SetMotorStop@motor_no:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0022                     ActivateHandPosition@motor_no:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0022                     DeactivateHandPosition@motor_no:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0022                     GetIsMotorActive@motor_no:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0022                     SetMotorBitMotorNo@motor_no:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278  0022                     ___bmul@product:	
  3279                           ; 1 bytes @ 0x2
  3280                           
  3281  0022                     ___wmul@multiplicand:	
  3282                           ; 1 bytes @ 0x2
  3283                           
  3284                           
  3285                           ; 2 bytes @ 0x2
  3286  0022                     	ds	1
  3287  0023                     SPI_Open@spiUniqueConfiguration:
  3288  0023                     SetDriveType@motor_no:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0023                     SetMotorDirection@motor_no:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0023                     SetMotorAddShakePulse@motor_no:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0023                     SetMotorFrequency@motor_no:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0023                     GetIsMotorActive@res:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     ___bmul@multiplier:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306                           
  3307                           ; 1 bytes @ 0x3
  3308  0023                     	ds	1
  3309  0024                     ??___wmul:
  3310  0024                     ___wmul@product:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313                           
  3314                           ; 2 bytes @ 0x4
  3315  0024                     	ds	2
  3316  0026                     ?_CorrectPosition:
  3317  0026                     ??_InitPositionSearch:	
  3318                           ; 1 bytes @ 0x6
  3319                           
  3320  0026                     ??_SaveLoadPosition:	
  3321                           ; 1 bytes @ 0x6
  3322                           
  3323  0026                     ??_UpdateCurrentPositionByFinePosition:	
  3324                           ; 1 bytes @ 0x6
  3325                           
  3326  0026                     CorrectPosition@pos:	
  3327                           ; 1 bytes @ 0x6
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x6
  3331  0026                     	ds	2
  3332  0028                     CorrectPosition@max:
  3333                           
  3334                           ; 2 bytes @ 0x8
  3335  0028                     	ds	2
  3336  002A                     ??_CorrectPosition:
  3337                           
  3338                           ; 1 bytes @ 0xA
  3339  002A                     	ds	3
  3340  002D                     ??_PriorUpdateCorrentPosition:
  3341  002D                     ??_DetermineBasePosition:	
  3342                           ; 1 bytes @ 0xD
  3343                           
  3344  002D                     ??_UpdataHandPosition:	
  3345                           ; 1 bytes @ 0xD
  3346                           
  3347  002D                     ?_UpdateTargetPosition:	
  3348                           ; 1 bytes @ 0xD
  3349                           
  3350  002D                     UpdateTargetPosition@steps:	
  3351                           ; 1 bytes @ 0xD
  3352                           
  3353                           
  3354                           ; 2 bytes @ 0xD
  3355  002D                     	ds	1
  3356  002E                     InitPositionSearch@i:
  3357  002E                     UpdateCurrentPositionByFinePosition@diff:	
  3358                           ; 1 bytes @ 0xE
  3359                           
  3360                           
  3361                           ; 2 bytes @ 0xE
  3362  002E                     	ds	1
  3363  002F                     ??_UpdateTargetPosition:
  3364  002F                     InitPositionSearch@motor_no:	
  3365                           ; 1 bytes @ 0xF
  3366                           
  3367  002F                     PriorUpdateCorrentPosition@motor_no:	
  3368                           ; 1 bytes @ 0xF
  3369                           
  3370                           
  3371                           ; 1 bytes @ 0xF
  3372  002F                     	ds	1
  3373  0030                     ?_SetMotorStepCounter:
  3374  0030                     ??_CalcMotorStepCounter:	
  3375                           ; 1 bytes @ 0x10
  3376                           
  3377  0030                     ??_SetMotorPositionSearchStart:	
  3378                           ; 1 bytes @ 0x10
  3379                           
  3380  0030                     ??_SetMotorCorrectPositionStart:	
  3381                           ; 1 bytes @ 0x10
  3382                           
  3383  0030                     SetMotorPositionSearchStart@motor_no:	
  3384                           ; 1 bytes @ 0x10
  3385                           
  3386  0030                     UpdateCurrentPositionByFinePosition@i:	
  3387                           ; 1 bytes @ 0x10
  3388                           
  3389  0030                     SetMotorStepCounter@steps:	
  3390                           ; 1 bytes @ 0x10
  3391                           
  3392                           
  3393                           ; 2 bytes @ 0x10
  3394  0030                     	ds	1
  3395  0031                     UpdateTargetPosition@motor_no:
  3396  0031                     UpdateCurrentPositionByFinePosition@motor_no:	
  3397                           ; 1 bytes @ 0x11
  3398                           
  3399                           
  3400                           ; 1 bytes @ 0x11
  3401  0031                     	ds	1
  3402  0032                     ??_SetMotorStepCounter:
  3403  0032                     SetMotorStepCounter@motor_no:	
  3404                           ; 1 bytes @ 0x12
  3405                           
  3406  0032                     SetMotorCorrectPositionStart@motor_no:	
  3407                           ; 1 bytes @ 0x12
  3408                           
  3409                           
  3410                           ; 1 bytes @ 0x12
  3411  0032                     	ds	3
  3412  0035                     DetermineBasePosition@load_pos_type:
  3413                           
  3414                           ; 2 bytes @ 0x15
  3415  0035                     	ds	1
  3416  0036                     SaveLoadPosition@motor_no:
  3417                           
  3418                           ; 1 bytes @ 0x16
  3419  0036                     	ds	1
  3420  0037                     CalcMotorStepCounter@motor_bit:
  3421  0037                     DetermineBasePosition@base_pos_index:	
  3422                           ; 1 bytes @ 0x17
  3423                           
  3424  0037                     UpdataHandPosition@i:	
  3425                           ; 1 bytes @ 0x17
  3426                           
  3427  0037                     SaveLoadPosition@i:	
  3428                           ; 1 bytes @ 0x17
  3429                           
  3430                           
  3431                           ; 1 bytes @ 0x17
  3432  0037                     	ds	1
  3433  0038                     DetermineBasePosition@motor_no:
  3434  0038                     UpdataHandPosition@motor_no:	
  3435                           ; 1 bytes @ 0x18
  3436                           
  3437  0038                     CalcMotorStepCounter@steps:	
  3438                           ; 1 bytes @ 0x18
  3439                           
  3440                           
  3441                           ; 2 bytes @ 0x18
  3442  0038                     	ds	2
  3443  003A                     CalcMotorStepCounter@motor_no:
  3444                           
  3445                           ; 1 bytes @ 0x1A
  3446  003A                     	ds	1
  3447  003B                     ??_MoveTargetPosition:
  3448                           
  3449                           ; 1 bytes @ 0x1B
  3450  003B                     	ds	1
  3451  003C                     ??_AfterDetectedLoadPosition:
  3452  003C                     MoveTargetPosition@motor_no:	
  3453                           ; 1 bytes @ 0x1C
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x1C
  3457  003C                     	ds	1
  3458  003D                     ?_AfterDetectedLoadPosition:
  3459  003D                     ?_SPIControl_SetNotification:	
  3460                           ; 1 bytes @ 0x1D
  3461                           
  3462  003D                     ?_SpiCmdFunc_Test:	
  3463                           ; 1 bytes @ 0x1D
  3464                           
  3465  003D                     ?_SpiCmdFunc_FwdPulseNormal:	
  3466                           ; 1 bytes @ 0x1D
  3467                           
  3468  003D                     ?_SpiCmdFunc_RevPulseNormal:	
  3469                           ; 1 bytes @ 0x1D
  3470                           
  3471  003D                     ?_SpiCmdFunc_FwdPulseWithShake:	
  3472                           ; 1 bytes @ 0x1D
  3473                           
  3474  003D                     ?_SpiCmdFunc_SearchLoadPosition:	
  3475                           ; 1 bytes @ 0x1D
  3476                           
  3477  003D                     ?_SpiCmdFunc_SearchBasePosition:	
  3478                           ; 1 bytes @ 0x1D
  3479                           
  3480  003D                     ?_SpiCmdFunc_FwdPulseWithCorrect:	
  3481                           ; 1 bytes @ 0x1D
  3482                           
  3483  003D                     ?_SpiCmdFunc_FwdPulsePositionCtl:	
  3484                           ; 1 bytes @ 0x1D
  3485                           
  3486  003D                     ?_SpiCmdFunc_RevPulsePositionCtl:	
  3487                           ; 1 bytes @ 0x1D
  3488                           
  3489  003D                     ?_SpiCmdFunc_StartDetectVrs:	
  3490                           ; 1 bytes @ 0x1D
  3491                           
  3492  003D                     ?_SpiCmdFunc_StopDetectVrs:	
  3493                           ; 1 bytes @ 0x1D
  3494                           
  3495  003D                     ?_SpiCmdFunc_EnableExcitating:	
  3496                           ; 1 bytes @ 0x1D
  3497                           
  3498  003D                     ?_SpiCmdFunc_DisableExcitating:	
  3499                           ; 1 bytes @ 0x1D
  3500                           
  3501  003D                     ?_SpiCmdFunc_Search1008Position:	
  3502                           ; 1 bytes @ 0x1D
  3503                           
  3504  003D                     ?_SetFwdPulseWithCorrectProc:	
  3505                           ; 1 bytes @ 0x1D
  3506                           
  3507  003D                     ?_VerifyHandPosition_LoadPosition:	
  3508                           ; 1 bytes @ 0x1D
  3509                           
  3510  003D                     AfterDetectedLoadPosition@motor_no:	
  3511                           ; 1 bytes @ 0x1D
  3512                           
  3513  003D                     VerifyHandPosition_LoadPosition@motor_no:	
  3514                           ; 1 bytes @ 0x1D
  3515                           
  3516  003D                     SpiCmdFunc_Test@motor_no:	
  3517                           ; 1 bytes @ 0x1D
  3518                           
  3519  003D                     SpiCmdFunc_FwdPulseNormal@motor_no:	
  3520                           ; 1 bytes @ 0x1D
  3521                           
  3522  003D                     SpiCmdFunc_RevPulseNormal@motor_no:	
  3523                           ; 1 bytes @ 0x1D
  3524                           
  3525  003D                     SpiCmdFunc_FwdPulseWithShake@motor_no:	
  3526                           ; 1 bytes @ 0x1D
  3527                           
  3528  003D                     SpiCmdFunc_SearchLoadPosition@motor_no:	
  3529                           ; 1 bytes @ 0x1D
  3530                           
  3531  003D                     SpiCmdFunc_SearchBasePosition@motor_no:	
  3532                           ; 1 bytes @ 0x1D
  3533                           
  3534  003D                     SpiCmdFunc_FwdPulseWithCorrect@motor_no:	
  3535                           ; 1 bytes @ 0x1D
  3536                           
  3537  003D                     SetFwdPulseWithCorrectProc@motor_no:	
  3538                           ; 1 bytes @ 0x1D
  3539                           
  3540  003D                     SpiCmdFunc_FwdPulsePositionCtl@motor_no:	
  3541                           ; 1 bytes @ 0x1D
  3542                           
  3543  003D                     SpiCmdFunc_RevPulsePositionCtl@motor_no:	
  3544                           ; 1 bytes @ 0x1D
  3545                           
  3546  003D                     SpiCmdFunc_StartDetectVrs@motor_no:	
  3547                           ; 1 bytes @ 0x1D
  3548                           
  3549  003D                     SpiCmdFunc_StopDetectVrs@motor_no:	
  3550                           ; 1 bytes @ 0x1D
  3551                           
  3552  003D                     SpiCmdFunc_EnableExcitating@motor_no:	
  3553                           ; 1 bytes @ 0x1D
  3554                           
  3555  003D                     SpiCmdFunc_DisableExcitating@motor_no:	
  3556                           ; 1 bytes @ 0x1D
  3557                           
  3558  003D                     SpiCmdFunc_Search1008Position@motor_no:	
  3559                           ; 1 bytes @ 0x1D
  3560                           
  3561  003D                     SPIControl_SetNotification@motor_no:	
  3562                           ; 1 bytes @ 0x1D
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x1D
  3566  003D                     	ds	1
  3567  003E                     ??_SPIControl_SetNotification:
  3568  003E                     ??_SpiCmdFunc_Test:	
  3569                           ; 1 bytes @ 0x1E
  3570                           
  3571  003E                     ??_SpiCmdFunc_FwdPulseNormal:	
  3572                           ; 1 bytes @ 0x1E
  3573                           
  3574  003E                     ??_SpiCmdFunc_RevPulseNormal:	
  3575                           ; 1 bytes @ 0x1E
  3576                           
  3577  003E                     ??_SpiCmdFunc_FwdPulseWithShake:	
  3578                           ; 1 bytes @ 0x1E
  3579                           
  3580  003E                     ??_SpiCmdFunc_SearchLoadPosition:	
  3581                           ; 1 bytes @ 0x1E
  3582                           
  3583  003E                     ??_SpiCmdFunc_SearchBasePosition:	
  3584                           ; 1 bytes @ 0x1E
  3585                           
  3586  003E                     ??_SpiCmdFunc_FwdPulseWithCorrect:	
  3587                           ; 1 bytes @ 0x1E
  3588                           
  3589  003E                     ??_SpiCmdFunc_FwdPulsePositionCtl:	
  3590                           ; 1 bytes @ 0x1E
  3591                           
  3592  003E                     ??_SpiCmdFunc_RevPulsePositionCtl:	
  3593                           ; 1 bytes @ 0x1E
  3594                           
  3595  003E                     ??_SpiCmdFunc_StartDetectVrs:	
  3596                           ; 1 bytes @ 0x1E
  3597                           
  3598  003E                     ??_SpiCmdFunc_StopDetectVrs:	
  3599                           ; 1 bytes @ 0x1E
  3600                           
  3601  003E                     ??_SpiCmdFunc_EnableExcitating:	
  3602                           ; 1 bytes @ 0x1E
  3603                           
  3604  003E                     ??_SpiCmdFunc_DisableExcitating:	
  3605                           ; 1 bytes @ 0x1E
  3606                           
  3607  003E                     ??_SpiCmdFunc_Search1008Position:	
  3608                           ; 1 bytes @ 0x1E
  3609                           
  3610  003E                     ??_SetFwdPulseWithCorrectProc:	
  3611                           ; 1 bytes @ 0x1E
  3612                           
  3613  003E                     ??_VerifyHandPosition_LoadPosition:	
  3614                           ; 1 bytes @ 0x1E
  3615                           
  3616                           
  3617                           ; 1 bytes @ 0x1E
  3618  003E                     	ds	2
  3619  0040                     ??_SPIControl_ExecuteCommand:
  3620  0040                     SetFwdPulseWithCorrectProc@motor_bit:	
  3621                           ; 1 bytes @ 0x20
  3622                           
  3623                           
  3624                           ; 1 bytes @ 0x20
  3625  0040                     	ds	3
  3626  0043                     AfterDetectedLoadPosition@res:
  3627  0043                     SPIControl_ExecuteCommand@cmd_type:	
  3628                           ; 1 bytes @ 0x23
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x23
  3632  0043                     	ds	1
  3633  0044                     SPIControl_ExecuteCommand@motor_select:
  3634  0044                     AfterDetectedLoadPosition@move_steps:	
  3635                           ; 1 bytes @ 0x24
  3636                           
  3637                           
  3638                           ; 2 bytes @ 0x24
  3639  0044                     	ds	2
  3640  0046                     VerifyHandPosition_LoadPosition@remain_steps:
  3641                           
  3642                           ; 2 bytes @ 0x26
  3643  0046                     	ds	2
  3644  0048                     VerifyHandPosition_LoadPosition@misalignment_flag:
  3645                           
  3646                           ; 1 bytes @ 0x28
  3647  0048                     	ds	1
  3648  0049                     VerifyHandPosition_LoadPosition@curt_pos:
  3649                           
  3650                           ; 2 bytes @ 0x29
  3651  0049                     	ds	2
  3652  004B                     VerifyHandPosition_LoadPosition@i:
  3653                           
  3654                           ; 1 bytes @ 0x2B
  3655  004B                     	ds	1
  3656  004C                     VerifyHandPosition_LoadPosition@load_pos:
  3657                           
  3658                           ; 2 bytes @ 0x2C
  3659  004C                     	ds	2
  3660  004E                     ??_WatchMotorDriveFinish:
  3661                           
  3662                           ; 1 bytes @ 0x2E
  3663  004E                     	ds	1
  3664                           
  3665                           	psect	maintext
  3666  0966                     __pmaintext:	
  3667 ;;
  3668 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3669 ;;
  3670 ;; *************** function _main *****************
  3671 ;; Defined at:
  3672 ;;		line 16 in file "main.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : B1F/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3686 ;;      Params:         0       0       0       0       0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       1       0       0       0
  3689 ;;      Totals:         0       0       0       0       1       0       0       0
  3690 ;;Total ram usage:        1 bytes
  3691 ;; Hardware stack levels required when called:   15
  3692 ;; This function calls:
  3693 ;;		_InitPulsePositionTable
  3694 ;;		_SPIControl_RecieveComannd
  3695 ;;		_SPI_Open
  3696 ;;		_SYSTEM_Initialize
  3697 ;;		_SetMotorAddShakePulse
  3698 ;;		_SetMotorDirection
  3699 ;;		_SetMotorFrequency
  3700 ;;		_SetMotorStart
  3701 ;;		_SetMotorStepCounter
  3702 ;;		_TMR1_StopTimer
  3703 ;;		_TMR2_SetInterruptHandler
  3704 ;; This function is called by:
  3705 ;;		Startup code after reset
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _main
  3711  0966                     _main:
  3712                           
  3713                           ;main.c: 19:     SYSTEM_Initialize();
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3717  0966  3194  2407  3189   	fcall	_SYSTEM_Initialize
  3718                           
  3719                           ;main.c: 21:  TMR1_StopTimer();
  3720  0969  3187  27FE  3189   	fcall	_TMR1_StopTimer
  3721                           
  3722                           ;main.c: 27:     TMR2_SetInterruptHandler(TMR2_Interrupt);
  3723  096C  30FA               	movlw	low _TMR2_Interrupt
  3724  096D  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3725  096E  3003               	movlw	high _TMR2_Interrupt
  3726  096F  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3727  0970  3190  2081  3189   	fcall	_TMR2_SetInterruptHandler
  3728                           
  3729                           ;main.c: 34:     (INTCONbits.GIE = 1);
  3730  0973  178B               	bsf	11,7	;volatile
  3731                           
  3732                           ;main.c: 37:     (INTCONbits.PEIE = 1);
  3733  0974  170B               	bsf	11,6	;volatile
  3734                           
  3735                           ;main.c: 45:  InitPulsePositionTable( 0 );
  3736  0975  3000               	movlw	0
  3737  0976  3192  22D3  3189   	fcall	_InitPulsePositionTable
  3738                           
  3739                           ;main.c: 46:  InitPulsePositionTable( 1 );
  3740  0979  3001               	movlw	1
  3741  097A  3192  22D3  3189   	fcall	_InitPulsePositionTable
  3742                           
  3743                           ;main.c: 48:  SetMotorDirection( 0, 1 );
  3744  097D  0020               	movlb	0	; select bank0
  3745  097E  01A0               	clrf	SetMotorDirection@dir
  3746  097F  0AA0               	incf	SetMotorDirection@dir,f
  3747  0980  3000               	movlw	0
  3748  0981  3195  2509  3189   	fcall	_SetMotorDirection
  3749                           
  3750                           ;main.c: 49:  SetMotorStepCounter( 0, 80 );
  3751  0984  3050               	movlw	80
  3752  0985  00B0               	movwf	SetMotorStepCounter@steps
  3753  0986  3000               	movlw	0
  3754  0987  00B1               	movwf	SetMotorStepCounter@steps+1
  3755  0988  3000               	movlw	0
  3756  0989  3191  2102  3189   	fcall	_SetMotorStepCounter
  3757                           
  3758                           ;main.c: 50:  SetMotorAddShakePulse( 0, 0 );
  3759  098C  0020               	movlb	0	; select bank0
  3760  098D  01A0               	clrf	SetMotorAddShakePulse@sw
  3761  098E  3000               	movlw	0
  3762  098F  3195  253B  3189   	fcall	_SetMotorAddShakePulse
  3763                           
  3764                           ;main.c: 51:  SetMotorFrequency( 0, FREQ_SET_SELF_CONTROL_NORMAL, 41 );
  3765  0992  01A0               	clrf	SetMotorFrequency@type
  3766  0993  3029               	movlw	41
  3767  0994  0023               	movlb	3	; select bank3
  3768  0995  00CE               	movwf	??_main^(0+384)
  3769  0996  084E               	movf	??_main^(0+384),w
  3770  0997  0020               	movlb	0	; select bank0
  3771  0998  00A1               	movwf	SetMotorFrequency@set_freq
  3772  0999  3000               	movlw	0
  3773  099A  3188  2045  3189   	fcall	_SetMotorFrequency
  3774                           
  3775                           ;main.c: 53:  SetMotorDirection( 1, 1 );
  3776  099D  01A0               	clrf	SetMotorDirection@dir
  3777  099E  0AA0               	incf	SetMotorDirection@dir,f
  3778  099F  3001               	movlw	1
  3779  09A0  3195  2509  3189   	fcall	_SetMotorDirection
  3780                           
  3781                           ;main.c: 54:  SetMotorStepCounter( 1, 120 );
  3782  09A3  3078               	movlw	120
  3783  09A4  00B0               	movwf	SetMotorStepCounter@steps
  3784  09A5  3000               	movlw	0
  3785  09A6  00B1               	movwf	SetMotorStepCounter@steps+1
  3786  09A7  3001               	movlw	1
  3787  09A8  3191  2102  3189   	fcall	_SetMotorStepCounter
  3788                           
  3789                           ;main.c: 55:  SetMotorAddShakePulse( 1, 0 );
  3790  09AB  0020               	movlb	0	; select bank0
  3791  09AC  01A0               	clrf	SetMotorAddShakePulse@sw
  3792  09AD  3001               	movlw	1
  3793  09AE  3195  253B  3189   	fcall	_SetMotorAddShakePulse
  3794                           
  3795                           ;main.c: 56:  SetMotorFrequency( 1, FREQ_SET_SELF_CONTROL_NORMAL, 41 );
  3796  09B1  01A0               	clrf	SetMotorFrequency@type
  3797  09B2  3029               	movlw	41
  3798  09B3  0023               	movlb	3	; select bank3
  3799  09B4  00CE               	movwf	??_main^(0+384)
  3800  09B5  084E               	movf	??_main^(0+384),w
  3801  09B6  0020               	movlb	0	; select bank0
  3802  09B7  00A1               	movwf	SetMotorFrequency@set_freq
  3803  09B8  3001               	movlw	1
  3804  09B9  3188  2045  3189   	fcall	_SetMotorFrequency
  3805                           
  3806                           ;main.c: 58:  SetMotorStart( 0 );
  3807  09BC  3000               	movlw	0
  3808  09BD  3190  2091  3189   	fcall	_SetMotorStart
  3809                           
  3810                           ;main.c: 59:  SetMotorStart( 1 );
  3811  09C0  3001               	movlw	1
  3812  09C1  3190  2091  3189   	fcall	_SetMotorStart
  3813                           
  3814                           ;main.c: 66:  SPI_Open(SPI_DEFAULT);
  3815  09C4  3000               	movlw	0
  3816  09C5  3189  2110  3189   	fcall	_SPI_Open
  3817  09C8                     l6890:
  3818                           
  3819                           ;main.c: 70:   SPIControl_RecieveComannd();
  3820  09C8  3193  23A8  3189   	fcall	_SPIControl_RecieveComannd
  3821  09CB  29C8               	goto	l6890
  3822  09CC                     __end_of_main:
  3823                           
  3824                           	psect	text1
  3825  07FE                     __ptext1:	
  3826 ;; *************** function _TMR1_StopTimer *****************
  3827 ;; Defined at:
  3828 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		None
  3837 ;; Tracked objects:
  3838 ;;		On entry : 1F/0
  3839 ;;		On exit  : 1F/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3842 ;;      Params:         0       0       0       0       0       0       0       0
  3843 ;;      Locals:         0       0       0       0       0       0       0       0
  3844 ;;      Temps:          0       0       0       0       0       0       0       0
  3845 ;;      Totals:         0       0       0       0       0       0       0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    8
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_main
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _TMR1_StopTimer
  3858  07FE                     _TMR1_StopTimer:
  3859                           
  3860                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _TMR1_StopTimer: []
  3864  07FE  1018               	bcf	24,0	;volatile
  3865  07FF  0008               	return
  3866  0800                     __end_of_TMR1_StopTimer:
  3867                           
  3868                           	psect	text2
  3869  153B                     __ptext2:	
  3870 ;; *************** function _SetMotorAddShakePulse *****************
  3871 ;; Defined at:
  3872 ;;		line 1790 in file "MotorDrive.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  motor_no        1    wreg     unsigned char 
  3875 ;;  sw              1    0[BANK0 ] unsigned char 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  motor_no        1    3[BANK0 ] unsigned char 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0
  3882 ;; Tracked objects:
  3883 ;;		On entry : 1F/0
  3884 ;;		On exit  : 1F/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3887 ;;      Params:         0       1       0       0       0       0       0       0
  3888 ;;      Locals:         0       1       0       0       0       0       0       0
  3889 ;;      Temps:          0       2       0       0       0       0       0       0
  3890 ;;      Totals:         0       4       0       0       0       0       0       0
  3891 ;;Total ram usage:        4 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    8
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _SetMotorAddShakePulse
  3903  153B                     _SetMotorAddShakePulse:
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _SetMotorAddShakePulse: [wreg+status,2+status,0]
  3907                           ;SetMotorAddShakePulse@motor_no stored from wreg
  3908  153B  00A3               	movwf	SetMotorAddShakePulse@motor_no
  3909                           
  3910                           ;MotorDrive.c: 1790: void SetMotorAddShakePulse(UB motor_no, UB sw);MotorDrive.c: 1791: 
      +                          {;MotorDrive.c: 1792:     motorBitOperation = (UB) (0x01 << motor_no);
  3911  153C  3001               	movlw	1
  3912  153D  00A1               	movwf	??_SetMotorAddShakePulse
  3913  153E  0A23               	incf	SetMotorAddShakePulse@motor_no,w
  3914  153F  2D41               	goto	u5604
  3915  1540                     u5605:
  3916  1540  35A1               	lslf	??_SetMotorAddShakePulse,f
  3917  1541                     u5604:
  3918  1541  0B89               	decfsz	9,f
  3919  1542  2D40               	goto	u5605
  3920  1543  0821               	movf	??_SetMotorAddShakePulse,w
  3921  1544  00A2               	movwf	??_SetMotorAddShakePulse+1
  3922  1545  0822               	movf	??_SetMotorAddShakePulse+1,w
  3923  1546  00F4               	movwf	_motorBitOperation
  3924                           
  3925                           ;MotorDrive.c: 1794:     if (sw) {
  3926  1547  0820               	movf	SetMotorAddShakePulse@sw,w
  3927  1548  1903               	btfsc	3,2
  3928  1549  2D4F               	goto	l6844
  3929                           
  3930                           ;MotorDrive.c: 1796:         addShakePulseBit |= motorBitOperation;
  3931  154A  0874               	movf	_motorBitOperation,w
  3932  154B  00A1               	movwf	??_SetMotorAddShakePulse
  3933  154C  0821               	movf	??_SetMotorAddShakePulse,w
  3934  154D  04F0               	iorwf	_addShakePulseBit,f
  3935                           
  3936                           ;MotorDrive.c: 1798:     } else {
  3937  154E  0008               	return
  3938  154F                     l6844:
  3939                           
  3940                           ;MotorDrive.c: 1800:         addShakePulseBit &= (UB) (~motorBitOperation);
  3941  154F  0974               	comf	_motorBitOperation,w
  3942  1550  00A1               	movwf	??_SetMotorAddShakePulse
  3943  1551  0821               	movf	??_SetMotorAddShakePulse,w
  3944  1552  05F0               	andwf	_addShakePulseBit,f
  3945  1553  0008               	return
  3946  1554                     __end_of_SetMotorAddShakePulse:
  3947                           
  3948                           	psect	text3
  3949  1407                     __ptext3:	
  3950 ;; *************** function _SYSTEM_Initialize *****************
  3951 ;; Defined at:
  3952 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0, pclath, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : B1F/0
  3963 ;;		On exit  : 1F/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3966 ;;      Params:         0       0       0       0       0       0       0       0
  3967 ;;      Locals:         0       0       0       0       0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0
  3969 ;;      Totals:         0       0       0       0       0       0       0       0
  3970 ;;Total ram usage:        0 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:   10
  3973 ;; This function calls:
  3974 ;;		_DAC_Initialize
  3975 ;;		_OSCILLATOR_Initialize
  3976 ;;		_PIN_MANAGER_Initialize
  3977 ;;		_SPI_Initialize
  3978 ;;		_TMR1_Initialize
  3979 ;;		_TMR2_Initialize
  3980 ;;		_WDT_Initialize
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _SYSTEM_Initialize
  3988  1407                     _SYSTEM_Initialize:
  3989                           
  3990                           ;mcc_generated_files/mcc.c: 53:     SPI_Initialize();
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3994  1407  3190  20A5  3194   	fcall	_SPI_Initialize
  3995                           
  3996                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3997  140A  3195  2522  3194   	fcall	_PIN_MANAGER_Initialize
  3998                           
  3999                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4000  140D  3190  207B  3194   	fcall	_OSCILLATOR_Initialize
  4001                           
  4002                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4003  1410  3190  2067  3194   	fcall	_WDT_Initialize
  4004                           
  4005                           ;mcc_generated_files/mcc.c: 57:     DAC_Initialize();
  4006  1413  3190  2075  3194   	fcall	_DAC_Initialize
  4007                           
  4008                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4009  1416  3193  23BA  3194   	fcall	_TMR2_Initialize
  4010                           
  4011                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  4012  1419  3195  256E         	fcall	_TMR1_Initialize
  4013  141B  0008               	return
  4014  141C                     __end_of_SYSTEM_Initialize:
  4015                           
  4016                           	psect	text4
  4017  1067                     __ptext4:	
  4018 ;; *************** function _WDT_Initialize *****************
  4019 ;; Defined at:
  4020 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg
  4029 ;; Tracked objects:
  4030 ;;		On entry : B1F/2
  4031 ;;		On exit  : B1F/1
  4032 ;;		Unchanged: B00/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4034 ;;      Params:         0       0       0       0       0       0       0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    8
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_SYSTEM_Initialize
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _WDT_Initialize
  4050  1067                     _WDT_Initialize:
  4051                           
  4052                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in _WDT_Initialize: [wreg]
  4056  1067  3016               	movlw	22
  4057  1068  0021               	movlb	1	; select bank1
  4058  1069  0097               	movwf	23	;volatile
  4059  106A  0008               	return
  4060  106B                     __end_of_WDT_Initialize:
  4061                           
  4062                           	psect	text5
  4063  13BA                     __ptext5:	
  4064 ;; *************** function _TMR2_Initialize *****************
  4065 ;; Defined at:
  4066 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      void 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0, pclath, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : B1F/2
  4077 ;;		On exit  : 1F/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4080 ;;      Params:         0       0       0       0       0       0       0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0
  4083 ;;      Totals:         0       0       0       0       0       0       0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    9
  4087 ;; This function calls:
  4088 ;;		_TMR2_SetInterruptHandler
  4089 ;; This function is called by:
  4090 ;;		_SYSTEM_Initialize
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function _TMR2_Initialize
  4096  13BA                     _TMR2_Initialize:
  4097                           
  4098                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x79;
  4099                           
  4100                           ;incstack = 0
  4101                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4102  13BA  3079               	movlw	121
  4103  13BB  0020               	movlb	0	; select bank0
  4104  13BC  009B               	movwf	27	;volatile
  4105                           
  4106                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  4107  13BD  019A               	clrf	26	;volatile
  4108                           
  4109                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  4110  13BE  1091               	bcf	17,1	;volatile
  4111                           
  4112                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  4113  13BF  0021               	movlb	1	; select bank1
  4114  13C0  1491               	bsf	17,1	;volatile
  4115                           
  4116                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  4117  13C1  3050               	movlw	low _TMR2_DefaultInterruptHandler
  4118  13C2  0020               	movlb	0	; select bank0
  4119  13C3  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  4120  13C4  3010               	movlw	high _TMR2_DefaultInterruptHandler
  4121  13C5  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  4122  13C6  3190  2081         	fcall	_TMR2_SetInterruptHandler
  4123                           
  4124                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x05;
  4125  13C8  3005               	movlw	5
  4126  13C9  0020               	movlb	0	; select bank0
  4127  13CA  009C               	movwf	28	;volatile
  4128  13CB  0008               	return
  4129  13CC                     __end_of_TMR2_Initialize:
  4130                           
  4131                           	psect	text6
  4132  156E                     __ptext6:	
  4133 ;; *************** function _TMR1_Initialize *****************
  4134 ;; Defined at:
  4135 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 1F/0
  4146 ;;		On exit  : 1F/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4149 ;;      Params:         0       0       0       0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0
  4152 ;;      Totals:         0       0       0       0       0       0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    9
  4156 ;; This function calls:
  4157 ;;		_TMR1_SetInterruptHandler
  4158 ;; This function is called by:
  4159 ;;		_SYSTEM_Initialize
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _TMR1_Initialize
  4165  156E                     _TMR1_Initialize:
  4166                           
  4167                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4171  156E  0199               	clrf	25	;volatile
  4172                           
  4173                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x86;
  4174  156F  3086               	movlw	134
  4175  1570  0097               	movwf	23	;volatile
  4176                           
  4177                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xE8;
  4178  1571  30E8               	movlw	232
  4179  1572  0096               	movwf	22	;volatile
  4180                           
  4181                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4182  1573  1011               	bcf	17,0	;volatile
  4183                           
  4184                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4185  1574  0817               	movf	23,w	;volatile
  4186  1575  0022               	movlb	2	; select bank2
  4187  1576  00EB               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  4188  1577  0020               	movlb	0	; select bank0
  4189  1578  0816               	movf	22,w	;volatile
  4190  1579  0022               	movlb	2	; select bank2
  4191  157A  00EA               	movwf	_timer1ReloadVal^(0+256)	;volatile
  4192                           
  4193                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4194  157B  0021               	movlb	1	; select bank1
  4195  157C  1411               	bsf	17,0	;volatile
  4196                           
  4197                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4198  157D  304F               	movlw	low _TMR1_DefaultInterruptHandler
  4199  157E  0020               	movlb	0	; select bank0
  4200  157F  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4201  1580  3010               	movlw	high _TMR1_DefaultInterruptHandler
  4202  1581  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4203  1582  3190  2089         	fcall	_TMR1_SetInterruptHandler
  4204                           
  4205                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0xC1;
  4206  1584  30C1               	movlw	193
  4207  1585  0020               	movlb	0	; select bank0
  4208  1586  0098               	movwf	24	;volatile
  4209  1587  0008               	return
  4210  1588                     __end_of_TMR1_Initialize:
  4211                           
  4212                           	psect	text7
  4213  1089                     __ptext7:	
  4214 ;; *************** function _TMR1_SetInterruptHandler *****************
  4215 ;; Defined at:
  4216 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4219 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg
  4226 ;; Tracked objects:
  4227 ;;		On entry : 1F/0
  4228 ;;		On exit  : 1F/2
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4231 ;;      Params:         0       2       0       0       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0       0
  4234 ;;      Totals:         0       2       0       0       0       0       0       0
  4235 ;;Total ram usage:        2 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    8
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_TMR1_Initialize
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _TMR1_SetInterruptHandler
  4247  1089                     _TMR1_SetInterruptHandler:
  4248                           
  4249                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4253  1089  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4254  108A  0022               	movlb	2	; select bank2
  4255  108B  00E9               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  4256  108C  0020               	movlb	0	; select bank0
  4257  108D  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4258  108E  0022               	movlb	2	; select bank2
  4259  108F  00E8               	movwf	_TMR1_InterruptHandler^(0+256)
  4260  1090  0008               	return
  4261  1091                     __end_of_TMR1_SetInterruptHandler:
  4262                           
  4263                           	psect	text8
  4264  10A5                     __ptext8:	
  4265 ;; *************** function _SPI_Initialize *****************
  4266 ;; Defined at:
  4267 ;;		line 62 in file "mcc_generated_files/spi.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2
  4276 ;; Tracked objects:
  4277 ;;		On entry : B1F/0
  4278 ;;		On exit  : B1F/4
  4279 ;;		Unchanged: B00/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4281 ;;      Params:         0       0       0       0       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0       0
  4284 ;;      Totals:         0       0       0       0       0       0       0       0
  4285 ;;Total ram usage:        0 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    8
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_SYSTEM_Initialize
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           
  4296                           ;psect for function _SPI_Initialize
  4297  10A5                     _SPI_Initialize:
  4298                           
  4299                           ;mcc_generated_files/spi.c: 65:     SSP1STAT = 0x00;
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4303  10A5  0024               	movlb	4	; select bank4
  4304  10A6  0194               	clrf	20	;volatile
  4305                           
  4306                           ;mcc_generated_files/spi.c: 66:     SSP1CON1 = 0x14;
  4307  10A7  3014               	movlw	20
  4308  10A8  0095               	movwf	21	;volatile
  4309                           
  4310                           ;mcc_generated_files/spi.c: 67:     SSP1ADD = 0x00;
  4311  10A9  0192               	clrf	18	;volatile
  4312                           
  4313                           ;mcc_generated_files/spi.c: 68:     TRISBbits.TRISB6 = 1;
  4314  10AA  0021               	movlb	1	; select bank1
  4315  10AB  170D               	bsf	13,6	;volatile
  4316                           
  4317                           ;mcc_generated_files/spi.c: 69:     SSP1CON1bits.SSPEN = 0;
  4318  10AC  0024               	movlb	4	; select bank4
  4319  10AD  1295               	bcf	21,5	;volatile
  4320  10AE  0008               	return
  4321  10AF                     __end_of_SPI_Initialize:
  4322                           
  4323                           	psect	text9
  4324  1522                     __ptext9:	
  4325 ;; *************** function _PIN_MANAGER_Initialize *****************
  4326 ;; Defined at:
  4327 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;		None
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2
  4336 ;; Tracked objects:
  4337 ;;		On entry : B1F/4
  4338 ;;		On exit  : B1F/2
  4339 ;;		Unchanged: B00/0
  4340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4341 ;;      Params:         0       0       0       0       0       0       0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0       0
  4343 ;;      Temps:          0       0       0       0       0       0       0       0
  4344 ;;      Totals:         0       0       0       0       0       0       0       0
  4345 ;;Total ram usage:        0 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    8
  4348 ;; This function calls:
  4349 ;;		Nothing
  4350 ;; This function is called by:
  4351 ;;		_SYSTEM_Initialize
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _PIN_MANAGER_Initialize
  4357  1522                     _PIN_MANAGER_Initialize:
  4358                           
  4359                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4360                           
  4361                           ;incstack = 0
  4362                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4363  1522  0022               	movlb	2	; select bank2
  4364  1523  018C               	clrf	12	;volatile
  4365                           
  4366                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4367  1524  018D               	clrf	13	;volatile
  4368                           
  4369                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4370  1525  018E               	clrf	14	;volatile
  4371                           
  4372                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x09;
  4373  1526  3009               	movlw	9
  4374  1527  0021               	movlb	1	; select bank1
  4375  1528  008C               	movwf	12	;volatile
  4376                           
  4377                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x50;
  4378  1529  3050               	movlw	80
  4379  152A  008D               	movwf	13	;volatile
  4380                           
  4381                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x60;
  4382  152B  3060               	movlw	96
  4383  152C  008E               	movwf	14	;volatile
  4384                           
  4385                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x0F;
  4386  152D  300F               	movlw	15
  4387  152E  0023               	movlb	3	; select bank3
  4388  152F  008E               	movwf	14	;volatile
  4389                           
  4390                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
  4391  1530  018D               	clrf	13	;volatile
  4392                           
  4393                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x03;
  4394  1531  3003               	movlw	3
  4395  1532  008C               	movwf	12	;volatile
  4396                           
  4397                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4398  1533  0024               	movlb	4	; select bank4
  4399  1534  018D               	clrf	13	;volatile
  4400                           
  4401                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4402  1535  018C               	clrf	12	;volatile
  4403                           
  4404                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4405  1536  0021               	movlb	1	; select bank1
  4406  1537  1795               	bsf	21,7	;volatile
  4407                           
  4408                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4409  1538  0022               	movlb	2	; select bank2
  4410  1539  019D               	clrf	29	;volatile
  4411  153A  0008               	return
  4412  153B                     __end_of_PIN_MANAGER_Initialize:
  4413                           
  4414                           	psect	text10
  4415  107B                     __ptext10:	
  4416 ;; *************** function _OSCILLATOR_Initialize *****************
  4417 ;; Defined at:
  4418 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, status,2
  4427 ;; Tracked objects:
  4428 ;;		On entry : B1F/2
  4429 ;;		On exit  : B1F/2
  4430 ;;		Unchanged: B00/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4432 ;;      Params:         0       0       0       0       0       0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0
  4434 ;;      Temps:          0       0       0       0       0       0       0       0
  4435 ;;      Totals:         0       0       0       0       0       0       0       0
  4436 ;;Total ram usage:        0 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    8
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_SYSTEM_Initialize
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _OSCILLATOR_Initialize
  4448  107B                     _OSCILLATOR_Initialize:
  4449                           
  4450                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x7A;
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4454  107B  307A               	movlw	122
  4455  107C  0021               	movlb	1	; select bank1
  4456  107D  0099               	movwf	25	;volatile
  4457                           
  4458                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4459  107E  0022               	movlb	2	; select bank2
  4460  107F  0196               	clrf	22	;volatile
  4461  1080  0008               	return
  4462  1081                     __end_of_OSCILLATOR_Initialize:
  4463                           
  4464                           	psect	text11
  4465  1075                     __ptext11:	
  4466 ;; *************** function _DAC_Initialize *****************
  4467 ;; Defined at:
  4468 ;;		line 58 in file "mcc_generated_files/dac.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg
  4477 ;; Tracked objects:
  4478 ;;		On entry : B1F/1
  4479 ;;		On exit  : B1F/2
  4480 ;;		Unchanged: B00/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4482 ;;      Params:         0       0       0       0       0       0       0       0
  4483 ;;      Locals:         0       0       0       0       0       0       0       0
  4484 ;;      Temps:          0       0       0       0       0       0       0       0
  4485 ;;      Totals:         0       0       0       0       0       0       0       0
  4486 ;;Total ram usage:        0 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    8
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_SYSTEM_Initialize
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           
  4497                           ;psect for function _DAC_Initialize
  4498  1075                     _DAC_Initialize:
  4499                           
  4500                           ;mcc_generated_files/dac.c: 61:     DACCON0 = 0x80;
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in _DAC_Initialize: [wreg]
  4504  1075  3080               	movlw	128
  4505  1076  0022               	movlb	2	; select bank2
  4506  1077  0098               	movwf	24	;volatile
  4507                           
  4508                           ;mcc_generated_files/dac.c: 63:     DACCON1 = 0x1F;
  4509  1078  301F               	movlw	31
  4510  1079  0099               	movwf	25	;volatile
  4511  107A  0008               	return
  4512  107B                     __end_of_DAC_Initialize:
  4513                           
  4514                           	psect	text12
  4515  0910                     __ptext12:	
  4516 ;; *************** function _SPI_Open *****************
  4517 ;; Defined at:
  4518 ;;		line 72 in file "mcc_generated_files/spi.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  spiUniqueCon    1    wreg     enum E353
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  spiUniqueCon    1    3[BANK0 ] enum E353
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      _Bool 
  4525 ;; Registers used:
  4526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4527 ;; Tracked objects:
  4528 ;;		On entry : 1F/0
  4529 ;;		On exit  : 1F/4
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4532 ;;      Params:         0       0       0       0       0       0       0       0
  4533 ;;      Locals:         0       1       0       0       0       0       0       0
  4534 ;;      Temps:          0       3       0       0       0       0       0       0
  4535 ;;      Totals:         0       4       0       0       0       0       0       0
  4536 ;;Total ram usage:        4 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    8
  4539 ;; This function calls:
  4540 ;;		Nothing
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _SPI_Open
  4548  0910                     _SPI_Open:
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _SPI_Open: [wreg-fsr0h+status,2+status,0+pclath]
  4552                           ;SPI_Open@spiUniqueConfiguration stored from wreg
  4553  0910  00A3               	movwf	SPI_Open@spiUniqueConfiguration
  4554                           
  4555                           ;mcc_generated_files/spi.c: 72: _Bool SPI_Open(spi_modes_t spiUniqueConfiguration);mcc_g
      +                          enerated_files/spi.c: 73: {;mcc_generated_files/spi.c: 74:     if(!SSP1CON1bits.SSPEN)
  4556  0911  0024               	movlb	4	; select bank4
  4557  0912  1A95               	btfsc	21,5	;volatile
  4558  0913  0008               	return
  4559                           
  4560                           ;mcc_generated_files/spi.c: 75:     {;mcc_generated_files/spi.c: 76:         SSP1STAT = 
      +                          spi_configuration[spiUniqueConfiguration].stat;
  4561  0914  0020               	movlb	0	; select bank0
  4562  0915  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4563  0916  00A0               	movwf	??_SPI_Open
  4564  0917  01A1               	clrf	??_SPI_Open+1
  4565  0918  35A0               	lslf	??_SPI_Open,f
  4566  0919  0DA1               	rlf	??_SPI_Open+1,f
  4567  091A  35A0               	lslf	??_SPI_Open,f
  4568  091B  0DA1               	rlf	??_SPI_Open+1,f
  4569  091C  305B               	movlw	low ((_spi_configuration+1)| (0+32768))
  4570  091D  0720               	addwf	??_SPI_Open,w
  4571  091E  0084               	movwf	4
  4572  091F  3098               	movlw	high ((_spi_configuration+1)| (0+32768))
  4573  0920  3D21               	addwfc	??_SPI_Open+1,w
  4574  0921  0085               	movwf	5
  4575  0922  0800               	movf	0,w	;code access
  4576  0923  0024               	movlb	4	; select bank4
  4577  0924  0094               	movwf	20	;volatile
  4578                           
  4579                           ;mcc_generated_files/spi.c: 77:         SSP1CON1 = spi_configuration[spiUniqueConfigurat
      +                          ion].con1;
  4580  0925  0020               	movlb	0	; select bank0
  4581  0926  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4582  0927  00A0               	movwf	??_SPI_Open
  4583  0928  01A1               	clrf	??_SPI_Open+1
  4584  0929  35A0               	lslf	??_SPI_Open,f
  4585  092A  0DA1               	rlf	??_SPI_Open+1,f
  4586  092B  35A0               	lslf	??_SPI_Open,f
  4587  092C  0DA1               	rlf	??_SPI_Open+1,f
  4588  092D  305A               	movlw	low (_spi_configuration| (0+32768))
  4589  092E  0720               	addwf	??_SPI_Open,w
  4590  092F  0084               	movwf	4
  4591  0930  3098               	movlw	high (_spi_configuration| (0+32768))
  4592  0931  3D21               	addwfc	??_SPI_Open+1,w
  4593  0932  0085               	movwf	5
  4594  0933  0800               	movf	0,w	;code access
  4595  0934  0024               	movlb	4	; select bank4
  4596  0935  0095               	movwf	21	;volatile
  4597                           
  4598                           ;mcc_generated_files/spi.c: 78:         SSP1CON2 = 0x00;
  4599  0936  0196               	clrf	22	;volatile
  4600                           
  4601                           ;mcc_generated_files/spi.c: 79:         SSP1ADD = spi_configuration[spiUniqueConfigurati
      +                          on].add;
  4602  0937  0020               	movlb	0	; select bank0
  4603  0938  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4604  0939  00A0               	movwf	??_SPI_Open
  4605  093A  01A1               	clrf	??_SPI_Open+1
  4606  093B  35A0               	lslf	??_SPI_Open,f
  4607  093C  0DA1               	rlf	??_SPI_Open+1,f
  4608  093D  35A0               	lslf	??_SPI_Open,f
  4609  093E  0DA1               	rlf	??_SPI_Open+1,f
  4610  093F  305C               	movlw	low ((_spi_configuration+2)| (0+32768))
  4611  0940  0720               	addwf	??_SPI_Open,w
  4612  0941  0084               	movwf	4
  4613  0942  3098               	movlw	high ((_spi_configuration+2)| (0+32768))
  4614  0943  3D21               	addwfc	??_SPI_Open+1,w
  4615  0944  0085               	movwf	5
  4616  0945  0800               	movf	0,w	;code access
  4617  0946  0024               	movlb	4	; select bank4
  4618  0947  0092               	movwf	18	;volatile
  4619                           
  4620                           ;mcc_generated_files/spi.c: 80:         TRISBbits.TRISB6 = spi_configuration[spiUniqueCo
      +                          nfiguration].operation;
  4621  0948  0020               	movlb	0	; select bank0
  4622  0949  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4623  094A  00A0               	movwf	??_SPI_Open
  4624  094B  01A1               	clrf	??_SPI_Open+1
  4625  094C  35A0               	lslf	??_SPI_Open,f
  4626  094D  0DA1               	rlf	??_SPI_Open+1,f
  4627  094E  35A0               	lslf	??_SPI_Open,f
  4628  094F  0DA1               	rlf	??_SPI_Open+1,f
  4629  0950  305D               	movlw	low ((_spi_configuration+3)| (0+32768))
  4630  0951  0720               	addwf	??_SPI_Open,w
  4631  0952  0084               	movwf	4
  4632  0953  3098               	movlw	high ((_spi_configuration+3)| (0+32768))
  4633  0954  3D21               	addwfc	??_SPI_Open+1,w
  4634  0955  0085               	movwf	5
  4635  0956  0800               	movf	0,w	;code access
  4636  0957  00A2               	movwf	??_SPI_Open+2
  4637  0958  0EA2               	swapf	??_SPI_Open+2,f
  4638  0959  0DA2               	rlf	??_SPI_Open+2,f
  4639  095A  0DA2               	rlf	??_SPI_Open+2,f
  4640  095B  0021               	movlb	1	; select bank1
  4641  095C  080D               	movf	13,w	;volatile
  4642  095D  0020               	movlb	0	; select bank0
  4643  095E  0622               	xorwf	??_SPI_Open+2,w
  4644  095F  39BF               	andlw	-65
  4645  0960  0622               	xorwf	??_SPI_Open+2,w
  4646  0961  0021               	movlb	1	; select bank1
  4647  0962  008D               	movwf	13	;volatile
  4648                           
  4649                           ;mcc_generated_files/spi.c: 81:         SSP1CON1bits.SSPEN = 1;
  4650  0963  0024               	movlb	4	; select bank4
  4651  0964  1695               	bsf	21,5	;volatile
  4652  0965  0008               	return
  4653  0966                     __end_of_SPI_Open:
  4654                           
  4655                           	psect	text13
  4656  13A8                     __ptext13:	
  4657 ;; *************** function _SPIControl_RecieveComannd *****************
  4658 ;; Defined at:
  4659 ;;		line 173 in file "spi_control.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/4
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4673 ;;      Params:         0       0       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       1       0       0       0       0       0
  4676 ;;      Totals:         0       0       1       0       0       0       0       0
  4677 ;;Total ram usage:        1 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:   14
  4680 ;; This function calls:
  4681 ;;		_SPIControl_ExecuteCommand
  4682 ;;		_SPI_ReadByte
  4683 ;;		_WatchMotorDriveFinish
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function _SPIControl_RecieveComannd
  4691  13A8                     _SPIControl_RecieveComannd:
  4692  13A8                     l1318:	
  4693                           ;incstack = 0
  4694                           ; Regs used in _SPIControl_RecieveComannd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4695                           ;spi_control.c: 175:     while ( 1 ) {
  4696                           
  4697                           
  4698                           ;spi_control.c: 179:         if ( PIR1bits.SSP1IF ) {
  4699  13A8  0020               	movlb	0	; select bank0
  4700  13A9  1D91               	btfss	17,3	;volatile
  4701  13AA  2BB6               	goto	l6852
  4702                           
  4703                           ;spi_control.c: 180:             PIR1bits.SSP1IF = 0;
  4704  13AB  1191               	bcf	17,3	;volatile
  4705                           
  4706                           ;spi_control.c: 181:             recieveCommand = SPI_ReadByte( );
  4707  13AC  3190  205A  3193   	fcall	_SPI_ReadByte
  4708  13AF  0021               	movlb	1	; select bank1
  4709  13B0  00EF               	movwf	??_SPIControl_RecieveComannd^(0+128)
  4710  13B1  086F               	movf	??_SPIControl_RecieveComannd^(0+128),w
  4711  13B2  00CC               	movwf	_recieveCommand^(0+128)
  4712                           
  4713                           ;spi_control.c: 182:             SPIControl_ExecuteCommand( );
  4714  13B3  318B  2388  3193   	fcall	_SPIControl_ExecuteCommand
  4715  13B6                     l6852:
  4716                           
  4717                           ;spi_control.c: 185:         WatchMotorDriveFinish( );
  4718  13B6  318B  23FB  3193   	fcall	_WatchMotorDriveFinish
  4719  13B9  2BA8               	goto	l1318
  4720  13BA                     __end_of_SPIControl_RecieveComannd:
  4721                           
  4722                           	psect	text14
  4723  0BFB                     __ptext14:	
  4724 ;; *************** function _WatchMotorDriveFinish *****************
  4725 ;; Defined at:
  4726 ;;		line 1208 in file "MotorDrive.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;		None
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  func            2    0[BANK2 ] PTR FTN(unsigned char ,)
  4731 ;;		 -> SetFwdPulseWithCorrectProc(1), SpiCmdFunc_Search1008Position(1), SpiCmdFunc_DisableExcitating(1), SpiCmdFunc_Ena
      +bleExcitating(1), 
  4732 ;;		 -> SpiCmdFunc_StopDetectVrs(1), SpiCmdFunc_StartDetectVrs(1), SpiCmdFunc_RevPulsePositionCtl(1), SpiCmdFunc_FwdPuls
      +ePositionCtl(1), 
  4733 ;;		 -> SpiCmdFunc_FwdPulseWithCorrect(1), SpiCmdFunc_SearchBasePosition(1), SpiCmdFunc_SearchLoadPosition(1), SpiCmdFun
      +c_FwdPulseWithShake(1), 
  4734 ;;		 -> SpiCmdFunc_RevPulseNormal(1), SpiCmdFunc_FwdPulseNormal(1), SpiCmdFunc_Test(1), VerifyHandPosition_LoadPosition(
      +1), 
  4735 ;;		 -> SPIControl_SetNotification(1), AfterDetectedLoadPosition(1), NULL(0), 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 1C/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4745 ;;      Params:         0       0       0       0       0       0       0       0
  4746 ;;      Locals:         0       0       0       2       0       0       0       0
  4747 ;;      Temps:          0       1       0       0       0       0       0       0
  4748 ;;      Totals:         0       1       0       2       0       0       0       0
  4749 ;;Total ram usage:        3 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:   13
  4752 ;; This function calls:
  4753 ;;		_AfterDetectedLoadPosition
  4754 ;;		_SPIControl_SetNotification
  4755 ;;		_SetFwdPulseWithCorrectProc
  4756 ;;		_SpiCmdFunc_DisableExcitating
  4757 ;;		_SpiCmdFunc_EnableExcitating
  4758 ;;		_SpiCmdFunc_FwdPulseNormal
  4759 ;;		_SpiCmdFunc_FwdPulsePositionCtl
  4760 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  4761 ;;		_SpiCmdFunc_FwdPulseWithShake
  4762 ;;		_SpiCmdFunc_RevPulseNormal
  4763 ;;		_SpiCmdFunc_RevPulsePositionCtl
  4764 ;;		_SpiCmdFunc_Search1008Position
  4765 ;;		_SpiCmdFunc_SearchBasePosition
  4766 ;;		_SpiCmdFunc_SearchLoadPosition
  4767 ;;		_SpiCmdFunc_StartDetectVrs
  4768 ;;		_SpiCmdFunc_StopDetectVrs
  4769 ;;		_SpiCmdFunc_Test
  4770 ;;		_VerifyHandPosition_LoadPosition
  4771 ;; This function is called by:
  4772 ;;		_SPIControl_RecieveComannd
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _WatchMotorDriveFinish
  4778  0BFB                     _WatchMotorDriveFinish:
  4779                           
  4780                           ;MotorDrive.c: 1210:     void ( *func)(UB motor_no);;MotorDrive.c: 1212:     if (reqAfte
      +                          rDetectLoadFuncBit & 0x01) {
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _WatchMotorDriveFinish: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4784  0BFB  0021               	movlb	1	; select bank1
  4785  0BFC  1C50               	btfss	_reqAfterDetectLoadFuncBit^(0+128),0
  4786  0BFD  2C17               	goto	l6760
  4787                           
  4788                           ;MotorDrive.c: 1214:         reqAfterDetectLoadFuncBit &= (UB) (~0x01);
  4789  0BFE  30FE               	movlw	254
  4790  0BFF  0020               	movlb	0	; select bank0
  4791  0C00  00CE               	movwf	??_WatchMotorDriveFinish
  4792  0C01  084E               	movf	??_WatchMotorDriveFinish,w
  4793  0C02  0021               	movlb	1	; select bank1
  4794  0C03  05D0               	andwf	_reqAfterDetectLoadFuncBit^(0+128),f
  4795                           
  4796                           ;MotorDrive.c: 1216:         if (cbAfterDetectLoadFunc[ 0 ]) {
  4797  0C04  0022               	movlb	2	; select bank2
  4798  0C05  0820               	movf	_cbAfterDetectLoadFunc^(0+256),w
  4799  0C06  0421               	iorwf	(_cbAfterDetectLoadFunc+1)^(0+256),w
  4800  0C07  1903               	btfsc	3,2
  4801  0C08  2C17               	goto	l6760
  4802                           
  4803                           ;MotorDrive.c: 1217:             func = cbAfterDetectLoadFunc[ 0 ];
  4804  0C09  0821               	movf	(_cbAfterDetectLoadFunc+1)^(0+256),w
  4805  0C0A  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4806  0C0B  0820               	movf	_cbAfterDetectLoadFunc^(0+256),w
  4807  0C0C  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4808                           
  4809                           ;MotorDrive.c: 1218:             cbAfterDetectLoadFunc[ 0 ] = ((void*)0);
  4810  0C0D  01A0               	clrf	_cbAfterDetectLoadFunc^(0+256)
  4811  0C0E  01A1               	clrf	(_cbAfterDetectLoadFunc+1)^(0+256)
  4812                           
  4813                           ;MotorDrive.c: 1219:             func(0);
  4814  0C0F  0020               	movlb	0	; select bank0
  4815  0C10  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4816  0C11  0022               	movlb	2	; select bank2
  4817  0C12  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4818  0C13  008A               	movwf	10
  4819  0C14  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4820  0C15  000A               	callw
  4821  0C16  318B               	pagesel	$
  4822  0C17                     l6760:
  4823                           
  4824                           ;MotorDrive.c: 1223:     if (reqAfterDetectLoadFuncBit & 0x02) {
  4825  0C17  0021               	movlb	1	; select bank1
  4826  0C18  1CD0               	btfss	_reqAfterDetectLoadFuncBit^(0+128),1
  4827  0C19  2C34               	goto	l6770
  4828                           
  4829                           ;MotorDrive.c: 1225:         reqAfterDetectLoadFuncBit &= (UB) (~0x02);
  4830  0C1A  30FD               	movlw	253
  4831  0C1B  0020               	movlb	0	; select bank0
  4832  0C1C  00CE               	movwf	??_WatchMotorDriveFinish
  4833  0C1D  084E               	movf	??_WatchMotorDriveFinish,w
  4834  0C1E  0021               	movlb	1	; select bank1
  4835  0C1F  05D0               	andwf	_reqAfterDetectLoadFuncBit^(0+128),f
  4836                           
  4837                           ;MotorDrive.c: 1227:         if (cbAfterDetectLoadFunc[ 1 ]) {
  4838  0C20  0022               	movlb	2	; select bank2
  4839  0C21  0822               	movf	(low ((_cbAfterDetectLoadFunc| (0+256)+2)))^0,w
  4840  0C22  0423               	iorwf	((low ((_cbAfterDetectLoadFunc| (0+256)+2))+1))^0,w
  4841  0C23  1903               	btfsc	3,2
  4842  0C24  2C34               	goto	l6770
  4843                           
  4844                           ;MotorDrive.c: 1228:             func = cbAfterDetectLoadFunc[ 1 ];
  4845  0C25  0823               	movf	((low ((_cbAfterDetectLoadFunc| (0+256)+2))+1))^0,w
  4846  0C26  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4847  0C27  0822               	movf	(low ((_cbAfterDetectLoadFunc| (0+256)+2)))^0,w
  4848  0C28  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4849                           
  4850                           ;MotorDrive.c: 1229:             cbAfterDetectLoadFunc[ 1 ] = ((void*)0);
  4851  0C29  01A2               	clrf	(low ((_cbAfterDetectLoadFunc| (0+256)+2)))^0
  4852  0C2A  01A3               	clrf	((low ((_cbAfterDetectLoadFunc| (0+256)+2))+1))^0
  4853                           
  4854                           ;MotorDrive.c: 1230:             func(1);
  4855  0C2B  0020               	movlb	0	; select bank0
  4856  0C2C  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4857  0C2D  0ABD               	incf	SetFwdPulseWithCorrectProc@motor_no,f
  4858  0C2E  0022               	movlb	2	; select bank2
  4859  0C2F  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4860  0C30  008A               	movwf	10
  4861  0C31  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4862  0C32  000A               	callw
  4863  0C33  318B               	pagesel	$
  4864  0C34                     l6770:
  4865                           
  4866                           ;MotorDrive.c: 1234:     if (reqAfterMotorStopFuncBit & 0x01) {
  4867  0C34  0021               	movlb	1	; select bank1
  4868  0C35  1C59               	btfss	_reqAfterMotorStopFuncBit^(0+128),0
  4869  0C36  2C53               	goto	l6780
  4870                           
  4871                           ;MotorDrive.c: 1236:         reqAfterMotorStopFuncBit &= (UB) (~0x01);
  4872  0C37  30FE               	movlw	254
  4873  0C38  0020               	movlb	0	; select bank0
  4874  0C39  00CE               	movwf	??_WatchMotorDriveFinish
  4875  0C3A  084E               	movf	??_WatchMotorDriveFinish,w
  4876  0C3B  0021               	movlb	1	; select bank1
  4877  0C3C  05D9               	andwf	_reqAfterMotorStopFuncBit^(0+128),f
  4878                           
  4879                           ;MotorDrive.c: 1238:         if (cbAfterMotorStopFunc[ 0 ]) {
  4880  0C3D  082C               	movf	_cbAfterMotorStopFunc^(0+128),w
  4881  0C3E  042D               	iorwf	(_cbAfterMotorStopFunc+1)^(0+128),w
  4882  0C3F  1903               	btfsc	3,2
  4883  0C40  2C53               	goto	l6780
  4884                           
  4885                           ;MotorDrive.c: 1239:             func = cbAfterMotorStopFunc[ 0 ];
  4886  0C41  082D               	movf	(_cbAfterMotorStopFunc+1)^(0+128),w
  4887  0C42  0022               	movlb	2	; select bank2
  4888  0C43  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4889  0C44  0021               	movlb	1	; select bank1
  4890  0C45  082C               	movf	_cbAfterMotorStopFunc^(0+128),w
  4891  0C46  0022               	movlb	2	; select bank2
  4892  0C47  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4893                           
  4894                           ;MotorDrive.c: 1240:             cbAfterMotorStopFunc[ 0 ] = ((void*)0);
  4895  0C48  0021               	movlb	1	; select bank1
  4896  0C49  01AC               	clrf	_cbAfterMotorStopFunc^(0+128)
  4897  0C4A  01AD               	clrf	(_cbAfterMotorStopFunc+1)^(0+128)
  4898                           
  4899                           ;MotorDrive.c: 1241:             func(0);
  4900  0C4B  0020               	movlb	0	; select bank0
  4901  0C4C  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4902  0C4D  0022               	movlb	2	; select bank2
  4903  0C4E  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4904  0C4F  008A               	movwf	10
  4905  0C50  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4906  0C51  000A               	callw
  4907  0C52  318B               	pagesel	$
  4908  0C53                     l6780:
  4909                           
  4910                           ;MotorDrive.c: 1245:     if (reqAfterMotorStopFuncBit & 0x02) {
  4911  0C53  0021               	movlb	1	; select bank1
  4912  0C54  1CD9               	btfss	_reqAfterMotorStopFuncBit^(0+128),1
  4913  0C55  0008               	return
  4914                           
  4915                           ;MotorDrive.c: 1247:         reqAfterMotorStopFuncBit &= (UB) (~0x02);
  4916  0C56  30FD               	movlw	253
  4917  0C57  0020               	movlb	0	; select bank0
  4918  0C58  00CE               	movwf	??_WatchMotorDriveFinish
  4919  0C59  084E               	movf	??_WatchMotorDriveFinish,w
  4920  0C5A  0021               	movlb	1	; select bank1
  4921  0C5B  05D9               	andwf	_reqAfterMotorStopFuncBit^(0+128),f
  4922                           
  4923                           ;MotorDrive.c: 1249:         if (cbAfterMotorStopFunc[ 1 ]) {
  4924  0C5C  082E               	movf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128),w
  4925  0C5D  042F               	iorwf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128),w
  4926  0C5E  1903               	btfsc	3,2
  4927  0C5F  0008               	return
  4928                           
  4929                           ;MotorDrive.c: 1250:             func = cbAfterMotorStopFunc[ 1 ];
  4930  0C60  082F               	movf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128),w
  4931  0C61  0022               	movlb	2	; select bank2
  4932  0C62  00EF               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4933  0C63  0021               	movlb	1	; select bank1
  4934  0C64  082E               	movf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128),w
  4935  0C65  0022               	movlb	2	; select bank2
  4936  0C66  00EE               	movwf	WatchMotorDriveFinish@func^(0+256)
  4937                           
  4938                           ;MotorDrive.c: 1251:             cbAfterMotorStopFunc[ 1 ] = ((void*)0);
  4939  0C67  0021               	movlb	1	; select bank1
  4940  0C68  01AE               	clrf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128)
  4941  0C69  01AF               	clrf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128)
  4942                           
  4943                           ;MotorDrive.c: 1252:             func(1);
  4944  0C6A  0020               	movlb	0	; select bank0
  4945  0C6B  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4946  0C6C  0ABD               	incf	SetFwdPulseWithCorrectProc@motor_no,f
  4947  0C6D  0022               	movlb	2	; select bank2
  4948  0C6E  086F               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4949  0C6F  008A               	movwf	10
  4950  0C70  086E               	movf	WatchMotorDriveFinish@func^(0+256),w
  4951  0C71  000A               	callw
  4952  0C72  318B               	pagesel	$
  4953  0C73  0008               	return
  4954  0C74                     __end_of_WatchMotorDriveFinish:
  4955                           
  4956                           	psect	text15
  4957  0882                     __ptext15:	
  4958 ;; *************** function _SetFwdPulseWithCorrectProc *****************
  4959 ;; Defined at:
  4960 ;;		line 374 in file "spi_control.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  motor_no        1   29[BANK0 ] unsigned char 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  motor_bit       1   32[BANK0 ] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      void 
  4967 ;; Registers used:
  4968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 1D/2
  4971 ;;		On exit  : 1F/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4974 ;;      Params:         0       1       0       0       0       0       0       0
  4975 ;;      Locals:         0       1       0       0       0       0       0       0
  4976 ;;      Temps:          0       2       0       0       0       0       0       0
  4977 ;;      Totals:         0       4       0       0       0       0       0       0
  4978 ;;Total ram usage:        4 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:   11
  4981 ;; This function calls:
  4982 ;;		_CalcMotorStepCounter
  4983 ;;		_SetAfterDetectLoadFunc
  4984 ;;		_SetDriveType
  4985 ;;		_SetMotorFrequency
  4986 ;;		_SetMotorStart
  4987 ;;		_UpdateTargetPosition
  4988 ;; This function is called by:
  4989 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  4990 ;;		_WatchMotorDriveFinish
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           
  4995                           ;psect for function _SetFwdPulseWithCorrectProc
  4996  0882                     _SetFwdPulseWithCorrectProc:
  4997                           
  4998                           ;spi_control.c: 374: void SetFwdPulseWithCorrectProc( UB motor_no );spi_control.c: 375: 
      +                          {;spi_control.c: 376:     UB motor_bit = ( UB )( 0x01 << motor_no );
  4999                           
  5000                           ;incstack = 0
  5001                           ; Regs used in _SetFwdPulseWithCorrectProc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5002  0882  3001               	movlw	1
  5003  0883  0020               	movlb	0	; select bank0
  5004  0884  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  5005  0885  0A3D               	incf	SetFwdPulseWithCorrectProc@motor_no,w
  5006  0886  2888               	goto	u4854
  5007  0887                     u4855:
  5008  0887  35BE               	lslf	??_SetFwdPulseWithCorrectProc,f
  5009  0888                     u4854:
  5010  0888  0B89               	decfsz	9,f
  5011  0889  2887               	goto	u4855
  5012  088A  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5013  088B  00BF               	movwf	??_SetFwdPulseWithCorrectProc+1
  5014  088C  083F               	movf	??_SetFwdPulseWithCorrectProc+1,w
  5015  088D  00C0               	movwf	SetFwdPulseWithCorrectProc@motor_bit
  5016                           
  5017                           ;spi_control.c: 378:     if ( 0 == ( actCorrectDriveBit & motor_bit ) ) {
  5018  088E  0853               	movf	_actCorrectDriveBit,w
  5019  088F  0540               	andwf	SetFwdPulseWithCorrectProc@motor_bit,w
  5020  0890  1D03               	btfss	3,2
  5021  0891  28A4               	goto	l1360
  5022                           
  5023                           ;spi_control.c: 380:      SetDriveType( motor_no, DRIVE_CHECK_POSITION );
  5024  0892  3002               	movlw	2
  5025  0893  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  5026  0894  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5027  0895  00A0               	movwf	SetDriveType@drive_type
  5028  0896  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5029  0897  318D  2585  3188   	fcall	_SetDriveType
  5030                           
  5031                           ;spi_control.c: 381:      SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5032  089A  3002               	movlw	2
  5033  089B  0020               	movlb	0	; select bank0
  5034  089C  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  5035  089D  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5036  089E  00A0               	movwf	SetMotorFrequency@type
  5037  089F  01A1               	clrf	SetMotorFrequency@set_freq
  5038  08A0  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5039  08A1  3188  2045  3188   	fcall	_SetMotorFrequency
  5040  08A4                     l1360:	
  5041                           ;spi_control.c: 382:     }
  5042                           
  5043                           
  5044                           ;spi_control.c: 384:  UpdateTargetPosition( motor_no, 1 );
  5045  08A4  3001               	movlw	1
  5046  08A5  00AD               	movwf	UpdateTargetPosition@steps
  5047  08A6  3000               	movlw	0
  5048  08A7  00AE               	movwf	UpdateTargetPosition@steps+1
  5049  08A8  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5050  08A9  3196  26B3  3188   	fcall	_UpdateTargetPosition
  5051                           
  5052                           ;spi_control.c: 385:  CalcMotorStepCounter( motor_no );
  5053  08AC  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5054  08AD  3185  25EB  3188   	fcall	_CalcMotorStepCounter
  5055                           
  5056                           ;spi_control.c: 388:  if ( ( reqCorrectBasePosBit | actCorrectDriveBit ) & motor_bit ) {
  5057  08B0  0020               	movlb	0	; select bank0
  5058  08B1  0854               	movf	_reqCorrectBasePosBit,w
  5059  08B2  0453               	iorwf	_actCorrectDriveBit,w
  5060  08B3  0540               	andwf	SetFwdPulseWithCorrectProc@motor_bit,w
  5061  08B4  1D03               	btfss	3,2
  5062  08B5  28BE               	goto	l6334
  5063                           
  5064                           ;spi_control.c: 393:   SetAfterDetectLoadFunc( motor_no, VerifyHandPosition_LoadPosition
      +                           );
  5065  08B6  30C0               	movlw	low _VerifyHandPosition_LoadPosition
  5066  08B7  00A0               	movwf	SetAfterDetectLoadFunc@func
  5067  08B8  3006               	movlw	high _VerifyHandPosition_LoadPosition
  5068  08B9  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  5069  08BA  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5070  08BB  3190  20C5  3188   	fcall	_SetAfterDetectLoadFunc
  5071  08BE                     l6334:
  5072                           
  5073                           ;spi_control.c: 397:     SetMotorStart( motor_no );
  5074  08BE  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5075  08BF  3190  2091         	fcall	_SetMotorStart
  5076  08C1  0008               	return
  5077  08C2                     __end_of_SetFwdPulseWithCorrectProc:
  5078                           
  5079                           	psect	text16
  5080  1771                     __ptext16:	
  5081 ;; *************** function _SpiCmdFunc_Search1008Position *****************
  5082 ;; Defined at:
  5083 ;;		line 495 in file "spi_control.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 1D/2
  5094 ;;		On exit  : 1F/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5097 ;;      Params:         0       1       0       0       0       0       0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0       0
  5099 ;;      Temps:          0       1       0       0       0       0       0       0
  5100 ;;      Totals:         0       2       0       0       0       0       0       0
  5101 ;;Total ram usage:        2 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:   12
  5104 ;; This function calls:
  5105 ;;		_DeactivateHandPosition
  5106 ;;		_SetDriveType
  5107 ;;		_SetMotorDirection
  5108 ;;		_SetMotorFrequency
  5109 ;;		_SetMotorPositionSearchStart
  5110 ;;		_SetMotorStepCounter
  5111 ;; This function is called by:
  5112 ;;		_WatchMotorDriveFinish
  5113 ;;		_SPIControl_ExecuteCommand
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function _SpiCmdFunc_Search1008Position
  5119  1771                     _SpiCmdFunc_Search1008Position:
  5120                           
  5121                           ;spi_control.c: 495: void SpiCmdFunc_Search1008Position( UB motor_no );spi_control.c: 49
      +                          6: {;spi_control.c: 502:  DeactivateHandPosition( motor_no );
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _SpiCmdFunc_Search1008Position: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5125  1771  0020               	movlb	0	; select bank0
  5126  1772  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5127  1773  3193  2384  3197   	fcall	_DeactivateHandPosition
  5128                           
  5129                           ;spi_control.c: 505:  SetDriveType( motor_no, DRIVE_SEARCH_1008_POSITION );
  5130  1776  3005               	movlw	5
  5131  1777  0020               	movlb	0	; select bank0
  5132  1778  00BE               	movwf	??_SpiCmdFunc_Search1008Position
  5133  1779  083E               	movf	??_SpiCmdFunc_Search1008Position,w
  5134  177A  00A0               	movwf	SetDriveType@drive_type
  5135  177B  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5136  177C  318D  2585  3197   	fcall	_SetDriveType
  5137                           
  5138                           ;spi_control.c: 507:     SetMotorDirection( motor_no, 1 );
  5139  177F  0020               	movlb	0	; select bank0
  5140  1780  01A0               	clrf	SetMotorDirection@dir
  5141  1781  0AA0               	incf	SetMotorDirection@dir,f
  5142  1782  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5143  1783  3195  2509  3197   	fcall	_SetMotorDirection
  5144                           
  5145                           ;spi_control.c: 509:     SetMotorStepCounter( motor_no, 0 );
  5146  1786  3000               	movlw	0
  5147  1787  00B0               	movwf	SetMotorStepCounter@steps
  5148  1788  00B1               	movwf	SetMotorStepCounter@steps+1
  5149  1789  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5150  178A  3191  2102  3197   	fcall	_SetMotorStepCounter
  5151                           
  5152                           ;spi_control.c: 511:     SetMotorFrequency( motor_no, FREQ_SET_SELF_CONTROL_SHAKE, 136 )
      +                          ;
  5153  178D  0020               	movlb	0	; select bank0
  5154  178E  01A0               	clrf	SetMotorFrequency@type
  5155  178F  0AA0               	incf	SetMotorFrequency@type,f
  5156  1790  3088               	movlw	136
  5157  1791  00BE               	movwf	??_SpiCmdFunc_Search1008Position
  5158  1792  083E               	movf	??_SpiCmdFunc_Search1008Position,w
  5159  1793  00A1               	movwf	SetMotorFrequency@set_freq
  5160  1794  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5161  1795  3188  2045  3197   	fcall	_SetMotorFrequency
  5162                           
  5163                           ;spi_control.c: 513:     SetMotorPositionSearchStart( motor_no );
  5164  1798  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5165  1799  3196  262F         	fcall	_SetMotorPositionSearchStart
  5166  179B  0008               	return
  5167  179C                     __end_of_SpiCmdFunc_Search1008Position:
  5168                           
  5169                           	psect	text17
  5170  1070                     __ptext17:	
  5171 ;; *************** function _SpiCmdFunc_DisableExcitating *****************
  5172 ;; Defined at:
  5173 ;;		line 483 in file "spi_control.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 1D/2
  5184 ;;		On exit  : 1F/1
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5187 ;;      Params:         0       1       0       0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0
  5190 ;;      Totals:         0       1       0       0       0       0       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    9
  5194 ;; This function calls:
  5195 ;;		_SetMotorDisableExcitating
  5196 ;; This function is called by:
  5197 ;;		_WatchMotorDriveFinish
  5198 ;;		_SPIControl_ExecuteCommand
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           
  5203                           ;psect for function _SpiCmdFunc_DisableExcitating
  5204  1070                     _SpiCmdFunc_DisableExcitating:
  5205                           
  5206                           ;spi_control.c: 483: void SpiCmdFunc_DisableExcitating( UB motor_no );spi_control.c: 484
      +                          : {;spi_control.c: 485:  SetMotorDisableExcitating( motor_no );
  5207                           
  5208                           ;incstack = 0
  5209                           ; Regs used in _SpiCmdFunc_DisableExcitating: [wreg+status,2+status,0+pclath+cstack]
  5210  1070  0020               	movlb	0	; select bank0
  5211  1071  083D               	movf	SpiCmdFunc_DisableExcitating@motor_no,w
  5212  1072  3193  234E         	fcall	_SetMotorDisableExcitating
  5213  1074  0008               	return
  5214  1075                     __end_of_SpiCmdFunc_DisableExcitating:
  5215                           
  5216                           	psect	text18
  5217  106B                     __ptext18:	
  5218 ;; *************** function _SpiCmdFunc_EnableExcitating *****************
  5219 ;; Defined at:
  5220 ;;		line 471 in file "spi_control.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 1D/2
  5231 ;;		On exit  : 1F/1
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5234 ;;      Params:         0       1       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0
  5237 ;;      Totals:         0       1       0       0       0       0       0       0
  5238 ;;Total ram usage:        1 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    9
  5241 ;; This function calls:
  5242 ;;		_SetMotorEnableExcitating
  5243 ;; This function is called by:
  5244 ;;		_WatchMotorDriveFinish
  5245 ;;		_SPIControl_ExecuteCommand
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function _SpiCmdFunc_EnableExcitating
  5251  106B                     _SpiCmdFunc_EnableExcitating:
  5252                           
  5253                           ;spi_control.c: 471: void SpiCmdFunc_EnableExcitating( UB motor_no );spi_control.c: 472:
      +                           {;spi_control.c: 473:  SetMotorEnableExcitating( motor_no );
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in _SpiCmdFunc_EnableExcitating: [wreg+status,2+status,0+pclath+cstack]
  5257  106B  0020               	movlb	0	; select bank0
  5258  106C  083D               	movf	SpiCmdFunc_EnableExcitating@motor_no,w
  5259  106D  3193  2360         	fcall	_SetMotorEnableExcitating
  5260  106F  0008               	return
  5261  1070                     __end_of_SpiCmdFunc_EnableExcitating:
  5262                           
  5263                           	psect	text19
  5264  1060                     __ptext19:	
  5265 ;; *************** function _SpiCmdFunc_StopDetectVrs *****************
  5266 ;; Defined at:
  5267 ;;		line 459 in file "spi_control.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;		None
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0, pclath, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 1D/2
  5278 ;;		On exit  : 1F/2
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5281 ;;      Params:         0       1       0       0       0       0       0       0
  5282 ;;      Locals:         0       0       0       0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0
  5284 ;;      Totals:         0       1       0       0       0       0       0       0
  5285 ;;Total ram usage:        1 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:   11
  5288 ;; This function calls:
  5289 ;;		_SetMotorStopSPK
  5290 ;; This function is called by:
  5291 ;;		_WatchMotorDriveFinish
  5292 ;;		_SPIControl_ExecuteCommand
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _SpiCmdFunc_StopDetectVrs
  5298  1060                     _SpiCmdFunc_StopDetectVrs:
  5299                           
  5300                           ;spi_control.c: 459: void SpiCmdFunc_StopDetectVrs( UB motor_no );spi_control.c: 460: {;
      +                          spi_control.c: 461:  SetMotorStopSPK();
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _SpiCmdFunc_StopDetectVrs: [wreg+status,2+status,0+pclath+cstack]
  5304  1060  3194  24D8         	fcall	_SetMotorStopSPK
  5305  1062  0008               	return
  5306  1063                     __end_of_SpiCmdFunc_StopDetectVrs:
  5307                           
  5308                           	psect	text20
  5309  105D                     __ptext20:	
  5310 ;; *************** function _SpiCmdFunc_StartDetectVrs *****************
  5311 ;; Defined at:
  5312 ;;		line 447 in file "spi_control.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 1D/2
  5323 ;;		On exit  : 1D/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5326 ;;      Params:         0       1       0       0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0
  5329 ;;      Totals:         0       1       0       0       0       0       0       0
  5330 ;;Total ram usage:        1 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   11
  5333 ;; This function calls:
  5334 ;;		_SetMotorStartSPK
  5335 ;; This function is called by:
  5336 ;;		_WatchMotorDriveFinish
  5337 ;;		_SPIControl_ExecuteCommand
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _SpiCmdFunc_StartDetectVrs
  5343  105D                     _SpiCmdFunc_StartDetectVrs:
  5344                           
  5345                           ;spi_control.c: 447: void SpiCmdFunc_StartDetectVrs( UB motor_no );spi_control.c: 448: {
      +                          ;spi_control.c: 449:  SetMotorStartSPK();
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _SpiCmdFunc_StartDetectVrs: [wreg+status,2+status,0+pclath+cstack]
  5349  105D  3197  279C         	fcall	_SetMotorStartSPK
  5350  105F  0008               	return
  5351  1060                     __end_of_SpiCmdFunc_StartDetectVrs:
  5352                           
  5353                           	psect	text21
  5354  1670                     __ptext21:	
  5355 ;; *************** function _SpiCmdFunc_RevPulsePositionCtl *****************
  5356 ;; Defined at:
  5357 ;;		line 427 in file "spi_control.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      void 
  5364 ;; Registers used:
  5365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 1D/2
  5368 ;;		On exit  : 1F/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5371 ;;      Params:         0       1       0       0       0       0       0       0
  5372 ;;      Locals:         0       0       0       0       0       0       0       0
  5373 ;;      Temps:          0       1       0       0       0       0       0       0
  5374 ;;      Totals:         0       2       0       0       0       0       0       0
  5375 ;;Total ram usage:        2 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:   11
  5378 ;; This function calls:
  5379 ;;		_CalcMotorStepCounter
  5380 ;;		_SetDriveType
  5381 ;;		_SetMotorFrequency
  5382 ;;		_SetMotorStart
  5383 ;;		_UpdateTargetPosition
  5384 ;; This function is called by:
  5385 ;;		_WatchMotorDriveFinish
  5386 ;;		_SPIControl_ExecuteCommand
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _SpiCmdFunc_RevPulsePositionCtl
  5392  1670                     _SpiCmdFunc_RevPulsePositionCtl:
  5393                           
  5394                           ;spi_control.c: 427: void SpiCmdFunc_RevPulsePositionCtl( UB motor_no );spi_control.c: 4
      +                          28: {;spi_control.c: 429:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _SpiCmdFunc_RevPulsePositionCtl: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5398  1670  0020               	movlb	0	; select bank0
  5399  1671  01A0               	clrf	SetDriveType@drive_type
  5400  1672  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5401  1673  318D  2585  3196   	fcall	_SetDriveType
  5402                           
  5403                           ;spi_control.c: 431:  UpdateTargetPosition( motor_no, -1 );
  5404  1676  30FF               	movlw	255
  5405  1677  0020               	movlb	0	; select bank0
  5406  1678  00AD               	movwf	UpdateTargetPosition@steps
  5407  1679  30FF               	movlw	255
  5408  167A  00AE               	movwf	UpdateTargetPosition@steps+1
  5409  167B  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5410  167C  3196  26B3  3196   	fcall	_UpdateTargetPosition
  5411                           
  5412                           ;spi_control.c: 432:  CalcMotorStepCounter( motor_no );
  5413  167F  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5414  1680  3185  25EB  3196   	fcall	_CalcMotorStepCounter
  5415                           
  5416                           ;spi_control.c: 435:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5417  1683  3002               	movlw	2
  5418  1684  0020               	movlb	0	; select bank0
  5419  1685  00BE               	movwf	??_SpiCmdFunc_RevPulsePositionCtl
  5420  1686  083E               	movf	??_SpiCmdFunc_RevPulsePositionCtl,w
  5421  1687  00A0               	movwf	SetMotorFrequency@type
  5422  1688  01A1               	clrf	SetMotorFrequency@set_freq
  5423  1689  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5424  168A  3188  2045  3196   	fcall	_SetMotorFrequency
  5425                           
  5426                           ;spi_control.c: 437:     SetMotorStart( motor_no );
  5427  168D  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5428  168E  3190  2091         	fcall	_SetMotorStart
  5429  1690  0008               	return
  5430  1691                     __end_of_SpiCmdFunc_RevPulsePositionCtl:
  5431                           
  5432                           	psect	text22
  5433  164F                     __ptext22:	
  5434 ;; *************** function _SpiCmdFunc_FwdPulsePositionCtl *****************
  5435 ;; Defined at:
  5436 ;;		line 407 in file "spi_control.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 1D/2
  5447 ;;		On exit  : 1F/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5450 ;;      Params:         0       1       0       0       0       0       0       0
  5451 ;;      Locals:         0       0       0       0       0       0       0       0
  5452 ;;      Temps:          0       1       0       0       0       0       0       0
  5453 ;;      Totals:         0       2       0       0       0       0       0       0
  5454 ;;Total ram usage:        2 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:   11
  5457 ;; This function calls:
  5458 ;;		_CalcMotorStepCounter
  5459 ;;		_SetDriveType
  5460 ;;		_SetMotorFrequency
  5461 ;;		_SetMotorStart
  5462 ;;		_UpdateTargetPosition
  5463 ;; This function is called by:
  5464 ;;		_WatchMotorDriveFinish
  5465 ;;		_SPIControl_ExecuteCommand
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           
  5470                           ;psect for function _SpiCmdFunc_FwdPulsePositionCtl
  5471  164F                     _SpiCmdFunc_FwdPulsePositionCtl:
  5472                           
  5473                           ;spi_control.c: 407: void SpiCmdFunc_FwdPulsePositionCtl( UB motor_no );spi_control.c: 4
      +                          08: {;spi_control.c: 409:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5474                           
  5475                           ;incstack = 0
  5476                           ; Regs used in _SpiCmdFunc_FwdPulsePositionCtl: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5477  164F  0020               	movlb	0	; select bank0
  5478  1650  01A0               	clrf	SetDriveType@drive_type
  5479  1651  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5480  1652  318D  2585  3196   	fcall	_SetDriveType
  5481                           
  5482                           ;spi_control.c: 411:  UpdateTargetPosition( motor_no, 1 );
  5483  1655  3001               	movlw	1
  5484  1656  0020               	movlb	0	; select bank0
  5485  1657  00AD               	movwf	UpdateTargetPosition@steps
  5486  1658  3000               	movlw	0
  5487  1659  00AE               	movwf	UpdateTargetPosition@steps+1
  5488  165A  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5489  165B  3196  26B3  3196   	fcall	_UpdateTargetPosition
  5490                           
  5491                           ;spi_control.c: 412:  CalcMotorStepCounter( motor_no );
  5492  165E  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5493  165F  3185  25EB  3196   	fcall	_CalcMotorStepCounter
  5494                           
  5495                           ;spi_control.c: 415:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5496  1662  3002               	movlw	2
  5497  1663  0020               	movlb	0	; select bank0
  5498  1664  00BE               	movwf	??_SpiCmdFunc_FwdPulsePositionCtl
  5499  1665  083E               	movf	??_SpiCmdFunc_FwdPulsePositionCtl,w
  5500  1666  00A0               	movwf	SetMotorFrequency@type
  5501  1667  01A1               	clrf	SetMotorFrequency@set_freq
  5502  1668  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5503  1669  3188  2045  3196   	fcall	_SetMotorFrequency
  5504                           
  5505                           ;spi_control.c: 417:     SetMotorStart( motor_no );
  5506  166C  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5507  166D  3190  2091         	fcall	_SetMotorStart
  5508  166F  0008               	return
  5509  1670                     __end_of_SpiCmdFunc_FwdPulsePositionCtl:
  5510                           
  5511                           	psect	text23
  5512  1613                     __ptext23:	
  5513 ;; *************** function _SpiCmdFunc_FwdPulseWithCorrect *****************
  5514 ;; Defined at:
  5515 ;;		line 348 in file "spi_control.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  motor_bit       1    0        unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 1D/2
  5526 ;;		On exit  : 1F/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5529 ;;      Params:         0       1       0       0       0       0       0       0
  5530 ;;      Locals:         0       1       0       0       0       0       0       0
  5531 ;;      Temps:          0       1       0       0       0       0       0       0
  5532 ;;      Totals:         0       3       0       0       0       0       0       0
  5533 ;;Total ram usage:        3 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:   12
  5536 ;; This function calls:
  5537 ;;		_GetIsMotorActive
  5538 ;;		_SetAfterMotorStopFunc
  5539 ;;		_SetFwdPulseWithCorrectProc
  5540 ;;		_SetMotorStop
  5541 ;; This function is called by:
  5542 ;;		_WatchMotorDriveFinish
  5543 ;;		_SPIControl_ExecuteCommand
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           
  5548                           ;psect for function _SpiCmdFunc_FwdPulseWithCorrect
  5549  1613                     _SpiCmdFunc_FwdPulseWithCorrect:
  5550                           
  5551                           ;spi_control.c: 354:  if ( GetIsMotorActive( motor_no ) ) {
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _SpiCmdFunc_FwdPulseWithCorrect: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5555  1613  0020               	movlb	0	; select bank0
  5556  1614  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5557  1615  3193  23F2  3196   	fcall	_GetIsMotorActive
  5558  1618  3A00               	xorlw	0
  5559  1619  1903               	skipnz
  5560  161A  2E28               	goto	l6648
  5561                           
  5562                           ;spi_control.c: 356:   SetMotorStop( motor_no );
  5563  161B  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5564  161C  3193  2372  3196   	fcall	_SetMotorStop
  5565                           
  5566                           ;spi_control.c: 357:   SetAfterMotorStopFunc( motor_no, SetFwdPulseWithCorrectProc );
  5567  161F  3082               	movlw	low _SetFwdPulseWithCorrectProc
  5568  1620  0020               	movlb	0	; select bank0
  5569  1621  00A0               	movwf	SetAfterMotorStopFunc@func
  5570  1622  3008               	movlw	high _SetFwdPulseWithCorrectProc
  5571  1623  00A1               	movwf	SetAfterMotorStopFunc@func+1
  5572  1624  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5573  1625  3190  209B         	fcall	_SetAfterMotorStopFunc
  5574                           
  5575                           ;spi_control.c: 358:  } else {
  5576  1627  0008               	return
  5577  1628                     l6648:
  5578                           
  5579                           ;spi_control.c: 360:   SetFwdPulseWithCorrectProc( motor_no );
  5580  1628  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5581  1629  00BE               	movwf	??_SpiCmdFunc_FwdPulseWithCorrect
  5582  162A  083E               	movf	??_SpiCmdFunc_FwdPulseWithCorrect,w
  5583  162B  00BD               	movwf	SetFwdPulseWithCorrectProc@motor_no
  5584  162C  3188  2082         	fcall	_SetFwdPulseWithCorrectProc
  5585  162E  0008               	return
  5586  162F                     __end_of_SpiCmdFunc_FwdPulseWithCorrect:
  5587                           
  5588                           	psect	text24
  5589  171E                     __ptext24:	
  5590 ;; *************** function _SpiCmdFunc_SearchBasePosition *****************
  5591 ;; Defined at:
  5592 ;;		line 317 in file "spi_control.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 1D/2
  5603 ;;		On exit  : 1F/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5606 ;;      Params:         0       1       0       0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0       0
  5608 ;;      Temps:          0       1       0       0       0       0       0       0
  5609 ;;      Totals:         0       2       0       0       0       0       0       0
  5610 ;;Total ram usage:        2 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:   12
  5613 ;; This function calls:
  5614 ;;		_DeactivateHandPosition
  5615 ;;		_SetDriveType
  5616 ;;		_SetMotorDirection
  5617 ;;		_SetMotorFrequency
  5618 ;;		_SetMotorPositionSearchStart
  5619 ;;		_SetMotorStepCounter
  5620 ;; This function is called by:
  5621 ;;		_WatchMotorDriveFinish
  5622 ;;		_SPIControl_ExecuteCommand
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _SpiCmdFunc_SearchBasePosition
  5628  171E                     _SpiCmdFunc_SearchBasePosition:
  5629                           
  5630                           ;spi_control.c: 317: void SpiCmdFunc_SearchBasePosition( UB motor_no );spi_control.c: 31
      +                          8: {;spi_control.c: 324:  DeactivateHandPosition( motor_no );
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _SpiCmdFunc_SearchBasePosition: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5634  171E  0020               	movlb	0	; select bank0
  5635  171F  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5636  1720  3193  2384  3197   	fcall	_DeactivateHandPosition
  5637                           
  5638                           ;spi_control.c: 327:  SetDriveType( motor_no, DRIVE_SEARCH_BASE_POSITION );
  5639  1723  0020               	movlb	0	; select bank0
  5640  1724  01A0               	clrf	SetDriveType@drive_type
  5641  1725  0AA0               	incf	SetDriveType@drive_type,f
  5642  1726  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5643  1727  318D  2585  3197   	fcall	_SetDriveType
  5644                           
  5645                           ;spi_control.c: 329:     SetMotorDirection( motor_no, 1 );
  5646  172A  0020               	movlb	0	; select bank0
  5647  172B  01A0               	clrf	SetMotorDirection@dir
  5648  172C  0AA0               	incf	SetMotorDirection@dir,f
  5649  172D  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5650  172E  3195  2509  3197   	fcall	_SetMotorDirection
  5651                           
  5652                           ;spi_control.c: 331:     SetMotorStepCounter( motor_no, 0 );
  5653  1731  3000               	movlw	0
  5654  1732  00B0               	movwf	SetMotorStepCounter@steps
  5655  1733  00B1               	movwf	SetMotorStepCounter@steps+1
  5656  1734  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5657  1735  3191  2102  3197   	fcall	_SetMotorStepCounter
  5658                           
  5659                           ;spi_control.c: 333:     SetMotorFrequency( motor_no, FREQ_SET_SELF_CONTROL_SHAKE, 136 )
      +                          ;
  5660  1738  0020               	movlb	0	; select bank0
  5661  1739  01A0               	clrf	SetMotorFrequency@type
  5662  173A  0AA0               	incf	SetMotorFrequency@type,f
  5663  173B  3088               	movlw	136
  5664  173C  00BE               	movwf	??_SpiCmdFunc_SearchBasePosition
  5665  173D  083E               	movf	??_SpiCmdFunc_SearchBasePosition,w
  5666  173E  00A1               	movwf	SetMotorFrequency@set_freq
  5667  173F  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5668  1740  3188  2045  3197   	fcall	_SetMotorFrequency
  5669                           
  5670                           ;spi_control.c: 335:     SetMotorPositionSearchStart( motor_no );
  5671  1743  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5672  1744  3196  262F         	fcall	_SetMotorPositionSearchStart
  5673  1746  0008               	return
  5674  1747                     __end_of_SpiCmdFunc_SearchBasePosition:
  5675                           
  5676                           	psect	text25
  5677  1053                     __ptext25:	
  5678 ;; *************** function _SpiCmdFunc_SearchLoadPosition *****************
  5679 ;; Defined at:
  5680 ;;		line 305 in file "spi_control.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		None
  5689 ;; Tracked objects:
  5690 ;;		On entry : 1D/2
  5691 ;;		On exit  : 1D/0
  5692 ;;		Unchanged: 1D/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5694 ;;      Params:         0       1       0       0       0       0       0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0
  5697 ;;      Totals:         0       1       0       0       0       0       0       0
  5698 ;;Total ram usage:        1 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    8
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_WatchMotorDriveFinish
  5705 ;;		_SPIControl_ExecuteCommand
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function _SpiCmdFunc_SearchLoadPosition
  5711  1053                     _SpiCmdFunc_SearchLoadPosition:
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _SpiCmdFunc_SearchLoadPosition: []
  5715  1053  0008               	return
  5716  1054                     __end_of_SpiCmdFunc_SearchLoadPosition:
  5717                           
  5718                           	psect	text26
  5719  1052                     __ptext26:	
  5720 ;; *************** function _SpiCmdFunc_FwdPulseWithShake *****************
  5721 ;; Defined at:
  5722 ;;		line 293 in file "spi_control.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		None
  5731 ;; Tracked objects:
  5732 ;;		On entry : 1D/2
  5733 ;;		On exit  : 1D/0
  5734 ;;		Unchanged: 1D/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5736 ;;      Params:         0       1       0       0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0
  5739 ;;      Totals:         0       1       0       0       0       0       0       0
  5740 ;;Total ram usage:        1 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    8
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_WatchMotorDriveFinish
  5747 ;;		_SPIControl_ExecuteCommand
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           
  5752                           ;psect for function _SpiCmdFunc_FwdPulseWithShake
  5753  1052                     _SpiCmdFunc_FwdPulseWithShake:
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _SpiCmdFunc_FwdPulseWithShake: []
  5757  1052  0008               	return
  5758  1053                     __end_of_SpiCmdFunc_FwdPulseWithShake:
  5759                           
  5760                           	psect	text27
  5761  1691                     __ptext27:	
  5762 ;; *************** function _SpiCmdFunc_RevPulseNormal *****************
  5763 ;; Defined at:
  5764 ;;		line 273 in file "spi_control.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 1D/2
  5775 ;;		On exit  : 1F/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5778 ;;      Params:         0       1       0       0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       0       0       0       0
  5780 ;;      Temps:          0       1       0       0       0       0       0       0
  5781 ;;      Totals:         0       2       0       0       0       0       0       0
  5782 ;;Total ram usage:        2 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:   11
  5785 ;; This function calls:
  5786 ;;		_SetDriveType
  5787 ;;		_SetMotorDirection
  5788 ;;		_SetMotorFrequency
  5789 ;;		_SetMotorStart
  5790 ;;		_SetMotorStepCounter
  5791 ;; This function is called by:
  5792 ;;		_WatchMotorDriveFinish
  5793 ;;		_SPIControl_ExecuteCommand
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           
  5798                           ;psect for function _SpiCmdFunc_RevPulseNormal
  5799  1691                     _SpiCmdFunc_RevPulseNormal:
  5800                           
  5801                           ;spi_control.c: 273: void SpiCmdFunc_RevPulseNormal( UB motor_no );spi_control.c: 274: {
      +                          ;spi_control.c: 275:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5802                           
  5803                           ;incstack = 0
  5804                           ; Regs used in _SpiCmdFunc_RevPulseNormal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5805  1691  0020               	movlb	0	; select bank0
  5806  1692  01A0               	clrf	SetDriveType@drive_type
  5807  1693  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5808  1694  318D  2585  3196   	fcall	_SetDriveType
  5809                           
  5810                           ;spi_control.c: 277:     SetMotorDirection( motor_no, 0 );
  5811  1697  0020               	movlb	0	; select bank0
  5812  1698  01A0               	clrf	SetMotorDirection@dir
  5813  1699  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5814  169A  3195  2509  3196   	fcall	_SetMotorDirection
  5815                           
  5816                           ;spi_control.c: 279:     SetMotorStepCounter( motor_no, 1 );
  5817  169D  3001               	movlw	1
  5818  169E  00B0               	movwf	SetMotorStepCounter@steps
  5819  169F  3000               	movlw	0
  5820  16A0  00B1               	movwf	SetMotorStepCounter@steps+1
  5821  16A1  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5822  16A2  3191  2102  3196   	fcall	_SetMotorStepCounter
  5823                           
  5824                           ;spi_control.c: 281:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5825  16A5  3002               	movlw	2
  5826  16A6  0020               	movlb	0	; select bank0
  5827  16A7  00BE               	movwf	??_SpiCmdFunc_RevPulseNormal
  5828  16A8  083E               	movf	??_SpiCmdFunc_RevPulseNormal,w
  5829  16A9  00A0               	movwf	SetMotorFrequency@type
  5830  16AA  01A1               	clrf	SetMotorFrequency@set_freq
  5831  16AB  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5832  16AC  3188  2045  3196   	fcall	_SetMotorFrequency
  5833                           
  5834                           ;spi_control.c: 283:     SetMotorStart( motor_no );
  5835  16AF  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5836  16B0  3190  2091         	fcall	_SetMotorStart
  5837  16B2  0008               	return
  5838  16B3                     __end_of_SpiCmdFunc_RevPulseNormal:
  5839                           
  5840                           	psect	text28
  5841  16D6                     __ptext28:	
  5842 ;; *************** function _SpiCmdFunc_FwdPulseNormal *****************
  5843 ;; Defined at:
  5844 ;;		line 253 in file "spi_control.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 1D/2
  5855 ;;		On exit  : 1F/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5858 ;;      Params:         0       1       0       0       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0       0
  5860 ;;      Temps:          0       1       0       0       0       0       0       0
  5861 ;;      Totals:         0       2       0       0       0       0       0       0
  5862 ;;Total ram usage:        2 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:   11
  5865 ;; This function calls:
  5866 ;;		_SetDriveType
  5867 ;;		_SetMotorDirection
  5868 ;;		_SetMotorFrequency
  5869 ;;		_SetMotorStart
  5870 ;;		_SetMotorStepCounter
  5871 ;; This function is called by:
  5872 ;;		_WatchMotorDriveFinish
  5873 ;;		_SPIControl_ExecuteCommand
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           
  5878                           ;psect for function _SpiCmdFunc_FwdPulseNormal
  5879  16D6                     _SpiCmdFunc_FwdPulseNormal:
  5880                           
  5881                           ;spi_control.c: 253: void SpiCmdFunc_FwdPulseNormal( UB motor_no );spi_control.c: 254: {
      +                          ;spi_control.c: 255:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _SpiCmdFunc_FwdPulseNormal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5885  16D6  0020               	movlb	0	; select bank0
  5886  16D7  01A0               	clrf	SetDriveType@drive_type
  5887  16D8  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5888  16D9  318D  2585  3196   	fcall	_SetDriveType
  5889                           
  5890                           ;spi_control.c: 257:     SetMotorDirection( motor_no, 1 );
  5891  16DC  0020               	movlb	0	; select bank0
  5892  16DD  01A0               	clrf	SetMotorDirection@dir
  5893  16DE  0AA0               	incf	SetMotorDirection@dir,f
  5894  16DF  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5895  16E0  3195  2509  3196   	fcall	_SetMotorDirection
  5896                           
  5897                           ;spi_control.c: 259:     SetMotorStepCounter( motor_no, 1 );
  5898  16E3  3001               	movlw	1
  5899  16E4  00B0               	movwf	SetMotorStepCounter@steps
  5900  16E5  3000               	movlw	0
  5901  16E6  00B1               	movwf	SetMotorStepCounter@steps+1
  5902  16E7  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5903  16E8  3191  2102  3196   	fcall	_SetMotorStepCounter
  5904                           
  5905                           ;spi_control.c: 261:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5906  16EB  3002               	movlw	2
  5907  16EC  0020               	movlb	0	; select bank0
  5908  16ED  00BE               	movwf	??_SpiCmdFunc_FwdPulseNormal
  5909  16EE  083E               	movf	??_SpiCmdFunc_FwdPulseNormal,w
  5910  16EF  00A0               	movwf	SetMotorFrequency@type
  5911  16F0  01A1               	clrf	SetMotorFrequency@set_freq
  5912  16F1  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5913  16F2  3188  2045  3196   	fcall	_SetMotorFrequency
  5914                           
  5915                           ;spi_control.c: 263:     SetMotorStart( motor_no );
  5916  16F5  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5917  16F6  3190  2091         	fcall	_SetMotorStart
  5918  16F8  0008               	return
  5919  16F9                     __end_of_SpiCmdFunc_FwdPulseNormal:
  5920                           
  5921                           	psect	text29
  5922  1051                     __ptext29:	
  5923 ;; *************** function _SpiCmdFunc_Test *****************
  5924 ;; Defined at:
  5925 ;;		line 239 in file "spi_control.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		None
  5934 ;; Tracked objects:
  5935 ;;		On entry : 1D/2
  5936 ;;		On exit  : 1D/0
  5937 ;;		Unchanged: 1D/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5939 ;;      Params:         0       1       0       0       0       0       0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0       0
  5942 ;;      Totals:         0       1       0       0       0       0       0       0
  5943 ;;Total ram usage:        1 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    8
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_WatchMotorDriveFinish
  5950 ;;		_SPIControl_ExecuteCommand
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _SpiCmdFunc_Test
  5956  1051                     _SpiCmdFunc_Test:
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in _SpiCmdFunc_Test: []
  5960  1051  0008               	return
  5961  1052                     __end_of_SpiCmdFunc_Test:
  5962                           
  5963                           	psect	text30
  5964  15F7                     __ptext30:	
  5965 ;; *************** function _SPIControl_SetNotification *****************
  5966 ;; Defined at:
  5967 ;;		line 523 in file "spi_control.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      void 
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0
  5976 ;; Tracked objects:
  5977 ;;		On entry : 1F/2
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5981 ;;      Params:         0       1       0       0       0       0       0       0
  5982 ;;      Locals:         0       0       0       0       0       0       0       0
  5983 ;;      Temps:          0       1       0       0       0       0       0       0
  5984 ;;      Totals:         0       2       0       0       0       0       0       0
  5985 ;;Total ram usage:        2 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    8
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_AfterDetectedLoadPosition
  5992 ;;		_WatchMotorDriveFinish
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function _SPIControl_SetNotification
  5998  15F7                     _SPIControl_SetNotification:
  5999                           
  6000                           ;spi_control.c: 523: void SPIControl_SetNotification( UB motor_no );spi_control.c: 524: 
      +                          {;spi_control.c: 525:  if ( ( 0x01 + 0x02 )== handPositionActiveBit ) {
  6001                           
  6002                           ;incstack = 0
  6003                           ; Regs used in _SPIControl_SetNotification: [wreg+status,2+status,0]
  6004  15F7  3003               	movlw	3
  6005  15F8  0021               	movlb	1	; select bank1
  6006  15F9  0651               	xorwf	_handPositionActiveBit^(0+128),w
  6007  15FA  1D03               	btfss	3,2
  6008  15FB  0008               	return
  6009                           
  6010                           ;spi_control.c: 527:      LATC0 = 1;
  6011  15FC  0022               	movlb	2	; select bank2
  6012  15FD  140E               	bsf	14,0	;volatile
  6013                           
  6014                           ;spi_control.c: 530:   _delay((unsigned long)((1000)*(16000000/4000000.0)));
  6015  15FE  3006               	movlw	6
  6016  15FF  0020               	movlb	0	; select bank0
  6017  1600  00BE               	movwf	??_SPIControl_SetNotification
  6018  1601  3030               	movlw	48
  6019  1602                     u5637:
  6020  1602  0B89               	decfsz	9,f
  6021  1603  2E02               	goto	u5637
  6022  1604  0BBE               	decfsz	??_SPIControl_SetNotification,f
  6023  1605  2E02               	goto	u5637
  6024  1606  0000               	nop
  6025                           
  6026                           ;spi_control.c: 533:      LATC0 = 0;
  6027  1607  0022               	movlb	2	; select bank2
  6028  1608  100E               	bcf	14,0	;volatile
  6029                           
  6030                           ;spi_control.c: 535:   _delay((unsigned long)((1000)*(16000000/4000000.0)));
  6031  1609  3006               	movlw	6
  6032  160A  0020               	movlb	0	; select bank0
  6033  160B  00BE               	movwf	??_SPIControl_SetNotification
  6034  160C  3030               	movlw	48
  6035  160D                     u5647:
  6036  160D  0B89               	decfsz	9,f
  6037  160E  2E0D               	goto	u5647
  6038  160F  0BBE               	decfsz	??_SPIControl_SetNotification,f
  6039  1610  2E0D               	goto	u5647
  6040  1611  0000               	nop
  6041  1612  0008               	return
  6042  1613                     __end_of_SPIControl_SetNotification:
  6043                           
  6044                           	psect	text31
  6045  005D                     __ptext31:	
  6046 ;; *************** function _AfterDetectedLoadPosition *****************
  6047 ;; Defined at:
  6048 ;;		line 2046 in file "MotorDrive.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;  motor_no        1   29[BANK0 ] unsigned char 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  move_steps      2   36[BANK0 ] short 
  6053 ;;  res             1   35[BANK0 ] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 1F/2
  6060 ;;		On exit  : 1F/1
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6063 ;;      Params:         0       1       0       0       0       0       0       0
  6064 ;;      Locals:         0       3       0       0       0       0       0       0
  6065 ;;      Temps:          0       7       0       0       0       0       0       0
  6066 ;;      Totals:         0      11       0       0       0       0       0       0
  6067 ;;Total ram usage:       11 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:   12
  6070 ;; This function calls:
  6071 ;;		_ActivateHandPosition
  6072 ;;		_CorrectPosition
  6073 ;;		_DetermineBasePosition
  6074 ;;		_InitPositionSearch
  6075 ;;		_MoveTargetPosition
  6076 ;;		_SaveLoadPosition
  6077 ;;		_SetAfterDetectLoadFunc
  6078 ;;		_SetAfterMotorStopFunc
  6079 ;;		_SetDriveType
  6080 ;;		_SetMotorBitMotorNo
  6081 ;;		_SetMotorStart
  6082 ;;		_UpdataHandPosition
  6083 ;;		_UpdateCurrentPositionByFinePosition
  6084 ;; This function is called by:
  6085 ;;		_SetMotorPositionSearchStart
  6086 ;;		_SetMotorCorrectPositionStart
  6087 ;;		_WatchMotorDriveFinish
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function _AfterDetectedLoadPosition
  6093  005D                     _AfterDetectedLoadPosition:
  6094                           
  6095                           ;MotorDrive.c: 2046: void AfterDetectedLoadPosition(UB motor_no);MotorDrive.c: 2047: {;M
      +                          otorDrive.c: 2048:     H move_steps;;MotorDrive.c: 2049:     UB res = ID_SEARCH_RESULT_N
      +                          ULL;
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _AfterDetectedLoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6099  005D  0020               	movlb	0	; select bank0
  6100  005E  01C3               	clrf	AfterDetectedLoadPosition@res
  6101                           
  6102                           ;MotorDrive.c: 2051:     SetMotorBitMotorNo(motor_no);
  6103  005F  083D               	movf	AfterDetectedLoadPosition@motor_no,w
  6104  0060  3192  22F5  3180   	fcall	_SetMotorBitMotorNo
  6105                           
  6106                           ;MotorDrive.c: 2054:     if (reqSearchBasePosBit & motorBitOperation) {
  6107  0063  0855               	movf	_reqSearchBasePosBit,w
  6108  0064  0574               	andwf	_motorBitOperation,w
  6109  0065  1903               	btfsc	3,2
  6110  0066  2876               	goto	l6346
  6111                           
  6112                           ;MotorDrive.c: 2055:         searchTotalSteps[ motorNoOperation ] += positionSearchCt[ m
      +                          otorNoOperation ];
  6113  0067  356B               	lslf	_motorNoOperation,w
  6114  0068  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6115  0069  0086               	movwf	6
  6116  006A  0187               	clrf	7
  6117  006B  356B               	lslf	_motorNoOperation,w
  6118  006C  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  6119  006D  0084               	movwf	4
  6120  006E  3001               	movlw	1	; select bank2/3
  6121  006F  0085               	movwf	5
  6122  0070  3F40               	moviw [0]fsr1
  6123  0071  0780               	addwf	0,f
  6124  0072  3101               	addfsr 0,1
  6125  0073  3F41               	moviw [1]fsr1
  6126  0074  3D80               	addwfc	0,f
  6127  0075  313F               	addfsr 0,-1
  6128  0076                     l6346:
  6129                           
  6130                           ;MotorDrive.c: 2058:     move_steps = positionSearchCt[ motorNoOperation ];
  6131  0076  356B               	lslf	_motorNoOperation,w
  6132  0077  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6133  0078  0086               	movwf	6
  6134  0079  0187               	clrf	7
  6135  007A  3F40               	moviw [0]fsr1
  6136  007B  00C4               	movwf	AfterDetectedLoadPosition@move_steps
  6137  007C  3F41               	moviw [1]fsr1
  6138  007D  00C5               	movwf	AfterDetectedLoadPosition@move_steps+1
  6139                           
  6140                           ;MotorDrive.c: 2061:     if (reqSearchBasePosBit & motorBitOperation) {
  6141  007E  0855               	movf	_reqSearchBasePosBit,w
  6142  007F  0574               	andwf	_motorBitOperation,w
  6143  0080  1903               	btfsc	3,2
  6144  0081  2890               	goto	l6352
  6145                           
  6146                           ;MotorDrive.c: 2062:         currentPosition[ motorNoOperation ] += positionSearchCt[ mo
      +                          torNoOperation ];
  6147  0082  356B               	lslf	_motorNoOperation,w
  6148  0083  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6149  0084  0086               	movwf	6
  6150  0085  0187               	clrf	7
  6151  0086  356B               	lslf	_motorNoOperation,w
  6152  0087  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6153  0088  0084               	movwf	4
  6154  0089  0185               	clrf	5
  6155  008A  3F40               	moviw [0]fsr1
  6156  008B  0780               	addwf	0,f
  6157  008C  3101               	addfsr 0,1
  6158  008D  3F41               	moviw [1]fsr1
  6159  008E  3D80               	addwfc	0,f
  6160  008F  313F               	addfsr 0,-1
  6161  0090                     l6352:	
  6162                           ;MotorDrive.c: 2063:     } else {
  6163                           
  6164                           
  6165                           ;MotorDrive.c: 2067:     if (searchTotalSteps[ motorNoOperation ] > TblMaxSearchSteps[ m
      +                          otorNoOperation ]) {
  6166  0090  356B               	lslf	_motorNoOperation,w
  6167  0091  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  6168  0092  0086               	movwf	6
  6169  0093  3001               	movlw	1	; select bank2/3
  6170  0094  0087               	movwf	7
  6171  0095  3F40               	moviw [0]fsr1
  6172  0096  00BC               	movwf	??_AfterDetectedLoadPosition
  6173  0097  3F41               	moviw [1]fsr1
  6174  0098  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6175  0099  086B               	movf	_motorNoOperation,w
  6176  009A  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6177  009B  01BF               	clrf	??_AfterDetectedLoadPosition+3
  6178  009C  35BE               	lslf	??_AfterDetectedLoadPosition+2,f
  6179  009D  0DBF               	rlf	??_AfterDetectedLoadPosition+3,f
  6180  009E  3052               	movlw	low (_TblMaxSearchSteps| (0+32768))
  6181  009F  073E               	addwf	??_AfterDetectedLoadPosition+2,w
  6182  00A0  0084               	movwf	4
  6183  00A1  3098               	movlw	high (_TblMaxSearchSteps| (0+32768))
  6184  00A2  3D3F               	addwfc	??_AfterDetectedLoadPosition+3,w
  6185  00A3  0085               	movwf	5
  6186  00A4  3F00               	moviw [0]fsr0
  6187  00A5  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6188  00A6  3F01               	moviw [1]fsr0
  6189  00A7  00C1               	movwf	??_AfterDetectedLoadPosition+5
  6190  00A8  0841               	movf	??_AfterDetectedLoadPosition+5,w
  6191  00A9  3A80               	xorlw	128
  6192  00AA  00C2               	movwf	??_AfterDetectedLoadPosition+6
  6193  00AB  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6194  00AC  3A80               	xorlw	128
  6195  00AD  0242               	subwf	??_AfterDetectedLoadPosition+6,w
  6196  00AE  1D03               	skipz
  6197  00AF  28B2               	goto	u4905
  6198  00B0  083C               	movf	??_AfterDetectedLoadPosition,w
  6199  00B1  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6200  00B2                     u4905:
  6201  00B2  1803               	skipnc
  6202  00B3  28B6               	goto	l6356
  6203                           
  6204                           ;MotorDrive.c: 2069:         res = ID_SEARCH_RESULT_ERR;
  6205  00B4  3005               	movlw	5
  6206  00B5  2942               	goto	L1
  6207  00B6                     l6356:	
  6208                           ;MotorDrive.c: 2070:     } else {
  6209                           
  6210                           
  6211                           ;MotorDrive.c: 2072:         if (move_steps > 47) {
  6212  00B6  0020               	movlb	0	; select bank0
  6213  00B7  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6214  00B8  3A80               	xorlw	128
  6215  00B9  00BC               	movwf	??_AfterDetectedLoadPosition
  6216  00BA  3080               	movlw	128
  6217  00BB  023C               	subwf	??_AfterDetectedLoadPosition,w
  6218  00BC  1D03               	skipz
  6219  00BD  28C0               	goto	u4915
  6220  00BE  3030               	movlw	48
  6221  00BF  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6222  00C0                     u4915:
  6223  00C0  1C03               	skipc
  6224  00C1  2944               	goto	l6384
  6225                           
  6226                           ;MotorDrive.c: 2075:             if (((47 * 2) >= move_steps)
  6227  00C2  0020               	movlb	0	; select bank0
  6228  00C3  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6229  00C4  3A80               	xorlw	128
  6230  00C5  00BC               	movwf	??_AfterDetectedLoadPosition
  6231  00C6  3080               	movlw	128
  6232  00C7  023C               	subwf	??_AfterDetectedLoadPosition,w
  6233  00C8  1D03               	skipz
  6234  00C9  28CC               	goto	u4925
  6235  00CA  305F               	movlw	95
  6236  00CB  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6237  00CC                     u4925:
  6238  00CC  1803               	skipnc
  6239  00CD  2905               	goto	l6370
  6240  00CE  0020               	movlb	0	; select bank0
  6241  00CF  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6242  00D0  3A80               	xorlw	128
  6243  00D1  00BC               	movwf	??_AfterDetectedLoadPosition
  6244  00D2  3080               	movlw	128
  6245  00D3  023C               	subwf	??_AfterDetectedLoadPosition,w
  6246  00D4  1D03               	skipz
  6247  00D5  28D8               	goto	u4935
  6248  00D6  3056               	movlw	86
  6249  00D7  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6250  00D8                     u4935:
  6251  00D8  1C03               	skipc
  6252  00D9  2905               	goto	l6370
  6253                           
  6254                           ;MotorDrive.c: 2076:                     && ((move_steps >= 43 * 2))) {;MotorDrive.c: 20
      +                          79:                 if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motorNoOperation ]
      +                          ) {
  6255  00DA  0020               	movlb	0	; select bank0
  6256  00DB  086B               	movf	_motorNoOperation,w
  6257  00DC  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6258  00DD  0086               	movwf	6
  6259  00DE  0187               	clrf	7
  6260  00DF  0801               	movf	1,w
  6261  00E0  1D03               	btfss	3,2
  6262  00E1  28E8               	goto	l6366
  6263                           
  6264                           ;MotorDrive.c: 2081:                     positionSearchStat[ motorNoOperation ] = ID_SEA
      +                          RCH_FINE_ROUGH_POS;
  6265  00E2  086B               	movf	_motorNoOperation,w
  6266  00E3  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6267  00E4  0086               	movwf	6
  6268  00E5  0187               	clrf	7
  6269  00E6  0181               	clrf	1
  6270  00E7  0A81               	incf	1,f
  6271  00E8                     l6366:
  6272                           
  6273                           ;MotorDrive.c: 2084:                 doubleInterval = 1;
  6274  00E8  0021               	movlb	1	; select bank1
  6275  00E9  01CD               	clrf	_doubleInterval^(0+128)
  6276  00EA  0ACD               	incf	_doubleInterval^(0+128),f
  6277                           
  6278                           ;MotorDrive.c: 2085:                 detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD
      +                          _FINE;
  6279  00EB  0020               	movlb	0	; select bank0
  6280  00EC  086B               	movf	_motorNoOperation,w
  6281  00ED  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6282  00EE  0086               	movwf	6
  6283  00EF  0187               	clrf	7
  6284  00F0  0181               	clrf	1
  6285  00F1  0A81               	incf	1,f
  6286                           
  6287                           ;MotorDrive.c: 2086:                 detectFinePosCt[ motorNoOperation ] += 2;
  6288  00F2  3002               	movlw	2
  6289  00F3  00BC               	movwf	??_AfterDetectedLoadPosition
  6290  00F4  086B               	movf	_motorNoOperation,w
  6291  00F5  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6292  00F6  0086               	movwf	6
  6293  00F7  0187               	clrf	7
  6294  00F8  083C               	movf	??_AfterDetectedLoadPosition,w
  6295  00F9  0781               	addwf	1,f
  6296                           
  6297                           ;MotorDrive.c: 2087:                 detectLoadCont[ motorNoOperation ] = 2;
  6298  00FA  3002               	movlw	2
  6299  00FB  00BC               	movwf	??_AfterDetectedLoadPosition
  6300  00FC  086B               	movf	_motorNoOperation,w
  6301  00FD  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6302  00FE  0086               	movwf	6
  6303  00FF  0187               	clrf	7
  6304  0100  083C               	movf	??_AfterDetectedLoadPosition,w
  6305  0101  0081               	movwf	1
  6306  0102                     l6368:
  6307                           
  6308                           ;MotorDrive.c: 2089:                 res = ID_SEARCH_RESULT_NEW_POS;
  6309  0102  01C3               	clrf	AfterDetectedLoadPosition@res
  6310  0103  0AC3               	incf	AfterDetectedLoadPosition@res,f
  6311                           
  6312                           ;MotorDrive.c: 2091:             } else if ((ID_DETECT_LOAD_ROUGH == detectLoadType[ mot
      +                          orNoOperation ])
  6313  0104  2A30               	goto	l6440
  6314  0105                     l6370:
  6315  0105  0020               	movlb	0	; select bank0
  6316  0106  086B               	movf	_motorNoOperation,w
  6317  0107  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6318  0108  0086               	movwf	6
  6319  0109  0187               	clrf	7
  6320  010A  3002               	movlw	2
  6321  010B  0601               	xorwf	1,w
  6322  010C  1D03               	btfss	3,2
  6323  010D  2941               	goto	l6382
  6324  010E  356B               	lslf	_motorNoOperation,w
  6325  010F  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6326  0110  0086               	movwf	6
  6327  0111  0187               	clrf	7
  6328  0112  3F40               	moviw [0]fsr1
  6329  0113  00BC               	movwf	??_AfterDetectedLoadPosition
  6330  0114  3F41               	moviw [1]fsr1
  6331  0115  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6332  0116  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6333  0117  073C               	addwf	??_AfterDetectedLoadPosition,w
  6334  0118  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6335  0119  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6336  011A  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6337  011B  00BF               	movwf	??_AfterDetectedLoadPosition+3
  6338  011C  083F               	movf	??_AfterDetectedLoadPosition+3,w
  6339  011D  3A80               	xorlw	128
  6340  011E  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6341  011F  3080               	movlw	128
  6342  0120  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6343  0121  1D03               	skipz
  6344  0122  2925               	goto	u4965
  6345  0123  305F               	movlw	95
  6346  0124  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6347  0125                     u4965:
  6348  0125  1803               	skipnc
  6349  0126  2941               	goto	l6382
  6350  0127  0020               	movlb	0	; select bank0
  6351  0128  356B               	lslf	_motorNoOperation,w
  6352  0129  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6353  012A  0086               	movwf	6
  6354  012B  0187               	clrf	7
  6355  012C  3F40               	moviw [0]fsr1
  6356  012D  00BC               	movwf	??_AfterDetectedLoadPosition
  6357  012E  3F41               	moviw [1]fsr1
  6358  012F  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6359  0130  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6360  0131  073C               	addwf	??_AfterDetectedLoadPosition,w
  6361  0132  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6362  0133  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6363  0134  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6364  0135  00BF               	movwf	??_AfterDetectedLoadPosition+3
  6365  0136  083F               	movf	??_AfterDetectedLoadPosition+3,w
  6366  0137  3A80               	xorlw	128
  6367  0138  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6368  0139  3080               	movlw	128
  6369  013A  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6370  013B  1D03               	skipz
  6371  013C  293F               	goto	u4975
  6372  013D  3056               	movlw	86
  6373  013E  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6374  013F                     u4975:
  6375  013F  1803               	btfsc	3,0
  6376  0140  28E8               	goto	l6366
  6377  0141                     l6382:	
  6378                           ;MotorDrive.c: 2098:                 detectLoadCont[ motorNoOperation ] = 2;
  6379                           
  6380                           ;MotorDrive.c: 2097:                 detectFinePosCt[ motorNoOperation ] += 2;
  6381                           
  6382                           ;MotorDrive.c: 2096:                 detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD
      +                          _FINE;
  6383                           
  6384                           ;MotorDrive.c: 2093:                     && ((detectRoughTotalMove[ motorNoOperation ] +
      +                           move_steps) >= (43 * 2))) {;MotorDrive.c: 2095:                 doubleInterval = 1;
  6385                           
  6386                           
  6387                           ;MotorDrive.c: 2104:                 res = ID_SEARCH_RESULT_RETRY;
  6388  0141  3003               	movlw	3
  6389  0142                     L1:
  6390  0142  0020               	movlb	0	; select bank0
  6391  0143  2A2D               	goto	L2
  6392  0144                     l6384:
  6393  0144  0020               	movlb	0	; select bank0
  6394  0145  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6395  0146  3A80               	xorlw	128
  6396  0147  00BC               	movwf	??_AfterDetectedLoadPosition
  6397  0148  3080               	movlw	128
  6398  0149  023C               	subwf	??_AfterDetectedLoadPosition,w
  6399  014A  1D03               	skipz
  6400  014B  294E               	goto	u4985
  6401  014C  3030               	movlw	48
  6402  014D  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6403  014E                     u4985:
  6404  014E  1803               	skipnc
  6405  014F  2965               	goto	l6394
  6406  0150  0020               	movlb	0	; select bank0
  6407  0151  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6408  0152  3A80               	xorlw	128
  6409  0153  00BC               	movwf	??_AfterDetectedLoadPosition
  6410  0154  3080               	movlw	128
  6411  0155  023C               	subwf	??_AfterDetectedLoadPosition,w
  6412  0156  1D03               	skipz
  6413  0157  295A               	goto	u4995
  6414  0158  302B               	movlw	43
  6415  0159  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6416  015A                     u4995:
  6417  015A  1C03               	skipc
  6418  015B  2965               	goto	l6394
  6419                           
  6420                           ;MotorDrive.c: 2108:             if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motor
      +                          NoOperation ]) {
  6421  015C  0020               	movlb	0	; select bank0
  6422  015D  086B               	movf	_motorNoOperation,w
  6423  015E  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6424  015F  0086               	movwf	6
  6425  0160  0187               	clrf	7
  6426  0161  0801               	movf	1,w
  6427  0162  1D03               	btfss	3,2
  6428  0163  2A06               	goto	L3
  6429  0164  2A00               	goto	L6
  6430  0165                     l6394:	
  6431                           ;MotorDrive.c: 2115:             detectLoadCont[ motorNoOperation ] = 1;
  6432                           
  6433                           ;MotorDrive.c: 2114:             detectFinePosCt[ motorNoOperation ]++;
  6434                           
  6435                           ;MotorDrive.c: 2113:             detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD_FIN
      +                          E;
  6436                           
  6437                           ;MotorDrive.c: 2111:             }
  6438                           
  6439                           ;MotorDrive.c: 2110:                 positionSearchStat[ motorNoOperation ] = ID_SEARCH_
      +                          FINE_ROUGH_POS;
  6440                           
  6441  0165  0020               	movlb	0	; select bank0
  6442  0166  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6443  0167  3A80               	xorlw	128
  6444  0168  00BC               	movwf	??_AfterDetectedLoadPosition
  6445  0169  3080               	movlw	128
  6446  016A  023C               	subwf	??_AfterDetectedLoadPosition,w
  6447  016B  1D03               	skipz
  6448  016C  296F               	goto	u5015
  6449  016D  302B               	movlw	43
  6450  016E  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6451  016F                     u5015:
  6452  016F  1803               	skipnc
  6453  0170  2A30               	goto	l6440
  6454                           
  6455                           ;MotorDrive.c: 2121:             if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motor
      +                          NoOperation ]) {
  6456  0171  0020               	movlb	0	; select bank0
  6457  0172  086B               	movf	_motorNoOperation,w
  6458  0173  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6459  0174  0086               	movwf	6
  6460  0175  0187               	clrf	7
  6461  0176  0801               	movf	1,w
  6462  0177  1903               	btfsc	3,2
  6463  0178  2A30               	goto	l6440
  6464  0179  086B               	movf	_motorNoOperation,w
  6465  017A  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6466  017B  0086               	movwf	6
  6467  017C  0187               	clrf	7
  6468  017D  0301               	decf	1,w
  6469  017E  1D03               	btfss	3,2
  6470  017F  29BA               	goto	l6414
  6471                           
  6472                           ;MotorDrive.c: 2129:                 if (move_steps > 2) {
  6473  0180  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6474  0181  3A80               	xorlw	128
  6475  0182  00BC               	movwf	??_AfterDetectedLoadPosition
  6476  0183  3080               	movlw	128
  6477  0184  023C               	subwf	??_AfterDetectedLoadPosition,w
  6478  0185  1D03               	skipz
  6479  0186  2989               	goto	u5045
  6480  0187  3003               	movlw	3
  6481  0188  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6482  0189                     u5045:
  6483  0189  1C03               	skipc
  6484  018A  29AB               	goto	l6408
  6485  018B                     l6404:
  6486                           
  6487                           ;MotorDrive.c: 2131:                     detectLoadType[ motorNoOperation ] = ID_DETECT_
      +                          LOAD_ROUGH;
  6488  018B  3002               	movlw	2
  6489  018C  0020               	movlb	0	; select bank0
  6490  018D  00BC               	movwf	??_AfterDetectedLoadPosition
  6491  018E  086B               	movf	_motorNoOperation,w
  6492  018F  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6493  0190  0086               	movwf	6
  6494  0191  0187               	clrf	7
  6495  0192  083C               	movf	??_AfterDetectedLoadPosition,w
  6496  0193  0081               	movwf	1
  6497                           
  6498                           ;MotorDrive.c: 2132:                     detectRoughPosCt[ motorNoOperation ]++;
  6499  0194  3001               	movlw	1
  6500  0195  00BC               	movwf	??_AfterDetectedLoadPosition
  6501  0196  086B               	movf	_motorNoOperation,w
  6502  0197  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6503  0198  0086               	movwf	6
  6504  0199  0187               	clrf	7
  6505  019A  083C               	movf	??_AfterDetectedLoadPosition,w
  6506  019B  0781               	addwf	1,f
  6507                           
  6508                           ;MotorDrive.c: 2133:                     detectLoadCont[ motorNoOperation ] = 1;
  6509  019C  086B               	movf	_motorNoOperation,w
  6510  019D  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6511  019E  0086               	movwf	6
  6512  019F  0187               	clrf	7
  6513  01A0  0181               	clrf	1
  6514  01A1  0A81               	incf	1,f
  6515                           
  6516                           ;MotorDrive.c: 2134:                     detectRoughTotalMove[ motorNoOperation ] = move
      +                          _steps;
  6517  01A2  356B               	lslf	_motorNoOperation,w
  6518  01A3  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6519  01A4  0086               	movwf	6
  6520  01A5  0187               	clrf	7
  6521  01A6  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6522  01A7  3FC0               	movwi [0]fsr1
  6523  01A8  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6524  01A9  3FC1               	movwi [1]fsr1
  6525  01AA  2902               	goto	l6368
  6526  01AB                     l6408:
  6527                           
  6528                           ;MotorDrive.c: 2138:                     detectLoadCont[ motorNoOperation ]++;
  6529  01AB  3001               	movlw	1
  6530  01AC  0020               	movlb	0	; select bank0
  6531  01AD  00BC               	movwf	??_AfterDetectedLoadPosition
  6532  01AE  086B               	movf	_motorNoOperation,w
  6533  01AF  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6534  01B0  0086               	movwf	6
  6535  01B1  0187               	clrf	7
  6536  01B2  083C               	movf	??_AfterDetectedLoadPosition,w
  6537  01B3  0781               	addwf	1,f
  6538                           
  6539                           ;MotorDrive.c: 2139:                     if (detectLoadCont[ motorNoOperation ] > 2) {
  6540  01B4  086B               	movf	_motorNoOperation,w
  6541  01B5  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6542  01B6  0086               	movwf	6
  6543  01B7  0187               	clrf	7
  6544  01B8  3003               	movlw	3
  6545  01B9  2A29               	goto	L7
  6546  01BA                     l6414:
  6547  01BA  086B               	movf	_motorNoOperation,w
  6548  01BB  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6549  01BC  0086               	movwf	6
  6550  01BD  0187               	clrf	7
  6551  01BE  3002               	movlw	2
  6552  01BF  0601               	xorwf	1,w
  6553  01C0  1D03               	btfss	3,2
  6554  01C1  2941               	goto	l6382
  6555                           
  6556                           ;MotorDrive.c: 2149:                 detectRoughTotalMove[ motorNoOperation ] += move_st
      +                          eps;
  6557  01C2  356B               	lslf	_motorNoOperation,w
  6558  01C3  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6559  01C4  0086               	movwf	6
  6560  01C5  0187               	clrf	7
  6561  01C6  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6562  01C7  0781               	addwf	1,f
  6563  01C8  3141               	addfsr 1,1
  6564  01C9  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6565  01CA  3D81               	addwfc	1,f
  6566  01CB  317F               	addfsr 1,-1
  6567                           
  6568                           ;MotorDrive.c: 2151:                 if (move_steps > 3) {
  6569  01CC  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6570  01CD  3A80               	xorlw	128
  6571  01CE  00BC               	movwf	??_AfterDetectedLoadPosition
  6572  01CF  3080               	movlw	128
  6573  01D0  023C               	subwf	??_AfterDetectedLoadPosition,w
  6574  01D1  1D03               	skipz
  6575  01D2  29D5               	goto	u5075
  6576  01D3  3004               	movlw	4
  6577  01D4  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6578  01D5                     u5075:
  6579  01D5  1C03               	skipc
  6580  01D6  2A1B               	goto	l6432
  6581                           
  6582                           ;MotorDrive.c: 2154:                     if ((47 >= detectRoughTotalMove[ motorNoOperati
      +                          on ]) && (detectRoughTotalMove[ motorNoOperation ] >= 43)) {
  6583  01D7  0020               	movlb	0	; select bank0
  6584  01D8  356B               	lslf	_motorNoOperation,w
  6585  01D9  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6586  01DA  0086               	movwf	6
  6587  01DB  0187               	clrf	7
  6588  01DC  3F40               	moviw [0]fsr1
  6589  01DD  00BC               	movwf	??_AfterDetectedLoadPosition
  6590  01DE  3F41               	moviw [1]fsr1
  6591  01DF  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6592  01E0  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6593  01E1  3A80               	xorlw	128
  6594  01E2  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6595  01E3  3080               	movlw	128
  6596  01E4  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6597  01E5  1D03               	skipz
  6598  01E6  29E9               	goto	u5085
  6599  01E7  3030               	movlw	48
  6600  01E8  023C               	subwf	??_AfterDetectedLoadPosition,w
  6601  01E9                     u5085:
  6602  01E9  1803               	skipnc
  6603  01EA  298B               	goto	l6404
  6604  01EB  0020               	movlb	0	; select bank0
  6605  01EC  356B               	lslf	_motorNoOperation,w
  6606  01ED  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6607  01EE  0086               	movwf	6
  6608  01EF  0187               	clrf	7
  6609  01F0  3F40               	moviw [0]fsr1
  6610  01F1  00BC               	movwf	??_AfterDetectedLoadPosition
  6611  01F2  3F41               	moviw [1]fsr1
  6612  01F3  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6613  01F4  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6614  01F5  3A80               	xorlw	128
  6615  01F6  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6616  01F7  3080               	movlw	128
  6617  01F8  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6618  01F9  1D03               	skipz
  6619  01FA  29FD               	goto	u5095
  6620  01FB  302B               	movlw	43
  6621  01FC  023C               	subwf	??_AfterDetectedLoadPosition,w
  6622  01FD                     u5095:
  6623  01FD  1C03               	skipc
  6624  01FE  298B               	goto	l6404
  6625                           
  6626                           ;MotorDrive.c: 2156:                         positionSearchStat[ motorNoOperation ] = ID
      +                          _SEARCH_FINE_ROUGH_POS;
  6627  01FF  0020               	movlb	0	; select bank0
  6628  0200                     L6:
  6629  0200  086B               	movf	_motorNoOperation,w
  6630  0201  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6631  0202  0086               	movwf	6
  6632  0203  0187               	clrf	7
  6633  0204  0181               	clrf	1
  6634  0205  0A81               	incf	1,f
  6635  0206                     L3:
  6636                           
  6637                           ;MotorDrive.c: 2157:                         detectLoadType[ motorNoOperation ] = ID_DET
      +                          ECT_LOAD_FINE;
  6638  0206  086B               	movf	_motorNoOperation,w
  6639  0207  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6640  0208  0086               	movwf	6
  6641  0209  0187               	clrf	7
  6642  020A  0181               	clrf	1
  6643  020B  0A81               	incf	1,f
  6644                           
  6645                           ;MotorDrive.c: 2158:                         detectFinePosCt[ motorNoOperation ]++;
  6646  020C  3001               	movlw	1
  6647  020D  00BC               	movwf	??_AfterDetectedLoadPosition
  6648  020E  086B               	movf	_motorNoOperation,w
  6649  020F  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6650  0210  0086               	movwf	6
  6651  0211  0187               	clrf	7
  6652  0212  083C               	movf	??_AfterDetectedLoadPosition,w
  6653  0213  0781               	addwf	1,f
  6654                           
  6655                           ;MotorDrive.c: 2159:                         detectLoadCont[ motorNoOperation ] = 1;
  6656  0214  086B               	movf	_motorNoOperation,w
  6657  0215  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6658  0216  0086               	movwf	6
  6659  0217  0187               	clrf	7
  6660  0218  0181               	clrf	1
  6661  0219  0A81               	incf	1,f
  6662  021A  2902               	goto	l6368
  6663  021B                     l6432:
  6664                           
  6665                           ;MotorDrive.c: 2173:                     detectLoadCont[ motorNoOperation ]++;
  6666  021B  3001               	movlw	1
  6667  021C  0020               	movlb	0	; select bank0
  6668  021D  00BC               	movwf	??_AfterDetectedLoadPosition
  6669  021E  086B               	movf	_motorNoOperation,w
  6670  021F  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6671  0220  0086               	movwf	6
  6672  0221  0187               	clrf	7
  6673  0222  083C               	movf	??_AfterDetectedLoadPosition,w
  6674  0223  0781               	addwf	1,f
  6675                           
  6676                           ;MotorDrive.c: 2174:                     if (detectLoadCont[ motorNoOperation ] > 9) {
  6677  0224  086B               	movf	_motorNoOperation,w
  6678  0225  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6679  0226  0086               	movwf	6
  6680  0227  0187               	clrf	7
  6681  0228  300A               	movlw	10
  6682  0229                     L7:
  6683  0229  0201               	subwf	1,w
  6684  022A  1803               	btfsc	3,0
  6685  022B  2941               	goto	l6382
  6686                           
  6687                           ;MotorDrive.c: 2143:                         res = ID_SEARCH_RESULT_CONT;
  6688  022C  3002               	movlw	2
  6689  022D                     L2:
  6690  022D  00BC               	movwf	??_AfterDetectedLoadPosition
  6691  022E  083C               	movf	??_AfterDetectedLoadPosition,w
  6692  022F  00C3               	movwf	AfterDetectedLoadPosition@res
  6693  0230                     l6440:
  6694                           
  6695                           ;MotorDrive.c: 2190:     if ((detectFinePosCt[ motorNoOperation ] == 8)
  6696  0230  0020               	movlb	0	; select bank0
  6697  0231  086B               	movf	_motorNoOperation,w
  6698  0232  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6699  0233  0086               	movwf	6
  6700  0234  0187               	clrf	7
  6701  0235  3008               	movlw	8
  6702  0236  0601               	xorwf	1,w
  6703  0237  1D03               	btfss	3,2
  6704  0238  2A42               	goto	l6446
  6705  0239  086B               	movf	_motorNoOperation,w
  6706  023A  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6707  023B  0086               	movwf	6
  6708  023C  0187               	clrf	7
  6709  023D  0301               	decf	1,w
  6710  023E  1D03               	btfss	3,2
  6711  023F  2A42               	goto	l6446
  6712  0240                     l6444:
  6713                           
  6714                           ;MotorDrive.c: 2191:             && (detectRoughPosCt[ motorNoOperation ] == 1)) {;Motor
      +                          Drive.c: 2193:         res = ID_SEARCH_RESULT_SUCCESS;
  6715  0240  3004               	movlw	4
  6716  0241  2A62               	goto	L4
  6717  0242                     l6446:	
  6718                           ;MotorDrive.c: 2195:     } else if ((detectFinePosCt[ motorNoOperation ] == (8 + 1))
  6719                           
  6720  0242  086B               	movf	_motorNoOperation,w
  6721  0243  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6722  0244  0086               	movwf	6
  6723  0245  0187               	clrf	7
  6724  0246  3009               	movlw	9
  6725  0247  0601               	xorwf	1,w
  6726  0248  1D03               	btfss	3,2
  6727  0249  2A51               	goto	l6452
  6728  024A  086B               	movf	_motorNoOperation,w
  6729  024B  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6730  024C  0086               	movwf	6
  6731  024D  0187               	clrf	7
  6732  024E  0301               	decf	1,w
  6733  024F  1903               	btfsc	3,2
  6734  0250  2A40               	goto	l6444
  6735  0251                     l6452:
  6736  0251  086B               	movf	_motorNoOperation,w
  6737  0252  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6738  0253  0086               	movwf	6
  6739  0254  0187               	clrf	7
  6740  0255  300A               	movlw	10
  6741  0256  0201               	subwf	1,w
  6742  0257  1803               	btfsc	3,0
  6743  0258  2A61               	goto	l6454
  6744                           
  6745                           ;MotorDrive.c: 2206:     } else if (detectRoughPosCt[ motorNoOperation ] > 1) {
  6746  0259  086B               	movf	_motorNoOperation,w
  6747  025A  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6748  025B  0086               	movwf	6
  6749  025C  0187               	clrf	7
  6750  025D  3002               	movlw	2
  6751  025E  0201               	subwf	1,w
  6752  025F  1C03               	skipc
  6753  0260  2A65               	goto	l6460
  6754  0261                     l6454:
  6755                           
  6756                           ;MotorDrive.c: 2205:         res = ID_SEARCH_RESULT_RETRY;
  6757  0261  3003               	movlw	3
  6758  0262                     L4:
  6759  0262  00BC               	movwf	??_AfterDetectedLoadPosition
  6760  0263  083C               	movf	??_AfterDetectedLoadPosition,w
  6761  0264  00C3               	movwf	AfterDetectedLoadPosition@res
  6762  0265                     l6460:
  6763                           
  6764                           ;MotorDrive.c: 2211:     if (ID_SEARCH_RESULT_ERR == res) {
  6765  0265  3005               	movlw	5
  6766  0266  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6767  0267  1903               	btfsc	3,2
  6768  0268  2BEF               	goto	l6566
  6769  0269  0843               	movf	AfterDetectedLoadPosition@res,w
  6770  026A  1D03               	btfss	3,2
  6771  026B  2A7D               	goto	l6472
  6772                           
  6773                           ;MotorDrive.c: 2218:         SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedLoadP
      +                          osition);
  6774  026C  305D               	movlw	low _AfterDetectedLoadPosition
  6775  026D  00A0               	movwf	SetAfterDetectLoadFunc@func
  6776  026E  3000               	movlw	high _AfterDetectedLoadPosition
  6777  026F  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  6778  0270  086B               	movf	_motorNoOperation,w
  6779  0271  3190  20C5  3180   	fcall	_SetAfterDetectLoadFunc
  6780                           
  6781                           ;MotorDrive.c: 2219:         if (reqSearchBasePosBit & motorBitOperation) {
  6782  0274  0855               	movf	_reqSearchBasePosBit,w
  6783  0275  0574               	andwf	_motorBitOperation,w
  6784  0276  1903               	btfsc	3,2
  6785  0277  2BEF               	goto	l6566
  6786                           
  6787                           ;MotorDrive.c: 2220:             SetMotorStart(motorNoOperation);
  6788  0278  086B               	movf	_motorNoOperation,w
  6789  0279  3190  2091  3180   	fcall	_SetMotorStart
  6790  027C  2BEF               	goto	l6566
  6791  027D                     l6472:
  6792  027D  3003               	movlw	3
  6793  027E  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6794  027F  1D03               	btfss	3,2
  6795  0280  2A9C               	goto	l6484
  6796                           
  6797                           ;MotorDrive.c: 2229:         InitPositionSearch(motorNoOperation);
  6798  0281  086B               	movf	_motorNoOperation,w
  6799  0282  318E  261A  3180   	fcall	_InitPositionSearch
  6800                           
  6801                           ;MotorDrive.c: 2230:         SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedLoadP
      +                          osition);
  6802  0285  305D               	movlw	low _AfterDetectedLoadPosition
  6803  0286  00A0               	movwf	SetAfterDetectLoadFunc@func
  6804  0287  3000               	movlw	high _AfterDetectedLoadPosition
  6805  0288  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  6806  0289  086B               	movf	_motorNoOperation,w
  6807  028A  3190  20C5  3180   	fcall	_SetAfterDetectLoadFunc
  6808                           
  6809                           ;MotorDrive.c: 2231:         if (reqSearchBasePosBit & motorBitOperation) {
  6810  028D  0855               	movf	_reqSearchBasePosBit,w
  6811  028E  0574               	andwf	_motorBitOperation,w
  6812  028F  1903               	btfsc	3,2
  6813  0290  2A96               	goto	l6482
  6814                           
  6815                           ;MotorDrive.c: 2232:             SetMotorStart(motorNoOperation);
  6816  0291  086B               	movf	_motorNoOperation,w
  6817  0292  3190  2091  3180   	fcall	_SetMotorStart
  6818                           
  6819                           ;MotorDrive.c: 2233:         } else {
  6820  0295  2BEF               	goto	l6566
  6821  0296                     l6482:
  6822                           
  6823                           ;MotorDrive.c: 2234:             reqCorrectFinePoBit |= motorBitOperation;
  6824  0296  0874               	movf	_motorBitOperation,w
  6825  0297  00BC               	movwf	??_AfterDetectedLoadPosition
  6826  0298  083C               	movf	??_AfterDetectedLoadPosition,w
  6827  0299  0021               	movlb	1	; select bank1
  6828  029A  04CF               	iorwf	_reqCorrectFinePoBit^(0+128),f
  6829                           
  6830                           ;MotorDrive.c: 2236:     } else {
  6831                           
  6832                           ;MotorDrive.c: 2235:         }
  6833  029B  2BEF               	goto	l6566
  6834  029C                     l6484:
  6835                           
  6836                           ;MotorDrive.c: 2238:         if (0 == (reqCorrectFinePoBit & motorBitOperation)) {
  6837  029C  0021               	movlb	1	; select bank1
  6838  029D  084F               	movf	_reqCorrectFinePoBit^(0+128),w
  6839  029E  0574               	andwf	_motorBitOperation,w
  6840  029F  1D03               	btfss	3,2
  6841  02A0  2B5A               	goto	l6512
  6842                           
  6843                           ;MotorDrive.c: 2242:             if (1 == doubleInterval) {
  6844  02A1  034D               	decf	_doubleInterval^(0+128),w
  6845  02A2  1D03               	btfss	3,2
  6846  02A3  2B0A               	goto	l6500
  6847                           
  6848                           ;MotorDrive.c: 2243:                 detectLoadPositionIndex[ motorNoOperation ]++;
  6849  02A4  3001               	movlw	1
  6850  02A5  0020               	movlb	0	; select bank0
  6851  02A6  00BC               	movwf	??_AfterDetectedLoadPosition
  6852  02A7  086B               	movf	_motorNoOperation,w
  6853  02A8  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  6854  02A9  0086               	movwf	6
  6855  02AA  0187               	clrf	7
  6856  02AB  083C               	movf	??_AfterDetectedLoadPosition,w
  6857  02AC  0781               	addwf	1,f
  6858                           
  6859                           ;MotorDrive.c: 2244:                 missingDetectFinePosition = currentPosition[ motorN
      +                          oOperation ] - 45;
  6860  02AD  356B               	lslf	_motorNoOperation,w
  6861  02AE  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6862  02AF  0086               	movwf	6
  6863  02B0  0187               	clrf	7
  6864  02B1  3F40               	moviw [0]fsr1
  6865  02B2  00BC               	movwf	??_AfterDetectedLoadPosition
  6866  02B3  3F41               	moviw [1]fsr1
  6867  02B4  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6868  02B5  083C               	movf	??_AfterDetectedLoadPosition,w
  6869  02B6  3ED3               	addlw	211
  6870  02B7  0021               	movlb	1	; select bank1
  6871  02B8  00ED               	movwf	_missingDetectFinePosition^(0+128)
  6872  02B9  30FF               	movlw	255
  6873  02BA  0020               	movlb	0	; select bank0
  6874  02BB  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6875  02BC  0021               	movlb	1	; select bank1
  6876  02BD  00EE               	movwf	(_missingDetectFinePosition+1)^(0+128)
  6877                           
  6878                           ;MotorDrive.c: 2245:                 CorrectPosition(&missingDetectFinePosition, TblMaxS
      +                          teps[ motorNoOperation ]);
  6879  02BE  30ED               	movlw	low _missingDetectFinePosition
  6880  02BF  0020               	movlb	0	; select bank0
  6881  02C0  00A6               	movwf	CorrectPosition@pos
  6882  02C1  3000               	movlw	high _missingDetectFinePosition
  6883  02C2  00A7               	movwf	CorrectPosition@pos+1
  6884  02C3  086B               	movf	_motorNoOperation,w
  6885  02C4  00BC               	movwf	??_AfterDetectedLoadPosition
  6886  02C5  01BD               	clrf	??_AfterDetectedLoadPosition+1
  6887  02C6  35BC               	lslf	??_AfterDetectedLoadPosition,f
  6888  02C7  0DBD               	rlf	??_AfterDetectedLoadPosition+1,f
  6889  02C8  3056               	movlw	low (_TblMaxSteps| (0+32768))
  6890  02C9  073C               	addwf	??_AfterDetectedLoadPosition,w
  6891  02CA  0084               	movwf	4
  6892  02CB  3098               	movlw	high (_TblMaxSteps| (0+32768))
  6893  02CC  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6894  02CD  0085               	movwf	5
  6895  02CE  3F00               	moviw [0]fsr0
  6896  02CF  00A8               	movwf	CorrectPosition@max
  6897  02D0  3F01               	moviw [1]fsr0
  6898  02D1  00A9               	movwf	CorrectPosition@max+1
  6899  02D2  3188  200B  3180   	fcall	_CorrectPosition
  6900                           
  6901                           ;MotorDrive.c: 2247:                 *detectLoadPositionPtr[ motorNoOperation ] = missin
      +                          gDetectFinePosition;
  6902  02D5  356B               	lslf	_motorNoOperation,w
  6903  02D6  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6904  02D7  0086               	movwf	6
  6905  02D8  3001               	movlw	1	; select bank2/3
  6906  02D9  0087               	movwf	7
  6907  02DA  3F40               	moviw [0]fsr1
  6908  02DB  00BC               	movwf	??_AfterDetectedLoadPosition
  6909  02DC  3F41               	moviw [1]fsr1
  6910  02DD  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6911  02DE  083C               	movf	??_AfterDetectedLoadPosition,w
  6912  02DF  0086               	movwf	6
  6913  02E0  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6914  02E1  0087               	movwf	7
  6915  02E2  0021               	movlb	1	; select bank1
  6916  02E3  086D               	movf	_missingDetectFinePosition^(0+128),w
  6917  02E4  3FC0               	movwi [0]fsr1
  6918  02E5  086E               	movf	(_missingDetectFinePosition+1)^(0+128),w
  6919  02E6  3FC1               	movwi [1]fsr1
  6920                           
  6921                           ;MotorDrive.c: 2248:                 detectLoadPositionPtr[ motorNoOperation ]++;
  6922  02E7  0020               	movlb	0	; select bank0
  6923  02E8  356B               	lslf	_motorNoOperation,w
  6924  02E9  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6925  02EA  0086               	movwf	6
  6926  02EB  3001               	movlw	1	; select bank2/3
  6927  02EC  0087               	movwf	7
  6928  02ED  3002               	movlw	2
  6929  02EE  0781               	addwf	1,f
  6930  02EF  3141               	addfsr 1,1
  6931  02F0  1803               	skipnc
  6932  02F1  0A81               	incf	1,f
  6933                           
  6934                           ;MotorDrive.c: 2250:                 *detectLoadPositionTypePtr[ motorNoOperation ] = de
      +                          tectLoadType[ motorNoOperation ];
  6935  02F2  086B               	movf	_motorNoOperation,w
  6936  02F3  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6937  02F4  0086               	movwf	6
  6938  02F5  0187               	clrf	7
  6939  02F6  0801               	movf	1,w
  6940  02F7  00BC               	movwf	??_AfterDetectedLoadPosition
  6941  02F8  086B               	movf	_motorNoOperation,w
  6942  02F9  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6943  02FA  0086               	movwf	6
  6944  02FB  0187               	clrf	7
  6945  02FC  0801               	movf	1,w
  6946  02FD  0086               	movwf	6
  6947  02FE  3001               	movlw	1	; select bank2/3
  6948  02FF  0087               	movwf	7
  6949  0300  083C               	movf	??_AfterDetectedLoadPosition,w
  6950  0301  0081               	movwf	1
  6951                           
  6952                           ;MotorDrive.c: 2251:                 detectLoadPositionTypePtr[ motorNoOperation ]++;
  6953  0302  3001               	movlw	1
  6954  0303  00BC               	movwf	??_AfterDetectedLoadPosition
  6955  0304  086B               	movf	_motorNoOperation,w
  6956  0305  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6957  0306  0086               	movwf	6
  6958  0307  0187               	clrf	7
  6959  0308  083C               	movf	??_AfterDetectedLoadPosition,w
  6960  0309  0781               	addwf	1,f
  6961  030A                     l6500:
  6962                           
  6963                           ;MotorDrive.c: 2254:             detectLoadPositionIndex[ motorNoOperation ]++;
  6964  030A  3001               	movlw	1
  6965  030B  0020               	movlb	0	; select bank0
  6966  030C  00BC               	movwf	??_AfterDetectedLoadPosition
  6967  030D  086B               	movf	_motorNoOperation,w
  6968  030E  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  6969  030F  0086               	movwf	6
  6970  0310  0187               	clrf	7
  6971  0311  083C               	movf	??_AfterDetectedLoadPosition,w
  6972  0312  0781               	addwf	1,f
  6973                           
  6974                           ;MotorDrive.c: 2257:             *detectLoadPositionPtr[ motorNoOperation ] = currentPos
      +                          ition[ motorNoOperation ];
  6975  0313  356B               	lslf	_motorNoOperation,w
  6976  0314  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6977  0315  0086               	movwf	6
  6978  0316  0187               	clrf	7
  6979  0317  356B               	lslf	_motorNoOperation,w
  6980  0318  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6981  0319  0084               	movwf	4
  6982  031A  3001               	movlw	1	; select bank2/3
  6983  031B  0085               	movwf	5
  6984  031C  3F00               	moviw [0]fsr0
  6985  031D  00BC               	movwf	??_AfterDetectedLoadPosition
  6986  031E  3F01               	moviw [1]fsr0
  6987  031F  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6988  0320  083C               	movf	??_AfterDetectedLoadPosition,w
  6989  0321  0084               	movwf	4
  6990  0322  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6991  0323  0085               	movwf	5
  6992  0324  3F40               	moviw [0]fsr1
  6993  0325  3F80               	movwi [0]fsr0
  6994  0326  3F41               	moviw [1]fsr1
  6995  0327  3F81               	movwi [1]fsr0
  6996                           
  6997                           ;MotorDrive.c: 2258:             detectLoadPositionPtr[ motorNoOperation ]++;
  6998  0328  356B               	lslf	_motorNoOperation,w
  6999  0329  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  7000  032A  0086               	movwf	6
  7001  032B  3001               	movlw	1	; select bank2/3
  7002  032C  0087               	movwf	7
  7003  032D  3002               	movlw	2
  7004  032E  0781               	addwf	1,f
  7005  032F  3141               	addfsr 1,1
  7006  0330  1803               	skipnc
  7007  0331  0A81               	incf	1,f
  7008                           
  7009                           ;MotorDrive.c: 2261:             *detectLoadPositionTypePtr[ motorNoOperation ] = detect
      +                          LoadType[ motorNoOperation ];
  7010  0332  086B               	movf	_motorNoOperation,w
  7011  0333  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  7012  0334  0086               	movwf	6
  7013  0335  0187               	clrf	7
  7014  0336  0801               	movf	1,w
  7015  0337  00BC               	movwf	??_AfterDetectedLoadPosition
  7016  0338  086B               	movf	_motorNoOperation,w
  7017  0339  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7018  033A  0086               	movwf	6
  7019  033B  0187               	clrf	7
  7020  033C  0801               	movf	1,w
  7021  033D  0086               	movwf	6
  7022  033E  3001               	movlw	1	; select bank2/3
  7023  033F  0087               	movwf	7
  7024  0340  083C               	movf	??_AfterDetectedLoadPosition,w
  7025  0341  0081               	movwf	1
  7026                           
  7027                           ;MotorDrive.c: 2262:             if (ID_SEARCH_RESULT_CONT == res) {
  7028  0342  3002               	movlw	2
  7029  0343  0643               	xorwf	AfterDetectedLoadPosition@res,w
  7030  0344  1D03               	btfss	3,2
  7031  0345  2B52               	goto	l956
  7032                           
  7033                           ;MotorDrive.c: 2263:                 *detectLoadPositionTypePtr[ motorNoOperation ] += 1
      +                          0;
  7034  0346  300A               	movlw	10
  7035  0347  00BC               	movwf	??_AfterDetectedLoadPosition
  7036  0348  086B               	movf	_motorNoOperation,w
  7037  0349  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7038  034A  0086               	movwf	6
  7039  034B  0187               	clrf	7
  7040  034C  0801               	movf	1,w
  7041  034D  0086               	movwf	6
  7042  034E  3001               	movlw	1	; select bank2/3
  7043  034F  0087               	movwf	7
  7044  0350  083C               	movf	??_AfterDetectedLoadPosition,w
  7045  0351  0781               	addwf	1,f
  7046  0352                     l956:	
  7047                           ;MotorDrive.c: 2264:             }
  7048                           
  7049                           
  7050                           ;MotorDrive.c: 2266:             detectLoadPositionTypePtr[ motorNoOperation ]++;
  7051  0352  3001               	movlw	1
  7052  0353  00BC               	movwf	??_AfterDetectedLoadPosition
  7053  0354  086B               	movf	_motorNoOperation,w
  7054  0355  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7055  0356  0086               	movwf	6
  7056  0357  0187               	clrf	7
  7057  0358  083C               	movf	??_AfterDetectedLoadPosition,w
  7058  0359  0781               	addwf	1,f
  7059  035A                     l6512:
  7060                           
  7061                           ;MotorDrive.c: 2270:         if (ID_SEARCH_RESULT_SUCCESS == res) {
  7062  035A  3004               	movlw	4
  7063  035B  0020               	movlb	0	; select bank0
  7064  035C  0643               	xorwf	AfterDetectedLoadPosition@res,w
  7065  035D  1D03               	btfss	3,2
  7066  035E  2BB0               	goto	l6542
  7067                           
  7068                           ;MotorDrive.c: 2272:             DetermineBasePosition(motorNoOperation);
  7069  035F  086B               	movf	_motorNoOperation,w
  7070  0360  318F  275A  3180   	fcall	_DetermineBasePosition
  7071                           
  7072                           ;MotorDrive.c: 2275:             UpdataHandPosition(motorNoOperation);
  7073  0363  086B               	movf	_motorNoOperation,w
  7074  0364  318E  26BA  3180   	fcall	_UpdataHandPosition
  7075                           
  7076                           ;MotorDrive.c: 2278:             SaveLoadPosition(motorNoOperation);
  7077  0367  086B               	movf	_motorNoOperation,w
  7078  0368  318C  2474  3180   	fcall	_SaveLoadPosition
  7079                           
  7080                           ;MotorDrive.c: 2281:             ActivateHandPosition(motorNoOperation);
  7081  036B  086B               	movf	_motorNoOperation,w
  7082  036C  3193  2396  3180   	fcall	_ActivateHandPosition
  7083                           
  7084                           ;MotorDrive.c: 2283:             if (reqSearchBasePosBit & motorBitOperation) {
  7085  036F  0020               	movlb	0	; select bank0
  7086  0370  0855               	movf	_reqSearchBasePosBit,w
  7087  0371  0574               	andwf	_motorBitOperation,w
  7088  0372  1903               	btfsc	3,2
  7089  0373  2B9F               	goto	l6534
  7090                           
  7091                           ;MotorDrive.c: 2285:                 if (DRIVE_SEARCH_1008_POSITION == driveType[ motorN
      +                          oOperation ]) {
  7092  0374  086B               	movf	_motorNoOperation,w
  7093  0375  3E30               	addlw	(low (_driveType| (0+256)))& (0+255)
  7094  0376  0086               	movwf	6
  7095  0377  3001               	movlw	1	; select bank2/3
  7096  0378  0087               	movwf	7
  7097  0379  3005               	movlw	5
  7098  037A  0601               	xorwf	1,w
  7099  037B  1D03               	btfss	3,2
  7100  037C  2B8C               	goto	l6528
  7101                           
  7102                           ;MotorDrive.c: 2287:                     if (0 == motorNoOperation) {
  7103  037D  086B               	movf	_motorNoOperation,w
  7104  037E  1D03               	btfss	3,2
  7105  037F  2B86               	goto	l6526
  7106                           
  7107                           ;MotorDrive.c: 2288:                         targetPosition[ 0 ] = 48;
  7108  0380  3030               	movlw	48
  7109  0381  0022               	movlb	2	; select bank2
  7110  0382  00E4               	movwf	_targetPosition^(0+256)
  7111  0383  3000               	movlw	0
  7112  0384  00E5               	movwf	(_targetPosition^(0+256)+1)
  7113                           
  7114                           ;MotorDrive.c: 2289:                     } else {
  7115  0385  2B94               	goto	l6530
  7116  0386                     l6526:
  7117                           
  7118                           ;MotorDrive.c: 2290:                         targetPosition[ 1 ] = 304;
  7119  0386  3030               	movlw	48
  7120  0387  0022               	movlb	2	; select bank2
  7121  0388  00E6               	movwf	(_targetPosition^(0+256)+2)
  7122  0389  3001               	movlw	1
  7123  038A  00E7               	movwf	(_targetPosition^(0+256)+3)
  7124  038B  2B94               	goto	l6530
  7125  038C                     l6528:
  7126                           
  7127                           ;MotorDrive.c: 2293:                     targetPosition[ motorNoOperation ] = 0;
  7128  038C  356B               	lslf	_motorNoOperation,w
  7129  038D  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
  7130  038E  0086               	movwf	6
  7131  038F  3001               	movlw	1	; select bank2/3
  7132  0390  0087               	movwf	7
  7133  0391  3000               	movlw	0
  7134  0392  3FC0               	movwi [0]fsr1
  7135  0393  3FC1               	movwi [1]fsr1
  7136  0394                     l6530:
  7137                           
  7138                           ;MotorDrive.c: 2296:                 SetAfterMotorStopFunc(motorNoOperation, SPIControl_
      +                          SetNotification);
  7139  0394  30F7               	movlw	low _SPIControl_SetNotification
  7140  0395  0020               	movlb	0	; select bank0
  7141  0396  00A0               	movwf	SetAfterMotorStopFunc@func
  7142  0397  3015               	movlw	high _SPIControl_SetNotification
  7143  0398  00A1               	movwf	SetAfterMotorStopFunc@func+1
  7144  0399  086B               	movf	_motorNoOperation,w
  7145  039A  3190  209B  3180   	fcall	_SetAfterMotorStopFunc
  7146                           
  7147                           ;MotorDrive.c: 2297:                 SetDriveType(motorNoOperation, DRIVE_SIMPLE);
  7148  039D  01A0               	clrf	SetDriveType@drive_type
  7149  039E  2BAB               	goto	L5
  7150  039F                     l6534:	
  7151                           ;MotorDrive.c: 2298:             } else if (reqCorrectBasePosBit & motorBitOperation) {
  7152                           
  7153  039F  0854               	movf	_reqCorrectBasePosBit,w
  7154  03A0  0574               	andwf	_motorBitOperation,w
  7155  03A1  1903               	btfsc	3,2
  7156  03A2  2BEB               	goto	l6564
  7157                           
  7158                           ;MotorDrive.c: 2302:                 reqCorrectBasePosBit &= (UB) (~motorBitOperation);
  7159  03A3  0974               	comf	_motorBitOperation,w
  7160  03A4  00BC               	movwf	??_AfterDetectedLoadPosition
  7161  03A5  083C               	movf	??_AfterDetectedLoadPosition,w
  7162  03A6  05D4               	andwf	_reqCorrectBasePosBit,f
  7163                           
  7164                           ;MotorDrive.c: 2303:                 SetDriveType(motorNoOperation, DRIVE_ACT_CORRECT_PO
      +                          SITION);
  7165  03A7  3004               	movlw	4
  7166  03A8  00BC               	movwf	??_AfterDetectedLoadPosition
  7167  03A9  083C               	movf	??_AfterDetectedLoadPosition,w
  7168  03AA  00A0               	movwf	SetDriveType@drive_type
  7169  03AB                     L5:
  7170  03AB  086B               	movf	_motorNoOperation,w
  7171  03AC  318D  2585  3180   	fcall	_SetDriveType
  7172  03AF  2BEB               	goto	l6564
  7173  03B0                     l6542:	
  7174                           ;MotorDrive.c: 2308:         } else {
  7175                           
  7176                           ;MotorDrive.c: 2307:             MoveTargetPosition(motorNoOperation);
  7177                           
  7178                           
  7179                           ;MotorDrive.c: 2310:             SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedL
      +                          oadPosition);
  7180  03B0  305D               	movlw	low _AfterDetectedLoadPosition
  7181  03B1  00A0               	movwf	SetAfterDetectLoadFunc@func
  7182  03B2  3000               	movlw	high _AfterDetectedLoadPosition
  7183  03B3  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  7184  03B4  086B               	movf	_motorNoOperation,w
  7185  03B5  3190  20C5  3180   	fcall	_SetAfterDetectLoadFunc
  7186                           
  7187                           ;MotorDrive.c: 2311:             if (reqSearchBasePosBit & motorBitOperation) {
  7188  03B8  0855               	movf	_reqSearchBasePosBit,w
  7189  03B9  0574               	andwf	_motorBitOperation,w
  7190  03BA  1903               	btfsc	3,2
  7191  03BB  2BC1               	goto	l6548
  7192                           
  7193                           ;MotorDrive.c: 2315:                 SetMotorStart(motorNoOperation);
  7194  03BC  086B               	movf	_motorNoOperation,w
  7195  03BD  3190  2091  3180   	fcall	_SetMotorStart
  7196                           
  7197                           ;MotorDrive.c: 2317:             } else if ((reqCorrectBasePosBit & motorBitOperation)
  7198  03C0  2BEF               	goto	l6566
  7199  03C1                     l6548:
  7200  03C1  0854               	movf	_reqCorrectBasePosBit,w
  7201  03C2  0574               	andwf	_motorBitOperation,w
  7202  03C3  1903               	btfsc	3,2
  7203  03C4  2BEF               	goto	l6566
  7204  03C5  0021               	movlb	1	; select bank1
  7205  03C6  084F               	movf	_reqCorrectFinePoBit^(0+128),w
  7206  03C7  0574               	andwf	_motorBitOperation,w
  7207  03C8  1903               	btfsc	3,2
  7208  03C9  2BEF               	goto	l6566
  7209  03CA  0020               	movlb	0	; select bank0
  7210  03CB  086B               	movf	_motorNoOperation,w
  7211  03CC  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  7212  03CD  0086               	movwf	6
  7213  03CE  0187               	clrf	7
  7214  03CF  0301               	decf	1,w
  7215  03D0  1D03               	btfss	3,2
  7216  03D1  2BEF               	goto	l6566
  7217  03D2  0343               	decf	AfterDetectedLoadPosition@res,w
  7218  03D3  1D03               	btfss	3,2
  7219  03D4  2BEF               	goto	l6566
  7220                           
  7221                           ;MotorDrive.c: 2320:                     && (ID_SEARCH_RESULT_NEW_POS == res)) {;MotorDr
      +                          ive.c: 2324:                 UpdateCurrentPositionByFinePosition(motorNoOperation);
  7222  03D5  086B               	movf	_motorNoOperation,w
  7223  03D6  318C  24F7  3180   	fcall	_UpdateCurrentPositionByFinePosition
  7224                           
  7225                           ;MotorDrive.c: 2331:                 InitPositionSearch(motorNoOperation);
  7226  03D9  086B               	movf	_motorNoOperation,w
  7227  03DA  318E  261A  3180   	fcall	_InitPositionSearch
  7228                           
  7229                           ;MotorDrive.c: 2333:                 SetDriveType(motorNoOperation, DRIVE_ACT_CORRECT_PO
      +                          SITION);
  7230  03DD  3004               	movlw	4
  7231  03DE  00BC               	movwf	??_AfterDetectedLoadPosition
  7232  03DF  083C               	movf	??_AfterDetectedLoadPosition,w
  7233  03E0  00A0               	movwf	SetDriveType@drive_type
  7234  03E1  086B               	movf	_motorNoOperation,w
  7235  03E2  318D  2585  3180   	fcall	_SetDriveType
  7236                           
  7237                           ;MotorDrive.c: 2334:                 reqCorrectFinePoBit &= (UB) (~motorBitOperation);
  7238  03E5  0974               	comf	_motorBitOperation,w
  7239  03E6  0020               	movlb	0	; select bank0
  7240  03E7  00BC               	movwf	??_AfterDetectedLoadPosition
  7241  03E8  083C               	movf	??_AfterDetectedLoadPosition,w
  7242  03E9  0021               	movlb	1	; select bank1
  7243  03EA  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
  7244  03EB                     l6564:
  7245                           
  7246                           ;MotorDrive.c: 2336:                 MoveTargetPosition(motorNoOperation);
  7247  03EB  0020               	movlb	0	; select bank0
  7248  03EC  086B               	movf	_motorNoOperation,w
  7249  03ED  3193  23DF         	fcall	_MoveTargetPosition
  7250  03EF                     l6566:	
  7251                           ;MotorDrive.c: 2338:             } else {
  7252                           
  7253                           
  7254                           ;MotorDrive.c: 2347:     positionSearchCt[ motorNoOperation ] = 0;
  7255  03EF  0020               	movlb	0	; select bank0
  7256  03F0  356B               	lslf	_motorNoOperation,w
  7257  03F1  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  7258  03F2  0086               	movwf	6
  7259  03F3  0187               	clrf	7
  7260  03F4  3000               	movlw	0
  7261  03F5  3FC0               	movwi [0]fsr1
  7262  03F6  3FC1               	movwi [1]fsr1
  7263                           
  7264                           ;MotorDrive.c: 2350:     doubleInterval = 0;
  7265  03F7  0021               	movlb	1	; select bank1
  7266  03F8  01CD               	clrf	_doubleInterval^(0+128)
  7267  03F9  0008               	return
  7268  03FA                     __end_of_AfterDetectedLoadPosition:
  7269                           
  7270                           	psect	text32
  7271  06C0                     __ptext32:	
  7272 ;; *************** function _VerifyHandPosition_LoadPosition *****************
  7273 ;; Defined at:
  7274 ;;		line 2553 in file "MotorDrive.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  motor_no        1   29[BANK0 ] unsigned char 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  load_pos        2   44[BANK0 ] short 
  7279 ;;  curt_pos        2   41[BANK0 ] short 
  7280 ;;  remain_steps    2   38[BANK0 ] short 
  7281 ;;  load_pos_pl1    2    0        short 
  7282 ;;  i               1   43[BANK0 ] unsigned char 
  7283 ;;  misalignment    1   40[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 1F/2
  7290 ;;		On exit  : 1F/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7293 ;;      Params:         0       1       0       0       0       0       0       0
  7294 ;;      Locals:         0       8       0       0       0       0       0       0
  7295 ;;      Temps:          0       8       0       0       0       0       0       0
  7296 ;;      Totals:         0      17       0       0       0       0       0       0
  7297 ;;Total ram usage:       17 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:   12
  7300 ;; This function calls:
  7301 ;;		_CorrectPosition
  7302 ;;		_MoveTargetPosition
  7303 ;;		_SetMotorCorrectPositionStart
  7304 ;;		___bmul
  7305 ;;		___wmul
  7306 ;; This function is called by:
  7307 ;;		_SetFwdPulseWithCorrectProc
  7308 ;;		_WatchMotorDriveFinish
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _VerifyHandPosition_LoadPosition
  7314  06C0                     _VerifyHandPosition_LoadPosition:
  7315                           
  7316                           ;MotorDrive.c: 2553: void VerifyHandPosition_LoadPosition(UB motor_no);MotorDrive.c: 255
      +                          4: {;MotorDrive.c: 2555:     UB i;;MotorDrive.c: 2556:     UB misalignment_flag = 1;
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _VerifyHandPosition_LoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7320  06C0  0020               	movlb	0	; select bank0
  7321  06C1  01C8               	clrf	VerifyHandPosition_LoadPosition@misalignment_flag
  7322  06C2  0AC8               	incf	VerifyHandPosition_LoadPosition@misalignment_flag,f
  7323                           
  7324                           ;MotorDrive.c: 2557:     H remain_steps;;MotorDrive.c: 2558:     H curt_pos;;MotorDrive.
      +                          c: 2559:     H load_pos;;MotorDrive.c: 2560:     H load_pos_pl1;;MotorDrive.c: 2563:    
      +                           if (0 == motor_no) {
  7325  06C3  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7326  06C4  1D03               	btfss	3,2
  7327  06C5  2ECD               	goto	l6576
  7328                           
  7329                           ;MotorDrive.c: 2564:         remain_steps = motorM0StepCounter;
  7330  06C6  0021               	movlb	1	; select bank1
  7331  06C7  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
  7332  06C8  0020               	movlb	0	; select bank0
  7333  06C9  00C7               	movwf	VerifyHandPosition_LoadPosition@remain_steps+1
  7334  06CA  0021               	movlb	1	; select bank1
  7335  06CB  0840               	movf	_motorM0StepCounter^(0+128),w
  7336  06CC  2ED3               	goto	L8
  7337  06CD                     l6576:	
  7338                           ;MotorDrive.c: 2565:     } else {
  7339                           
  7340                           
  7341                           ;MotorDrive.c: 2566:         remain_steps = motorM1StepCounter;
  7342  06CD  0021               	movlb	1	; select bank1
  7343  06CE  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
  7344  06CF  0020               	movlb	0	; select bank0
  7345  06D0  00C7               	movwf	VerifyHandPosition_LoadPosition@remain_steps+1
  7346  06D1  0021               	movlb	1	; select bank1
  7347  06D2  083E               	movf	_motorM1StepCounter^(0+128),w
  7348  06D3                     L8:
  7349  06D3  0020               	movlb	0	; select bank0
  7350  06D4  00C6               	movwf	VerifyHandPosition_LoadPosition@remain_steps
  7351                           
  7352                           ;MotorDrive.c: 2570:     currentPosition[ motor_no ] -= remain_steps;
  7353  06D5  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7354  06D6  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7355  06D7  0086               	movwf	6
  7356  06D8  0187               	clrf	7
  7357  06D9  0846               	movf	VerifyHandPosition_LoadPosition@remain_steps,w
  7358  06DA  0281               	subwf	1,f
  7359  06DB  3141               	addfsr 1,1
  7360  06DC  0847               	movf	VerifyHandPosition_LoadPosition@remain_steps+1,w
  7361  06DD  3B81               	subwfb	1,f
  7362  06DE  317F               	addfsr 1,-1
  7363                           
  7364                           ;MotorDrive.c: 2571:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
  7365  06DF  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7366  06E0  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7367  06E1  00A6               	movwf	CorrectPosition@pos
  7368  06E2  3000               	movlw	0
  7369  06E3  00A7               	movwf	CorrectPosition@pos+1
  7370  06E4  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7371  06E5  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7372  06E6  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7373  06E7  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7374  06E8  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7375  06E9  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7376  06EA  073E               	addwf	??_VerifyHandPosition_LoadPosition,w
  7377  06EB  0084               	movwf	4
  7378  06EC  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7379  06ED  3D3F               	addwfc	??_VerifyHandPosition_LoadPosition+1,w
  7380  06EE  0085               	movwf	5
  7381  06EF  3F00               	moviw [0]fsr0
  7382  06F0  00A8               	movwf	CorrectPosition@max
  7383  06F1  3F01               	moviw [1]fsr0
  7384  06F2  00A9               	movwf	CorrectPosition@max+1
  7385  06F3  3188  200B  3186   	fcall	_CorrectPosition
  7386                           
  7387                           ;MotorDrive.c: 2573:     curt_pos = currentPosition[ motor_no ];
  7388  06F6  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7389  06F7  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7390  06F8  0086               	movwf	6
  7391  06F9  0187               	clrf	7
  7392  06FA  3F40               	moviw [0]fsr1
  7393  06FB  00C9               	movwf	VerifyHandPosition_LoadPosition@curt_pos
  7394  06FC  3F41               	moviw [1]fsr1
  7395  06FD  00CA               	movwf	VerifyHandPosition_LoadPosition@curt_pos+1
  7396                           
  7397                           ;MotorDrive.c: 2588:     for (i = 0; i < loadPositionIndex[ motor_no ]; i++) {
  7398  06FE  01CB               	clrf	VerifyHandPosition_LoadPosition@i
  7399  06FF  2F41               	goto	l6606
  7400  0700                     l6592:	
  7401                           ;MotorDrive.c: 2595:             break;
  7402                           
  7403                           
  7404                           ;MotorDrive.c: 2598:         if (ID_DETECT_LOAD_FINE == loadPositionType[ motor_no ][ i 
      +                          ]) {
  7405  0700  3017               	movlw	23
  7406  0701  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7407  0702  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7408  0703  00A0               	movwf	___bmul@multiplicand
  7409  0704  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7410  0705  3192  22E4  3186   	fcall	___bmul
  7411  0708  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  7412  0709  074B               	addwf	VerifyHandPosition_LoadPosition@i,w
  7413  070A  00BF               	movwf	??_VerifyHandPosition_LoadPosition+1
  7414  070B  083F               	movf	??_VerifyHandPosition_LoadPosition+1,w
  7415  070C  0086               	movwf	6
  7416  070D  3001               	movlw	1	; select bank3/4
  7417  070E  0087               	movwf	7
  7418  070F  0301               	decf	1,w
  7419  0710  1D03               	btfss	3,2
  7420  0711  2F3D               	goto	l6604
  7421                           
  7422                           ;MotorDrive.c: 2600:             load_pos++;
  7423  0712  3001               	movlw	1
  7424  0713  07CC               	addwf	VerifyHandPosition_LoadPosition@load_pos,f
  7425  0714  3000               	movlw	0
  7426  0715  3DCD               	addwfc	VerifyHandPosition_LoadPosition@load_pos+1,f
  7427                           
  7428                           ;MotorDrive.c: 2601:             if (load_pos >= TblMaxSteps[ motor_no ]) {
  7429  0716  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7430  0717  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7431  0718  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7432  0719  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7433  071A  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7434  071B  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7435  071C  073E               	addwf	??_VerifyHandPosition_LoadPosition,w
  7436  071D  0084               	movwf	4
  7437  071E  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7438  071F  3D3F               	addwfc	??_VerifyHandPosition_LoadPosition+1,w
  7439  0720  0085               	movwf	5
  7440  0721  3F00               	moviw [0]fsr0
  7441  0722  00C0               	movwf	??_VerifyHandPosition_LoadPosition+2
  7442  0723  3F01               	moviw [1]fsr0
  7443  0724  00C1               	movwf	??_VerifyHandPosition_LoadPosition+3
  7444  0725  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7445  0726  3A80               	xorlw	128
  7446  0727  00C2               	movwf	??_VerifyHandPosition_LoadPosition+4
  7447  0728  0841               	movf	??_VerifyHandPosition_LoadPosition+3,w
  7448  0729  3A80               	xorlw	128
  7449  072A  0242               	subwf	??_VerifyHandPosition_LoadPosition+4,w
  7450  072B  1D03               	skipz
  7451  072C  2F2F               	goto	u5385
  7452  072D  0840               	movf	??_VerifyHandPosition_LoadPosition+2,w
  7453  072E  024C               	subwf	VerifyHandPosition_LoadPosition@load_pos,w
  7454  072F                     u5385:
  7455  072F  1C03               	skipc
  7456  0730  2F34               	goto	l6600
  7457                           
  7458                           ;MotorDrive.c: 2602:                 load_pos = 0;
  7459  0731  0020               	movlb	0	; select bank0
  7460  0732  01CC               	clrf	VerifyHandPosition_LoadPosition@load_pos
  7461  0733  01CD               	clrf	VerifyHandPosition_LoadPosition@load_pos+1
  7462  0734                     l6600:
  7463                           
  7464                           ;MotorDrive.c: 2605:             if (curt_pos == load_pos) {
  7465  0734  0020               	movlb	0	; select bank0
  7466  0735  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7467  0736  064A               	xorwf	VerifyHandPosition_LoadPosition@curt_pos+1,w
  7468  0737  1D03               	skipz
  7469  0738  2F3B               	goto	u5395
  7470  0739  084C               	movf	VerifyHandPosition_LoadPosition@load_pos,w
  7471  073A  0649               	xorwf	VerifyHandPosition_LoadPosition@curt_pos,w
  7472  073B                     u5395:
  7473  073B  1903               	btfsc	3,2
  7474  073C  2F78               	goto	l6590
  7475  073D                     l6604:
  7476                           
  7477                           ;MotorDrive.c: 2611:     }
  7478  073D  3001               	movlw	1
  7479  073E  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7480  073F  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7481  0740  07CB               	addwf	VerifyHandPosition_LoadPosition@i,f
  7482  0741                     l6606:
  7483  0741  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7484  0742  3EB6               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  7485  0743  0086               	movwf	6
  7486  0744  0187               	clrf	7
  7487  0745  0801               	movf	1,w
  7488  0746  024B               	subwf	VerifyHandPosition_LoadPosition@i,w
  7489  0747  1803               	btfsc	3,0
  7490  0748  2F79               	goto	l6608
  7491                           
  7492                           ;MotorDrive.c: 2590:         load_pos = loadPosition[ motor_no ][ i ];
  7493  0749  084B               	movf	VerifyHandPosition_LoadPosition@i,w
  7494  074A  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7495  074B  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7496  074C  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7497  074D  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7498  074E  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7499  074F  00C0               	movwf	??_VerifyHandPosition_LoadPosition+2
  7500  0750  01C1               	clrf	??_VerifyHandPosition_LoadPosition+3
  7501  0751  0840               	movf	??_VerifyHandPosition_LoadPosition+2,w
  7502  0752  00A0               	movwf	___wmul@multiplier
  7503  0753  0841               	movf	??_VerifyHandPosition_LoadPosition+3,w
  7504  0754  00A1               	movwf	___wmul@multiplier+1
  7505  0755  302E               	movlw	46
  7506  0756  00A2               	movwf	___wmul@multiplicand
  7507  0757  3000               	movlw	0
  7508  0758  00A3               	movwf	___wmul@multiplicand+1
  7509  0759  3195  2588  3186   	fcall	___wmul
  7510  075C  3038               	movlw	56
  7511  075D  00C2               	movwf	??_VerifyHandPosition_LoadPosition+4
  7512  075E  3021               	movlw	33
  7513  075F  00C3               	movwf	??_VerifyHandPosition_LoadPosition+5
  7514  0760  0820               	movf	?___wmul,w
  7515  0761  0742               	addwf	??_VerifyHandPosition_LoadPosition+4,w
  7516  0762  00C4               	movwf	??_VerifyHandPosition_LoadPosition+6
  7517  0763  0821               	movf	?___wmul+1,w
  7518  0764  3D43               	addwfc	??_VerifyHandPosition_LoadPosition+5,w
  7519  0765  00C5               	movwf	??_VerifyHandPosition_LoadPosition+7
  7520  0766  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7521  0767  0744               	addwf	??_VerifyHandPosition_LoadPosition+6,w
  7522  0768  0086               	movwf	6
  7523  0769  083F               	movf	??_VerifyHandPosition_LoadPosition+1,w
  7524  076A  3D45               	addwfc	??_VerifyHandPosition_LoadPosition+7,w
  7525  076B  0087               	movwf	7
  7526  076C  3F40               	moviw [0]fsr1
  7527  076D  00CC               	movwf	VerifyHandPosition_LoadPosition@load_pos
  7528  076E  3F41               	moviw [1]fsr1
  7529  076F  00CD               	movwf	VerifyHandPosition_LoadPosition@load_pos+1
  7530                           
  7531                           ;MotorDrive.c: 2592:         if (curt_pos == load_pos) {
  7532  0770  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7533  0771  064A               	xorwf	VerifyHandPosition_LoadPosition@curt_pos+1,w
  7534  0772  1D03               	skipz
  7535  0773  2F76               	goto	u5365
  7536  0774  084C               	movf	VerifyHandPosition_LoadPosition@load_pos,w
  7537  0775  0649               	xorwf	VerifyHandPosition_LoadPosition@curt_pos,w
  7538  0776                     u5365:
  7539  0776  1D03               	skipz
  7540  0777  2F00               	goto	l6592
  7541  0778                     l6590:
  7542                           
  7543                           ;MotorDrive.c: 2594:             misalignment_flag = 0;
  7544  0778  01C8               	clrf	VerifyHandPosition_LoadPosition@misalignment_flag
  7545  0779                     l6608:
  7546                           
  7547                           ;MotorDrive.c: 2613:     if (misalignment_flag) {
  7548  0779  0848               	movf	VerifyHandPosition_LoadPosition@misalignment_flag,w
  7549  077A  1903               	btfsc	3,2
  7550  077B  2F80               	goto	l6612
  7551                           
  7552                           ;MotorDrive.c: 2617:         SetMotorCorrectPositionStart(motor_no);
  7553  077C  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7554  077D  3197  2747         	fcall	_SetMotorCorrectPositionStart
  7555                           
  7556                           ;MotorDrive.c: 2618:     } else {
  7557  077F  0008               	return
  7558  0780                     l6612:
  7559                           
  7560                           ;MotorDrive.c: 2621:         MoveTargetPosition(motor_no);
  7561  0780  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7562  0781  3193  23DF         	fcall	_MoveTargetPosition
  7563  0783  0008               	return
  7564  0784                     __end_of_VerifyHandPosition_LoadPosition:
  7565                           
  7566                           	psect	text33
  7567  1747                     __ptext33:	
  7568 ;; *************** function _SetMotorCorrectPositionStart *****************
  7569 ;; Defined at:
  7570 ;;		line 1903 in file "MotorDrive.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  motor_no        1    wreg     unsigned char 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  motor_no        1   18[BANK0 ] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 1F/0
  7581 ;;		On exit  : 1F/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7584 ;;      Params:         0       0       0       0       0       0       0       0
  7585 ;;      Locals:         0       1       0       0       0       0       0       0
  7586 ;;      Temps:          0       2       0       0       0       0       0       0
  7587 ;;      Totals:         0       3       0       0       0       0       0       0
  7588 ;;Total ram usage:        3 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:   10
  7591 ;; This function calls:
  7592 ;;		_InitPositionSearch
  7593 ;;		_SetAfterDetectLoadFunc
  7594 ;; This function is called by:
  7595 ;;		_VerifyHandPosition_LoadPosition
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _SetMotorCorrectPositionStart
  7601  1747                     _SetMotorCorrectPositionStart:
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _SetMotorCorrectPositionStart: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7605                           ;SetMotorCorrectPositionStart@motor_no stored from wreg
  7606  1747  00B2               	movwf	SetMotorCorrectPositionStart@motor_no
  7607                           
  7608                           ;MotorDrive.c: 1903: void SetMotorCorrectPositionStart(UB motor_no);MotorDrive.c: 1904: 
      +                          {;MotorDrive.c: 1905:     motorBitOperation = (UB) (0x01 << motor_no);
  7609  1748  3001               	movlw	1
  7610  1749  00B0               	movwf	??_SetMotorCorrectPositionStart
  7611  174A  0A32               	incf	SetMotorCorrectPositionStart@motor_no,w
  7612  174B  2F4D               	goto	u4694
  7613  174C                     u4695:
  7614  174C  35B0               	lslf	??_SetMotorCorrectPositionStart,f
  7615  174D                     u4694:
  7616  174D  0B89               	decfsz	9,f
  7617  174E  2F4C               	goto	u4695
  7618  174F  0830               	movf	??_SetMotorCorrectPositionStart,w
  7619  1750  00B1               	movwf	??_SetMotorCorrectPositionStart+1
  7620  1751  0831               	movf	??_SetMotorCorrectPositionStart+1,w
  7621  1752  00F4               	movwf	_motorBitOperation
  7622                           
  7623                           ;MotorDrive.c: 1907:     reqCorrectBasePosBit |= motorBitOperation;
  7624  1753  0874               	movf	_motorBitOperation,w
  7625  1754  00B0               	movwf	??_SetMotorCorrectPositionStart
  7626  1755  0830               	movf	??_SetMotorCorrectPositionStart,w
  7627  1756  04D4               	iorwf	_reqCorrectBasePosBit,f
  7628                           
  7629                           ;MotorDrive.c: 1908:     reqCorrectFinePoBit |= motorBitOperation;
  7630  1757  0874               	movf	_motorBitOperation,w
  7631  1758  00B0               	movwf	??_SetMotorCorrectPositionStart
  7632  1759  0830               	movf	??_SetMotorCorrectPositionStart,w
  7633  175A  0021               	movlb	1	; select bank1
  7634  175B  04CF               	iorwf	_reqCorrectFinePoBit^(0+128),f
  7635                           
  7636                           ;MotorDrive.c: 1910:     searchTotalSteps[ motor_no ] = 0;
  7637  175C  0020               	movlb	0	; select bank0
  7638  175D  3532               	lslf	SetMotorCorrectPositionStart@motor_no,w
  7639  175E  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  7640  175F  0086               	movwf	6
  7641  1760  3001               	movlw	1	; select bank2/3
  7642  1761  0087               	movwf	7
  7643  1762  3000               	movlw	0
  7644  1763  3FC0               	movwi [0]fsr1
  7645  1764  3FC1               	movwi [1]fsr1
  7646                           
  7647                           ;MotorDrive.c: 1912:     InitPositionSearch(motor_no);
  7648  1765  0832               	movf	SetMotorCorrectPositionStart@motor_no,w
  7649  1766  318E  261A  3197   	fcall	_InitPositionSearch
  7650                           
  7651                           ;MotorDrive.c: 1914:     SetAfterDetectLoadFunc(motor_no, AfterDetectedLoadPosition);
  7652  1769  305D               	movlw	low _AfterDetectedLoadPosition
  7653  176A  00A0               	movwf	SetAfterDetectLoadFunc@func
  7654  176B  3000               	movlw	high _AfterDetectedLoadPosition
  7655  176C  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  7656  176D  0832               	movf	SetMotorCorrectPositionStart@motor_no,w
  7657  176E  3190  20C5         	fcall	_SetAfterDetectLoadFunc
  7658  1770  0008               	return
  7659  1771                     __end_of_SetMotorCorrectPositionStart:
  7660                           
  7661                           	psect	text34
  7662  0CF7                     __ptext34:	
  7663 ;; *************** function _UpdateCurrentPositionByFinePosition *****************
  7664 ;; Defined at:
  7665 ;;		line 2450 in file "MotorDrive.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  motor_no        1    wreg     unsigned char 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  motor_no        1   17[BANK0 ] unsigned char 
  7670 ;;  diff            2   14[BANK0 ] short 
  7671 ;;  revise_pos      2    0        short 
  7672 ;;  i               1   16[BANK0 ] unsigned char 
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7677 ;; Tracked objects:
  7678 ;;		On entry : 1F/0
  7679 ;;		On exit  : 1F/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7682 ;;      Params:         0       0       0       0       0       0       0       0
  7683 ;;      Locals:         0       4       0       0       0       0       0       0
  7684 ;;      Temps:          0       8       0       0       0       0       0       0
  7685 ;;      Totals:         0      12       0       0       0       0       0       0
  7686 ;;Total ram usage:       12 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; Hardware stack levels required when called:    9
  7689 ;; This function calls:
  7690 ;;		___bmul
  7691 ;;		___wmul
  7692 ;; This function is called by:
  7693 ;;		_AfterDetectedLoadPosition
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _UpdateCurrentPositionByFinePosition
  7699  0CF7                     _UpdateCurrentPositionByFinePosition:
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _UpdateCurrentPositionByFinePosition: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7703                           ;UpdateCurrentPositionByFinePosition@motor_no stored from wreg
  7704  0CF7  00B1               	movwf	UpdateCurrentPositionByFinePosition@motor_no
  7705                           
  7706                           ;MotorDrive.c: 2450: void UpdateCurrentPositionByFinePosition(UB motor_no);MotorDrive.c:
      +                           2451: {;MotorDrive.c: 2452:     UB i;;MotorDrive.c: 2453:     H revise_pos;;MotorDrive.
      +                          c: 2454:     H diff;;MotorDrive.c: 2456:     for (i = 0; i < loadPositionIndex[ motor_no
      +                           ]; i++) {
  7707  0CF8  01B0               	clrf	UpdateCurrentPositionByFinePosition@i
  7708  0CF9                     l6308:
  7709  0CF9  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7710  0CFA  3EB6               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  7711  0CFB  0086               	movwf	6
  7712  0CFC  0187               	clrf	7
  7713  0CFD  0801               	movf	1,w
  7714  0CFE  0230               	subwf	UpdateCurrentPositionByFinePosition@i,w
  7715  0CFF  1803               	btfsc	3,0
  7716  0D00  0008               	return
  7717                           
  7718                           ;MotorDrive.c: 2458:         if (ID_DETECT_LOAD_FINE == loadPositionType[ motor_no ][ i 
      +                          ]) {
  7719  0D01  3017               	movlw	23
  7720  0D02  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7721  0D03  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7722  0D04  00A0               	movwf	___bmul@multiplicand
  7723  0D05  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7724  0D06  3192  22E4  318C   	fcall	___bmul
  7725  0D09  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  7726  0D0A  0730               	addwf	UpdateCurrentPositionByFinePosition@i,w
  7727  0D0B  00A7               	movwf	??_UpdateCurrentPositionByFinePosition+1
  7728  0D0C  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7729  0D0D  0086               	movwf	6
  7730  0D0E  3001               	movlw	1	; select bank3/4
  7731  0D0F  0087               	movwf	7
  7732  0D10  0301               	decf	1,w
  7733  0D11  1D03               	btfss	3,2
  7734  0D12  2D7F               	goto	l6306
  7735                           
  7736                           ;MotorDrive.c: 2459:             diff = currentPosition[ motor_no ] - loadPosition[ moto
      +                          r_no ][ i ];
  7737  0D13  0830               	movf	UpdateCurrentPositionByFinePosition@i,w
  7738  0D14  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7739  0D15  01A7               	clrf	??_UpdateCurrentPositionByFinePosition+1
  7740  0D16  35A6               	lslf	??_UpdateCurrentPositionByFinePosition,f
  7741  0D17  0DA7               	rlf	??_UpdateCurrentPositionByFinePosition+1,f
  7742  0D18  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7743  0D19  00A8               	movwf	??_UpdateCurrentPositionByFinePosition+2
  7744  0D1A  01A9               	clrf	??_UpdateCurrentPositionByFinePosition+3
  7745  0D1B  0828               	movf	??_UpdateCurrentPositionByFinePosition+2,w
  7746  0D1C  00A0               	movwf	___wmul@multiplier
  7747  0D1D  0829               	movf	??_UpdateCurrentPositionByFinePosition+3,w
  7748  0D1E  00A1               	movwf	___wmul@multiplier+1
  7749  0D1F  302E               	movlw	46
  7750  0D20  00A2               	movwf	___wmul@multiplicand
  7751  0D21  3000               	movlw	0
  7752  0D22  00A3               	movwf	___wmul@multiplicand+1
  7753  0D23  3195  2588  318C   	fcall	___wmul
  7754  0D26  3038               	movlw	56
  7755  0D27  00AA               	movwf	??_UpdateCurrentPositionByFinePosition+4
  7756  0D28  3021               	movlw	33
  7757  0D29  00AB               	movwf	??_UpdateCurrentPositionByFinePosition+5
  7758  0D2A  0820               	movf	?___wmul,w
  7759  0D2B  072A               	addwf	??_UpdateCurrentPositionByFinePosition+4,w
  7760  0D2C  00AC               	movwf	??_UpdateCurrentPositionByFinePosition+6
  7761  0D2D  0821               	movf	?___wmul+1,w
  7762  0D2E  3D2B               	addwfc	??_UpdateCurrentPositionByFinePosition+5,w
  7763  0D2F  00AD               	movwf	??_UpdateCurrentPositionByFinePosition+7
  7764  0D30  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7765  0D31  072C               	addwf	??_UpdateCurrentPositionByFinePosition+6,w
  7766  0D32  0086               	movwf	6
  7767  0D33  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7768  0D34  3D2D               	addwfc	??_UpdateCurrentPositionByFinePosition+7,w
  7769  0D35  0087               	movwf	7
  7770  0D36  3531               	lslf	UpdateCurrentPositionByFinePosition@motor_no,w
  7771  0D37  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7772  0D38  0084               	movwf	4
  7773  0D39  0185               	clrf	5
  7774  0D3A  3F40               	moviw [0]fsr1
  7775  0D3B  0200               	subwf	0,w
  7776  0D3C  00AE               	movwf	UpdateCurrentPositionByFinePosition@diff
  7777  0D3D  3101               	addfsr 0,1
  7778  0D3E  3F41               	moviw [1]fsr1
  7779  0D3F  3B00               	subwfb	0,w
  7780  0D40  00AF               	movwf	UpdateCurrentPositionByFinePosition@diff+1
  7781                           
  7782                           ;MotorDrive.c: 2461:             if (diff < 0) {
  7783  0D41  1FAF               	btfss	UpdateCurrentPositionByFinePosition@diff+1,7
  7784  0D42  2D48               	goto	l6302
  7785                           
  7786                           ;MotorDrive.c: 2462:                 diff = -diff;
  7787  0D43  09AE               	comf	UpdateCurrentPositionByFinePosition@diff,f
  7788  0D44  09AF               	comf	UpdateCurrentPositionByFinePosition@diff+1,f
  7789  0D45  0AAE               	incf	UpdateCurrentPositionByFinePosition@diff,f
  7790  0D46  1903               	skipnz
  7791  0D47  0AAF               	incf	UpdateCurrentPositionByFinePosition@diff+1,f
  7792  0D48                     l6302:
  7793                           
  7794                           ;MotorDrive.c: 2465:             if (diff <= 22) {
  7795  0D48  082F               	movf	UpdateCurrentPositionByFinePosition@diff+1,w
  7796  0D49  3A80               	xorlw	128
  7797  0D4A  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7798  0D4B  3080               	movlw	128
  7799  0D4C  0226               	subwf	??_UpdateCurrentPositionByFinePosition,w
  7800  0D4D  1D03               	skipz
  7801  0D4E  2D51               	goto	u4805
  7802  0D4F  3017               	movlw	23
  7803  0D50  022E               	subwf	UpdateCurrentPositionByFinePosition@diff,w
  7804  0D51                     u4805:
  7805  0D51  1803               	skipnc
  7806  0D52  2D7F               	goto	l6306
  7807                           
  7808                           ;MotorDrive.c: 2466:                 currentPosition[ motor_no ] = loadPosition[ motor_n
      +                          o ][ i ];
  7809  0D53  0020               	movlb	0	; select bank0
  7810  0D54  0830               	movf	UpdateCurrentPositionByFinePosition@i,w
  7811  0D55  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7812  0D56  01A7               	clrf	??_UpdateCurrentPositionByFinePosition+1
  7813  0D57  35A6               	lslf	??_UpdateCurrentPositionByFinePosition,f
  7814  0D58  0DA7               	rlf	??_UpdateCurrentPositionByFinePosition+1,f
  7815  0D59  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7816  0D5A  00A8               	movwf	??_UpdateCurrentPositionByFinePosition+2
  7817  0D5B  01A9               	clrf	??_UpdateCurrentPositionByFinePosition+3
  7818  0D5C  0828               	movf	??_UpdateCurrentPositionByFinePosition+2,w
  7819  0D5D  00A0               	movwf	___wmul@multiplier
  7820  0D5E  0829               	movf	??_UpdateCurrentPositionByFinePosition+3,w
  7821  0D5F  00A1               	movwf	___wmul@multiplier+1
  7822  0D60  302E               	movlw	46
  7823  0D61  00A2               	movwf	___wmul@multiplicand
  7824  0D62  3000               	movlw	0
  7825  0D63  00A3               	movwf	___wmul@multiplicand+1
  7826  0D64  3195  2588         	fcall	___wmul
  7827  0D66  3038               	movlw	56
  7828  0D67  00AA               	movwf	??_UpdateCurrentPositionByFinePosition+4
  7829  0D68  3021               	movlw	33
  7830  0D69  00AB               	movwf	??_UpdateCurrentPositionByFinePosition+5
  7831  0D6A  0820               	movf	?___wmul,w
  7832  0D6B  072A               	addwf	??_UpdateCurrentPositionByFinePosition+4,w
  7833  0D6C  00AC               	movwf	??_UpdateCurrentPositionByFinePosition+6
  7834  0D6D  0821               	movf	?___wmul+1,w
  7835  0D6E  3D2B               	addwfc	??_UpdateCurrentPositionByFinePosition+5,w
  7836  0D6F  00AD               	movwf	??_UpdateCurrentPositionByFinePosition+7
  7837  0D70  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7838  0D71  072C               	addwf	??_UpdateCurrentPositionByFinePosition+6,w
  7839  0D72  0086               	movwf	6
  7840  0D73  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7841  0D74  3D2D               	addwfc	??_UpdateCurrentPositionByFinePosition+7,w
  7842  0D75  0087               	movwf	7
  7843  0D76  3531               	lslf	UpdateCurrentPositionByFinePosition@motor_no,w
  7844  0D77  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7845  0D78  0084               	movwf	4
  7846  0D79  0185               	clrf	5
  7847  0D7A  3F40               	moviw [0]fsr1
  7848  0D7B  3F80               	movwi [0]fsr0
  7849  0D7C  3F41               	moviw [1]fsr1
  7850  0D7D  3F81               	movwi [1]fsr0
  7851                           
  7852                           ;MotorDrive.c: 2467:                 break;
  7853  0D7E  0008               	return
  7854  0D7F                     l6306:
  7855                           
  7856                           ;MotorDrive.c: 2470:     }
  7857  0D7F  3001               	movlw	1
  7858  0D80  0020               	movlb	0	; select bank0
  7859  0D81  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7860  0D82  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7861  0D83  07B0               	addwf	UpdateCurrentPositionByFinePosition@i,f
  7862  0D84  2CF9               	goto	l6308
  7863  0D85                     __end_of_UpdateCurrentPositionByFinePosition:
  7864                           
  7865                           	psect	text35
  7866  0EBA                     __ptext35:	
  7867 ;; *************** function _UpdataHandPosition *****************
  7868 ;; Defined at:
  7869 ;;		line 2418 in file "MotorDrive.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  motor_no        1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  motor_no        1   24[BANK0 ] unsigned char 
  7874 ;;  i               1   23[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 1F/0
  7881 ;;		On exit  : 1F/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7884 ;;      Params:         0       0       0       0       0       0       0       0
  7885 ;;      Locals:         0       2       0       0       0       0       0       0
  7886 ;;      Temps:          0      10       0       0       0       0       0       0
  7887 ;;      Totals:         0      12       0       0       0       0       0       0
  7888 ;;Total ram usage:       12 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    9
  7891 ;; This function calls:
  7892 ;;		_CorrectPosition
  7893 ;;		___wmul
  7894 ;; This function is called by:
  7895 ;;		_AfterDetectedLoadPosition
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _UpdataHandPosition
  7901  0EBA                     _UpdataHandPosition:
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in _UpdataHandPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7905                           ;UpdataHandPosition@motor_no stored from wreg
  7906  0EBA  00B8               	movwf	UpdataHandPosition@motor_no
  7907                           
  7908                           ;MotorDrive.c: 2418: void UpdataHandPosition(UB motor_no);MotorDrive.c: 2419: {;MotorDri
      +                          ve.c: 2420:     UB i;;MotorDrive.c: 2422:     currentPosition[ motor_no ] -= detectBaseP
      +                          osition[ motor_no ];
  7909  0EBB  3538               	lslf	UpdataHandPosition@motor_no,w
  7910  0EBC  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  7911  0EBD  0086               	movwf	6
  7912  0EBE  3001               	movlw	1	; select bank2/3
  7913  0EBF  0087               	movwf	7
  7914  0EC0  3F40               	moviw [0]fsr1
  7915  0EC1  00AD               	movwf	??_UpdataHandPosition
  7916  0EC2  3F41               	moviw [1]fsr1
  7917  0EC3  00AE               	movwf	??_UpdataHandPosition+1
  7918  0EC4  3538               	lslf	UpdataHandPosition@motor_no,w
  7919  0EC5  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7920  0EC6  0086               	movwf	6
  7921  0EC7  0187               	clrf	7
  7922  0EC8  082D               	movf	??_UpdataHandPosition,w
  7923  0EC9  0281               	subwf	1,f
  7924  0ECA  3141               	addfsr 1,1
  7925  0ECB  082E               	movf	??_UpdataHandPosition+1,w
  7926  0ECC  3B81               	subwfb	1,f
  7927  0ECD  317F               	addfsr 1,-1
  7928                           
  7929                           ;MotorDrive.c: 2423:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
  7930  0ECE  3538               	lslf	UpdataHandPosition@motor_no,w
  7931  0ECF  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7932  0ED0  00A6               	movwf	CorrectPosition@pos
  7933  0ED1  3000               	movlw	0
  7934  0ED2  00A7               	movwf	CorrectPosition@pos+1
  7935  0ED3  0838               	movf	UpdataHandPosition@motor_no,w
  7936  0ED4  00AD               	movwf	??_UpdataHandPosition
  7937  0ED5  01AE               	clrf	??_UpdataHandPosition+1
  7938  0ED6  35AD               	lslf	??_UpdataHandPosition,f
  7939  0ED7  0DAE               	rlf	??_UpdataHandPosition+1,f
  7940  0ED8  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7941  0ED9  072D               	addwf	??_UpdataHandPosition,w
  7942  0EDA  0084               	movwf	4
  7943  0EDB  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7944  0EDC  3D2E               	addwfc	??_UpdataHandPosition+1,w
  7945  0EDD  0085               	movwf	5
  7946  0EDE  3F00               	moviw [0]fsr0
  7947  0EDF  00A8               	movwf	CorrectPosition@max
  7948  0EE0  3F01               	moviw [1]fsr0
  7949  0EE1  00A9               	movwf	CorrectPosition@max+1
  7950  0EE2  3188  200B  318E   	fcall	_CorrectPosition
  7951                           
  7952                           ;MotorDrive.c: 2425:     for (i = 0; i < detectLoadPositionIndex[ motor_no ]; i++) {
  7953  0EE5  01B7               	clrf	UpdataHandPosition@i
  7954  0EE6                     l6268:
  7955  0EE6  0838               	movf	UpdataHandPosition@motor_no,w
  7956  0EE7  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  7957  0EE8  0086               	movwf	6
  7958  0EE9  0187               	clrf	7
  7959  0EEA  0801               	movf	1,w
  7960  0EEB  0237               	subwf	UpdataHandPosition@i,w
  7961  0EEC  1803               	btfsc	3,0
  7962  0EED  0008               	return
  7963                           
  7964                           ;MotorDrive.c: 2427:         detectLoadPosition[ motor_no ][ i ] -= detectBasePosition[ 
      +                          motor_no ];
  7965  0EEE  3538               	lslf	UpdataHandPosition@motor_no,w
  7966  0EEF  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  7967  0EF0  0086               	movwf	6
  7968  0EF1  3001               	movlw	1	; select bank2/3
  7969  0EF2  0087               	movwf	7
  7970  0EF3  3F40               	moviw [0]fsr1
  7971  0EF4  00AD               	movwf	??_UpdataHandPosition
  7972  0EF5  3F41               	moviw [1]fsr1
  7973  0EF6  00AE               	movwf	??_UpdataHandPosition+1
  7974  0EF7  0837               	movf	UpdataHandPosition@i,w
  7975  0EF8  00AF               	movwf	??_UpdataHandPosition+2
  7976  0EF9  01B0               	clrf	??_UpdataHandPosition+3
  7977  0EFA  35AF               	lslf	??_UpdataHandPosition+2,f
  7978  0EFB  0DB0               	rlf	??_UpdataHandPosition+3,f
  7979  0EFC  0838               	movf	UpdataHandPosition@motor_no,w
  7980  0EFD  00B1               	movwf	??_UpdataHandPosition+4
  7981  0EFE  01B2               	clrf	??_UpdataHandPosition+5
  7982  0EFF  0831               	movf	??_UpdataHandPosition+4,w
  7983  0F00  00A0               	movwf	___wmul@multiplier
  7984  0F01  0832               	movf	??_UpdataHandPosition+5,w
  7985  0F02  00A1               	movwf	___wmul@multiplier+1
  7986  0F03  302E               	movlw	46
  7987  0F04  00A2               	movwf	___wmul@multiplicand
  7988  0F05  3000               	movlw	0
  7989  0F06  00A3               	movwf	___wmul@multiplicand+1
  7990  0F07  3195  2588  318E   	fcall	___wmul
  7991  0F0A  3094               	movlw	148
  7992  0F0B  00B3               	movwf	??_UpdataHandPosition+6
  7993  0F0C  3021               	movlw	33
  7994  0F0D  00B4               	movwf	??_UpdataHandPosition+7
  7995  0F0E  0820               	movf	?___wmul,w
  7996  0F0F  0733               	addwf	??_UpdataHandPosition+6,w
  7997  0F10  00B5               	movwf	??_UpdataHandPosition+8
  7998  0F11  0821               	movf	?___wmul+1,w
  7999  0F12  3D34               	addwfc	??_UpdataHandPosition+7,w
  8000  0F13  00B6               	movwf	??_UpdataHandPosition+9
  8001  0F14  082F               	movf	??_UpdataHandPosition+2,w
  8002  0F15  0735               	addwf	??_UpdataHandPosition+8,w
  8003  0F16  0086               	movwf	6
  8004  0F17  0830               	movf	??_UpdataHandPosition+3,w
  8005  0F18  3D36               	addwfc	??_UpdataHandPosition+9,w
  8006  0F19  0087               	movwf	7
  8007  0F1A  082D               	movf	??_UpdataHandPosition,w
  8008  0F1B  0281               	subwf	1,f
  8009  0F1C  3141               	addfsr 1,1
  8010  0F1D  082E               	movf	??_UpdataHandPosition+1,w
  8011  0F1E  3B81               	subwfb	1,f
  8012  0F1F  317F               	addfsr 1,-1
  8013                           
  8014                           ;MotorDrive.c: 2428:         CorrectPosition(&detectLoadPosition[ motor_no ][ i ], TblMa
      +                          xSteps[ motor_no ]);
  8015  0F20  0837               	movf	UpdataHandPosition@i,w
  8016  0F21  00AD               	movwf	??_UpdataHandPosition
  8017  0F22  01AE               	clrf	??_UpdataHandPosition+1
  8018  0F23  35AD               	lslf	??_UpdataHandPosition,f
  8019  0F24  0DAE               	rlf	??_UpdataHandPosition+1,f
  8020  0F25  0838               	movf	UpdataHandPosition@motor_no,w
  8021  0F26  00AF               	movwf	??_UpdataHandPosition+2
  8022  0F27  01B0               	clrf	??_UpdataHandPosition+3
  8023  0F28  082F               	movf	??_UpdataHandPosition+2,w
  8024  0F29  00A0               	movwf	___wmul@multiplier
  8025  0F2A  0830               	movf	??_UpdataHandPosition+3,w
  8026  0F2B  00A1               	movwf	___wmul@multiplier+1
  8027  0F2C  302E               	movlw	46
  8028  0F2D  00A2               	movwf	___wmul@multiplicand
  8029  0F2E  3000               	movlw	0
  8030  0F2F  00A3               	movwf	___wmul@multiplicand+1
  8031  0F30  3195  2588  318E   	fcall	___wmul
  8032  0F33  3094               	movlw	148
  8033  0F34  00B1               	movwf	??_UpdataHandPosition+4
  8034  0F35  3021               	movlw	33
  8035  0F36  00B2               	movwf	??_UpdataHandPosition+5
  8036  0F37  0820               	movf	?___wmul,w
  8037  0F38  0731               	addwf	??_UpdataHandPosition+4,w
  8038  0F39  00B3               	movwf	??_UpdataHandPosition+6
  8039  0F3A  0821               	movf	?___wmul+1,w
  8040  0F3B  3D32               	addwfc	??_UpdataHandPosition+5,w
  8041  0F3C  00B4               	movwf	??_UpdataHandPosition+7
  8042  0F3D  082D               	movf	??_UpdataHandPosition,w
  8043  0F3E  0733               	addwf	??_UpdataHandPosition+6,w
  8044  0F3F  00A6               	movwf	CorrectPosition@pos
  8045  0F40  082E               	movf	??_UpdataHandPosition+1,w
  8046  0F41  3D34               	addwfc	??_UpdataHandPosition+7,w
  8047  0F42  00A7               	movwf	CorrectPosition@pos+1
  8048  0F43  0838               	movf	UpdataHandPosition@motor_no,w
  8049  0F44  00B5               	movwf	??_UpdataHandPosition+8
  8050  0F45  01B6               	clrf	??_UpdataHandPosition+9
  8051  0F46  35B5               	lslf	??_UpdataHandPosition+8,f
  8052  0F47  0DB6               	rlf	??_UpdataHandPosition+9,f
  8053  0F48  3056               	movlw	low (_TblMaxSteps| (0+32768))
  8054  0F49  0735               	addwf	??_UpdataHandPosition+8,w
  8055  0F4A  0084               	movwf	4
  8056  0F4B  3098               	movlw	high (_TblMaxSteps| (0+32768))
  8057  0F4C  3D36               	addwfc	??_UpdataHandPosition+9,w
  8058  0F4D  0085               	movwf	5
  8059  0F4E  3F00               	moviw [0]fsr0
  8060  0F4F  00A8               	movwf	CorrectPosition@max
  8061  0F50  3F01               	moviw [1]fsr0
  8062  0F51  00A9               	movwf	CorrectPosition@max+1
  8063  0F52  3188  200B  318E   	fcall	_CorrectPosition
  8064                           
  8065                           ;MotorDrive.c: 2430:     }
  8066  0F55  3001               	movlw	1
  8067  0F56  00AD               	movwf	??_UpdataHandPosition
  8068  0F57  082D               	movf	??_UpdataHandPosition,w
  8069  0F58  07B7               	addwf	UpdataHandPosition@i,f
  8070  0F59  2EE6               	goto	l6268
  8071  0F5A                     __end_of_UpdataHandPosition:
  8072                           
  8073                           	psect	text36
  8074  12F5                     __ptext36:	
  8075 ;; *************** function _SetMotorBitMotorNo *****************
  8076 ;; Defined at:
  8077 ;;		line 2650 in file "MotorDrive.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  motor_no        1    wreg     unsigned char 
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  motor_no        1    2[BANK0 ] unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 1F/0
  8088 ;;		On exit  : 1F/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8091 ;;      Params:         0       0       0       0       0       0       0       0
  8092 ;;      Locals:         0       1       0       0       0       0       0       0
  8093 ;;      Temps:          0       2       0       0       0       0       0       0
  8094 ;;      Totals:         0       3       0       0       0       0       0       0
  8095 ;;Total ram usage:        3 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    8
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_AfterDetectedLoadPosition
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function _SetMotorBitMotorNo
  8107  12F5                     _SetMotorBitMotorNo:
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in _SetMotorBitMotorNo: [wreg+status,2+status,0]
  8111                           ;SetMotorBitMotorNo@motor_no stored from wreg
  8112  12F5  00A2               	movwf	SetMotorBitMotorNo@motor_no
  8113                           
  8114                           ;MotorDrive.c: 2650: void SetMotorBitMotorNo(UB motor_no);MotorDrive.c: 2651: {;MotorDri
      +                          ve.c: 2652:     motorNoOperation = motor_no;
  8115  12F6  0822               	movf	SetMotorBitMotorNo@motor_no,w
  8116  12F7  00A0               	movwf	??_SetMotorBitMotorNo
  8117  12F8  0820               	movf	??_SetMotorBitMotorNo,w
  8118  12F9  00EB               	movwf	_motorNoOperation
  8119                           
  8120                           ;MotorDrive.c: 2653:     motorBitOperation = (UB) (0x01 << motor_no);
  8121  12FA  3001               	movlw	1
  8122  12FB  00A0               	movwf	??_SetMotorBitMotorNo
  8123  12FC  0A22               	incf	SetMotorBitMotorNo@motor_no,w
  8124  12FD  2AFF               	goto	u4714
  8125  12FE                     u4715:
  8126  12FE  35A0               	lslf	??_SetMotorBitMotorNo,f
  8127  12FF                     u4714:
  8128  12FF  0B89               	decfsz	9,f
  8129  1300  2AFE               	goto	u4715
  8130  1301  0820               	movf	??_SetMotorBitMotorNo,w
  8131  1302  00A1               	movwf	??_SetMotorBitMotorNo+1
  8132  1303  0821               	movf	??_SetMotorBitMotorNo+1,w
  8133  1304  00F4               	movwf	_motorBitOperation
  8134  1305  0008               	return
  8135  1306                     __end_of_SetMotorBitMotorNo:
  8136                           
  8137                           	psect	text37
  8138  0C74                     __ptext37:	
  8139 ;; *************** function _SaveLoadPosition *****************
  8140 ;; Defined at:
  8141 ;;		line 2482 in file "MotorDrive.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;  motor_no        1    wreg     unsigned char 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  motor_no        1   22[BANK0 ] unsigned char 
  8146 ;;  i               1   23[BANK0 ] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 1F/0
  8153 ;;		On exit  : 1F/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8156 ;;      Params:         0       0       0       0       0       0       0       0
  8157 ;;      Locals:         0       2       0       0       0       0       0       0
  8158 ;;      Temps:          0      16       0       0       0       0       0       0
  8159 ;;      Totals:         0      18       0       0       0       0       0       0
  8160 ;;Total ram usage:       18 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    9
  8163 ;; This function calls:
  8164 ;;		___bmul
  8165 ;;		___wmul
  8166 ;; This function is called by:
  8167 ;;		_AfterDetectedLoadPosition
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           
  8172                           ;psect for function _SaveLoadPosition
  8173  0C74                     _SaveLoadPosition:
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _SaveLoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8177                           ;SaveLoadPosition@motor_no stored from wreg
  8178  0C74  00B6               	movwf	SaveLoadPosition@motor_no
  8179                           
  8180                           ;MotorDrive.c: 2482: void SaveLoadPosition(UB motor_no);MotorDrive.c: 2483: {;MotorDrive
      +                          .c: 2484:     UB i;;MotorDrive.c: 2486:     for (i = 0; i < ( ( ( 8 * 2 ) + ( 1 * 9 ) ) 
      +                          - 2 ); i++) {
  8181  0C75  01B7               	clrf	SaveLoadPosition@i
  8182  0C76                     l6276:
  8183                           
  8184                           ;MotorDrive.c: 2487:         loadPosition[ motor_no ][ i ] = detectLoadPosition[ motor_n
      +                          o ][ i ];
  8185  0C76  0837               	movf	SaveLoadPosition@i,w
  8186  0C77  00A6               	movwf	??_SaveLoadPosition
  8187  0C78  01A7               	clrf	??_SaveLoadPosition+1
  8188  0C79  35A6               	lslf	??_SaveLoadPosition,f
  8189  0C7A  0DA7               	rlf	??_SaveLoadPosition+1,f
  8190  0C7B  0836               	movf	SaveLoadPosition@motor_no,w
  8191  0C7C  00A8               	movwf	??_SaveLoadPosition+2
  8192  0C7D  01A9               	clrf	??_SaveLoadPosition+3
  8193  0C7E  0828               	movf	??_SaveLoadPosition+2,w
  8194  0C7F  00A0               	movwf	___wmul@multiplier
  8195  0C80  0829               	movf	??_SaveLoadPosition+3,w
  8196  0C81  00A1               	movwf	___wmul@multiplier+1
  8197  0C82  302E               	movlw	46
  8198  0C83  00A2               	movwf	___wmul@multiplicand
  8199  0C84  3000               	movlw	0
  8200  0C85  00A3               	movwf	___wmul@multiplicand+1
  8201  0C86  3195  2588  318C   	fcall	___wmul
  8202  0C89  3094               	movlw	148
  8203  0C8A  00AA               	movwf	??_SaveLoadPosition+4
  8204  0C8B  3021               	movlw	33
  8205  0C8C  00AB               	movwf	??_SaveLoadPosition+5
  8206  0C8D  0820               	movf	?___wmul,w
  8207  0C8E  072A               	addwf	??_SaveLoadPosition+4,w
  8208  0C8F  00AC               	movwf	??_SaveLoadPosition+6
  8209  0C90  0821               	movf	?___wmul+1,w
  8210  0C91  3D2B               	addwfc	??_SaveLoadPosition+5,w
  8211  0C92  00AD               	movwf	??_SaveLoadPosition+7
  8212  0C93  0826               	movf	??_SaveLoadPosition,w
  8213  0C94  072C               	addwf	??_SaveLoadPosition+6,w
  8214  0C95  0086               	movwf	6
  8215  0C96  0827               	movf	??_SaveLoadPosition+1,w
  8216  0C97  3D2D               	addwfc	??_SaveLoadPosition+7,w
  8217  0C98  0087               	movwf	7
  8218  0C99  0837               	movf	SaveLoadPosition@i,w
  8219  0C9A  00AE               	movwf	??_SaveLoadPosition+8
  8220  0C9B  01AF               	clrf	??_SaveLoadPosition+9
  8221  0C9C  35AE               	lslf	??_SaveLoadPosition+8,f
  8222  0C9D  0DAF               	rlf	??_SaveLoadPosition+9,f
  8223  0C9E  0836               	movf	SaveLoadPosition@motor_no,w
  8224  0C9F  00B0               	movwf	??_SaveLoadPosition+10
  8225  0CA0  01B1               	clrf	??_SaveLoadPosition+11
  8226  0CA1  0830               	movf	??_SaveLoadPosition+10,w
  8227  0CA2  00A0               	movwf	___wmul@multiplier
  8228  0CA3  0831               	movf	??_SaveLoadPosition+11,w
  8229  0CA4  00A1               	movwf	___wmul@multiplier+1
  8230  0CA5  302E               	movlw	46
  8231  0CA6  00A2               	movwf	___wmul@multiplicand
  8232  0CA7  3000               	movlw	0
  8233  0CA8  00A3               	movwf	___wmul@multiplicand+1
  8234  0CA9  3195  2588  318C   	fcall	___wmul
  8235  0CAC  3038               	movlw	56
  8236  0CAD  00B2               	movwf	??_SaveLoadPosition+12
  8237  0CAE  3021               	movlw	33
  8238  0CAF  00B3               	movwf	??_SaveLoadPosition+13
  8239  0CB0  0820               	movf	?___wmul,w
  8240  0CB1  0732               	addwf	??_SaveLoadPosition+12,w
  8241  0CB2  00B4               	movwf	??_SaveLoadPosition+14
  8242  0CB3  0821               	movf	?___wmul+1,w
  8243  0CB4  3D33               	addwfc	??_SaveLoadPosition+13,w
  8244  0CB5  00B5               	movwf	??_SaveLoadPosition+15
  8245  0CB6  082E               	movf	??_SaveLoadPosition+8,w
  8246  0CB7  0734               	addwf	??_SaveLoadPosition+14,w
  8247  0CB8  0084               	movwf	4
  8248  0CB9  082F               	movf	??_SaveLoadPosition+9,w
  8249  0CBA  3D35               	addwfc	??_SaveLoadPosition+15,w
  8250  0CBB  0085               	movwf	5
  8251  0CBC  3F40               	moviw [0]fsr1
  8252  0CBD  3F80               	movwi [0]fsr0
  8253  0CBE  3F41               	moviw [1]fsr1
  8254  0CBF  3F81               	movwi [1]fsr0
  8255                           
  8256                           ;MotorDrive.c: 2488:         loadPositionType[ motor_no ][ i ] = detectLoadPositionType[
      +                           motor_no ][ i ];
  8257  0CC0  3017               	movlw	23
  8258  0CC1  00A6               	movwf	??_SaveLoadPosition
  8259  0CC2  0826               	movf	??_SaveLoadPosition,w
  8260  0CC3  00A0               	movwf	___bmul@multiplicand
  8261  0CC4  0836               	movf	SaveLoadPosition@motor_no,w
  8262  0CC5  3192  22E4  318C   	fcall	___bmul
  8263  0CC8  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8264  0CC9  0737               	addwf	SaveLoadPosition@i,w
  8265  0CCA  00A7               	movwf	??_SaveLoadPosition+1
  8266  0CCB  0827               	movf	??_SaveLoadPosition+1,w
  8267  0CCC  0086               	movwf	6
  8268  0CCD  3001               	movlw	1	; select bank2/3
  8269  0CCE  0087               	movwf	7
  8270  0CCF  0801               	movf	1,w
  8271  0CD0  00A8               	movwf	??_SaveLoadPosition+2
  8272  0CD1  3017               	movlw	23
  8273  0CD2  00A9               	movwf	??_SaveLoadPosition+3
  8274  0CD3  0829               	movf	??_SaveLoadPosition+3,w
  8275  0CD4  00A0               	movwf	___bmul@multiplicand
  8276  0CD5  0836               	movf	SaveLoadPosition@motor_no,w
  8277  0CD6  3192  22E4  318C   	fcall	___bmul
  8278  0CD9  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  8279  0CDA  0737               	addwf	SaveLoadPosition@i,w
  8280  0CDB  00AA               	movwf	??_SaveLoadPosition+4
  8281  0CDC  082A               	movf	??_SaveLoadPosition+4,w
  8282  0CDD  0086               	movwf	6
  8283  0CDE  3001               	movlw	1	; select bank3/4
  8284  0CDF  0087               	movwf	7
  8285  0CE0  0828               	movf	??_SaveLoadPosition+2,w
  8286  0CE1  0081               	movwf	1
  8287                           
  8288                           ;MotorDrive.c: 2489:     }
  8289  0CE2  3001               	movlw	1
  8290  0CE3  00A6               	movwf	??_SaveLoadPosition
  8291  0CE4  0826               	movf	??_SaveLoadPosition,w
  8292  0CE5  07B7               	addwf	SaveLoadPosition@i,f
  8293  0CE6  3017               	movlw	23
  8294  0CE7  0237               	subwf	SaveLoadPosition@i,w
  8295  0CE8  1C03               	skipc
  8296  0CE9  2C76               	goto	l6276
  8297                           
  8298                           ;MotorDrive.c: 2491:     loadPositionIndex[ motor_no ] = detectLoadPositionIndex[ motor_
      +                          no ];
  8299  0CEA  0836               	movf	SaveLoadPosition@motor_no,w
  8300  0CEB  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  8301  0CEC  0086               	movwf	6
  8302  0CED  0187               	clrf	7
  8303  0CEE  0801               	movf	1,w
  8304  0CEF  00A6               	movwf	??_SaveLoadPosition
  8305  0CF0  0836               	movf	SaveLoadPosition@motor_no,w
  8306  0CF1  3EB6               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  8307  0CF2  0086               	movwf	6
  8308  0CF3  0187               	clrf	7
  8309  0CF4  0826               	movf	??_SaveLoadPosition,w
  8310  0CF5  0081               	movwf	1
  8311  0CF6  0008               	return
  8312  0CF7                     __end_of_SaveLoadPosition:
  8313                           
  8314                           	psect	text38
  8315  13DF                     __ptext38:	
  8316 ;; *************** function _MoveTargetPosition *****************
  8317 ;; Defined at:
  8318 ;;		line 2532 in file "MotorDrive.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  motor_no        1    wreg     unsigned char 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  motor_no        1   28[BANK0 ] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      void 
  8325 ;; Registers used:
  8326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8327 ;; Tracked objects:
  8328 ;;		On entry : 1F/0
  8329 ;;		On exit  : 1F/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8332 ;;      Params:         0       0       0       0       0       0       0       0
  8333 ;;      Locals:         0       1       0       0       0       0       0       0
  8334 ;;      Temps:          0       1       0       0       0       0       0       0
  8335 ;;      Totals:         0       2       0       0       0       0       0       0
  8336 ;;Total ram usage:        2 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:   11
  8339 ;; This function calls:
  8340 ;;		_CalcMotorStepCounter
  8341 ;;		_SetMotorFrequency
  8342 ;;		_SetMotorStart
  8343 ;; This function is called by:
  8344 ;;		_AfterDetectedLoadPosition
  8345 ;;		_VerifyHandPosition_LoadPosition
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _MoveTargetPosition
  8351  13DF                     _MoveTargetPosition:
  8352                           
  8353                           ;incstack = 0
  8354                           ; Regs used in _MoveTargetPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8355                           ;MoveTargetPosition@motor_no stored from wreg
  8356  13DF  00BC               	movwf	MoveTargetPosition@motor_no
  8357                           
  8358                           ;MotorDrive.c: 2532: void MoveTargetPosition(UB motor_no);MotorDrive.c: 2533: {;MotorDri
      +                          ve.c: 2535:     CalcMotorStepCounter(motor_no);
  8359  13E0  083C               	movf	MoveTargetPosition@motor_no,w
  8360  13E1  3185  25EB  3193   	fcall	_CalcMotorStepCounter
  8361                           
  8362                           ;MotorDrive.c: 2538:     SetMotorFrequency(motor_no, FREQ_SET_SELF_CONTROL_NORMAL, 41);
  8363  13E4  0020               	movlb	0	; select bank0
  8364  13E5  01A0               	clrf	SetMotorFrequency@type
  8365  13E6  3029               	movlw	41
  8366  13E7  00BB               	movwf	??_MoveTargetPosition
  8367  13E8  083B               	movf	??_MoveTargetPosition,w
  8368  13E9  00A1               	movwf	SetMotorFrequency@set_freq
  8369  13EA  083C               	movf	MoveTargetPosition@motor_no,w
  8370  13EB  3188  2045  3193   	fcall	_SetMotorFrequency
  8371                           
  8372                           ;MotorDrive.c: 2541:     SetMotorStart(motor_no);
  8373  13EE  083C               	movf	MoveTargetPosition@motor_no,w
  8374  13EF  3190  2091         	fcall	_SetMotorStart
  8375  13F1  0008               	return
  8376  13F2                     __end_of_MoveTargetPosition:
  8377                           
  8378                           	psect	text39
  8379  0F5A                     __ptext39:	
  8380 ;; *************** function _DetermineBasePosition *****************
  8381 ;; Defined at:
  8382 ;;		line 2367 in file "MotorDrive.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  motor_no        1    wreg     unsigned char 
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;  motor_no        1   24[BANK0 ] unsigned char 
  8387 ;;  load_pos_typ    2   21[BANK0 ] short 
  8388 ;;  base_pos_ind    1   23[BANK0 ] unsigned char 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;                  1    wreg      void 
  8391 ;; Registers used:
  8392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : 1F/0
  8395 ;;		On exit  : 1F/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8398 ;;      Params:         0       0       0       0       0       0       0       0
  8399 ;;      Locals:         0       4       0       0       0       0       0       0
  8400 ;;      Temps:          0       8       0       0       0       0       0       0
  8401 ;;      Totals:         0      12       0       0       0       0       0       0
  8402 ;;Total ram usage:       12 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    9
  8405 ;; This function calls:
  8406 ;;		_CorrectPosition
  8407 ;;		___bmul
  8408 ;;		___wmul
  8409 ;; This function is called by:
  8410 ;;		_AfterDetectedLoadPosition
  8411 ;; This function uses a non-reentrant model
  8412 ;;
  8413                           
  8414                           
  8415                           ;psect for function _DetermineBasePosition
  8416  0F5A                     _DetermineBasePosition:
  8417                           
  8418                           ;incstack = 0
  8419                           ; Regs used in _DetermineBasePosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8420                           ;DetermineBasePosition@motor_no stored from wreg
  8421  0F5A  00B8               	movwf	DetermineBasePosition@motor_no
  8422                           
  8423                           ;MotorDrive.c: 2367: void DetermineBasePosition(UB motor_no);MotorDrive.c: 2368: {;Motor
      +                          Drive.c: 2369:     UB base_pos_index;;MotorDrive.c: 2370:     H load_pos_type;;MotorDriv
      +                          e.c: 2372:     base_pos_index = 0;
  8424  0F5B  01B7               	clrf	DetermineBasePosition@base_pos_index
  8425  0F5C                     l6230:
  8426                           
  8427                           ;MotorDrive.c: 2377:         load_pos_type = detectLoadPositionType[ motor_no ][ base_po
      +                          s_index ];
  8428  0F5C  3017               	movlw	23
  8429  0F5D  00AD               	movwf	??_DetermineBasePosition
  8430  0F5E  082D               	movf	??_DetermineBasePosition,w
  8431  0F5F  00A0               	movwf	___bmul@multiplicand
  8432  0F60  0838               	movf	DetermineBasePosition@motor_no,w
  8433  0F61  3192  22E4  318F   	fcall	___bmul
  8434  0F64  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8435  0F65  0737               	addwf	DetermineBasePosition@base_pos_index,w
  8436  0F66  00AE               	movwf	??_DetermineBasePosition+1
  8437  0F67  082E               	movf	??_DetermineBasePosition+1,w
  8438  0F68  0086               	movwf	6
  8439  0F69  3001               	movlw	1	; select bank2/3
  8440  0F6A  0087               	movwf	7
  8441  0F6B  0801               	movf	1,w
  8442  0F6C  00AF               	movwf	??_DetermineBasePosition+2
  8443  0F6D  01B0               	clrf	??_DetermineBasePosition+3
  8444  0F6E  082F               	movf	??_DetermineBasePosition+2,w
  8445  0F6F  00B5               	movwf	DetermineBasePosition@load_pos_type
  8446  0F70  0830               	movf	??_DetermineBasePosition+3,w
  8447  0F71  00B6               	movwf	DetermineBasePosition@load_pos_type+1
  8448                           
  8449                           ;MotorDrive.c: 2378:         base_pos_index++;
  8450  0F72  3001               	movlw	1
  8451  0F73  00AD               	movwf	??_DetermineBasePosition
  8452  0F74  082D               	movf	??_DetermineBasePosition,w
  8453  0F75  07B7               	addwf	DetermineBasePosition@base_pos_index,f
  8454                           
  8455                           ;MotorDrive.c: 2380:         if (ID_DETECT_LOAD_ROUGH == load_pos_type) {
  8456  0F76  3002               	movlw	2
  8457  0F77  0635               	xorwf	DetermineBasePosition@load_pos_type,w
  8458  0F78  0436               	iorwf	DetermineBasePosition@load_pos_type+1,w
  8459  0F79  1D03               	btfss	3,2
  8460  0F7A  2F5C               	goto	l6230
  8461  0F7B                     l6238:
  8462                           
  8463                           ;MotorDrive.c: 2389:         load_pos_type = detectLoadPositionType[ motor_no ][ base_po
      +                          s_index ];
  8464  0F7B  3017               	movlw	23
  8465  0F7C  00AD               	movwf	??_DetermineBasePosition
  8466  0F7D  082D               	movf	??_DetermineBasePosition,w
  8467  0F7E  00A0               	movwf	___bmul@multiplicand
  8468  0F7F  0838               	movf	DetermineBasePosition@motor_no,w
  8469  0F80  3192  22E4  318F   	fcall	___bmul
  8470  0F83  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8471  0F84  0737               	addwf	DetermineBasePosition@base_pos_index,w
  8472  0F85  00AE               	movwf	??_DetermineBasePosition+1
  8473  0F86  082E               	movf	??_DetermineBasePosition+1,w
  8474  0F87  0086               	movwf	6
  8475  0F88  3001               	movlw	1	; select bank2/3
  8476  0F89  0087               	movwf	7
  8477  0F8A  0801               	movf	1,w
  8478  0F8B  00AF               	movwf	??_DetermineBasePosition+2
  8479  0F8C  01B0               	clrf	??_DetermineBasePosition+3
  8480  0F8D  082F               	movf	??_DetermineBasePosition+2,w
  8481  0F8E  00B5               	movwf	DetermineBasePosition@load_pos_type
  8482  0F8F  0830               	movf	??_DetermineBasePosition+3,w
  8483  0F90  00B6               	movwf	DetermineBasePosition@load_pos_type+1
  8484                           
  8485                           ;MotorDrive.c: 2391:         if (ID_DETECT_LOAD_FINE == load_pos_type) {
  8486  0F91  0335               	decf	DetermineBasePosition@load_pos_type,w
  8487  0F92  0436               	iorwf	DetermineBasePosition@load_pos_type+1,w
  8488  0F93  1903               	btfsc	3,2
  8489  0F94  2FA3               	goto	l6250
  8490                           
  8491                           ;MotorDrive.c: 2396:         base_pos_index++;
  8492  0F95  3001               	movlw	1
  8493  0F96  00AD               	movwf	??_DetermineBasePosition
  8494  0F97  082D               	movf	??_DetermineBasePosition,w
  8495  0F98  07B7               	addwf	DetermineBasePosition@base_pos_index,f
  8496                           
  8497                           ;MotorDrive.c: 2397:         if (base_pos_index > detectLoadPositionIndex[ motor_no ]) {
  8498  0F99  0838               	movf	DetermineBasePosition@motor_no,w
  8499  0F9A  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  8500  0F9B  0086               	movwf	6
  8501  0F9C  0187               	clrf	7
  8502  0F9D  0837               	movf	DetermineBasePosition@base_pos_index,w
  8503  0F9E  0201               	subwf	1,w
  8504  0F9F  1803               	skipnc
  8505  0FA0  2F7B               	goto	l6238
  8506                           
  8507                           ;MotorDrive.c: 2398:             base_pos_index = 0;
  8508  0FA1  01B7               	clrf	DetermineBasePosition@base_pos_index
  8509  0FA2  2F7B               	goto	l6238
  8510  0FA3                     l6250:
  8511                           
  8512                           ;MotorDrive.c: 2402:     detectBasePosition[ motor_no ] = detectLoadPosition[ motor_no ]
      +                          [ base_pos_index ];
  8513  0FA3  0837               	movf	DetermineBasePosition@base_pos_index,w
  8514  0FA4  00AD               	movwf	??_DetermineBasePosition
  8515  0FA5  01AE               	clrf	??_DetermineBasePosition+1
  8516  0FA6  35AD               	lslf	??_DetermineBasePosition,f
  8517  0FA7  0DAE               	rlf	??_DetermineBasePosition+1,f
  8518  0FA8  0838               	movf	DetermineBasePosition@motor_no,w
  8519  0FA9  00AF               	movwf	??_DetermineBasePosition+2
  8520  0FAA  01B0               	clrf	??_DetermineBasePosition+3
  8521  0FAB  082F               	movf	??_DetermineBasePosition+2,w
  8522  0FAC  00A0               	movwf	___wmul@multiplier
  8523  0FAD  0830               	movf	??_DetermineBasePosition+3,w
  8524  0FAE  00A1               	movwf	___wmul@multiplier+1
  8525  0FAF  302E               	movlw	46
  8526  0FB0  00A2               	movwf	___wmul@multiplicand
  8527  0FB1  3000               	movlw	0
  8528  0FB2  00A3               	movwf	___wmul@multiplicand+1
  8529  0FB3  3195  2588  318F   	fcall	___wmul
  8530  0FB6  3094               	movlw	148
  8531  0FB7  00B1               	movwf	??_DetermineBasePosition+4
  8532  0FB8  3021               	movlw	33
  8533  0FB9  00B2               	movwf	??_DetermineBasePosition+5
  8534  0FBA  0820               	movf	?___wmul,w
  8535  0FBB  0731               	addwf	??_DetermineBasePosition+4,w
  8536  0FBC  00B3               	movwf	??_DetermineBasePosition+6
  8537  0FBD  0821               	movf	?___wmul+1,w
  8538  0FBE  3D32               	addwfc	??_DetermineBasePosition+5,w
  8539  0FBF  00B4               	movwf	??_DetermineBasePosition+7
  8540  0FC0  082D               	movf	??_DetermineBasePosition,w
  8541  0FC1  0733               	addwf	??_DetermineBasePosition+6,w
  8542  0FC2  0086               	movwf	6
  8543  0FC3  082E               	movf	??_DetermineBasePosition+1,w
  8544  0FC4  3D34               	addwfc	??_DetermineBasePosition+7,w
  8545  0FC5  0087               	movwf	7
  8546  0FC6  3538               	lslf	DetermineBasePosition@motor_no,w
  8547  0FC7  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8548  0FC8  0084               	movwf	4
  8549  0FC9  3001               	movlw	1	; select bank2/3
  8550  0FCA  0085               	movwf	5
  8551  0FCB  3F40               	moviw [0]fsr1
  8552  0FCC  3F80               	movwi [0]fsr0
  8553  0FCD  3F41               	moviw [1]fsr1
  8554  0FCE  3F81               	movwi [1]fsr0
  8555                           
  8556                           ;MotorDrive.c: 2403:     detectBasePosition[ motor_no ] += offsetBasePosition[ motor_no 
      +                          ];
  8557  0FCF  0838               	movf	DetermineBasePosition@motor_no,w
  8558  0FD0  00AD               	movwf	??_DetermineBasePosition
  8559  0FD1  01AE               	clrf	??_DetermineBasePosition+1
  8560  0FD2  35AD               	lslf	??_DetermineBasePosition,f
  8561  0FD3  0DAE               	rlf	??_DetermineBasePosition+1,f
  8562  0FD4  304E               	movlw	low (_offsetBasePosition| (0+32768))
  8563  0FD5  072D               	addwf	??_DetermineBasePosition,w
  8564  0FD6  0084               	movwf	4
  8565  0FD7  3098               	movlw	high (_offsetBasePosition| (0+32768))
  8566  0FD8  3D2E               	addwfc	??_DetermineBasePosition+1,w
  8567  0FD9  0085               	movwf	5
  8568  0FDA  3F00               	moviw [0]fsr0
  8569  0FDB  00AF               	movwf	??_DetermineBasePosition+2
  8570  0FDC  3F01               	moviw [1]fsr0
  8571  0FDD  00B0               	movwf	??_DetermineBasePosition+3
  8572  0FDE  3538               	lslf	DetermineBasePosition@motor_no,w
  8573  0FDF  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8574  0FE0  0086               	movwf	6
  8575  0FE1  3001               	movlw	1	; select bank2/3
  8576  0FE2  0087               	movwf	7
  8577  0FE3  082F               	movf	??_DetermineBasePosition+2,w
  8578  0FE4  0781               	addwf	1,f
  8579  0FE5  3141               	addfsr 1,1
  8580  0FE6  0830               	movf	??_DetermineBasePosition+3,w
  8581  0FE7  3D81               	addwfc	1,f
  8582  0FE8  317F               	addfsr 1,-1
  8583                           
  8584                           ;MotorDrive.c: 2405:     CorrectPosition(&detectBasePosition[ motor_no ], TblMaxSteps[ m
      +                          otor_no ]);
  8585  0FE9  3538               	lslf	DetermineBasePosition@motor_no,w
  8586  0FEA  3E60               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8587  0FEB  00A6               	movwf	CorrectPosition@pos
  8588  0FEC  3001               	movlw	1
  8589  0FED  00A7               	movwf	CorrectPosition@pos+1
  8590  0FEE  0838               	movf	DetermineBasePosition@motor_no,w
  8591  0FEF  00AD               	movwf	??_DetermineBasePosition
  8592  0FF0  01AE               	clrf	??_DetermineBasePosition+1
  8593  0FF1  35AD               	lslf	??_DetermineBasePosition,f
  8594  0FF2  0DAE               	rlf	??_DetermineBasePosition+1,f
  8595  0FF3  3056               	movlw	low (_TblMaxSteps| (0+32768))
  8596  0FF4  072D               	addwf	??_DetermineBasePosition,w
  8597  0FF5  0084               	movwf	4
  8598  0FF6  3098               	movlw	high (_TblMaxSteps| (0+32768))
  8599  0FF7  3D2E               	addwfc	??_DetermineBasePosition+1,w
  8600  0FF8  0085               	movwf	5
  8601  0FF9  3F00               	moviw [0]fsr0
  8602  0FFA  00A8               	movwf	CorrectPosition@max
  8603  0FFB  3F01               	moviw [1]fsr0
  8604  0FFC  00A9               	movwf	CorrectPosition@max+1
  8605  0FFD  3188  200B         	fcall	_CorrectPosition
  8606  0FFF  0008               	return
  8607  1000                     __end_of_DetermineBasePosition:
  8608                           
  8609                           	psect	text40
  8610  1396                     __ptext40:	
  8611 ;; *************** function _ActivateHandPosition *****************
  8612 ;; Defined at:
  8613 ;;		line 2502 in file "MotorDrive.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;  motor_no        1    wreg     unsigned char 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  motor_no        1    2[BANK0 ] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0
  8622 ;; Tracked objects:
  8623 ;;		On entry : 1F/0
  8624 ;;		On exit  : 1F/1
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8627 ;;      Params:         0       0       0       0       0       0       0       0
  8628 ;;      Locals:         0       1       0       0       0       0       0       0
  8629 ;;      Temps:          0       2       0       0       0       0       0       0
  8630 ;;      Totals:         0       3       0       0       0       0       0       0
  8631 ;;Total ram usage:        3 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    8
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		_AfterDetectedLoadPosition
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function _ActivateHandPosition
  8643  1396                     _ActivateHandPosition:
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in _ActivateHandPosition: [wreg+status,2+status,0]
  8647                           ;ActivateHandPosition@motor_no stored from wreg
  8648  1396  00A2               	movwf	ActivateHandPosition@motor_no
  8649                           
  8650                           ;MotorDrive.c: 2502: void ActivateHandPosition(UB motor_no);MotorDrive.c: 2503: {;MotorD
      +                          rive.c: 2504:     motorBitOperation = (UB) (0x01 << motor_no);
  8651  1397  3001               	movlw	1
  8652  1398  00A0               	movwf	??_ActivateHandPosition
  8653  1399  0A22               	incf	ActivateHandPosition@motor_no,w
  8654  139A  2B9C               	goto	u4774
  8655  139B                     u4775:
  8656  139B  35A0               	lslf	??_ActivateHandPosition,f
  8657  139C                     u4774:
  8658  139C  0B89               	decfsz	9,f
  8659  139D  2B9B               	goto	u4775
  8660  139E  0820               	movf	??_ActivateHandPosition,w
  8661  139F  00A1               	movwf	??_ActivateHandPosition+1
  8662  13A0  0821               	movf	??_ActivateHandPosition+1,w
  8663  13A1  00F4               	movwf	_motorBitOperation
  8664                           
  8665                           ;MotorDrive.c: 2506:     handPositionActiveBit |= motorBitOperation;
  8666  13A2  0874               	movf	_motorBitOperation,w
  8667  13A3  00A0               	movwf	??_ActivateHandPosition
  8668  13A4  0820               	movf	??_ActivateHandPosition,w
  8669  13A5  0021               	movlb	1	; select bank1
  8670  13A6  04D1               	iorwf	_handPositionActiveBit^(0+128),f
  8671  13A7  0008               	return
  8672  13A8                     __end_of_ActivateHandPosition:
  8673                           
  8674                           	psect	text41
  8675  105A                     __ptext41:	
  8676 ;; *************** function _SPI_ReadByte *****************
  8677 ;; Defined at:
  8678 ;;		line 136 in file "mcc_generated_files/spi.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;		None
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      unsigned char 
  8685 ;; Registers used:
  8686 ;;		wreg
  8687 ;; Tracked objects:
  8688 ;;		On entry : 1F/0
  8689 ;;		On exit  : 1F/4
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8692 ;;      Params:         0       0       0       0       0       0       0       0
  8693 ;;      Locals:         0       0       0       0       0       0       0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0
  8695 ;;      Totals:         0       0       0       0       0       0       0       0
  8696 ;;Total ram usage:        0 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    8
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_SPIControl_RecieveComannd
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           
  8707                           ;psect for function _SPI_ReadByte
  8708  105A                     _SPI_ReadByte:
  8709                           
  8710                           ;mcc_generated_files/spi.c: 138:     return SSP1BUF;
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _SPI_ReadByte: [wreg]
  8714  105A  0024               	movlb	4	; select bank4
  8715  105B  0811               	movf	17,w	;volatile
  8716  105C  0008               	return
  8717  105D                     __end_of_SPI_ReadByte:
  8718                           
  8719                           	psect	text42
  8720  0B88                     __ptext42:	
  8721 ;; *************** function _SPIControl_ExecuteCommand *****************
  8722 ;; Defined at:
  8723 ;;		line 196 in file "spi_control.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;		None
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  motor_select    1   36[BANK0 ] unsigned char 
  8728 ;;  cmd_type        1   35[BANK0 ] unsigned char 
  8729 ;; Return value:  Size  Location     Type
  8730 ;;                  1    wreg      void 
  8731 ;; Registers used:
  8732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8733 ;; Tracked objects:
  8734 ;;		On entry : 1F/1
  8735 ;;		On exit  : 1C/0
  8736 ;;		Unchanged: 0/0
  8737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8738 ;;      Params:         0       0       0       0       0       0       0       0
  8739 ;;      Locals:         0       2       0       0       0       0       0       0
  8740 ;;      Temps:          0       3       0       0       0       0       0       0
  8741 ;;      Totals:         0       5       0       0       0       0       0       0
  8742 ;;Total ram usage:        5 bytes
  8743 ;; Hardware stack levels used:    1
  8744 ;; Hardware stack levels required when called:   13
  8745 ;; This function calls:
  8746 ;;		_GetIsMotorActive
  8747 ;;		_SetAfterMotorStopFunc
  8748 ;;		_SpiCmdFunc_DisableExcitating
  8749 ;;		_SpiCmdFunc_EnableExcitating
  8750 ;;		_SpiCmdFunc_FwdPulseNormal
  8751 ;;		_SpiCmdFunc_FwdPulsePositionCtl
  8752 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  8753 ;;		_SpiCmdFunc_FwdPulseWithShake
  8754 ;;		_SpiCmdFunc_RevPulseNormal
  8755 ;;		_SpiCmdFunc_RevPulsePositionCtl
  8756 ;;		_SpiCmdFunc_Search1008Position
  8757 ;;		_SpiCmdFunc_SearchBasePosition
  8758 ;;		_SpiCmdFunc_SearchLoadPosition
  8759 ;;		_SpiCmdFunc_StartDetectVrs
  8760 ;;		_SpiCmdFunc_StopDetectVrs
  8761 ;;		_SpiCmdFunc_Test
  8762 ;; This function is called by:
  8763 ;;		_SPIControl_RecieveComannd
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           
  8768                           ;psect for function _SPIControl_ExecuteCommand
  8769  0B88                     _SPIControl_ExecuteCommand:
  8770                           
  8771                           ;spi_control.c: 198:     UB motor_select;;spi_control.c: 199:     UB cmd_type;;spi_contr
      +                          ol.c: 201:     motor_select = recieveCommand;
  8772                           
  8773                           ;incstack = 0
  8774                           ; Regs used in _SPIControl_ExecuteCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8775  0B88  084C               	movf	_recieveCommand^(0+128),w
  8776  0B89  0020               	movlb	0	; select bank0
  8777  0B8A  00C0               	movwf	??_SPIControl_ExecuteCommand
  8778  0B8B  0840               	movf	??_SPIControl_ExecuteCommand,w
  8779  0B8C  00C4               	movwf	SPIControl_ExecuteCommand@motor_select
  8780                           
  8781                           ;spi_control.c: 202:     motor_select &= 0xF0;
  8782  0B8D  30F0               	movlw	240
  8783  0B8E  00C0               	movwf	??_SPIControl_ExecuteCommand
  8784  0B8F  0840               	movf	??_SPIControl_ExecuteCommand,w
  8785  0B90  05C4               	andwf	SPIControl_ExecuteCommand@motor_select,f
  8786                           
  8787                           ;spi_control.c: 204:     cmd_type = recieveCommand;
  8788  0B91  0021               	movlb	1	; select bank1
  8789  0B92  084C               	movf	_recieveCommand^(0+128),w
  8790  0B93  0020               	movlb	0	; select bank0
  8791  0B94  00C0               	movwf	??_SPIControl_ExecuteCommand
  8792  0B95  0840               	movf	??_SPIControl_ExecuteCommand,w
  8793  0B96  00C3               	movwf	SPIControl_ExecuteCommand@cmd_type
  8794                           
  8795                           ;spi_control.c: 205:     cmd_type &= 0x0F;
  8796  0B97  300F               	movlw	15
  8797  0B98  00C0               	movwf	??_SPIControl_ExecuteCommand
  8798  0B99  0840               	movf	??_SPIControl_ExecuteCommand,w
  8799  0B9A  05C3               	andwf	SPIControl_ExecuteCommand@cmd_type,f
  8800                           
  8801                           ;spi_control.c: 207:     if ( ID_CMD_M0 == motor_select ) {
  8802  0B9B  30B0               	movlw	176
  8803  0B9C  0644               	xorwf	SPIControl_ExecuteCommand@motor_select,w
  8804  0B9D  1D03               	btfss	3,2
  8805  0B9E  2BA1               	goto	l6798
  8806                           
  8807                           ;spi_control.c: 208:         motor_select = 0;
  8808  0B9F  01C4               	clrf	SPIControl_ExecuteCommand@motor_select
  8809                           
  8810                           ;spi_control.c: 209:     } else if ( ID_CMD_M1 == motor_select ) {
  8811  0BA0  2BAC               	goto	l1326
  8812  0BA1                     l6798:
  8813  0BA1  30C0               	movlw	192
  8814  0BA2  0644               	xorwf	SPIControl_ExecuteCommand@motor_select,w
  8815  0BA3  1D03               	btfss	3,2
  8816  0BA4  2BA8               	goto	l6802
  8817                           
  8818                           ;spi_control.c: 210:         motor_select = 1;
  8819  0BA5  01C4               	clrf	SPIControl_ExecuteCommand@motor_select
  8820  0BA6  0AC4               	incf	SPIControl_ExecuteCommand@motor_select,f
  8821                           
  8822                           ;spi_control.c: 211:     } else {
  8823  0BA7  2BAC               	goto	l1326
  8824  0BA8                     l6802:
  8825                           
  8826                           ;spi_control.c: 212:         motor_select = 0xFF;
  8827  0BA8  30FF               	movlw	255
  8828  0BA9  00C0               	movwf	??_SPIControl_ExecuteCommand
  8829  0BAA  0840               	movf	??_SPIControl_ExecuteCommand,w
  8830  0BAB  00C4               	movwf	SPIControl_ExecuteCommand@motor_select
  8831  0BAC                     l1326:
  8832                           
  8833                           ;spi_control.c: 215:  if ( ( ID_CMD_TYPE_MAX > cmd_type ) && ( 0xFF != motor_select ) ) 
      +                          {
  8834  0BAC  300E               	movlw	14
  8835  0BAD  0243               	subwf	SPIControl_ExecuteCommand@cmd_type,w
  8836  0BAE  1803               	skipnc
  8837  0BAF  0008               	return
  8838  0BB0  0A44               	incf	SPIControl_ExecuteCommand@motor_select,w
  8839  0BB1  1903               	btfsc	3,2
  8840  0BB2  0008               	return
  8841                           
  8842                           ;spi_control.c: 216:   if ( ID_CMD_FWD_WITH_CORRECT == cmd_type ) {
  8843  0BB3  3006               	movlw	6
  8844  0BB4  0643               	xorwf	SPIControl_ExecuteCommand@cmd_type,w
  8845  0BB5  1D03               	btfss	3,2
  8846  0BB6  2BCC               	goto	l6810
  8847                           
  8848                           ;spi_control.c: 218:        SpiCmmandFunction[ cmd_type ]( motor_select );
  8849  0BB7  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8850  0BB8  00C0               	movwf	??_SPIControl_ExecuteCommand
  8851  0BB9  0840               	movf	??_SPIControl_ExecuteCommand,w
  8852  0BBA  00BD               	movwf	SpiCmdFunc_Search1008Position@motor_no
  8853  0BBB  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8854  0BBC  00C1               	movwf	??_SPIControl_ExecuteCommand+1
  8855  0BBD  01C2               	clrf	??_SPIControl_ExecuteCommand+2
  8856  0BBE  35C1               	lslf	??_SPIControl_ExecuteCommand+1,f
  8857  0BBF  0DC2               	rlf	??_SPIControl_ExecuteCommand+2,f
  8858  0BC0  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8859  0BC1  0741               	addwf	??_SPIControl_ExecuteCommand+1,w
  8860  0BC2  0084               	movwf	4
  8861  0BC3  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8862  0BC4  3D42               	addwfc	??_SPIControl_ExecuteCommand+2,w
  8863  0BC5  0085               	movwf	5
  8864  0BC6  3F01               	moviw [1]fsr0
  8865  0BC7  008A               	movwf	10
  8866  0BC8  3F00               	moviw [0]fsr0
  8867  0BC9  000A               	callw
  8868  0BCA  318B               	pagesel	$
  8869                           
  8870                           ;spi_control.c: 219:   } else {
  8871  0BCB  0008               	return
  8872  0BCC                     l6810:
  8873                           
  8874                           ;spi_control.c: 221:    if ( GetIsMotorActive( motor_select ) ) {
  8875  0BCC  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8876  0BCD  3193  23F2  318B   	fcall	_GetIsMotorActive
  8877  0BD0  3A00               	xorlw	0
  8878  0BD1  1903               	skipnz
  8879  0BD2  2BE6               	goto	l6814
  8880                           
  8881                           ;spi_control.c: 223:        SetAfterMotorStopFunc( motor_select, SpiCmmandFunction[ cmd_
      +                          type ] );
  8882  0BD3  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8883  0BD4  00C0               	movwf	??_SPIControl_ExecuteCommand
  8884  0BD5  01C1               	clrf	??_SPIControl_ExecuteCommand+1
  8885  0BD6  35C0               	lslf	??_SPIControl_ExecuteCommand,f
  8886  0BD7  0DC1               	rlf	??_SPIControl_ExecuteCommand+1,f
  8887  0BD8  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8888  0BD9  0740               	addwf	??_SPIControl_ExecuteCommand,w
  8889  0BDA  0084               	movwf	4
  8890  0BDB  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8891  0BDC  3D41               	addwfc	??_SPIControl_ExecuteCommand+1,w
  8892  0BDD  0085               	movwf	5
  8893  0BDE  3F00               	moviw [0]fsr0
  8894  0BDF  00A0               	movwf	SetAfterMotorStopFunc@func
  8895  0BE0  3F01               	moviw [1]fsr0
  8896  0BE1  00A1               	movwf	SetAfterMotorStopFunc@func+1
  8897  0BE2  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8898  0BE3  3190  209B         	fcall	_SetAfterMotorStopFunc
  8899                           
  8900                           ;spi_control.c: 224:    } else {
  8901  0BE5  0008               	return
  8902  0BE6                     l6814:
  8903                           
  8904                           ;spi_control.c: 226:        SpiCmmandFunction[ cmd_type ]( motor_select );
  8905  0BE6  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8906  0BE7  00C0               	movwf	??_SPIControl_ExecuteCommand
  8907  0BE8  0840               	movf	??_SPIControl_ExecuteCommand,w
  8908  0BE9  00BD               	movwf	SpiCmdFunc_Search1008Position@motor_no
  8909  0BEA  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8910  0BEB  00C1               	movwf	??_SPIControl_ExecuteCommand+1
  8911  0BEC  01C2               	clrf	??_SPIControl_ExecuteCommand+2
  8912  0BED  35C1               	lslf	??_SPIControl_ExecuteCommand+1,f
  8913  0BEE  0DC2               	rlf	??_SPIControl_ExecuteCommand+2,f
  8914  0BEF  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8915  0BF0  0741               	addwf	??_SPIControl_ExecuteCommand+1,w
  8916  0BF1  0084               	movwf	4
  8917  0BF2  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8918  0BF3  3D42               	addwfc	??_SPIControl_ExecuteCommand+2,w
  8919  0BF4  0085               	movwf	5
  8920  0BF5  3F01               	moviw [1]fsr0
  8921  0BF6  008A               	movwf	10
  8922  0BF7  3F00               	moviw [0]fsr0
  8923  0BF8  000A               	callw
  8924  0BF9  318B               	pagesel	$
  8925  0BFA  0008               	return
  8926  0BFB                     __end_of_SPIControl_ExecuteCommand:
  8927                           
  8928                           	psect	text43
  8929  14D8                     __ptext43:	
  8930 ;; *************** function _SetMotorStopSPK *****************
  8931 ;; Defined at:
  8932 ;;		line 1469 in file "MotorDrive.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;		None
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;		None
  8937 ;; Return value:  Size  Location     Type
  8938 ;;                  1    wreg      void 
  8939 ;; Registers used:
  8940 ;;		wreg, status,2, status,0, pclath, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 1D/2
  8943 ;;		On exit  : 1F/2
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8946 ;;      Params:         0       0       0       0       0       0       0       0
  8947 ;;      Locals:         0       0       0       0       0       0       0       0
  8948 ;;      Temps:          0       0       0       0       0       0       0       0
  8949 ;;      Totals:         0       0       0       0       0       0       0       0
  8950 ;;Total ram usage:        0 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:   10
  8953 ;; This function calls:
  8954 ;;		_SetExcitatingOutOffData
  8955 ;;		_SpkComparatorOff
  8956 ;;		_TMR2_SetInterruptHandler
  8957 ;;		_TMR2_StopTimer
  8958 ;; This function is called by:
  8959 ;;		_SpiCmdFunc_StopDetectVrs
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function _SetMotorStopSPK
  8965  14D8                     _SetMotorStopSPK:
  8966                           
  8967                           ;MotorDrive.c: 1472:     TMR2_StopTimer();
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _SetMotorStopSPK: [wreg+status,2+status,0+pclath+cstack]
  8971  14D8  3190  2057  3194   	fcall	_TMR2_StopTimer
  8972                           
  8973                           ;MotorDrive.c: 1474:     PIR1bits.TMR2IF = 0;
  8974  14DB  1091               	bcf	17,1	;volatile
  8975                           
  8976                           ;MotorDrive.c: 1476:     SpkComparatorOff();
  8977  14DC  3191  210F  3194   	fcall	_SpkComparatorOff
  8978                           
  8979                           ;MotorDrive.c: 1477:     excitatingTime = 0;
  8980  14DF  0021               	movlb	1	; select bank1
  8981  14E0  01C4               	clrf	_excitatingTime^(0+128)
  8982  14E1  01C5               	clrf	(_excitatingTime+1)^(0+128)
  8983                           
  8984                           ;MotorDrive.c: 1478:     excitatingOffMaskTime = 0;
  8985  14E2  01E2               	clrf	_excitatingOffMaskTime^(0+128)
  8986                           
  8987                           ;MotorDrive.c: 1480:     spkStopStatus = 0;
  8988  14E3  01DB               	clrf	_spkStopStatus^(0+128)
  8989                           
  8990                           ;MotorDrive.c: 1481:     excitatingStatusOn = 0;
  8991  14E4  01DA               	clrf	_excitatingStatusOn^(0+128)
  8992                           
  8993                           ;MotorDrive.c: 1483:     SetExcitatingOutOffData();
  8994  14E5  3195  25DB  3194   	fcall	_SetExcitatingOutOffData
  8995                           
  8996                           ;MotorDrive.c: 1486:     TMR2_SetInterruptHandler(TMR2_Interrupt);
  8997  14E8  30FA               	movlw	low _TMR2_Interrupt
  8998  14E9  0020               	movlb	0	; select bank0
  8999  14EA  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9000  14EB  3003               	movlw	high _TMR2_Interrupt
  9001  14EC  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9002  14ED  3190  2081         	fcall	_TMR2_SetInterruptHandler
  9003  14EF  0008               	return
  9004  14F0                     __end_of_SetMotorStopSPK:
  9005                           
  9006                           	psect	text44
  9007  1057                     __ptext44:	
  9008 ;; *************** function _TMR2_StopTimer *****************
  9009 ;; Defined at:
  9010 ;;		line 93 in file "mcc_generated_files/tmr2.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;		None
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		None
  9019 ;; Tracked objects:
  9020 ;;		On entry : 1D/2
  9021 ;;		On exit  : 1F/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9024 ;;      Params:         0       0       0       0       0       0       0       0
  9025 ;;      Locals:         0       0       0       0       0       0       0       0
  9026 ;;      Temps:          0       0       0       0       0       0       0       0
  9027 ;;      Totals:         0       0       0       0       0       0       0       0
  9028 ;;Total ram usage:        0 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    8
  9031 ;; This function calls:
  9032 ;;		Nothing
  9033 ;; This function is called by:
  9034 ;;		_SetMotorStopSPK
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           
  9039                           ;psect for function _TMR2_StopTimer
  9040  1057                     _TMR2_StopTimer:
  9041                           
  9042                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
  9043                           
  9044                           ;incstack = 0
  9045                           ; Regs used in _TMR2_StopTimer: []
  9046  1057  0020               	movlb	0	; select bank0
  9047  1058  111C               	bcf	28,2	;volatile
  9048  1059  0008               	return
  9049  105A                     __end_of_TMR2_StopTimer:
  9050                           
  9051                           	psect	text45
  9052  110F                     __ptext45:	
  9053 ;; *************** function _SpkComparatorOff *****************
  9054 ;; Defined at:
  9055 ;;		line 2740 in file "MotorDrive.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;		None
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;		None
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  1    wreg      void 
  9062 ;; Registers used:
  9063 ;;		wreg
  9064 ;; Tracked objects:
  9065 ;;		On entry : 1F/0
  9066 ;;		On exit  : 1F/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9069 ;;      Params:         0       0       0       0       0       0       0       0
  9070 ;;      Locals:         0       0       0       0       0       0       0       0
  9071 ;;      Temps:          0       0       0       0       0       0       0       0
  9072 ;;      Totals:         0       0       0       0       0       0       0       0
  9073 ;;Total ram usage:        0 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    8
  9076 ;; This function calls:
  9077 ;;		Nothing
  9078 ;; This function is called by:
  9079 ;;		_SetMotorStopSPK
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           
  9084                           ;psect for function _SpkComparatorOff
  9085  110F                     _SpkComparatorOff:
  9086                           
  9087                           ;MotorDrive.c: 2742:     CM1CON0 = 0x14;
  9088                           
  9089                           ;incstack = 0
  9090                           ; Regs used in _SpkComparatorOff: [wreg]
  9091  110F  3014               	movlw	20
  9092  1110  0022               	movlb	2	; select bank2
  9093  1111  0091               	movwf	17	;volatile
  9094                           
  9095                           ;MotorDrive.c: 2743:     CM1CON1 = 0x90;
  9096  1112  3090               	movlw	144
  9097  1113  0092               	movwf	18	;volatile
  9098                           
  9099                           ;MotorDrive.c: 2745:     CM2CON0 = 0x14;
  9100  1114  3014               	movlw	20
  9101  1115  0093               	movwf	19	;volatile
  9102                           
  9103                           ;MotorDrive.c: 2746:     CM2CON1 = 0x90;
  9104  1116  3090               	movlw	144
  9105  1117  0094               	movwf	20	;volatile
  9106                           
  9107                           ;MotorDrive.c: 2748:     PIR2bits.C1IF = 0;
  9108  1118  0020               	movlb	0	; select bank0
  9109  1119  1292               	bcf	18,5	;volatile
  9110                           
  9111                           ;MotorDrive.c: 2749:     PIR2bits.C2IF = 0;
  9112  111A  1312               	bcf	18,6	;volatile
  9113  111B  0008               	return
  9114  111C                     __end_of_SpkComparatorOff:
  9115                           
  9116                           	psect	text46
  9117  179C                     __ptext46:	
  9118 ;; *************** function _SetMotorStartSPK *****************
  9119 ;; Defined at:
  9120 ;;		line 1423 in file "MotorDrive.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;		None
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;		None
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  1    wreg      void 
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, status,0, pclath, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 1D/2
  9131 ;;		On exit  : 1D/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9134 ;;      Params:         0       0       0       0       0       0       0       0
  9135 ;;      Locals:         0       0       0       0       0       0       0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0       0
  9137 ;;      Totals:         0       0       0       0       0       0       0       0
  9138 ;;Total ram usage:        0 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:   10
  9141 ;; This function calls:
  9142 ;;		_SetExcitatingOutOffData
  9143 ;;		_SpkComparatorOn
  9144 ;;		_TMR2_SetInterruptHandler
  9145 ;;		_TMR2_StartTimer
  9146 ;; This function is called by:
  9147 ;;		_SpiCmdFunc_StartDetectVrs
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           
  9152                           ;psect for function _SetMotorStartSPK
  9153  179C                     _SetMotorStartSPK:
  9154                           
  9155                           ;MotorDrive.c: 1425:     if (excitatingEnableBit & (0x01 | 0x02)) {
  9156                           
  9157                           ;incstack = 0
  9158                           ; Regs used in _SetMotorStartSPK: [wreg+status,2+status,0+pclath+cstack]
  9159  179C  0021               	movlb	1	; select bank1
  9160  179D  0863               	movf	_excitatingEnableBit^(0+128),w
  9161  179E  3903               	andlw	3
  9162  179F  1903               	btfsc	3,2
  9163  17A0  2FC5               	goto	l6180
  9164                           
  9165                           ;MotorDrive.c: 1427:         TMR2_SetInterruptHandler(TMR2_Interrupt_SPK);
  9166  17A1  3084               	movlw	low _TMR2_Interrupt_SPK
  9167  17A2  0020               	movlb	0	; select bank0
  9168  17A3  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9169  17A4  3007               	movlw	high _TMR2_Interrupt_SPK
  9170  17A5  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9171  17A6  3190  2081  3197   	fcall	_TMR2_SetInterruptHandler
  9172                           
  9173                           ;MotorDrive.c: 1429:         PIR1bits.TMR2IF = 0;
  9174  17A9  0020               	movlb	0	; select bank0
  9175  17AA  1091               	bcf	17,1	;volatile
  9176                           
  9177                           ;MotorDrive.c: 1431:         detectSpkTurnBit = 0x00;
  9178  17AB  0021               	movlb	1	; select bank1
  9179  17AC  01E1               	clrf	_detectSpkTurnBit^(0+128)
  9180                           
  9181                           ;MotorDrive.c: 1434:         dataTRISAWork_M0 = (0x00 | 0x00);
  9182  17AD  0020               	movlb	0	; select bank0
  9183  17AE  01DE               	clrf	_dataTRISAWork_M0
  9184                           
  9185                           ;MotorDrive.c: 1435:         dataTRISBWork_M0 = (0x00 | 0x00);
  9186  17AF  01DD               	clrf	_dataTRISBWork_M0
  9187                           
  9188                           ;MotorDrive.c: 1436:         dataTRISCWork_M0 = (0x00 | 0x00);
  9189  17B0  01DC               	clrf	_dataTRISCWork_M0
  9190                           
  9191                           ;MotorDrive.c: 1438:         dataTRISAWork_M1 = (0x00 | 0x00);
  9192  17B1  01DB               	clrf	_dataTRISAWork_M1
  9193                           
  9194                           ;MotorDrive.c: 1439:         dataTRISBWork_M1 = (0x00 | 0x00);
  9195  17B2  01DA               	clrf	_dataTRISBWork_M1
  9196                           
  9197                           ;MotorDrive.c: 1440:         dataTRISCWork_M1 = (0x00 | 0x00);
  9198  17B3  01D9               	clrf	_dataTRISCWork_M1
  9199                           
  9200                           ;MotorDrive.c: 1442:         spkOutTrisRequestFlug = 1;
  9201  17B4  0021               	movlb	1	; select bank1
  9202  17B5  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
  9203  17B6  0ADE               	incf	_spkOutTrisRequestFlug^(0+128),f
  9204                           
  9205                           ;MotorDrive.c: 1445:         SpkComparatorOn();
  9206  17B7  3188  2000  3197   	fcall	_SpkComparatorOn
  9207                           
  9208                           ;MotorDrive.c: 1447:         spkPositionCt = 0;
  9209  17BA  0021               	movlb	1	; select bank1
  9210  17BB  01E0               	clrf	_spkPositionCt^(0+128)
  9211                           
  9212                           ;MotorDrive.c: 1448:         spkChangePosition = 1;
  9213  17BC  01DF               	clrf	_spkChangePosition^(0+128)
  9214  17BD  0ADF               	incf	_spkChangePosition^(0+128),f
  9215                           
  9216                           ;MotorDrive.c: 1450:         spkOutChangeFunc = SetDataTRISxWork_SPK_SHORT;
  9217  17BE  30BF               	movlw	low _SetDataTRISxWork_SPK_SHORT
  9218  17BF  00C2               	movwf	_spkOutChangeFunc^(0+128)
  9219  17C0  3015               	movlw	high _SetDataTRISxWork_SPK_SHORT
  9220  17C1  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
  9221                           
  9222                           ;MotorDrive.c: 1453:         TMR2_StartTimer();
  9223  17C2  3190  2054         	fcall	_TMR2_StartTimer
  9224                           
  9225                           ;MotorDrive.c: 1455:     } else {
  9226  17C4  0008               	return
  9227  17C5                     l6180:
  9228                           
  9229                           ;MotorDrive.c: 1456:         SetExcitatingOutOffData();
  9230  17C5  3195  25DB         	fcall	_SetExcitatingOutOffData
  9231  17C7  0008               	return
  9232  17C8                     __end_of_SetMotorStartSPK:
  9233                           
  9234                           	psect	text47
  9235  1081                     __ptext47:	
  9236 ;; *************** function _TMR2_SetInterruptHandler *****************
  9237 ;; Defined at:
  9238 ;;		line 140 in file "mcc_generated_files/tmr2.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9241 ;;		 -> TMR2_Interrupt_SPK(1), TMR2_Interrupt(1), TMR2_DefaultInterruptHandler(1), 
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;		None
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  1    wreg      void 
  9246 ;; Registers used:
  9247 ;;		wreg
  9248 ;; Tracked objects:
  9249 ;;		On entry : 1F/0
  9250 ;;		On exit  : 1F/2
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9253 ;;      Params:         0       2       0       0       0       0       0       0
  9254 ;;      Locals:         0       0       0       0       0       0       0       0
  9255 ;;      Temps:          0       0       0       0       0       0       0       0
  9256 ;;      Totals:         0       2       0       0       0       0       0       0
  9257 ;;Total ram usage:        2 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:    8
  9260 ;; This function calls:
  9261 ;;		Nothing
  9262 ;; This function is called by:
  9263 ;;		_TMR2_Initialize
  9264 ;;		_main
  9265 ;;		_SetMotorStartSPK
  9266 ;;		_SetMotorStopSPK
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _TMR2_SetInterruptHandler
  9272  1081                     _TMR2_SetInterruptHandler:
  9273                           
  9274                           ;mcc_generated_files/tmr2.c: 141:     TMR2_InterruptHandler = InterruptHandler;
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9278  1081  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9279  1082  0022               	movlb	2	; select bank2
  9280  1083  00ED               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  9281  1084  0020               	movlb	0	; select bank0
  9282  1085  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9283  1086  0022               	movlb	2	; select bank2
  9284  1087  00EC               	movwf	_TMR2_InterruptHandler^(0+256)
  9285  1088  0008               	return
  9286  1089                     __end_of_TMR2_SetInterruptHandler:
  9287                           
  9288                           	psect	text48
  9289  0800                     __ptext48:	
  9290 ;; *************** function _SpkComparatorOn *****************
  9291 ;; Defined at:
  9292 ;;		line 2758 in file "MotorDrive.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;		None
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;		None
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  1    wreg      void 
  9299 ;; Registers used:
  9300 ;;		wreg
  9301 ;; Tracked objects:
  9302 ;;		On entry : 1F/1
  9303 ;;		On exit  : 1F/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9306 ;;      Params:         0       0       0       0       0       0       0       0
  9307 ;;      Locals:         0       0       0       0       0       0       0       0
  9308 ;;      Temps:          0       0       0       0       0       0       0       0
  9309 ;;      Totals:         0       0       0       0       0       0       0       0
  9310 ;;Total ram usage:        0 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    8
  9313 ;; This function calls:
  9314 ;;		Nothing
  9315 ;; This function is called by:
  9316 ;;		_SetMotorStartSPK
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           
  9321                           ;psect for function _SpkComparatorOn
  9322  0800                     _SpkComparatorOn:
  9323                           
  9324                           ;MotorDrive.c: 2760:     CM1CON0 = (0x14 | 0x80);
  9325                           
  9326                           ;incstack = 0
  9327                           ; Regs used in _SpkComparatorOn: [wreg]
  9328  0800  3094               	movlw	148
  9329  0801  0022               	movlb	2	; select bank2
  9330  0802  0091               	movwf	17	;volatile
  9331                           
  9332                           ;MotorDrive.c: 2761:     PIR2bits.C1IF = 0;
  9333  0803  0020               	movlb	0	; select bank0
  9334  0804  1292               	bcf	18,5	;volatile
  9335                           
  9336                           ;MotorDrive.c: 2763:     CM2CON0 = (0x14 | 0x80);
  9337  0805  3094               	movlw	148
  9338  0806  0022               	movlb	2	; select bank2
  9339  0807  0093               	movwf	19	;volatile
  9340                           
  9341                           ;MotorDrive.c: 2764:     PIR2bits.C2IF = 0;
  9342  0808  0020               	movlb	0	; select bank0
  9343  0809  1312               	bcf	18,6	;volatile
  9344  080A  0008               	return
  9345  080B                     __end_of_SpkComparatorOn:
  9346                           
  9347                           	psect	text49
  9348  15DB                     __ptext49:	
  9349 ;; *************** function _SetExcitatingOutOffData *****************
  9350 ;; Defined at:
  9351 ;;		line 2818 in file "MotorDrive.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;		None
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  1    wreg      void 
  9358 ;; Registers used:
  9359 ;;		wreg, status,2, status,0, pclath, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 1F/1
  9362 ;;		On exit  : 1F/2
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9365 ;;      Params:         0       0       0       0       0       0       0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0
  9367 ;;      Temps:          0       1       0       0       0       0       0       0
  9368 ;;      Totals:         0       1       0       0       0       0       0       0
  9369 ;;Total ram usage:        1 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    9
  9372 ;; This function calls:
  9373 ;;		_SetOutPutLATX
  9374 ;; This function is called by:
  9375 ;;		_SetMotorStartSPK
  9376 ;;		_SetMotorStopSPK
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           
  9381                           ;psect for function _SetExcitatingOutOffData
  9382  15DB                     _SetExcitatingOutOffData:
  9383                           
  9384                           ;MotorDrive.c: 2822:     dataTRISAWork_M0 = 0x00;
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in _SetExcitatingOutOffData: [wreg+status,2+status,0+pclath+cstack]
  9388  15DB  0020               	movlb	0	; select bank0
  9389  15DC  01DE               	clrf	_dataTRISAWork_M0
  9390                           
  9391                           ;MotorDrive.c: 2823:     dataTRISBWork_M0 = 0x00;
  9392  15DD  01DD               	clrf	_dataTRISBWork_M0
  9393                           
  9394                           ;MotorDrive.c: 2824:     dataTRISCWork_M0 = 0x20;
  9395  15DE  3020               	movlw	32
  9396  15DF  00A1               	movwf	??_SetExcitatingOutOffData
  9397  15E0  0821               	movf	??_SetExcitatingOutOffData,w
  9398  15E1  00DC               	movwf	_dataTRISCWork_M0
  9399                           
  9400                           ;MotorDrive.c: 2826:     dataTRISAWork_M1 = 0x00;
  9401  15E2  01DB               	clrf	_dataTRISAWork_M1
  9402                           
  9403                           ;MotorDrive.c: 2827:     dataTRISBWork_M1 = 0x00;
  9404  15E3  01DA               	clrf	_dataTRISBWork_M1
  9405                           
  9406                           ;MotorDrive.c: 2828:     dataTRISCWork_M1 = 0x10;
  9407  15E4  3010               	movlw	16
  9408  15E5  00A1               	movwf	??_SetExcitatingOutOffData
  9409  15E6  0821               	movf	??_SetExcitatingOutOffData,w
  9410  15E7  00D9               	movwf	_dataTRISCWork_M1
  9411                           
  9412                           ;MotorDrive.c: 2830:     pulseOutLATAWork_M0 = 0;
  9413  15E8  01E7               	clrf	_pulseOutLATAWork_M0
  9414                           
  9415                           ;MotorDrive.c: 2831:     pulseOutLATBWork_M0 = 0;
  9416  15E9  01E6               	clrf	_pulseOutLATBWork_M0
  9417                           
  9418                           ;MotorDrive.c: 2832:     pulseOutLATCWork_M0 = 0;
  9419  15EA  01E5               	clrf	_pulseOutLATCWork_M0
  9420                           
  9421                           ;MotorDrive.c: 2834:     pulseOutLATAWork_M1 = 0;
  9422  15EB  01E4               	clrf	_pulseOutLATAWork_M1
  9423                           
  9424                           ;MotorDrive.c: 2835:     pulseOutLATBWork_M1 = 0;
  9425  15EC  01E3               	clrf	_pulseOutLATBWork_M1
  9426                           
  9427                           ;MotorDrive.c: 2836:     pulseOutLATCWork_M1 = 0;
  9428  15ED  01E2               	clrf	_pulseOutLATCWork_M1
  9429                           
  9430                           ;MotorDrive.c: 2838:     SetOutPutLATX();
  9431  15EE  318A  2239         	fcall	_SetOutPutLATX
  9432                           
  9433                           ;MotorDrive.c: 2839:     LATA &= ~0x04;
  9434  15F0  30FB               	movlw	251
  9435  15F1  0020               	movlb	0	; select bank0
  9436  15F2  00A1               	movwf	??_SetExcitatingOutOffData
  9437  15F3  0821               	movf	??_SetExcitatingOutOffData,w
  9438  15F4  0022               	movlb	2	; select bank2
  9439  15F5  058C               	andwf	12,f	;volatile
  9440  15F6  0008               	return
  9441  15F7                     __end_of_SetExcitatingOutOffData:
  9442                           
  9443                           	psect	text50
  9444  0A39                     __ptext50:	
  9445 ;; *************** function _SetOutPutLATX *****************
  9446 ;; Defined at:
  9447 ;;		line 2958 in file "MotorDrive.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, status,2, status,0
  9456 ;; Tracked objects:
  9457 ;;		On entry : 1F/0
  9458 ;;		On exit  : 1F/2
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9461 ;;      Params:         0       0       0       0       0       0       0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0
  9463 ;;      Temps:          0       1       0       0       0       0       0       0
  9464 ;;      Totals:         0       1       0       0       0       0       0       0
  9465 ;;Total ram usage:        1 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    8
  9468 ;; This function calls:
  9469 ;;		Nothing
  9470 ;; This function is called by:
  9471 ;;		_SetExcitatingOutOffData
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           
  9476                           ;psect for function _SetOutPutLATX
  9477  0A39                     _SetOutPutLATX:
  9478                           
  9479                           ;MotorDrive.c: 2962:     dataTRISA = TRISA;
  9480                           
  9481                           ;incstack = 0
  9482                           ; Regs used in _SetOutPutLATX: [wreg+status,2+status,0]
  9483  0A39  0021               	movlb	1	; select bank1
  9484  0A3A  080C               	movf	12,w	;volatile
  9485  0A3B  0020               	movlb	0	; select bank0
  9486  0A3C  00A0               	movwf	??_SetOutPutLATX
  9487  0A3D  0820               	movf	??_SetOutPutLATX,w
  9488  0A3E  00E1               	movwf	_dataTRISA
  9489                           
  9490                           ;MotorDrive.c: 2963:     dataTRISB = TRISB;
  9491  0A3F  0021               	movlb	1	; select bank1
  9492  0A40  080D               	movf	13,w	;volatile
  9493  0A41  0020               	movlb	0	; select bank0
  9494  0A42  00A0               	movwf	??_SetOutPutLATX
  9495  0A43  0820               	movf	??_SetOutPutLATX,w
  9496  0A44  00E0               	movwf	_dataTRISB
  9497                           
  9498                           ;MotorDrive.c: 2964:     dataTRISC = TRISC;
  9499  0A45  0021               	movlb	1	; select bank1
  9500  0A46  080E               	movf	14,w	;volatile
  9501  0A47  0020               	movlb	0	; select bank0
  9502  0A48  00A0               	movwf	??_SetOutPutLATX
  9503  0A49  0820               	movf	??_SetOutPutLATX,w
  9504  0A4A  00DF               	movwf	_dataTRISC
  9505                           
  9506                           ;MotorDrive.c: 2969:     dataTRISB &= (UB) (~(0x00 | 0x00));
  9507  0A4B  30FD               	movlw	253
  9508  0A4C  00A0               	movwf	??_SetOutPutLATX
  9509  0A4D  0820               	movf	??_SetOutPutLATX,w
  9510  0A4E  05E1               	andwf	_dataTRISA,f
  9511                           
  9512                           ;MotorDrive.c: 2970:     dataTRISC &= (UB) (~(0x22 | 0x1C));
  9513  0A4F  30C1               	movlw	193
  9514  0A50  00A0               	movwf	??_SetOutPutLATX
  9515  0A51  0820               	movf	??_SetOutPutLATX,w
  9516  0A52  05DF               	andwf	_dataTRISC,f
  9517                           
  9518                           ;MotorDrive.c: 2973:     dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
  9519  0A53  085E               	movf	_dataTRISAWork_M0,w
  9520  0A54  045B               	iorwf	_dataTRISAWork_M1,w
  9521  0A55  00A0               	movwf	??_SetOutPutLATX
  9522  0A56  0820               	movf	??_SetOutPutLATX,w
  9523  0A57  04E1               	iorwf	_dataTRISA,f
  9524                           
  9525                           ;MotorDrive.c: 2974:     dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
  9526  0A58  085D               	movf	_dataTRISBWork_M0,w
  9527  0A59  045A               	iorwf	_dataTRISBWork_M1,w
  9528  0A5A  00A0               	movwf	??_SetOutPutLATX
  9529  0A5B  0820               	movf	??_SetOutPutLATX,w
  9530  0A5C  04E0               	iorwf	_dataTRISB,f
  9531                           
  9532                           ;MotorDrive.c: 2975:     dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
  9533  0A5D  085C               	movf	_dataTRISCWork_M0,w
  9534  0A5E  0459               	iorwf	_dataTRISCWork_M1,w
  9535  0A5F  00A0               	movwf	??_SetOutPutLATX
  9536  0A60  0820               	movf	??_SetOutPutLATX,w
  9537  0A61  04DF               	iorwf	_dataTRISC,f
  9538                           
  9539                           ;MotorDrive.c: 2978:     TRISA = dataTRISA;
  9540  0A62  0861               	movf	_dataTRISA,w
  9541  0A63  0021               	movlb	1	; select bank1
  9542  0A64  008C               	movwf	12	;volatile
  9543                           
  9544                           ;MotorDrive.c: 2979:     TRISB = dataTRISB;
  9545  0A65  0020               	movlb	0	; select bank0
  9546  0A66  0860               	movf	_dataTRISB,w
  9547  0A67  0021               	movlb	1	; select bank1
  9548  0A68  008D               	movwf	13	;volatile
  9549                           
  9550                           ;MotorDrive.c: 2980:     TRISC = dataTRISC;
  9551  0A69  0020               	movlb	0	; select bank0
  9552  0A6A  085F               	movf	_dataTRISC,w
  9553  0A6B  0021               	movlb	1	; select bank1
  9554  0A6C  008E               	movwf	14	;volatile
  9555                           
  9556                           ;MotorDrive.c: 2983:     pulseOutLATA = LATA;
  9557  0A6D  0022               	movlb	2	; select bank2
  9558  0A6E  080C               	movf	12,w	;volatile
  9559  0A6F  0020               	movlb	0	; select bank0
  9560  0A70  00A0               	movwf	??_SetOutPutLATX
  9561  0A71  0820               	movf	??_SetOutPutLATX,w
  9562  0A72  00EA               	movwf	_pulseOutLATA
  9563                           
  9564                           ;MotorDrive.c: 2984:     pulseOutLATB = LATB;
  9565  0A73  0022               	movlb	2	; select bank2
  9566  0A74  080D               	movf	13,w	;volatile
  9567  0A75  0020               	movlb	0	; select bank0
  9568  0A76  00A0               	movwf	??_SetOutPutLATX
  9569  0A77  0820               	movf	??_SetOutPutLATX,w
  9570  0A78  00E9               	movwf	_pulseOutLATB
  9571                           
  9572                           ;MotorDrive.c: 2985:     pulseOutLATC = LATC;
  9573  0A79  0022               	movlb	2	; select bank2
  9574  0A7A  080E               	movf	14,w	;volatile
  9575  0A7B  0020               	movlb	0	; select bank0
  9576  0A7C  00A0               	movwf	??_SetOutPutLATX
  9577  0A7D  0820               	movf	??_SetOutPutLATX,w
  9578  0A7E  00E8               	movwf	_pulseOutLATC
  9579                           
  9580                           ;MotorDrive.c: 2989:     pulseOutLATA &= (UB) (~(0x32 | 0x00));
  9581  0A7F  30CD               	movlw	205
  9582  0A80  00A0               	movwf	??_SetOutPutLATX
  9583  0A81  0820               	movf	??_SetOutPutLATX,w
  9584  0A82  05EA               	andwf	_pulseOutLATA,f
  9585                           
  9586                           ;MotorDrive.c: 2990:     pulseOutLATB &= (UB) (~(0x00 | 0xA0));
  9587  0A83  305F               	movlw	95
  9588  0A84  00A0               	movwf	??_SetOutPutLATX
  9589  0A85  0820               	movf	??_SetOutPutLATX,w
  9590  0A86  05E9               	andwf	_pulseOutLATB,f
  9591                           
  9592                           ;MotorDrive.c: 2991:     pulseOutLATC &= (UB) (~(0x02 | 0x0C));
  9593  0A87  30F1               	movlw	241
  9594  0A88  00A0               	movwf	??_SetOutPutLATX
  9595  0A89  0820               	movf	??_SetOutPutLATX,w
  9596  0A8A  05E8               	andwf	_pulseOutLATC,f
  9597                           
  9598                           ;MotorDrive.c: 2994:     pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork_M1
      +                          );
  9599  0A8B  0867               	movf	_pulseOutLATAWork_M0,w
  9600  0A8C  0464               	iorwf	_pulseOutLATAWork_M1,w
  9601  0A8D  00A0               	movwf	??_SetOutPutLATX
  9602  0A8E  0820               	movf	??_SetOutPutLATX,w
  9603  0A8F  04EA               	iorwf	_pulseOutLATA,f
  9604                           
  9605                           ;MotorDrive.c: 2995:     pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork_M1
      +                          );
  9606  0A90  0866               	movf	_pulseOutLATBWork_M0,w
  9607  0A91  0463               	iorwf	_pulseOutLATBWork_M1,w
  9608  0A92  00A0               	movwf	??_SetOutPutLATX
  9609  0A93  0820               	movf	??_SetOutPutLATX,w
  9610  0A94  04E9               	iorwf	_pulseOutLATB,f
  9611                           
  9612                           ;MotorDrive.c: 2996:     pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork_M1
      +                          );
  9613  0A95  0865               	movf	_pulseOutLATCWork_M0,w
  9614  0A96  0462               	iorwf	_pulseOutLATCWork_M1,w
  9615  0A97  00A0               	movwf	??_SetOutPutLATX
  9616  0A98  0820               	movf	??_SetOutPutLATX,w
  9617  0A99  04E8               	iorwf	_pulseOutLATC,f
  9618                           
  9619                           ;MotorDrive.c: 2999:     LATA = pulseOutLATA;
  9620  0A9A  086A               	movf	_pulseOutLATA,w
  9621  0A9B  0022               	movlb	2	; select bank2
  9622  0A9C  008C               	movwf	12	;volatile
  9623                           
  9624                           ;MotorDrive.c: 3000:     LATB = pulseOutLATB;
  9625  0A9D  0020               	movlb	0	; select bank0
  9626  0A9E  0869               	movf	_pulseOutLATB,w
  9627  0A9F  0022               	movlb	2	; select bank2
  9628  0AA0  008D               	movwf	13	;volatile
  9629                           
  9630                           ;MotorDrive.c: 3001:     LATC = pulseOutLATC;
  9631  0AA1  0020               	movlb	0	; select bank0
  9632  0AA2  0868               	movf	_pulseOutLATC,w
  9633  0AA3  0022               	movlb	2	; select bank2
  9634  0AA4  008E               	movwf	14	;volatile
  9635  0AA5  0008               	return
  9636  0AA6                     __end_of_SetOutPutLATX:
  9637                           
  9638                           	psect	text51
  9639  162F                     __ptext51:	
  9640 ;; *************** function _SetMotorPositionSearchStart *****************
  9641 ;; Defined at:
  9642 ;;		line 1880 in file "MotorDrive.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;  motor_no        1    wreg     unsigned char 
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  motor_no        1   16[BANK0 ] unsigned char 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      void 
  9649 ;; Registers used:
  9650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 1F/0
  9653 ;;		On exit  : 1F/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9656 ;;      Params:         0       0       0       0       0       0       0       0
  9657 ;;      Locals:         0       1       0       0       0       0       0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0
  9659 ;;      Totals:         0       1       0       0       0       0       0       0
  9660 ;;Total ram usage:        1 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:   11
  9663 ;; This function calls:
  9664 ;;		_InitPositionSearch
  9665 ;;		_SetAfterDetectLoadFunc
  9666 ;;		_SetMotorStart
  9667 ;; This function is called by:
  9668 ;;		_SpiCmdFunc_SearchBasePosition
  9669 ;;		_SpiCmdFunc_Search1008Position
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _SetMotorPositionSearchStart
  9675  162F                     _SetMotorPositionSearchStart:
  9676                           
  9677                           ;incstack = 0
  9678                           ; Regs used in _SetMotorPositionSearchStart: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9679                           ;SetMotorPositionSearchStart@motor_no stored from wreg
  9680  162F  00B0               	movwf	SetMotorPositionSearchStart@motor_no
  9681                           
  9682                           ;MotorDrive.c: 1880: void SetMotorPositionSearchStart(UB motor_no);MotorDrive.c: 1881: {
      +                          ;MotorDrive.c: 1884:     searchTotalSteps[ motor_no ] = 0;
  9683  1630  3530               	lslf	SetMotorPositionSearchStart@motor_no,w
  9684  1631  3E24               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  9685  1632  0086               	movwf	6
  9686  1633  3001               	movlw	1	; select bank2/3
  9687  1634  0087               	movwf	7
  9688  1635  3000               	movlw	0
  9689  1636  3FC0               	movwi [0]fsr1
  9690  1637  3FC1               	movwi [1]fsr1
  9691                           
  9692                           ;MotorDrive.c: 1886:     currentPosition[ motor_no ] = 0;
  9693  1638  3530               	lslf	SetMotorPositionSearchStart@motor_no,w
  9694  1639  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  9695  163A  0086               	movwf	6
  9696  163B  0187               	clrf	7
  9697  163C  3000               	movlw	0
  9698  163D  3FC0               	movwi [0]fsr1
  9699  163E  3FC1               	movwi [1]fsr1
  9700                           
  9701                           ;MotorDrive.c: 1888:     InitPositionSearch(motor_no);
  9702  163F  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9703  1640  318E  261A  3196   	fcall	_InitPositionSearch
  9704                           
  9705                           ;MotorDrive.c: 1890:     SetAfterDetectLoadFunc(motor_no, AfterDetectedLoadPosition);
  9706  1643  305D               	movlw	low _AfterDetectedLoadPosition
  9707  1644  00A0               	movwf	SetAfterDetectLoadFunc@func
  9708  1645  3000               	movlw	high _AfterDetectedLoadPosition
  9709  1646  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  9710  1647  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9711  1648  3190  20C5  3196   	fcall	_SetAfterDetectLoadFunc
  9712                           
  9713                           ;MotorDrive.c: 1892:     SetMotorStart(motor_no);
  9714  164B  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9715  164C  3190  2091         	fcall	_SetMotorStart
  9716  164E  0008               	return
  9717  164F                     __end_of_SetMotorPositionSearchStart:
  9718                           
  9719                           	psect	text52
  9720  0E1A                     __ptext52:	
  9721 ;; *************** function _InitPositionSearch *****************
  9722 ;; Defined at:
  9723 ;;		line 1927 in file "MotorDrive.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  motor_no        1    wreg     unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  motor_no        1   15[BANK0 ] unsigned char 
  9728 ;;  i               1   14[BANK0 ] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9733 ;; Tracked objects:
  9734 ;;		On entry : 1F/0
  9735 ;;		On exit  : 1F/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9738 ;;      Params:         0       0       0       0       0       0       0       0
  9739 ;;      Locals:         0       2       0       0       0       0       0       0
  9740 ;;      Temps:          0       8       0       0       0       0       0       0
  9741 ;;      Totals:         0      10       0       0       0       0       0       0
  9742 ;;Total ram usage:       10 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    9
  9745 ;; This function calls:
  9746 ;;		___bmul
  9747 ;;		___wmul
  9748 ;; This function is called by:
  9749 ;;		_SetMotorPositionSearchStart
  9750 ;;		_SetMotorCorrectPositionStart
  9751 ;;		_AfterDetectedLoadPosition
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           
  9756                           ;psect for function _InitPositionSearch
  9757  0E1A                     _InitPositionSearch:
  9758                           
  9759                           ;incstack = 0
  9760                           ; Regs used in _InitPositionSearch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9761                           ;InitPositionSearch@motor_no stored from wreg
  9762  0E1A  00AF               	movwf	InitPositionSearch@motor_no
  9763                           
  9764                           ;MotorDrive.c: 1927: void InitPositionSearch(UB motor_no);MotorDrive.c: 1928: {;MotorDri
      +                          ve.c: 1929:     UB i;;MotorDrive.c: 1931:     doubleInterval = 0;
  9765  0E1B  0021               	movlb	1	; select bank1
  9766  0E1C  01CD               	clrf	_doubleInterval^(0+128)
  9767                           
  9768                           ;MotorDrive.c: 1933:     positionSearchCt[ motor_no ] = 0;
  9769  0E1D  0020               	movlb	0	; select bank0
  9770  0E1E  352F               	lslf	InitPositionSearch@motor_no,w
  9771  0E1F  3EA4               	addlw	(low (_positionSearchCt| 0))& (0+255)
  9772  0E20  0086               	movwf	6
  9773  0E21  0187               	clrf	7
  9774  0E22  3000               	movlw	0
  9775  0E23  3FC0               	movwi [0]fsr1
  9776  0E24  3FC1               	movwi [1]fsr1
  9777                           
  9778                           ;MotorDrive.c: 1935:     detectFinePosCt[ motor_no ] = 0;
  9779  0E25  082F               	movf	InitPositionSearch@motor_no,w
  9780  0E26  3EB4               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  9781  0E27  0086               	movwf	6
  9782  0E28  0187               	clrf	7
  9783  0E29  0181               	clrf	1
  9784                           
  9785                           ;MotorDrive.c: 1936:     detectRoughPosCt[ motor_no ] = 0;
  9786  0E2A  082F               	movf	InitPositionSearch@motor_no,w
  9787  0E2B  3EB2               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  9788  0E2C  0086               	movwf	6
  9789  0E2D  0187               	clrf	7
  9790  0E2E  0181               	clrf	1
  9791                           
  9792                           ;MotorDrive.c: 1937:     positionSearchStat[ motor_no ] = ID_SEARCH_FINE_POS_1ST;
  9793  0E2F  082F               	movf	InitPositionSearch@motor_no,w
  9794  0E30  3EB0               	addlw	(low (_positionSearchStat| 0))& (0+255)
  9795  0E31  0086               	movwf	6
  9796  0E32  0187               	clrf	7
  9797  0E33  0181               	clrf	1
  9798                           
  9799                           ;MotorDrive.c: 1938:     detectLoadType[ motor_no ] = ID_DETECT_LOAD_NULL;
  9800  0E34  082F               	movf	InitPositionSearch@motor_no,w
  9801  0E35  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  9802  0E36  0086               	movwf	6
  9803  0E37  0187               	clrf	7
  9804  0E38  0181               	clrf	1
  9805                           
  9806                           ;MotorDrive.c: 1939:     detectLoadCont[ motor_no ] = 0;
  9807  0E39  082F               	movf	InitPositionSearch@motor_no,w
  9808  0E3A  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  9809  0E3B  0086               	movwf	6
  9810  0E3C  0187               	clrf	7
  9811  0E3D  0181               	clrf	1
  9812                           
  9813                           ;MotorDrive.c: 1940:     detectRoughTotalMove[ motor_no ] = 0;
  9814  0E3E  352F               	lslf	InitPositionSearch@motor_no,w
  9815  0E3F  3EA0               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  9816  0E40  0086               	movwf	6
  9817  0E41  0187               	clrf	7
  9818  0E42  3000               	movlw	0
  9819  0E43  3FC0               	movwi [0]fsr1
  9820  0E44  3FC1               	movwi [1]fsr1
  9821                           
  9822                           ;MotorDrive.c: 1942:     detectLoadPositionIndex[ motor_no ] = 0;
  9823  0E45  082F               	movf	InitPositionSearch@motor_no,w
  9824  0E46  3EBA               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  9825  0E47  0086               	movwf	6
  9826  0E48  0187               	clrf	7
  9827  0E49  0181               	clrf	1
  9828                           
  9829                           ;MotorDrive.c: 1943:     for (i = 0; i < ( ( ( 8 * 2 ) + ( 1 * 9 ) ) - 2 ); i++) {
  9830  0E4A  01AE               	clrf	InitPositionSearch@i
  9831  0E4B                     l6134:
  9832                           
  9833                           ;MotorDrive.c: 1944:         detectLoadPosition[ motor_no ][ i ] = 0;
  9834  0E4B  082E               	movf	InitPositionSearch@i,w
  9835  0E4C  00A6               	movwf	??_InitPositionSearch
  9836  0E4D  01A7               	clrf	??_InitPositionSearch+1
  9837  0E4E  35A6               	lslf	??_InitPositionSearch,f
  9838  0E4F  0DA7               	rlf	??_InitPositionSearch+1,f
  9839  0E50  082F               	movf	InitPositionSearch@motor_no,w
  9840  0E51  00A8               	movwf	??_InitPositionSearch+2
  9841  0E52  01A9               	clrf	??_InitPositionSearch+3
  9842  0E53  0828               	movf	??_InitPositionSearch+2,w
  9843  0E54  00A0               	movwf	___wmul@multiplier
  9844  0E55  0829               	movf	??_InitPositionSearch+3,w
  9845  0E56  00A1               	movwf	___wmul@multiplier+1
  9846  0E57  302E               	movlw	46
  9847  0E58  00A2               	movwf	___wmul@multiplicand
  9848  0E59  3000               	movlw	0
  9849  0E5A  00A3               	movwf	___wmul@multiplicand+1
  9850  0E5B  3195  2588  318E   	fcall	___wmul
  9851  0E5E  3094               	movlw	148
  9852  0E5F  00AA               	movwf	??_InitPositionSearch+4
  9853  0E60  3021               	movlw	33
  9854  0E61  00AB               	movwf	??_InitPositionSearch+5
  9855  0E62  0820               	movf	?___wmul,w
  9856  0E63  072A               	addwf	??_InitPositionSearch+4,w
  9857  0E64  00AC               	movwf	??_InitPositionSearch+6
  9858  0E65  0821               	movf	?___wmul+1,w
  9859  0E66  3D2B               	addwfc	??_InitPositionSearch+5,w
  9860  0E67  00AD               	movwf	??_InitPositionSearch+7
  9861  0E68  0826               	movf	??_InitPositionSearch,w
  9862  0E69  072C               	addwf	??_InitPositionSearch+6,w
  9863  0E6A  0086               	movwf	6
  9864  0E6B  0827               	movf	??_InitPositionSearch+1,w
  9865  0E6C  3D2D               	addwfc	??_InitPositionSearch+7,w
  9866  0E6D  0087               	movwf	7
  9867  0E6E  3000               	movlw	0
  9868  0E6F  3FC0               	movwi [0]fsr1
  9869  0E70  3FC1               	movwi [1]fsr1
  9870                           
  9871                           ;MotorDrive.c: 1946:         detectLoadPositionType[ motor_no ][ i ] = 0;
  9872  0E71  3017               	movlw	23
  9873  0E72  00A6               	movwf	??_InitPositionSearch
  9874  0E73  0826               	movf	??_InitPositionSearch,w
  9875  0E74  00A0               	movwf	___bmul@multiplicand
  9876  0E75  082F               	movf	InitPositionSearch@motor_no,w
  9877  0E76  3192  22E4  318E   	fcall	___bmul
  9878  0E79  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  9879  0E7A  072E               	addwf	InitPositionSearch@i,w
  9880  0E7B  00A7               	movwf	??_InitPositionSearch+1
  9881  0E7C  0827               	movf	??_InitPositionSearch+1,w
  9882  0E7D  0086               	movwf	6
  9883  0E7E  3001               	movlw	1	; select bank2/3
  9884  0E7F  0087               	movwf	7
  9885  0E80  0181               	clrf	1
  9886                           
  9887                           ;MotorDrive.c: 1947:     }
  9888  0E81  3001               	movlw	1
  9889  0E82  00A6               	movwf	??_InitPositionSearch
  9890  0E83  0826               	movf	??_InitPositionSearch,w
  9891  0E84  07AE               	addwf	InitPositionSearch@i,f
  9892  0E85  3017               	movlw	23
  9893  0E86  022E               	subwf	InitPositionSearch@i,w
  9894  0E87  1C03               	skipc
  9895  0E88  2E4B               	goto	l6134
  9896                           
  9897                           ;MotorDrive.c: 1949:     detectLoadPositionPtr[ motor_no ] = &detectLoadPosition[ motor_
      +                          no ][ 0 ];
  9898  0E89  082F               	movf	InitPositionSearch@motor_no,w
  9899  0E8A  00A6               	movwf	??_InitPositionSearch
  9900  0E8B  01A7               	clrf	??_InitPositionSearch+1
  9901  0E8C  0826               	movf	??_InitPositionSearch,w
  9902  0E8D  00A0               	movwf	___wmul@multiplier
  9903  0E8E  0827               	movf	??_InitPositionSearch+1,w
  9904  0E8F  00A1               	movwf	___wmul@multiplier+1
  9905  0E90  302E               	movlw	46
  9906  0E91  00A2               	movwf	___wmul@multiplicand
  9907  0E92  3000               	movlw	0
  9908  0E93  00A3               	movwf	___wmul@multiplicand+1
  9909  0E94  3195  2588  318E   	fcall	___wmul
  9910  0E97  3094               	movlw	148
  9911  0E98  00A8               	movwf	??_InitPositionSearch+2
  9912  0E99  3021               	movlw	33
  9913  0E9A  00A9               	movwf	??_InitPositionSearch+3
  9914  0E9B  0820               	movf	?___wmul,w
  9915  0E9C  0728               	addwf	??_InitPositionSearch+2,w
  9916  0E9D  00AA               	movwf	??_InitPositionSearch+4
  9917  0E9E  0821               	movf	?___wmul+1,w
  9918  0E9F  3D29               	addwfc	??_InitPositionSearch+3,w
  9919  0EA0  00AB               	movwf	??_InitPositionSearch+5
  9920  0EA1  352F               	lslf	InitPositionSearch@motor_no,w
  9921  0EA2  3E28               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  9922  0EA3  0086               	movwf	6
  9923  0EA4  3001               	movlw	1	; select bank2/3
  9924  0EA5  0087               	movwf	7
  9925  0EA6  082A               	movf	??_InitPositionSearch+4,w
  9926  0EA7  3FC0               	movwi [0]fsr1
  9927  0EA8  082B               	movf	??_InitPositionSearch+5,w
  9928  0EA9  3FC1               	movwi [1]fsr1
  9929                           
  9930                           ;MotorDrive.c: 1951:     detectLoadPositionTypePtr[ motor_no ] = &detectLoadPositionType
      +                          [ motor_no ][ 0 ];
  9931  0EAA  3017               	movlw	23
  9932  0EAB  00A6               	movwf	??_InitPositionSearch
  9933  0EAC  0826               	movf	??_InitPositionSearch,w
  9934  0EAD  00A0               	movwf	___bmul@multiplicand
  9935  0EAE  082F               	movf	InitPositionSearch@motor_no,w
  9936  0EAF  3192  22E4         	fcall	___bmul
  9937  0EB1  3E32               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  9938  0EB2  00A7               	movwf	??_InitPositionSearch+1
  9939  0EB3  082F               	movf	InitPositionSearch@motor_no,w
  9940  0EB4  3EB8               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  9941  0EB5  0086               	movwf	6
  9942  0EB6  0187               	clrf	7
  9943  0EB7  0827               	movf	??_InitPositionSearch+1,w
  9944  0EB8  0081               	movwf	1
  9945  0EB9  0008               	return
  9946  0EBA                     __end_of_InitPositionSearch:
  9947                           
  9948                           	psect	text53
  9949  1588                     __ptext53:	
  9950 ;; *************** function ___wmul *****************
  9951 ;; Defined at:
  9952 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul16.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9955 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;  product         2    4[BANK0 ] unsigned int 
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  2    0[BANK0 ] unsigned int 
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, status,0
  9962 ;; Tracked objects:
  9963 ;;		On entry : 1F/0
  9964 ;;		On exit  : 1F/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9967 ;;      Params:         0       4       0       0       0       0       0       0
  9968 ;;      Locals:         0       2       0       0       0       0       0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0
  9970 ;;      Totals:         0       6       0       0       0       0       0       0
  9971 ;;Total ram usage:        6 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    8
  9974 ;; This function calls:
  9975 ;;		Nothing
  9976 ;; This function is called by:
  9977 ;;		_InitPositionSearch
  9978 ;;		_DetermineBasePosition
  9979 ;;		_UpdataHandPosition
  9980 ;;		_UpdateCurrentPositionByFinePosition
  9981 ;;		_SaveLoadPosition
  9982 ;;		_VerifyHandPosition_LoadPosition
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           
  9987                           ;psect for function ___wmul
  9988  1588                     ___wmul:
  9989                           
  9990                           ;incstack = 0
  9991                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9992  1588  01A4               	clrf	___wmul@product
  9993  1589  01A5               	clrf	___wmul@product+1
  9994  158A                     l5966:
  9995  158A  1C20               	btfss	___wmul@multiplier,0
  9996  158B  2D90               	goto	l1456
  9997  158C  0822               	movf	___wmul@multiplicand,w
  9998  158D  07A4               	addwf	___wmul@product,f
  9999  158E  0823               	movf	___wmul@multiplicand+1,w
 10000  158F  3DA5               	addwfc	___wmul@product+1,f
 10001  1590                     l1456:
 10002  1590  3001               	movlw	1
 10003  1591                     u4475:
 10004  1591  35A2               	lslf	___wmul@multiplicand,f
 10005  1592  0DA3               	rlf	___wmul@multiplicand+1,f
 10006  1593  0B89               	decfsz	9,f
 10007  1594  2D91               	goto	u4475
 10008  1595  3001               	movlw	1
 10009  1596                     u4485:
 10010  1596  36A1               	lsrf	___wmul@multiplier+1,f
 10011  1597  0CA0               	rrf	___wmul@multiplier,f
 10012  1598  0B89               	decfsz	9,f
 10013  1599  2D96               	goto	u4485
 10014  159A  0820               	movf	___wmul@multiplier,w
 10015  159B  0421               	iorwf	___wmul@multiplier+1,w
 10016  159C  1D03               	btfss	3,2
 10017  159D  2D8A               	goto	l5966
 10018  159E  0825               	movf	___wmul@product+1,w
 10019  159F  00A1               	movwf	?___wmul+1
 10020  15A0  0824               	movf	___wmul@product,w
 10021  15A1  00A0               	movwf	?___wmul
 10022  15A2  0008               	return
 10023  15A3                     __end_of___wmul:
 10024                           
 10025                           	psect	text54
 10026  12E4                     __ptext54:	
 10027 ;; *************** function ___bmul *****************
 10028 ;; Defined at:
 10029 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul8.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;  multiplier      1    wreg     unsigned char 
 10032 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10035 ;;  product         1    2[BANK0 ] unsigned char 
 10036 ;; Return value:  Size  Location     Type
 10037 ;;                  1    wreg      unsigned char 
 10038 ;; Registers used:
 10039 ;;		wreg, status,2, status,0
 10040 ;; Tracked objects:
 10041 ;;		On entry : 1F/0
 10042 ;;		On exit  : 1F/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10045 ;;      Params:         0       1       0       0       0       0       0       0
 10046 ;;      Locals:         0       2       0       0       0       0       0       0
 10047 ;;      Temps:          0       1       0       0       0       0       0       0
 10048 ;;      Totals:         0       4       0       0       0       0       0       0
 10049 ;;Total ram usage:        4 bytes
 10050 ;; Hardware stack levels used:    1
 10051 ;; Hardware stack levels required when called:    8
 10052 ;; This function calls:
 10053 ;;		Nothing
 10054 ;; This function is called by:
 10055 ;;		_InitPositionSearch
 10056 ;;		_DetermineBasePosition
 10057 ;;		_UpdateCurrentPositionByFinePosition
 10058 ;;		_SaveLoadPosition
 10059 ;;		_VerifyHandPosition_LoadPosition
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function ___bmul
 10065  12E4                     ___bmul:
 10066                           
 10067                           ;incstack = 0
 10068                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10069                           ;___bmul@multiplier stored from wreg
 10070  12E4  00A3               	movwf	___bmul@multiplier
 10071  12E5  01A2               	clrf	___bmul@product
 10072  12E6                     l5980:
 10073  12E6  1C23               	btfss	___bmul@multiplier,0
 10074  12E7  2AEC               	goto	l5984
 10075  12E8  0820               	movf	___bmul@multiplicand,w
 10076  12E9  00A1               	movwf	??___bmul
 10077  12EA  0821               	movf	??___bmul,w
 10078  12EB  07A2               	addwf	___bmul@product,f
 10079  12EC                     l5984:
 10080  12EC  1003               	clrc
 10081  12ED  0DA0               	rlf	___bmul@multiplicand,f
 10082  12EE  1003               	clrc
 10083  12EF  0CA3               	rrf	___bmul@multiplier,f
 10084  12F0  0823               	movf	___bmul@multiplier,w
 10085  12F1  1D03               	btfss	3,2
 10086  12F2  2AE6               	goto	l5980
 10087  12F3  0822               	movf	___bmul@product,w
 10088  12F4  0008               	return
 10089  12F5                     __end_of___bmul:
 10090                           
 10091                           	psect	text55
 10092  1384                     __ptext55:	
 10093 ;; *************** function _DeactivateHandPosition *****************
 10094 ;; Defined at:
 10095 ;;		line 2517 in file "MotorDrive.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;  motor_no        1    wreg     unsigned char 
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  1    wreg      void 
 10102 ;; Registers used:
 10103 ;;		wreg, status,2, status,0
 10104 ;; Tracked objects:
 10105 ;;		On entry : 1F/0
 10106 ;;		On exit  : 1F/1
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10109 ;;      Params:         0       0       0       0       0       0       0       0
 10110 ;;      Locals:         0       1       0       0       0       0       0       0
 10111 ;;      Temps:          0       2       0       0       0       0       0       0
 10112 ;;      Totals:         0       3       0       0       0       0       0       0
 10113 ;;Total ram usage:        3 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    8
 10116 ;; This function calls:
 10117 ;;		Nothing
 10118 ;; This function is called by:
 10119 ;;		_SpiCmdFunc_SearchBasePosition
 10120 ;;		_SpiCmdFunc_Search1008Position
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function _DeactivateHandPosition
 10126  1384                     _DeactivateHandPosition:
 10127                           
 10128                           ;incstack = 0
 10129                           ; Regs used in _DeactivateHandPosition: [wreg+status,2+status,0]
 10130                           ;DeactivateHandPosition@motor_no stored from wreg
 10131  1384  00A2               	movwf	DeactivateHandPosition@motor_no
 10132                           
 10133                           ;MotorDrive.c: 2517: void DeactivateHandPosition(UB motor_no);MotorDrive.c: 2518: {;Moto
      +                          rDrive.c: 2519:     motorBitOperation = (UB) (0x01 << motor_no);
 10134  1385  3001               	movlw	1
 10135  1386  00A0               	movwf	??_DeactivateHandPosition
 10136  1387  0A22               	incf	DeactivateHandPosition@motor_no,w
 10137  1388  2B8A               	goto	u4824
 10138  1389                     u4825:
 10139  1389  35A0               	lslf	??_DeactivateHandPosition,f
 10140  138A                     u4824:
 10141  138A  0B89               	decfsz	9,f
 10142  138B  2B89               	goto	u4825
 10143  138C  0820               	movf	??_DeactivateHandPosition,w
 10144  138D  00A1               	movwf	??_DeactivateHandPosition+1
 10145  138E  0821               	movf	??_DeactivateHandPosition+1,w
 10146  138F  00F4               	movwf	_motorBitOperation
 10147                           
 10148                           ;MotorDrive.c: 2521:     handPositionActiveBit &= (UB) (~motorBitOperation);
 10149  1390  0974               	comf	_motorBitOperation,w
 10150  1391  00A0               	movwf	??_DeactivateHandPosition
 10151  1392  0820               	movf	??_DeactivateHandPosition,w
 10152  1393  0021               	movlb	1	; select bank1
 10153  1394  05D1               	andwf	_handPositionActiveBit^(0+128),f
 10154  1395  0008               	return
 10155  1396                     __end_of_DeactivateHandPosition:
 10156                           
 10157                           	psect	text56
 10158  1372                     __ptext56:	
 10159 ;; *************** function _SetMotorStop *****************
 10160 ;; Defined at:
 10161 ;;		line 2029 in file "MotorDrive.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  motor_no        1    wreg     unsigned char 
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10166 ;; Return value:  Size  Location     Type
 10167 ;;                  1    wreg      void 
 10168 ;; Registers used:
 10169 ;;		wreg, status,2, status,0
 10170 ;; Tracked objects:
 10171 ;;		On entry : 1F/0
 10172 ;;		On exit  : 1F/1
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10175 ;;      Params:         0       0       0       0       0       0       0       0
 10176 ;;      Locals:         0       1       0       0       0       0       0       0
 10177 ;;      Temps:          0       2       0       0       0       0       0       0
 10178 ;;      Totals:         0       3       0       0       0       0       0       0
 10179 ;;Total ram usage:        3 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    8
 10182 ;; This function calls:
 10183 ;;		Nothing
 10184 ;; This function is called by:
 10185 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           
 10190                           ;psect for function _SetMotorStop
 10191  1372                     _SetMotorStop:
 10192                           
 10193                           ;incstack = 0
 10194                           ; Regs used in _SetMotorStop: [wreg+status,2+status,0]
 10195                           ;SetMotorStop@motor_no stored from wreg
 10196  1372  00A2               	movwf	SetMotorStop@motor_no
 10197                           
 10198                           ;MotorDrive.c: 2029: void SetMotorStop(UB motor_no);MotorDrive.c: 2030: {;MotorDrive.c: 
      +                          2031:     motorBitOperation = (UB) (0x01 << motor_no);
 10199  1373  3001               	movlw	1
 10200  1374  00A0               	movwf	??_SetMotorStop
 10201  1375  0A22               	incf	SetMotorStop@motor_no,w
 10202  1376  2B78               	goto	u4704
 10203  1377                     u4705:
 10204  1377  35A0               	lslf	??_SetMotorStop,f
 10205  1378                     u4704:
 10206  1378  0B89               	decfsz	9,f
 10207  1379  2B77               	goto	u4705
 10208  137A  0820               	movf	??_SetMotorStop,w
 10209  137B  00A1               	movwf	??_SetMotorStop+1
 10210  137C  0821               	movf	??_SetMotorStop+1,w
 10211  137D  00F4               	movwf	_motorBitOperation
 10212                           
 10213                           ;MotorDrive.c: 2033:     reqStopMotorBit |= motorBitOperation;
 10214  137E  0874               	movf	_motorBitOperation,w
 10215  137F  00A0               	movwf	??_SetMotorStop
 10216  1380  0820               	movf	??_SetMotorStop,w
 10217  1381  0021               	movlb	1	; select bank1
 10218  1382  04D8               	iorwf	_reqStopMotorBit^(0+128),f
 10219  1383  0008               	return
 10220  1384                     __end_of_SetMotorStop:
 10221                           
 10222                           	psect	text57
 10223  10C5                     __ptext57:	
 10224 ;; *************** function _SetAfterDetectLoadFunc *****************
 10225 ;; Defined at:
 10226 ;;		line 1656 in file "MotorDrive.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;  motor_no        1    wreg     unsigned char 
 10229 ;;  func            2    0[BANK0 ] PTR FTN(unsigned char ,)
 10230 ;;		 -> VerifyHandPosition_LoadPosition(1), AfterDetectedLoadPosition(1), 
 10231 ;; Auto vars:     Size  Location     Type
 10232 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10233 ;; Return value:  Size  Location     Type
 10234 ;;                  1    wreg      void 
 10235 ;; Registers used:
 10236 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10237 ;; Tracked objects:
 10238 ;;		On entry : 1F/0
 10239 ;;		On exit  : 1F/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10242 ;;      Params:         0       2       0       0       0       0       0       0
 10243 ;;      Locals:         0       1       0       0       0       0       0       0
 10244 ;;      Temps:          0       0       0       0       0       0       0       0
 10245 ;;      Totals:         0       3       0       0       0       0       0       0
 10246 ;;Total ram usage:        3 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; Hardware stack levels required when called:    8
 10249 ;; This function calls:
 10250 ;;		Nothing
 10251 ;; This function is called by:
 10252 ;;		_SetMotorPositionSearchStart
 10253 ;;		_SetMotorCorrectPositionStart
 10254 ;;		_AfterDetectedLoadPosition
 10255 ;;		_SetFwdPulseWithCorrectProc
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259                           
 10260                           ;psect for function _SetAfterDetectLoadFunc
 10261  10C5                     _SetAfterDetectLoadFunc:
 10262                           
 10263                           ;incstack = 0
 10264                           ; Regs used in _SetAfterDetectLoadFunc: [wreg+fsr1l+fsr1h+status,2+status,0]
 10265                           ;SetAfterDetectLoadFunc@motor_no stored from wreg
 10266  10C5  00A2               	movwf	SetAfterDetectLoadFunc@motor_no
 10267                           
 10268                           ;MotorDrive.c: 1656: void SetAfterDetectLoadFunc(UB motor_no, void ( * func)(UB motor_no
      +                          ));MotorDrive.c: 1657: {;MotorDrive.c: 1658:     cbAfterDetectLoadFunc[ motor_no ] = fun
      +                          c;
 10269  10C6  3522               	lslf	SetAfterDetectLoadFunc@motor_no,w
 10270  10C7  3E20               	addlw	(low (_cbAfterDetectLoadFunc| (0+256)))& (0+255)
 10271  10C8  0086               	movwf	6
 10272  10C9  3001               	movlw	1	; select bank2/3
 10273  10CA  0087               	movwf	7
 10274  10CB  0820               	movf	SetAfterDetectLoadFunc@func,w
 10275  10CC  3FC0               	movwi [0]fsr1
 10276  10CD  0821               	movf	SetAfterDetectLoadFunc@func+1,w
 10277  10CE  3FC1               	movwi [1]fsr1
 10278  10CF  0008               	return
 10279  10D0                     __end_of_SetAfterDetectLoadFunc:
 10280                           
 10281                           	psect	text58
 10282  109B                     __ptext58:	
 10283 ;; *************** function _SetAfterMotorStopFunc *****************
 10284 ;; Defined at:
 10285 ;;		line 1643 in file "MotorDrive.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;  motor_no        1    wreg     unsigned char 
 10288 ;;  func            2    0[BANK0 ] PTR FTN(unsigned char ,)
 10289 ;;		 -> SetFwdPulseWithCorrectProc(1), SpiCmdFunc_Search1008Position(1), SpiCmdFunc_DisableExcitating(1), SpiCmdFunc_Ena
      +bleExcitating(1), 
 10290 ;;		 -> SpiCmdFunc_StopDetectVrs(1), SpiCmdFunc_StartDetectVrs(1), SpiCmdFunc_RevPulsePositionCtl(1), SpiCmdFunc_FwdPuls
      +ePositionCtl(1), 
 10291 ;;		 -> SpiCmdFunc_FwdPulseWithCorrect(1), SpiCmdFunc_SearchBasePosition(1), SpiCmdFunc_SearchLoadPosition(1), SpiCmdFun
      +c_FwdPulseWithShake(1), 
 10292 ;;		 -> SpiCmdFunc_RevPulseNormal(1), SpiCmdFunc_FwdPulseNormal(1), SpiCmdFunc_Test(1), SPIControl_SetNotification(1), 
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      void 
 10297 ;; Registers used:
 10298 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10299 ;; Tracked objects:
 10300 ;;		On entry : 1F/0
 10301 ;;		On exit  : 1F/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10304 ;;      Params:         0       2       0       0       0       0       0       0
 10305 ;;      Locals:         0       1       0       0       0       0       0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0
 10307 ;;      Totals:         0       3       0       0       0       0       0       0
 10308 ;;Total ram usage:        3 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    8
 10311 ;; This function calls:
 10312 ;;		Nothing
 10313 ;; This function is called by:
 10314 ;;		_AfterDetectedLoadPosition
 10315 ;;		_SPIControl_ExecuteCommand
 10316 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _SetAfterMotorStopFunc
 10322  109B                     _SetAfterMotorStopFunc:
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _SetAfterMotorStopFunc: [wreg+fsr1l+fsr1h+status,2+status,0]
 10326                           ;SetAfterMotorStopFunc@motor_no stored from wreg
 10327  109B  00A2               	movwf	SetAfterMotorStopFunc@motor_no
 10328                           
 10329                           ;MotorDrive.c: 1643: void SetAfterMotorStopFunc(UB motor_no, void ( * func)(UB motor_no)
      +                          );MotorDrive.c: 1644: {;MotorDrive.c: 1645:     cbAfterMotorStopFunc[ motor_no ] = func;
 10330  109C  3522               	lslf	SetAfterMotorStopFunc@motor_no,w
 10331  109D  3EAC               	addlw	(low (_cbAfterMotorStopFunc| 0))& (0+255)
 10332  109E  0086               	movwf	6
 10333  109F  0187               	clrf	7
 10334  10A0  0820               	movf	SetAfterMotorStopFunc@func,w
 10335  10A1  3FC0               	movwi [0]fsr1
 10336  10A2  0821               	movf	SetAfterMotorStopFunc@func+1,w
 10337  10A3  3FC1               	movwi [1]fsr1
 10338  10A4  0008               	return
 10339  10A5                     __end_of_SetAfterMotorStopFunc:
 10340                           
 10341                           	psect	text59
 10342  13F2                     __ptext59:	
 10343 ;; *************** function _GetIsMotorActive *****************
 10344 ;; Defined at:
 10345 ;;		line 2634 in file "MotorDrive.c"
 10346 ;; Parameters:    Size  Location     Type
 10347 ;;  motor_no        1    wreg     unsigned char 
 10348 ;; Auto vars:     Size  Location     Type
 10349 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10350 ;;  res             1    3[BANK0 ] unsigned char 
 10351 ;; Return value:  Size  Location     Type
 10352 ;;                  1    wreg      unsigned char 
 10353 ;; Registers used:
 10354 ;;		wreg, status,2, status,0
 10355 ;; Tracked objects:
 10356 ;;		On entry : 1F/0
 10357 ;;		On exit  : 1F/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10360 ;;      Params:         0       0       0       0       0       0       0       0
 10361 ;;      Locals:         0       2       0       0       0       0       0       0
 10362 ;;      Temps:          0       2       0       0       0       0       0       0
 10363 ;;      Totals:         0       4       0       0       0       0       0       0
 10364 ;;Total ram usage:        4 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; Hardware stack levels required when called:    8
 10367 ;; This function calls:
 10368 ;;		Nothing
 10369 ;; This function is called by:
 10370 ;;		_SPIControl_ExecuteCommand
 10371 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           
 10376                           ;psect for function _GetIsMotorActive
 10377  13F2                     _GetIsMotorActive:
 10378                           
 10379                           ;incstack = 0
 10380                           ; Regs used in _GetIsMotorActive: [wreg+status,2+status,0]
 10381                           ;GetIsMotorActive@motor_no stored from wreg
 10382  13F2  00A2               	movwf	GetIsMotorActive@motor_no
 10383                           
 10384                           ;MotorDrive.c: 2634: UB GetIsMotorActive(UB motor_no);MotorDrive.c: 2635: {;MotorDrive.c
      +                          : 2636:     UB res = 0;
 10385  13F3  01A3               	clrf	GetIsMotorActive@res
 10386                           
 10387                           ;MotorDrive.c: 2639:     motorBitOperation = (UB) (0x01 << motor_no);
 10388  13F4  3001               	movlw	1
 10389  13F5  00A0               	movwf	??_GetIsMotorActive
 10390  13F6  0A22               	incf	GetIsMotorActive@motor_no,w
 10391  13F7  2BF9               	goto	u4834
 10392  13F8                     u4835:
 10393  13F8  35A0               	lslf	??_GetIsMotorActive,f
 10394  13F9                     u4834:
 10395  13F9  0B89               	decfsz	9,f
 10396  13FA  2BF8               	goto	u4835
 10397  13FB  0820               	movf	??_GetIsMotorActive,w
 10398  13FC  00A1               	movwf	??_GetIsMotorActive+1
 10399  13FD  0821               	movf	??_GetIsMotorActive+1,w
 10400  13FE  00F4               	movwf	_motorBitOperation
 10401                           
 10402                           ;MotorDrive.c: 2641:     if (motorActiveBit & motorBitOperation) {
 10403  13FF  0856               	movf	_motorActiveBit,w
 10404  1400  0574               	andwf	_motorBitOperation,w
 10405  1401  1903               	btfsc	3,2
 10406  1402  2C05               	goto	l6320
 10407                           
 10408                           ;MotorDrive.c: 2642:         res = 1;
 10409  1403  01A3               	clrf	GetIsMotorActive@res
 10410  1404  0AA3               	incf	GetIsMotorActive@res,f
 10411  1405                     l6320:
 10412                           
 10413                           ;MotorDrive.c: 2645:     return res;
 10414  1405  0823               	movf	GetIsMotorActive@res,w
 10415  1406  0008               	return
 10416  1407                     __end_of_GetIsMotorActive:
 10417                           
 10418                           	psect	text60
 10419  16B3                     __ptext60:	
 10420 ;; *************** function _UpdateTargetPosition *****************
 10421 ;; Defined at:
 10422 ;;		line 2012 in file "MotorDrive.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  motor_no        1    wreg     unsigned char 
 10425 ;;  steps           2   13[BANK0 ] short 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  motor_no        1   17[BANK0 ] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 1F/0
 10434 ;;		On exit  : 1F/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10437 ;;      Params:         0       2       0       0       0       0       0       0
 10438 ;;      Locals:         0       1       0       0       0       0       0       0
 10439 ;;      Temps:          0       2       0       0       0       0       0       0
 10440 ;;      Totals:         0       5       0       0       0       0       0       0
 10441 ;;Total ram usage:        5 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    9
 10444 ;; This function calls:
 10445 ;;		_CorrectPosition
 10446 ;; This function is called by:
 10447 ;;		_SetFwdPulseWithCorrectProc
 10448 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 10449 ;;		_SpiCmdFunc_RevPulsePositionCtl
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           
 10454                           ;psect for function _UpdateTargetPosition
 10455  16B3                     _UpdateTargetPosition:
 10456                           
 10457                           ;incstack = 0
 10458                           ; Regs used in _UpdateTargetPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10459                           ;UpdateTargetPosition@motor_no stored from wreg
 10460  16B3  00B1               	movwf	UpdateTargetPosition@motor_no
 10461                           
 10462                           ;MotorDrive.c: 2012: void UpdateTargetPosition(UB motor_no, H steps);MotorDrive.c: 2013:
      +                           {;MotorDrive.c: 2015:     targetPosition[ motor_no ] += steps;
 10463  16B4  3531               	lslf	UpdateTargetPosition@motor_no,w
 10464  16B5  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10465  16B6  0086               	movwf	6
 10466  16B7  3001               	movlw	1	; select bank2/3
 10467  16B8  0087               	movwf	7
 10468  16B9  082D               	movf	UpdateTargetPosition@steps,w
 10469  16BA  0781               	addwf	1,f
 10470  16BB  3141               	addfsr 1,1
 10471  16BC  082E               	movf	UpdateTargetPosition@steps+1,w
 10472  16BD  3D81               	addwfc	1,f
 10473  16BE  317F               	addfsr 1,-1
 10474                           
 10475                           ;MotorDrive.c: 2017:     CorrectPosition(&targetPosition[ motor_no ], TblMaxSteps[ motor
      +                          _no ]);
 10476  16BF  3531               	lslf	UpdateTargetPosition@motor_no,w
 10477  16C0  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10478  16C1  00A6               	movwf	CorrectPosition@pos
 10479  16C2  3001               	movlw	1
 10480  16C3  00A7               	movwf	CorrectPosition@pos+1
 10481  16C4  0831               	movf	UpdateTargetPosition@motor_no,w
 10482  16C5  00AF               	movwf	??_UpdateTargetPosition
 10483  16C6  01B0               	clrf	??_UpdateTargetPosition+1
 10484  16C7  35AF               	lslf	??_UpdateTargetPosition,f
 10485  16C8  0DB0               	rlf	??_UpdateTargetPosition+1,f
 10486  16C9  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10487  16CA  072F               	addwf	??_UpdateTargetPosition,w
 10488  16CB  0084               	movwf	4
 10489  16CC  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10490  16CD  3D30               	addwfc	??_UpdateTargetPosition+1,w
 10491  16CE  0085               	movwf	5
 10492  16CF  3F00               	moviw [0]fsr0
 10493  16D0  00A8               	movwf	CorrectPosition@max
 10494  16D1  3F01               	moviw [1]fsr0
 10495  16D2  00A9               	movwf	CorrectPosition@max+1
 10496  16D3  3188  200B         	fcall	_CorrectPosition
 10497  16D5  0008               	return
 10498  16D6                     __end_of_UpdateTargetPosition:
 10499                           
 10500                           	psect	text61
 10501  05EB                     __ptext61:	
 10502 ;; *************** function _CalcMotorStepCounter *****************
 10503 ;; Defined at:
 10504 ;;		line 1740 in file "MotorDrive.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;  motor_no        1    wreg     unsigned char 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  motor_no        1   26[BANK0 ] unsigned char 
 10509 ;;  steps           2   24[BANK0 ] short 
 10510 ;;  motor_bit       1   23[BANK0 ] unsigned char 
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      void 
 10513 ;; Registers used:
 10514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10515 ;; Tracked objects:
 10516 ;;		On entry : 1F/0
 10517 ;;		On exit  : 1E/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10520 ;;      Params:         0       0       0       0       0       0       0       0
 10521 ;;      Locals:         0       4       0       0       0       0       0       0
 10522 ;;      Temps:          0       7       0       0       0       0       0       0
 10523 ;;      Totals:         0      11       0       0       0       0       0       0
 10524 ;;Total ram usage:       11 bytes
 10525 ;; Hardware stack levels used:    1
 10526 ;; Hardware stack levels required when called:   10
 10527 ;; This function calls:
 10528 ;;		_CorrectPosition
 10529 ;;		_PriorUpdateCorrentPosition
 10530 ;;		_SetMotorDirection
 10531 ;; This function is called by:
 10532 ;;		_MoveTargetPosition
 10533 ;;		_SetFwdPulseWithCorrectProc
 10534 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 10535 ;;		_SpiCmdFunc_RevPulsePositionCtl
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           
 10540                           ;psect for function _CalcMotorStepCounter
 10541  05EB                     _CalcMotorStepCounter:
 10542                           
 10543                           ;incstack = 0
 10544                           ; Regs used in _CalcMotorStepCounter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10545                           ;CalcMotorStepCounter@motor_no stored from wreg
 10546  05EB  00BA               	movwf	CalcMotorStepCounter@motor_no
 10547                           
 10548                           ;MotorDrive.c: 1740: void CalcMotorStepCounter(UB motor_no);MotorDrive.c: 1741: {;MotorD
      +                          rive.c: 1742:     H steps;;MotorDrive.c: 1743:     UB motor_bit = (UB) (0x01 << motor_no
      +                          );
 10549  05EC  3001               	movlw	1
 10550  05ED  00B0               	movwf	??_CalcMotorStepCounter
 10551  05EE  0A3A               	incf	CalcMotorStepCounter@motor_no,w
 10552  05EF  2DF1               	goto	u4594
 10553  05F0                     u4595:
 10554  05F0  35B0               	lslf	??_CalcMotorStepCounter,f
 10555  05F1                     u4594:
 10556  05F1  0B89               	decfsz	9,f
 10557  05F2  2DF0               	goto	u4595
 10558  05F3  0830               	movf	??_CalcMotorStepCounter,w
 10559  05F4  00B1               	movwf	??_CalcMotorStepCounter+1
 10560  05F5  0831               	movf	??_CalcMotorStepCounter+1,w
 10561  05F6  00B7               	movwf	CalcMotorStepCounter@motor_bit
 10562                           
 10563                           ;MotorDrive.c: 1746:     if (0 == motor_no) {
 10564  05F7  083A               	movf	CalcMotorStepCounter@motor_no,w
 10565  05F8  1D03               	btfss	3,2
 10566  05F9  2E17               	goto	l6084
 10567                           
 10568                           ;MotorDrive.c: 1747:         if (driveDirectionBit & motor_bit) {
 10569  05FA  0857               	movf	_driveDirectionBit,w
 10570  05FB  0537               	andwf	CalcMotorStepCounter@motor_bit,w
 10571  05FC  1903               	btfsc	3,2
 10572  05FD  2E09               	goto	l6080
 10573                           
 10574                           ;MotorDrive.c: 1748:             currentPosition[ motor_no ] -= motorM0StepCounter;
 10575  05FE  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10576  05FF  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10577  0600  0086               	movwf	6
 10578  0601  0187               	clrf	7
 10579  0602  0021               	movlb	1	; select bank1
 10580  0603  0840               	movf	_motorM0StepCounter^(0+128),w
 10581  0604  0281               	subwf	1,f
 10582  0605  3141               	addfsr 1,1
 10583  0606  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
 10584  0607  3B81               	subwfb	1,f
 10585  0608  2E13               	goto	L9
 10586  0609                     l6080:	
 10587                           ;MotorDrive.c: 1749:         } else {
 10588                           
 10589                           
 10590                           ;MotorDrive.c: 1750:             currentPosition[ motor_no ] += motorM0StepCounter;
 10591  0609  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10592  060A  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10593  060B  0086               	movwf	6
 10594  060C  0187               	clrf	7
 10595  060D  0021               	movlb	1	; select bank1
 10596  060E  0840               	movf	_motorM0StepCounter^(0+128),w
 10597  060F  0781               	addwf	1,f
 10598  0610  3141               	addfsr 1,1
 10599  0611  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
 10600  0612  3D81               	addwfc	1,f
 10601  0613                     L9:
 10602  0613  317F               	addfsr 1,-1
 10603                           
 10604                           ;MotorDrive.c: 1752:         motorM0StepCounter = 0;
 10605  0614  01C0               	clrf	_motorM0StepCounter^(0+128)
 10606  0615  01C1               	clrf	(_motorM0StepCounter+1)^(0+128)
 10607                           
 10608                           ;MotorDrive.c: 1753:     } else {
 10609  0616  2E33               	goto	l6092
 10610  0617                     l6084:
 10611                           
 10612                           ;MotorDrive.c: 1754:         if (driveDirectionBit & motor_bit) {
 10613  0617  0857               	movf	_driveDirectionBit,w
 10614  0618  0537               	andwf	CalcMotorStepCounter@motor_bit,w
 10615  0619  1903               	btfsc	3,2
 10616  061A  2E26               	goto	l6088
 10617                           
 10618                           ;MotorDrive.c: 1755:             currentPosition[ motor_no ] -= motorM1StepCounter;
 10619  061B  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10620  061C  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10621  061D  0086               	movwf	6
 10622  061E  0187               	clrf	7
 10623  061F  0021               	movlb	1	; select bank1
 10624  0620  083E               	movf	_motorM1StepCounter^(0+128),w
 10625  0621  0281               	subwf	1,f
 10626  0622  3141               	addfsr 1,1
 10627  0623  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
 10628  0624  3B81               	subwfb	1,f
 10629  0625  2E30               	goto	L10
 10630  0626                     l6088:	
 10631                           ;MotorDrive.c: 1756:         } else {
 10632                           
 10633                           
 10634                           ;MotorDrive.c: 1757:             currentPosition[ motor_no ] += motorM1StepCounter;
 10635  0626  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10636  0627  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10637  0628  0086               	movwf	6
 10638  0629  0187               	clrf	7
 10639  062A  0021               	movlb	1	; select bank1
 10640  062B  083E               	movf	_motorM1StepCounter^(0+128),w
 10641  062C  0781               	addwf	1,f
 10642  062D  3141               	addfsr 1,1
 10643  062E  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
 10644  062F  3D81               	addwfc	1,f
 10645  0630                     L10:
 10646  0630  317F               	addfsr 1,-1
 10647                           
 10648                           ;MotorDrive.c: 1759:         motorM1StepCounter = 0;
 10649  0631  01BE               	clrf	_motorM1StepCounter^(0+128)
 10650  0632  01BF               	clrf	(_motorM1StepCounter+1)^(0+128)
 10651  0633                     l6092:
 10652                           
 10653                           ;MotorDrive.c: 1762:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
 10654  0633  0020               	movlb	0	; select bank0
 10655  0634  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10656  0635  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10657  0636  00A6               	movwf	CorrectPosition@pos
 10658  0637  3000               	movlw	0
 10659  0638  00A7               	movwf	CorrectPosition@pos+1
 10660  0639  083A               	movf	CalcMotorStepCounter@motor_no,w
 10661  063A  00B0               	movwf	??_CalcMotorStepCounter
 10662  063B  01B1               	clrf	??_CalcMotorStepCounter+1
 10663  063C  35B0               	lslf	??_CalcMotorStepCounter,f
 10664  063D  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10665  063E  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10666  063F  0730               	addwf	??_CalcMotorStepCounter,w
 10667  0640  0084               	movwf	4
 10668  0641  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10669  0642  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10670  0643  0085               	movwf	5
 10671  0644  3F00               	moviw [0]fsr0
 10672  0645  00A8               	movwf	CorrectPosition@max
 10673  0646  3F01               	moviw [1]fsr0
 10674  0647  00A9               	movwf	CorrectPosition@max+1
 10675  0648  3188  200B  3185   	fcall	_CorrectPosition
 10676                           
 10677                           ;MotorDrive.c: 1765:     SetMotorDirection(motor_no, 1);
 10678  064B  01A0               	clrf	SetMotorDirection@dir
 10679  064C  0AA0               	incf	SetMotorDirection@dir,f
 10680  064D  083A               	movf	CalcMotorStepCounter@motor_no,w
 10681  064E  3195  2509  3185   	fcall	_SetMotorDirection
 10682                           
 10683                           ;MotorDrive.c: 1766:     steps = targetPosition[ motor_no ] - currentPosition[ motor_no 
      +                          ];
 10684  0651  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10685  0652  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10686  0653  0086               	movwf	6
 10687  0654  0187               	clrf	7
 10688  0655  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10689  0656  3E64               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10690  0657  0084               	movwf	4
 10691  0658  3001               	movlw	1	; select bank2/3
 10692  0659  0085               	movwf	5
 10693  065A  3F40               	moviw [0]fsr1
 10694  065B  0200               	subwf	0,w
 10695  065C  00B8               	movwf	CalcMotorStepCounter@steps
 10696  065D  3101               	addfsr 0,1
 10697  065E  3F41               	moviw [1]fsr1
 10698  065F  3B00               	subwfb	0,w
 10699  0660  00B9               	movwf	CalcMotorStepCounter@steps+1
 10700  0661                     l6100:	
 10701                           ;MotorDrive.c: 1768:     while (steps < 0) {
 10702                           
 10703                           
 10704                           ;MotorDrive.c: 1768:     while (steps < 0) {
 10705  0661  1FB9               	btfss	CalcMotorStepCounter@steps+1,7
 10706  0662  2E77               	goto	l6102
 10707                           
 10708                           ;MotorDrive.c: 1769:         steps += TblMaxSteps[ motor_no ];
 10709  0663  083A               	movf	CalcMotorStepCounter@motor_no,w
 10710  0664  00B0               	movwf	??_CalcMotorStepCounter
 10711  0665  01B1               	clrf	??_CalcMotorStepCounter+1
 10712  0666  35B0               	lslf	??_CalcMotorStepCounter,f
 10713  0667  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10714  0668  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10715  0669  0730               	addwf	??_CalcMotorStepCounter,w
 10716  066A  0084               	movwf	4
 10717  066B  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10718  066C  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10719  066D  0085               	movwf	5
 10720  066E  3F00               	moviw [0]fsr0
 10721  066F  00B2               	movwf	??_CalcMotorStepCounter+2
 10722  0670  3F01               	moviw [1]fsr0
 10723  0671  00B3               	movwf	??_CalcMotorStepCounter+3
 10724  0672  0832               	movf	??_CalcMotorStepCounter+2,w
 10725  0673  07B8               	addwf	CalcMotorStepCounter@steps,f
 10726  0674  0833               	movf	??_CalcMotorStepCounter+3,w
 10727  0675  3DB9               	addwfc	CalcMotorStepCounter@steps+1,f
 10728  0676  2E61               	goto	l6100
 10729  0677                     l6102:
 10730                           
 10731                           ;MotorDrive.c: 1772:     if ((steps * 2) > TblMaxSteps[ motor_no ]) {
 10732  0677  0839               	movf	CalcMotorStepCounter@steps+1,w
 10733  0678  00B1               	movwf	??_CalcMotorStepCounter+1
 10734  0679  0838               	movf	CalcMotorStepCounter@steps,w
 10735  067A  00B0               	movwf	??_CalcMotorStepCounter
 10736  067B  35B0               	lslf	??_CalcMotorStepCounter,f
 10737  067C  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10738  067D  083A               	movf	CalcMotorStepCounter@motor_no,w
 10739  067E  00B2               	movwf	??_CalcMotorStepCounter+2
 10740  067F  01B3               	clrf	??_CalcMotorStepCounter+3
 10741  0680  35B2               	lslf	??_CalcMotorStepCounter+2,f
 10742  0681  0DB3               	rlf	??_CalcMotorStepCounter+3,f
 10743  0682  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10744  0683  0732               	addwf	??_CalcMotorStepCounter+2,w
 10745  0684  0084               	movwf	4
 10746  0685  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10747  0686  3D33               	addwfc	??_CalcMotorStepCounter+3,w
 10748  0687  0085               	movwf	5
 10749  0688  3F00               	moviw [0]fsr0
 10750  0689  00B4               	movwf	??_CalcMotorStepCounter+4
 10751  068A  3F01               	moviw [1]fsr0
 10752  068B  00B5               	movwf	??_CalcMotorStepCounter+5
 10753  068C  0835               	movf	??_CalcMotorStepCounter+5,w
 10754  068D  3A80               	xorlw	128
 10755  068E  00B6               	movwf	??_CalcMotorStepCounter+6
 10756  068F  0831               	movf	??_CalcMotorStepCounter+1,w
 10757  0690  3A80               	xorlw	128
 10758  0691  0236               	subwf	??_CalcMotorStepCounter+6,w
 10759  0692  1D03               	skipz
 10760  0693  2E96               	goto	u4645
 10761  0694  0830               	movf	??_CalcMotorStepCounter,w
 10762  0695  0234               	subwf	??_CalcMotorStepCounter+4,w
 10763  0696                     u4645:
 10764  0696  1803               	skipnc
 10765  0697  2EB3               	goto	l6108
 10766                           
 10767                           ;MotorDrive.c: 1773:         SetMotorDirection(motor_no, 0);
 10768  0698  0020               	movlb	0	; select bank0
 10769  0699  01A0               	clrf	SetMotorDirection@dir
 10770  069A  083A               	movf	CalcMotorStepCounter@motor_no,w
 10771  069B  3195  2509  3185   	fcall	_SetMotorDirection
 10772                           
 10773                           ;MotorDrive.c: 1774:         steps = TblMaxSteps[ motor_no ] - steps;
 10774  069E  083A               	movf	CalcMotorStepCounter@motor_no,w
 10775  069F  00B0               	movwf	??_CalcMotorStepCounter
 10776  06A0  01B1               	clrf	??_CalcMotorStepCounter+1
 10777  06A1  35B0               	lslf	??_CalcMotorStepCounter,f
 10778  06A2  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10779  06A3  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10780  06A4  0730               	addwf	??_CalcMotorStepCounter,w
 10781  06A5  0084               	movwf	4
 10782  06A6  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10783  06A7  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10784  06A8  0085               	movwf	5
 10785  06A9  3F00               	moviw [0]fsr0
 10786  06AA  00B2               	movwf	??_CalcMotorStepCounter+2
 10787  06AB  3F01               	moviw [1]fsr0
 10788  06AC  00B3               	movwf	??_CalcMotorStepCounter+3
 10789  06AD  0838               	movf	CalcMotorStepCounter@steps,w
 10790  06AE  0232               	subwf	??_CalcMotorStepCounter+2,w
 10791  06AF  00B8               	movwf	CalcMotorStepCounter@steps
 10792  06B0  0839               	movf	CalcMotorStepCounter@steps+1,w
 10793  06B1  3B33               	subwfb	??_CalcMotorStepCounter+3,w
 10794  06B2  00B9               	movwf	CalcMotorStepCounter@steps+1
 10795  06B3                     l6108:
 10796                           
 10797                           ;MotorDrive.c: 1777:     motorStepCounterSet[ motor_no ] = steps;
 10798  06B3  0020               	movlb	0	; select bank0
 10799  06B4  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10800  06B5  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10801  06B6  0086               	movwf	6
 10802  06B7  0187               	clrf	7
 10803  06B8  0838               	movf	CalcMotorStepCounter@steps,w
 10804  06B9  3FC0               	movwi [0]fsr1
 10805  06BA  0839               	movf	CalcMotorStepCounter@steps+1,w
 10806  06BB  3FC1               	movwi [1]fsr1
 10807                           
 10808                           ;MotorDrive.c: 1779:     PriorUpdateCorrentPosition(motor_no);
 10809  06BC  083A               	movf	CalcMotorStepCounter@motor_no,w
 10810  06BD  3188  20C2         	fcall	_PriorUpdateCorrentPosition
 10811  06BF  0008               	return
 10812  06C0                     __end_of_CalcMotorStepCounter:
 10813                           
 10814                           	psect	text62
 10815  1102                     __ptext62:	
 10816 ;; *************** function _SetMotorStepCounter *****************
 10817 ;; Defined at:
 10818 ;;		line 1700 in file "MotorDrive.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  motor_no        1    wreg     unsigned char 
 10821 ;;  steps           2   16[BANK0 ] short 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  motor_no        1   18[BANK0 ] unsigned char 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 1F/0
 10830 ;;		On exit  : 1E/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10833 ;;      Params:         0       2       0       0       0       0       0       0
 10834 ;;      Locals:         0       1       0       0       0       0       0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0
 10836 ;;      Totals:         0       3       0       0       0       0       0       0
 10837 ;;Total ram usage:        3 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:   10
 10840 ;; This function calls:
 10841 ;;		_PriorUpdateCorrentPosition
 10842 ;; This function is called by:
 10843 ;;		_main
 10844 ;;		_SpiCmdFunc_FwdPulseNormal
 10845 ;;		_SpiCmdFunc_RevPulseNormal
 10846 ;;		_SpiCmdFunc_SearchBasePosition
 10847 ;;		_SpiCmdFunc_Search1008Position
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           
 10852                           ;psect for function _SetMotorStepCounter
 10853  1102                     _SetMotorStepCounter:
 10854                           
 10855                           ;incstack = 0
 10856                           ; Regs used in _SetMotorStepCounter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10857                           ;SetMotorStepCounter@motor_no stored from wreg
 10858  1102  00B2               	movwf	SetMotorStepCounter@motor_no
 10859                           
 10860                           ;MotorDrive.c: 1700: void SetMotorStepCounter(UB motor_no, H steps);MotorDrive.c: 1701: 
      +                          {;MotorDrive.c: 1702:     motorStepCounterSet[ motor_no ] = steps;
 10861  1103  3532               	lslf	SetMotorStepCounter@motor_no,w
 10862  1104  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10863  1105  0086               	movwf	6
 10864  1106  0187               	clrf	7
 10865  1107  0830               	movf	SetMotorStepCounter@steps,w
 10866  1108  3FC0               	movwi [0]fsr1
 10867  1109  0831               	movf	SetMotorStepCounter@steps+1,w
 10868  110A  3FC1               	movwi [1]fsr1
 10869                           
 10870                           ;MotorDrive.c: 1704:     PriorUpdateCorrentPosition(motor_no);
 10871  110B  0832               	movf	SetMotorStepCounter@motor_no,w
 10872  110C  3188  20C2         	fcall	_PriorUpdateCorrentPosition
 10873  110E  0008               	return
 10874  110F                     __end_of_SetMotorStepCounter:
 10875                           
 10876                           	psect	text63
 10877  08C2                     __ptext63:	
 10878 ;; *************** function _PriorUpdateCorrentPosition *****************
 10879 ;; Defined at:
 10880 ;;		line 1986 in file "MotorDrive.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  motor_no        1    wreg     unsigned char 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  motor_no        1   15[BANK0 ] unsigned char 
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  1    wreg      void 
 10887 ;; Registers used:
 10888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10889 ;; Tracked objects:
 10890 ;;		On entry : 1F/0
 10891 ;;		On exit  : 1E/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10894 ;;      Params:         0       0       0       0       0       0       0       0
 10895 ;;      Locals:         0       1       0       0       0       0       0       0
 10896 ;;      Temps:          0       2       0       0       0       0       0       0
 10897 ;;      Totals:         0       3       0       0       0       0       0       0
 10898 ;;Total ram usage:        3 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    9
 10901 ;; This function calls:
 10902 ;;		_CorrectPosition
 10903 ;; This function is called by:
 10904 ;;		_SetMotorStepCounter
 10905 ;;		_CalcMotorStepCounter
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           
 10910                           ;psect for function _PriorUpdateCorrentPosition
 10911  08C2                     _PriorUpdateCorrentPosition:
 10912                           
 10913                           ;incstack = 0
 10914                           ; Regs used in _PriorUpdateCorrentPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10915                           ;PriorUpdateCorrentPosition@motor_no stored from wreg
 10916  08C2  00AF               	movwf	PriorUpdateCorrentPosition@motor_no
 10917                           
 10918                           ;MotorDrive.c: 1986: void PriorUpdateCorrentPosition(UB motor_no);MotorDrive.c: 1987: {;
      +                          MotorDrive.c: 1988:     motorBitOperation = (UB) (0x01 << motor_no);
 10919  08C3  3001               	movlw	1
 10920  08C4  00AD               	movwf	??_PriorUpdateCorrentPosition
 10921  08C5  0A2F               	incf	PriorUpdateCorrentPosition@motor_no,w
 10922  08C6  28C8               	goto	u4434
 10923  08C7                     u4435:
 10924  08C7  35AD               	lslf	??_PriorUpdateCorrentPosition,f
 10925  08C8                     u4434:
 10926  08C8  0B89               	decfsz	9,f
 10927  08C9  28C7               	goto	u4435
 10928  08CA  082D               	movf	??_PriorUpdateCorrentPosition,w
 10929  08CB  00AE               	movwf	??_PriorUpdateCorrentPosition+1
 10930  08CC  082E               	movf	??_PriorUpdateCorrentPosition+1,w
 10931  08CD  00F4               	movwf	_motorBitOperation
 10932                           
 10933                           ;MotorDrive.c: 1990:     if (handPositionActiveBit & motorBitOperation) {
 10934  08CE  0021               	movlb	1	; select bank1
 10935  08CF  0851               	movf	_handPositionActiveBit^(0+128),w
 10936  08D0  0574               	andwf	_motorBitOperation,w
 10937  08D1  1903               	btfsc	3,2
 10938  08D2  0008               	return
 10939                           
 10940                           ;MotorDrive.c: 1992:         if (driveDirectionBit & motorBitOperation) {
 10941  08D3  0020               	movlb	0	; select bank0
 10942  08D4  0857               	movf	_driveDirectionBit,w
 10943  08D5  0574               	andwf	_motorBitOperation,w
 10944  08D6  1903               	btfsc	3,2
 10945  08D7  28E7               	goto	l5918
 10946                           
 10947                           ;MotorDrive.c: 1994:             currentPosition[ motor_no ] += motorStepCounterSet[ mot
      +                          or_no ];
 10948  08D8  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10949  08D9  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10950  08DA  0086               	movwf	6
 10951  08DB  0187               	clrf	7
 10952  08DC  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10953  08DD  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10954  08DE  0084               	movwf	4
 10955  08DF  0185               	clrf	5
 10956  08E0  3F40               	moviw [0]fsr1
 10957  08E1  0780               	addwf	0,f
 10958  08E2  3101               	addfsr 0,1
 10959  08E3  3F41               	moviw [1]fsr1
 10960  08E4  3D80               	addwfc	0,f
 10961  08E5  313F               	addfsr 0,-1
 10962                           
 10963                           ;MotorDrive.c: 1995:         } else {
 10964  08E6  28F9               	goto	l5920
 10965  08E7                     l5918:
 10966                           
 10967                           ;MotorDrive.c: 1997:             currentPosition[ motor_no ] -= motorStepCounterSet[ mot
      +                          or_no ];
 10968  08E7  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10969  08E8  3EA8               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10970  08E9  0086               	movwf	6
 10971  08EA  0187               	clrf	7
 10972  08EB  3F40               	moviw [0]fsr1
 10973  08EC  00AD               	movwf	??_PriorUpdateCorrentPosition
 10974  08ED  3F41               	moviw [1]fsr1
 10975  08EE  00AE               	movwf	??_PriorUpdateCorrentPosition+1
 10976  08EF  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10977  08F0  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10978  08F1  0086               	movwf	6
 10979  08F2  0187               	clrf	7
 10980  08F3  082D               	movf	??_PriorUpdateCorrentPosition,w
 10981  08F4  0281               	subwf	1,f
 10982  08F5  3141               	addfsr 1,1
 10983  08F6  082E               	movf	??_PriorUpdateCorrentPosition+1,w
 10984  08F7  3B81               	subwfb	1,f
 10985  08F8  317F               	addfsr 1,-1
 10986  08F9                     l5920:
 10987                           
 10988                           ;MotorDrive.c: 2000:         CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ 
      +                          motor_no ]);
 10989  08F9  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10990  08FA  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10991  08FB  00A6               	movwf	CorrectPosition@pos
 10992  08FC  3000               	movlw	0
 10993  08FD  00A7               	movwf	CorrectPosition@pos+1
 10994  08FE  082F               	movf	PriorUpdateCorrentPosition@motor_no,w
 10995  08FF  00AD               	movwf	??_PriorUpdateCorrentPosition
 10996  0900  01AE               	clrf	??_PriorUpdateCorrentPosition+1
 10997  0901  35AD               	lslf	??_PriorUpdateCorrentPosition,f
 10998  0902  0DAE               	rlf	??_PriorUpdateCorrentPosition+1,f
 10999  0903  3056               	movlw	low (_TblMaxSteps| (0+32768))
 11000  0904  072D               	addwf	??_PriorUpdateCorrentPosition,w
 11001  0905  0084               	movwf	4
 11002  0906  3098               	movlw	high (_TblMaxSteps| (0+32768))
 11003  0907  3D2E               	addwfc	??_PriorUpdateCorrentPosition+1,w
 11004  0908  0085               	movwf	5
 11005  0909  3F00               	moviw [0]fsr0
 11006  090A  00A8               	movwf	CorrectPosition@max
 11007  090B  3F01               	moviw [1]fsr0
 11008  090C  00A9               	movwf	CorrectPosition@max+1
 11009  090D  3188  200B         	fcall	_CorrectPosition
 11010  090F  0008               	return
 11011  0910                     __end_of_PriorUpdateCorrentPosition:
 11012                           
 11013                           	psect	text64
 11014  080B                     __ptext64:	
 11015 ;; *************** function _CorrectPosition *****************
 11016 ;; Defined at:
 11017 ;;		line 1962 in file "MotorDrive.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  pos             2    6[BANK0 ] PTR short 
 11020 ;;		 -> detectBasePosition(4), missingDetectFinePosition(2), detectLoadPosition(92), currentPosition(4), 
 11021 ;;		 -> targetPosition(4), 
 11022 ;;  max             2    8[BANK0 ] short 
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;		None
 11025 ;; Return value:  Size  Location     Type
 11026 ;;                  1    wreg      void 
 11027 ;; Registers used:
 11028 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11029 ;; Tracked objects:
 11030 ;;		On entry : 1F/0
 11031 ;;		On exit  : 1F/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11034 ;;      Params:         0       4       0       0       0       0       0       0
 11035 ;;      Locals:         0       0       0       0       0       0       0       0
 11036 ;;      Temps:          0       3       0       0       0       0       0       0
 11037 ;;      Totals:         0       7       0       0       0       0       0       0
 11038 ;;Total ram usage:        7 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    8
 11041 ;; This function calls:
 11042 ;;		Nothing
 11043 ;; This function is called by:
 11044 ;;		_CalcMotorStepCounter
 11045 ;;		_PriorUpdateCorrentPosition
 11046 ;;		_UpdateTargetPosition
 11047 ;;		_AfterDetectedLoadPosition
 11048 ;;		_DetermineBasePosition
 11049 ;;		_UpdataHandPosition
 11050 ;;		_VerifyHandPosition_LoadPosition
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           
 11055                           ;psect for function _CorrectPosition
 11056  080B                     _CorrectPosition:
 11057                           
 11058                           ;MotorDrive.c: 1962: void CorrectPosition(H *pos, H max);MotorDrive.c: 1963: {;MotorDriv
      +                          e.c: 1964:     if (max == 0) {
 11059                           
 11060                           ;incstack = 0
 11061                           ; Regs used in _CorrectPosition: [wreg+fsr1l+fsr1h+status,2+status,0]
 11062  080B  0828               	movf	CorrectPosition@max,w
 11063  080C  0429               	iorwf	CorrectPosition@max+1,w
 11064  080D  1903               	btfsc	3,2
 11065  080E  0008               	return
 11066  080F                     l885:	
 11067                           ;MotorDrive.c: 1970:     }
 11068                           
 11069                           
 11070                           ;MotorDrive.c: 1968:     while (*pos >= max) {
 11071  080F  0826               	movf	CorrectPosition@pos,w
 11072  0810  0086               	movwf	6
 11073  0811  0827               	movf	CorrectPosition@pos+1,w
 11074  0812  0087               	movwf	7
 11075  0813  3F40               	moviw [0]fsr1
 11076  0814  00AA               	movwf	??_CorrectPosition
 11077  0815  3F41               	moviw [1]fsr1
 11078  0816  00AB               	movwf	??_CorrectPosition+1
 11079  0817  082B               	movf	??_CorrectPosition+1,w
 11080  0818  3A80               	xorlw	128
 11081  0819  00AC               	movwf	??_CorrectPosition+2
 11082  081A  0829               	movf	CorrectPosition@max+1,w
 11083  081B  3A80               	xorlw	128
 11084  081C  022C               	subwf	??_CorrectPosition+2,w
 11085  081D  1D03               	skipz
 11086  081E  2821               	goto	u4255
 11087  081F  0828               	movf	CorrectPosition@max,w
 11088  0820  022A               	subwf	??_CorrectPosition,w
 11089  0821                     u4255:
 11090  0821  1C03               	btfss	3,0
 11091  0822  2839               	goto	l888
 11092                           
 11093                           ;MotorDrive.c: 1969:         *pos -= max;
 11094  0823  0020               	movlb	0	; select bank0
 11095  0824  0826               	movf	CorrectPosition@pos,w
 11096  0825  0086               	movwf	6
 11097  0826  0827               	movf	CorrectPosition@pos+1,w
 11098  0827  0087               	movwf	7
 11099  0828  0828               	movf	CorrectPosition@max,w
 11100  0829  0281               	subwf	1,f
 11101  082A  3141               	addfsr 1,1
 11102  082B  0829               	movf	CorrectPosition@max+1,w
 11103  082C  3B81               	subwfb	1,f
 11104  082D  317F               	addfsr 1,-1
 11105  082E  280F               	goto	l885
 11106  082F                     l5820:
 11107                           
 11108                           ;MotorDrive.c: 1973:         *pos += max;
 11109  082F  0826               	movf	CorrectPosition@pos,w
 11110  0830  0086               	movwf	6
 11111  0831  0827               	movf	CorrectPosition@pos+1,w
 11112  0832  0087               	movwf	7
 11113  0833  0828               	movf	CorrectPosition@max,w
 11114  0834  0781               	addwf	1,f
 11115  0835  3141               	addfsr 1,1
 11116  0836  0829               	movf	CorrectPosition@max+1,w
 11117  0837  3D81               	addwfc	1,f
 11118  0838  317F               	addfsr 1,-1
 11119  0839                     l888:	
 11120                           ;MotorDrive.c: 1974:     }
 11121                           
 11122                           
 11123                           ;MotorDrive.c: 1972:     while (*pos < 0) {
 11124  0839  0020               	movlb	0	; select bank0
 11125  083A  0826               	movf	CorrectPosition@pos,w
 11126  083B  0086               	movwf	6
 11127  083C  0827               	movf	CorrectPosition@pos+1,w
 11128  083D  0087               	movwf	7
 11129  083E  3F40               	moviw [0]fsr1
 11130  083F  00AA               	movwf	??_CorrectPosition
 11131  0840  3F41               	moviw [1]fsr1
 11132  0841  00AB               	movwf	??_CorrectPosition+1
 11133  0842  1FAB               	btfss	??_CorrectPosition+1,7
 11134  0843  0008               	return
 11135  0844  282F               	goto	l5820
 11136  0845                     __end_of_CorrectPosition:
 11137                           
 11138                           	psect	text65
 11139  1091                     __ptext65:	
 11140 ;; *************** function _SetMotorStart *****************
 11141 ;; Defined at:
 11142 ;;		line 1859 in file "MotorDrive.c"
 11143 ;; Parameters:    Size  Location     Type
 11144 ;;  motor_no        1    wreg     unsigned char 
 11145 ;; Auto vars:     Size  Location     Type
 11146 ;;  motor_no        1    1[BANK0 ] unsigned char 
 11147 ;; Return value:  Size  Location     Type
 11148 ;;                  1    wreg      void 
 11149 ;; Registers used:
 11150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11151 ;; Tracked objects:
 11152 ;;		On entry : 1F/0
 11153 ;;		On exit  : 1F/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11156 ;;      Params:         0       0       0       0       0       0       0       0
 11157 ;;      Locals:         0       1       0       0       0       0       0       0
 11158 ;;      Temps:          0       0       0       0       0       0       0       0
 11159 ;;      Totals:         0       1       0       0       0       0       0       0
 11160 ;;Total ram usage:        1 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; Hardware stack levels required when called:   10
 11163 ;; This function calls:
 11164 ;;		_StartPulseOutM0
 11165 ;;		_StartPulseOutM1
 11166 ;; This function is called by:
 11167 ;;		_main
 11168 ;;		_SetMotorPositionSearchStart
 11169 ;;		_AfterDetectedLoadPosition
 11170 ;;		_MoveTargetPosition
 11171 ;;		_SpiCmdFunc_FwdPulseNormal
 11172 ;;		_SpiCmdFunc_RevPulseNormal
 11173 ;;		_SetFwdPulseWithCorrectProc
 11174 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11175 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _SetMotorStart
 11181  1091                     _SetMotorStart:
 11182                           
 11183                           ;incstack = 0
 11184                           ; Regs used in _SetMotorStart: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11185                           ;SetMotorStart@motor_no stored from wreg
 11186  1091  00A1               	movwf	SetMotorStart@motor_no
 11187                           
 11188                           ;MotorDrive.c: 1859: void SetMotorStart(UB motor_no);MotorDrive.c: 1860: {;MotorDrive.c:
      +                           1861:     if (motor_no == 0) {
 11189  1092  0821               	movf	SetMotorStart@motor_no,w
 11190  1093  1D03               	btfss	3,2
 11191  1094  2898               	goto	l6022
 11192                           
 11193                           ;MotorDrive.c: 1863:         StartPulseOutM0();
 11194  1095  318A  22A6         	fcall	_StartPulseOutM0
 11195                           
 11196                           ;MotorDrive.c: 1865:     } else {
 11197  1097  0008               	return
 11198  1098                     l6022:
 11199                           
 11200                           ;MotorDrive.c: 1867:         StartPulseOutM1();
 11201  1098  318B  2316         	fcall	_StartPulseOutM1
 11202  109A  0008               	return
 11203  109B                     __end_of_SetMotorStart:
 11204                           
 11205                           	psect	text66
 11206  0B16                     __ptext66:	
 11207 ;; *************** function _StartPulseOutM1 *****************
 11208 ;; Defined at:
 11209 ;;		line 1341 in file "MotorDrive.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;		None
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      void 
 11216 ;; Registers used:
 11217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11218 ;; Tracked objects:
 11219 ;;		On entry : 1F/0
 11220 ;;		On exit  : 1F/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11223 ;;      Params:         0       0       0       0       0       0       0       0
 11224 ;;      Locals:         0       0       0       0       0       0       0       0
 11225 ;;      Temps:          0       1       0       0       0       0       0       0
 11226 ;;      Totals:         0       1       0       0       0       0       0       0
 11227 ;;Total ram usage:        1 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    9
 11230 ;; This function calls:
 11231 ;;		_TMR2_StartTimer
 11232 ;; This function is called by:
 11233 ;;		_SetMotorStart
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _StartPulseOutM1
 11239  0B16                     _StartPulseOutM1:
 11240                           
 11241                           ;MotorDrive.c: 1343:     (INTCONbits.PEIE = 0);
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _StartPulseOutM1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11245  0B16  130B               	bcf	11,6	;volatile
 11246                           
 11247                           ;MotorDrive.c: 1345:     if ((reqSearchBasePosBit & 0x02) || (motorStepCounterSet[ 1 ]))
      +                           {
 11248  0B17  18D5               	btfsc	_reqSearchBasePosBit,1
 11249  0B18  2B1E               	goto	l5874
 11250  0B19  0021               	movlb	1	; select bank1
 11251  0B1A  082A               	movf	(_motorStepCounterSet^(0+128)+2),w
 11252  0B1B  042B               	iorwf	((_motorStepCounterSet+1)^(0+128)+2),w
 11253  0B1C  1903               	btfsc	3,2
 11254  0B1D  2B81               	goto	l5908
 11255  0B1E                     l5874:
 11256                           
 11257                           ;MotorDrive.c: 1347:         TblM1PulseChangePositionLast = finishPositionCtSet[ 1 ];
 11258  0B1E  0021               	movlb	1	; select bank1
 11259  0B1F  0847               	movf	(_finishPositionCtSet^(0+128)+1),w
 11260  0B20  0020               	movlb	0	; select bank0
 11261  0B21  00A0               	movwf	??_StartPulseOutM1
 11262  0B22  0820               	movf	??_StartPulseOutM1,w
 11263  0B23  0021               	movlb	1	; select bank1
 11264  0B24  00EB               	movwf	_TblM1PulseChangePositionLast^(0+128)
 11265                           
 11266                           ;MotorDrive.c: 1349:         if (driveDirectionBit & 0x02) {
 11267  0B25  0020               	movlb	0	; select bank0
 11268  0B26  1CD7               	btfss	_driveDirectionBit,1
 11269  0B27  2B45               	goto	l763
 11270                           
 11271                           ;MotorDrive.c: 1351:             if (addShakePulseBit & 0x02) {
 11272  0B28  1CF0               	btfss	_addShakePulseBit,1
 11273  0B29  2B39               	goto	l764
 11274                           
 11275                           ;MotorDrive.c: 1353:                 if (polarityBit & 0x02) {
 11276  0B2A  1CF1               	btfss	_polarityBit,1
 11277  0B2B  2B31               	goto	l5884
 11278                           
 11279                           ;MotorDrive.c: 1355:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_S
      +                          HAKE_POL1_P0;
 11280  0B2C  30DF               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 11281  0B2D  0021               	movlb	1	; select bank1
 11282  0B2E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11283  0B2F  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 11284  0B30  2B35               	goto	L11
 11285  0B31                     l5884:	
 11286                           ;MotorDrive.c: 1356:                 } else {
 11287                           
 11288                           
 11289                           ;MotorDrive.c: 1358:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_S
      +                          HAKE_POL0_P0;
 11290  0B31  30EE               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 11291  0B32  0021               	movlb	1	; select bank1
 11292  0B33  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11293  0B34  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 11294  0B35                     L11:
 11295  0B35  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 11296                           
 11297                           ;MotorDrive.c: 1361:                 m1PulsePositionCtWork = ( 1 - 1 );
 11298  0B36  01E8               	clrf	_m1PulsePositionCtWork^(0+128)
 11299                           
 11300                           ;MotorDrive.c: 1362:                 m1PulseOutStepWork = ID_PULSE_OUT_STEP_P0;
 11301  0B37  01E4               	clrf	_m1PulseOutStepWork^(0+128)
 11302                           
 11303                           ;MotorDrive.c: 1366:             } else {
 11304  0B38  2B5D               	goto	l5898
 11305  0B39                     l764:
 11306                           
 11307                           ;MotorDrive.c: 1368:                 if (polarityBit & 0x02) {
 11308  0B39  1CF1               	btfss	_polarityBit,1
 11309  0B3A  2B40               	goto	l5892
 11310                           
 11311                           ;MotorDrive.c: 1370:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_F
      +                          WD_POL1_P1;
 11312  0B3B  30FD               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 11313  0B3C  0021               	movlb	1	; select bank1
 11314  0B3D  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11315  0B3E  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 11316  0B3F  2B50               	goto	L13
 11317  0B40                     l5892:	
 11318                           ;MotorDrive.c: 1371:                 } else {
 11319                           
 11320                           
 11321                           ;MotorDrive.c: 1373:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_F
      +                          WD_POL0_P1;
 11322  0B40  300C               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 11323  0B41  0021               	movlb	1	; select bank1
 11324  0B42  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11325  0B43  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 11326  0B44  2B50               	goto	L13
 11327  0B45                     l763:
 11328                           
 11329                           ;MotorDrive.c: 1382:             if (polarityBit & 0x02) {
 11330  0B45  1CF1               	btfss	_polarityBit,1
 11331  0B46  2B4C               	goto	l5896
 11332                           
 11333                           ;MotorDrive.c: 1384:                 m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_P
      +                          OL1_P1;
 11334  0B47  301B               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P1
 11335  0B48  0021               	movlb	1	; select bank1
 11336  0B49  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11337  0B4A  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P1
 11338  0B4B  2B50               	goto	L13
 11339  0B4C                     l5896:	
 11340                           ;MotorDrive.c: 1385:             } else {
 11341                           
 11342                           
 11343                           ;MotorDrive.c: 1387:                 m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_P
      +                          OL0_P1;
 11344  0B4C  302A               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P1
 11345  0B4D  0021               	movlb	1	; select bank1
 11346  0B4E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11347  0B4F  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P1
 11348  0B50                     L13:
 11349  0B50  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 11350                           
 11351                           ;MotorDrive.c: 1376:                 m1PulsePositionCtWork = ( ( 1 + ( ( 1 - 1 ) + 5 + 4
      +                           + ( 1 + 3 ) * 10 ) ) - 1 );
 11352                           
 11353                           ;MotorDrive.c: 1374:                 }
 11354  0B51  3031               	movlw	49
 11355  0B52  0020               	movlb	0	; select bank0
 11356  0B53  00A0               	movwf	??_StartPulseOutM1
 11357  0B54  0820               	movf	??_StartPulseOutM1,w
 11358  0B55  0021               	movlb	1	; select bank1
 11359  0B56  00E8               	movwf	_m1PulsePositionCtWork^(0+128)
 11360                           
 11361                           ;MotorDrive.c: 1377:                 m1PulseOutStepWork = ID_PULSE_OUT_STEP_P1;
 11362  0B57  3016               	movlw	22
 11363  0B58  0020               	movlb	0	; select bank0
 11364  0B59  00A0               	movwf	??_StartPulseOutM1
 11365  0B5A  0820               	movf	??_StartPulseOutM1,w
 11366  0B5B  0021               	movlb	1	; select bank1
 11367  0B5C  00E4               	movwf	_m1PulseOutStepWork^(0+128)
 11368  0B5D                     l5898:
 11369                           
 11370                           ;MotorDrive.c: 1395:         motorActiveBit |= 0x02;
 11371  0B5D  0020               	movlb	0	; select bank0
 11372  0B5E  14D6               	bsf	_motorActiveBit,1
 11373                           
 11374                           ;MotorDrive.c: 1396:         m1PulsePositionCt = m1PulsePositionCtWork;
 11375  0B5F  0021               	movlb	1	; select bank1
 11376  0B60  0868               	movf	_m1PulsePositionCtWork^(0+128),w
 11377  0B61  0020               	movlb	0	; select bank0
 11378  0B62  00A0               	movwf	??_StartPulseOutM1
 11379  0B63  0820               	movf	??_StartPulseOutM1,w
 11380  0B64  0021               	movlb	1	; select bank1
 11381  0B65  00E9               	movwf	_m1PulsePositionCt^(0+128)
 11382                           
 11383                           ;MotorDrive.c: 1397:         m1PulseOutStep = m1PulseOutStepWork;
 11384  0B66  0864               	movf	_m1PulseOutStepWork^(0+128),w
 11385  0B67  0020               	movlb	0	; select bank0
 11386  0B68  00A0               	movwf	??_StartPulseOutM1
 11387  0B69  0820               	movf	??_StartPulseOutM1,w
 11388  0B6A  00F2               	movwf	_m1PulseOutStep
 11389                           
 11390                           ;MotorDrive.c: 1398:         m1PulseChangePosition = TblM1PulseChangePosition[ m1PulseOu
      +                          tStep ];
 11391  0B6B  0872               	movf	_m1PulseOutStep,w
 11392  0B6C  3E1C               	addlw	low (_TblM1PulseChangePosition| (0+32768))
 11393  0B6D  0084               	movwf	4
 11394  0B6E  3098               	movlw	high (_TblM1PulseChangePosition| (0+32768))
 11395  0B6F  1803               	skipnc
 11396  0B70  3E01               	addlw	1
 11397  0B71  0085               	movwf	5
 11398  0B72  0800               	movf	0,w	;code access
 11399  0B73  00A0               	movwf	??_StartPulseOutM1
 11400  0B74  0820               	movf	??_StartPulseOutM1,w
 11401  0B75  0021               	movlb	1	; select bank1
 11402  0B76  00E6               	movwf	_m1PulseChangePosition^(0+128)
 11403                           
 11404                           ;MotorDrive.c: 1400:         motorM1StepCounter = motorStepCounterSet[ 1 ];
 11405  0B77  082B               	movf	((_motorStepCounterSet+1)^(0+128)+2),w
 11406  0B78  00BF               	movwf	(_motorM1StepCounter+1)^(0+128)
 11407  0B79  082A               	movf	(_motorStepCounterSet^(0+128)+2),w
 11408  0B7A  00BE               	movwf	_motorM1StepCounter^(0+128)
 11409                           
 11410                           ;MotorDrive.c: 1401:         motorStepCounterSet[ 1 ] = 0;
 11411  0B7B  01AA               	clrf	(_motorStepCounterSet^(0+128)+2)
 11412  0B7C  01AB               	clrf	((_motorStepCounterSet+1)^(0+128)+2)
 11413                           
 11414                           ;MotorDrive.c: 1403:         TMR2_StartTimer();
 11415  0B7D  3190  2054  318B   	fcall	_TMR2_StartTimer
 11416                           
 11417                           ;MotorDrive.c: 1405:     } else {
 11418  0B80  2B86               	goto	l5910
 11419  0B81                     l5908:
 11420                           
 11421                           ;MotorDrive.c: 1407:         actCorrectDriveBit &= (UB) (~0x02);
 11422  0B81  30FD               	movlw	253
 11423  0B82  0020               	movlb	0	; select bank0
 11424  0B83  00A0               	movwf	??_StartPulseOutM1
 11425  0B84  0820               	movf	??_StartPulseOutM1,w
 11426  0B85  05D3               	andwf	_actCorrectDriveBit,f
 11427  0B86                     l5910:
 11428                           
 11429                           ;MotorDrive.c: 1411:     (INTCONbits.PEIE = 1);
 11430  0B86  170B               	bsf	11,6	;volatile
 11431  0B87  0008               	return
 11432  0B88                     __end_of_StartPulseOutM1:
 11433                           
 11434                           	psect	text67
 11435  0AA6                     __ptext67:	
 11436 ;; *************** function _StartPulseOutM0 *****************
 11437 ;; Defined at:
 11438 ;;		line 1268 in file "MotorDrive.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;		None
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;		None
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  1    wreg      void 
 11445 ;; Registers used:
 11446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 1F/0
 11449 ;;		On exit  : 1F/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11452 ;;      Params:         0       0       0       0       0       0       0       0
 11453 ;;      Locals:         0       0       0       0       0       0       0       0
 11454 ;;      Temps:          0       1       0       0       0       0       0       0
 11455 ;;      Totals:         0       1       0       0       0       0       0       0
 11456 ;;Total ram usage:        1 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    9
 11459 ;; This function calls:
 11460 ;;		_TMR2_StartTimer
 11461 ;; This function is called by:
 11462 ;;		_SetMotorStart
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           
 11467                           ;psect for function _StartPulseOutM0
 11468  0AA6                     _StartPulseOutM0:
 11469                           
 11470                           ;MotorDrive.c: 1270:     (INTCONbits.PEIE = 0);
 11471                           
 11472                           ;incstack = 0
 11473                           ; Regs used in _StartPulseOutM0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11474  0AA6  130B               	bcf	11,6	;volatile
 11475                           
 11476                           ;MotorDrive.c: 1272:     if ((reqSearchBasePosBit & 0x01) || (motorStepCounterSet[ 0 ]))
      +                           {
 11477  0AA7  1855               	btfsc	_reqSearchBasePosBit,0
 11478  0AA8  2AAE               	goto	l5832
 11479  0AA9  0021               	movlb	1	; select bank1
 11480  0AAA  0828               	movf	_motorStepCounterSet^(0+128),w
 11481  0AAB  0429               	iorwf	(_motorStepCounterSet+1)^(0+128),w
 11482  0AAC  1903               	btfsc	3,2
 11483  0AAD  2B0F               	goto	l5866
 11484  0AAE                     l5832:
 11485                           
 11486                           ;MotorDrive.c: 1274:         TblM0PulseChangePositionLast = finishPositionCtSet[ 0 ];
 11487  0AAE  0021               	movlb	1	; select bank1
 11488  0AAF  0846               	movf	_finishPositionCtSet^(0+128),w
 11489  0AB0  0020               	movlb	0	; select bank0
 11490  0AB1  00A0               	movwf	??_StartPulseOutM0
 11491  0AB2  0820               	movf	??_StartPulseOutM0,w
 11492  0AB3  0021               	movlb	1	; select bank1
 11493  0AB4  00EC               	movwf	_TblM0PulseChangePositionLast^(0+128)
 11494                           
 11495                           ;MotorDrive.c: 1276:         if (driveDirectionBit & 0x01) {
 11496  0AB5  0020               	movlb	0	; select bank0
 11497  0AB6  1C57               	btfss	_driveDirectionBit,0
 11498  0AB7  2AD7               	goto	l746
 11499                           
 11500                           ;MotorDrive.c: 1278:             if (addShakePulseBit & 0x01) {
 11501  0AB8  1C70               	btfss	_addShakePulseBit,0
 11502  0AB9  2ACB               	goto	l747
 11503                           
 11504                           ;MotorDrive.c: 1280:                 if (polarityBit & 0x01) {
 11505  0ABA  1C71               	btfss	_polarityBit,0
 11506  0ABB  2AC1               	goto	l5842
 11507                           
 11508                           ;MotorDrive.c: 1282:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_S
      +                          HAKE_POL1_P0;
 11509  0ABC  302B               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 11510  0ABD  0021               	movlb	1	; select bank1
 11511  0ABE  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11512  0ABF  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 11513  0AC0  2AC5               	goto	L14
 11514  0AC1                     l5842:	
 11515                           ;MotorDrive.c: 1283:                 } else {
 11516                           
 11517                           
 11518                           ;MotorDrive.c: 1285:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_S
      +                          HAKE_POL0_P0;
 11519  0AC1  303A               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 11520  0AC2  0021               	movlb	1	; select bank1
 11521  0AC3  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11522  0AC4  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 11523  0AC5                     L14:
 11524  0AC5  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 11525                           
 11526                           ;MotorDrive.c: 1288:                 m0PulsePositionCtWork = ( 1 - 1 );
 11527  0AC6  0020               	movlb	0	; select bank0
 11528  0AC7  01D8               	clrf	_m0PulsePositionCtWork
 11529                           
 11530                           ;MotorDrive.c: 1289:                 m0PulseOutStepWork = ID_PULSE_OUT_STEP_P0;
 11531  0AC8  0021               	movlb	1	; select bank1
 11532  0AC9  01E5               	clrf	_m0PulseOutStepWork^(0+128)
 11533                           
 11534                           ;MotorDrive.c: 1291:             } else {
 11535  0ACA  2AED               	goto	l5856
 11536  0ACB                     l747:
 11537                           
 11538                           ;MotorDrive.c: 1293:                 if (polarityBit & 0x01) {
 11539  0ACB  1C71               	btfss	_polarityBit,0
 11540  0ACC  2AD2               	goto	l5850
 11541                           
 11542                           ;MotorDrive.c: 1295:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_F
      +                          WD_POL1_P1;
 11543  0ACD  3049               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 11544  0ACE  0021               	movlb	1	; select bank1
 11545  0ACF  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11546  0AD0  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 11547  0AD1  2AE2               	goto	L16
 11548  0AD2                     l5850:	
 11549                           ;MotorDrive.c: 1296:                 } else {
 11550                           
 11551                           
 11552                           ;MotorDrive.c: 1298:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_F
      +                          WD_POL0_P1;
 11553  0AD2  3058               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 11554  0AD3  0021               	movlb	1	; select bank1
 11555  0AD4  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11556  0AD5  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 11557  0AD6  2AE2               	goto	L16
 11558  0AD7                     l746:
 11559                           
 11560                           ;MotorDrive.c: 1307:             if (polarityBit & 0x01) {
 11561  0AD7  1C71               	btfss	_polarityBit,0
 11562  0AD8  2ADE               	goto	l5854
 11563                           
 11564                           ;MotorDrive.c: 1309:                 m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_P
      +                          OL1_P1;
 11565  0AD9  3067               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P1
 11566  0ADA  0021               	movlb	1	; select bank1
 11567  0ADB  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11568  0ADC  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P1
 11569  0ADD  2AE2               	goto	L16
 11570  0ADE                     l5854:	
 11571                           ;MotorDrive.c: 1310:             } else {
 11572                           
 11573                           
 11574                           ;MotorDrive.c: 1312:                 m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_P
      +                          OL0_P1;
 11575  0ADE  3076               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P1
 11576  0ADF  0021               	movlb	1	; select bank1
 11577  0AE0  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11578  0AE1  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P1
 11579  0AE2                     L16:
 11580  0AE2  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 11581                           
 11582                           ;MotorDrive.c: 1301:                 m0PulsePositionCtWork = ( ( 1 + ( ( 1 - 1 ) + 5 + 4
      +                           + ( 1 + 3 ) * 10 ) ) - 1 );
 11583                           
 11584                           ;MotorDrive.c: 1299:                 }
 11585  0AE3  3031               	movlw	49
 11586  0AE4  0020               	movlb	0	; select bank0
 11587  0AE5  00A0               	movwf	??_StartPulseOutM0
 11588  0AE6  0820               	movf	??_StartPulseOutM0,w
 11589  0AE7  00D8               	movwf	_m0PulsePositionCtWork
 11590                           
 11591                           ;MotorDrive.c: 1302:                 m0PulseOutStepWork = ID_PULSE_OUT_STEP_P1;
 11592  0AE8  3016               	movlw	22
 11593  0AE9  00A0               	movwf	??_StartPulseOutM0
 11594  0AEA  0820               	movf	??_StartPulseOutM0,w
 11595  0AEB  0021               	movlb	1	; select bank1
 11596  0AEC  00E5               	movwf	_m0PulseOutStepWork^(0+128)
 11597  0AED                     l5856:
 11598                           
 11599                           ;MotorDrive.c: 1320:         motorActiveBit |= 0x01;
 11600  0AED  0020               	movlb	0	; select bank0
 11601  0AEE  1456               	bsf	_motorActiveBit,0
 11602                           
 11603                           ;MotorDrive.c: 1321:         m0PulsePositionCt = m0PulsePositionCtWork;
 11604  0AEF  0858               	movf	_m0PulsePositionCtWork,w
 11605  0AF0  00A0               	movwf	??_StartPulseOutM0
 11606  0AF1  0820               	movf	??_StartPulseOutM0,w
 11607  0AF2  0021               	movlb	1	; select bank1
 11608  0AF3  00EA               	movwf	_m0PulsePositionCt^(0+128)
 11609                           
 11610                           ;MotorDrive.c: 1322:         m0PulseOutStep = m0PulseOutStepWork;
 11611  0AF4  0865               	movf	_m0PulseOutStepWork^(0+128),w
 11612  0AF5  0020               	movlb	0	; select bank0
 11613  0AF6  00A0               	movwf	??_StartPulseOutM0
 11614  0AF7  0820               	movf	??_StartPulseOutM0,w
 11615  0AF8  00F3               	movwf	_m0PulseOutStep
 11616                           
 11617                           ;MotorDrive.c: 1323:         m0PulseChangePosition = TblM0PulseChangePosition[ m0PulseOu
      +                          tStep ];
 11618  0AF9  0873               	movf	_m0PulseOutStep,w
 11619  0AFA  3E35               	addlw	low (_TblM0PulseChangePosition| (0+32768))
 11620  0AFB  0084               	movwf	4
 11621  0AFC  3098               	movlw	high (_TblM0PulseChangePosition| (0+32768))
 11622  0AFD  1803               	skipnc
 11623  0AFE  3E01               	addlw	1
 11624  0AFF  0085               	movwf	5
 11625  0B00  0800               	movf	0,w	;code access
 11626  0B01  00A0               	movwf	??_StartPulseOutM0
 11627  0B02  0820               	movf	??_StartPulseOutM0,w
 11628  0B03  0021               	movlb	1	; select bank1
 11629  0B04  00E7               	movwf	_m0PulseChangePosition^(0+128)
 11630                           
 11631                           ;MotorDrive.c: 1325:         motorM0StepCounter = motorStepCounterSet[ 0 ];
 11632  0B05  0829               	movf	(_motorStepCounterSet+1)^(0+128),w
 11633  0B06  00C1               	movwf	(_motorM0StepCounter+1)^(0+128)
 11634  0B07  0828               	movf	_motorStepCounterSet^(0+128),w
 11635  0B08  00C0               	movwf	_motorM0StepCounter^(0+128)
 11636                           
 11637                           ;MotorDrive.c: 1326:         motorStepCounterSet[ 0 ] = 0;
 11638  0B09  01A8               	clrf	_motorStepCounterSet^(0+128)
 11639  0B0A  01A9               	clrf	(_motorStepCounterSet+1)^(0+128)
 11640                           
 11641                           ;MotorDrive.c: 1328:         TMR2_StartTimer();
 11642  0B0B  3190  2054  318A   	fcall	_TMR2_StartTimer
 11643                           
 11644                           ;MotorDrive.c: 1330:     } else {
 11645  0B0E  2B14               	goto	l5868
 11646  0B0F                     l5866:
 11647                           
 11648                           ;MotorDrive.c: 1332:         actCorrectDriveBit &= (UB) (~0x01);
 11649  0B0F  30FE               	movlw	254
 11650  0B10  0020               	movlb	0	; select bank0
 11651  0B11  00A0               	movwf	??_StartPulseOutM0
 11652  0B12  0820               	movf	??_StartPulseOutM0,w
 11653  0B13  05D3               	andwf	_actCorrectDriveBit,f
 11654  0B14                     l5868:
 11655                           
 11656                           ;MotorDrive.c: 1336:     (INTCONbits.PEIE = 1);
 11657  0B14  170B               	bsf	11,6	;volatile
 11658  0B15  0008               	return
 11659  0B16                     __end_of_StartPulseOutM0:
 11660                           
 11661                           	psect	text68
 11662  1054                     __ptext68:	
 11663 ;; *************** function _TMR2_StartTimer *****************
 11664 ;; Defined at:
 11665 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 11666 ;; Parameters:    Size  Location     Type
 11667 ;;		None
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;		None
 11670 ;; Return value:  Size  Location     Type
 11671 ;;                  1    wreg      void 
 11672 ;; Registers used:
 11673 ;;		None
 11674 ;; Tracked objects:
 11675 ;;		On entry : 1F/1
 11676 ;;		On exit  : 1F/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11679 ;;      Params:         0       0       0       0       0       0       0       0
 11680 ;;      Locals:         0       0       0       0       0       0       0       0
 11681 ;;      Temps:          0       0       0       0       0       0       0       0
 11682 ;;      Totals:         0       0       0       0       0       0       0       0
 11683 ;;Total ram usage:        0 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; Hardware stack levels required when called:    8
 11686 ;; This function calls:
 11687 ;;		Nothing
 11688 ;; This function is called by:
 11689 ;;		_StartPulseOutM0
 11690 ;;		_StartPulseOutM1
 11691 ;;		_SetMotorStartSPK
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           
 11696                           ;psect for function _TMR2_StartTimer
 11697  1054                     _TMR2_StartTimer:
 11698                           
 11699                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 11700                           
 11701                           ;incstack = 0
 11702                           ; Regs used in _TMR2_StartTimer: []
 11703  1054  0020               	movlb	0	; select bank0
 11704  1055  151C               	bsf	28,2	;volatile
 11705  1056  0008               	return
 11706  1057                     __end_of_TMR2_StartTimer:
 11707                           
 11708                           	psect	text69
 11709  0845                     __ptext69:	
 11710 ;; *************** function _SetMotorFrequency *****************
 11711 ;; Defined at:
 11712 ;;		line 1821 in file "MotorDrive.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;  motor_no        1    wreg     unsigned char 
 11715 ;;  type            1    0[BANK0 ] unsigned char 
 11716 ;;  set_freq        1    1[BANK0 ] unsigned char 
 11717 ;; Auto vars:     Size  Location     Type
 11718 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11719 ;; Return value:  Size  Location     Type
 11720 ;;                  1    wreg      void 
 11721 ;; Registers used:
 11722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11723 ;; Tracked objects:
 11724 ;;		On entry : 1F/0
 11725 ;;		On exit  : 1F/0
 11726 ;;		Unchanged: 0/0
 11727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11728 ;;      Params:         0       2       0       0       0       0       0       0
 11729 ;;      Locals:         0       1       0       0       0       0       0       0
 11730 ;;      Temps:          0       1       0       0       0       0       0       0
 11731 ;;      Totals:         0       4       0       0       0       0       0       0
 11732 ;;Total ram usage:        4 bytes
 11733 ;; Hardware stack levels used:    1
 11734 ;; Hardware stack levels required when called:    8
 11735 ;; This function calls:
 11736 ;;		Nothing
 11737 ;; This function is called by:
 11738 ;;		_main
 11739 ;;		_MoveTargetPosition
 11740 ;;		_SpiCmdFunc_FwdPulseNormal
 11741 ;;		_SpiCmdFunc_RevPulseNormal
 11742 ;;		_SpiCmdFunc_SearchBasePosition
 11743 ;;		_SetFwdPulseWithCorrectProc
 11744 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11745 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11746 ;;		_SpiCmdFunc_Search1008Position
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _SetMotorFrequency
 11752  0845                     _SetMotorFrequency:
 11753                           
 11754                           ;incstack = 0
 11755                           ; Regs used in _SetMotorFrequency: [wreg-fsr1h+status,2+status,0+pclath]
 11756                           ;SetMotorFrequency@motor_no stored from wreg
 11757  0845  00A3               	movwf	SetMotorFrequency@motor_no
 11758                           
 11759                           ;MotorDrive.c: 1821: void SetMotorFrequency(UB motor_no, UB type, UB set_freq);MotorDriv
      +                          e.c: 1822: {;MotorDrive.c: 1823:     if (FREQ_SET_SELF_CONTROL_NORMAL == type) {
 11760  0846  0820               	movf	SetMotorFrequency@type,w
 11761  0847  1D03               	btfss	3,2
 11762  0848  2853               	goto	l6000
 11763                           
 11764                           ;MotorDrive.c: 1826:         finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1 ) + 5 +
      +                           4 + ( 1 + 3 ) * 10 ) ) - 1 ) + set_freq;
 11765  0849  0821               	movf	SetMotorFrequency@set_freq,w
 11766  084A  3E31               	addlw	49
 11767  084B  00A2               	movwf	??_SetMotorFrequency
 11768  084C  0823               	movf	SetMotorFrequency@motor_no,w
 11769  084D  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11770  084E  0086               	movwf	6
 11771  084F  0187               	clrf	7
 11772  0850  0822               	movf	??_SetMotorFrequency,w
 11773  0851  0081               	movwf	1
 11774                           
 11775                           ;MotorDrive.c: 1828:     } else if (FREQ_SET_SELF_CONTROL_SHAKE == type) {
 11776  0852  0008               	return
 11777  0853                     l6000:
 11778  0853  0320               	decf	SetMotorFrequency@type,w
 11779  0854  1D03               	btfss	3,2
 11780  0855  2879               	goto	l6016
 11781                           
 11782                           ;MotorDrive.c: 1830:         if (0 == motor_no) {
 11783  0856  0823               	movf	SetMotorFrequency@motor_no,w
 11784  0857  1D03               	btfss	3,2
 11785  0858  2875               	goto	l6010
 11786                           
 11787                           ;MotorDrive.c: 1831:             if (TblM0PulseChangePosition[ ( ( 5 + 10 * 2 ) - 1 ) ] 
      +                          < set_freq) {
 11788  0859  304D               	movlw	low ((_TblM0PulseChangePosition+24)| (0+32768))
 11789  085A  0084               	movwf	4
 11790  085B  3098               	movlw	high ((_TblM0PulseChangePosition+24)| (0+32768))
 11791  085C                     L17:
 11792  085C  0085               	movwf	5
 11793  085D  0800               	movf	0,w	;code access
 11794  085E  00A2               	movwf	??_SetMotorFrequency
 11795  085F  0821               	movf	SetMotorFrequency@set_freq,w
 11796  0860  0222               	subwf	??_SetMotorFrequency,w
 11797  0861  1803               	skipnc
 11798  0862  286C               	goto	l6008
 11799                           
 11800                           ;MotorDrive.c: 1832:                 finishPositionCtSet[ motor_no ] = set_freq;
 11801  0863  0821               	movf	SetMotorFrequency@set_freq,w
 11802  0864  00A2               	movwf	??_SetMotorFrequency
 11803  0865  0823               	movf	SetMotorFrequency@motor_no,w
 11804  0866  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11805  0867  0086               	movwf	6
 11806  0868  0187               	clrf	7
 11807  0869  0822               	movf	??_SetMotorFrequency,w
 11808  086A  0081               	movwf	1
 11809                           
 11810                           ;MotorDrive.c: 1833:             } else {
 11811  086B  0008               	return
 11812  086C                     l6008:
 11813                           
 11814                           ;MotorDrive.c: 1834:                 finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1
      +                           ) + 5 + 4 + ( 1 + 3 ) * 10 ) ) + 6 + 16 + 19 );
 11815  086C  305B               	movlw	91
 11816  086D  00A2               	movwf	??_SetMotorFrequency
 11817  086E  0823               	movf	SetMotorFrequency@motor_no,w
 11818  086F  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11819  0870  0086               	movwf	6
 11820  0871  0187               	clrf	7
 11821  0872  0822               	movf	??_SetMotorFrequency,w
 11822  0873  0081               	movwf	1
 11823  0874  0008               	return
 11824  0875                     l6010:
 11825                           
 11826                           ;MotorDrive.c: 1837:             if (TblM1PulseChangePosition[ ( ( 5 + 10 * 2 ) - 1 ) ] 
      +                          < set_freq) {
 11827  0875  3034               	movlw	low ((_TblM1PulseChangePosition+24)| (0+32768))
 11828  0876  0084               	movwf	4
 11829  0877  3098               	movlw	high ((_TblM1PulseChangePosition+24)| (0+32768))
 11830  0878  285C               	goto	L17
 11831  0879                     l6016:
 11832                           
 11833                           ;MotorDrive.c: 1846:         finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1 ) + 5 +
      +                           4 + ( 1 + 3 ) * 10 ) ) + 6 + 16 + 7 );
 11834  0879  304F               	movlw	79
 11835  087A  00A2               	movwf	??_SetMotorFrequency
 11836  087B  0823               	movf	SetMotorFrequency@motor_no,w
 11837  087C  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11838  087D  0086               	movwf	6
 11839  087E  0187               	clrf	7
 11840  087F  0822               	movf	??_SetMotorFrequency,w
 11841  0880  0081               	movwf	1
 11842  0881  0008               	return
 11843  0882                     __end_of_SetMotorFrequency:
 11844                           
 11845                           	psect	text70
 11846  1509                     __ptext70:	
 11847 ;; *************** function _SetMotorDirection *****************
 11848 ;; Defined at:
 11849 ;;		line 1676 in file "MotorDrive.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;  motor_no        1    wreg     unsigned char 
 11852 ;;  dir             1    0[BANK0 ] unsigned char 
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11855 ;; Return value:  Size  Location     Type
 11856 ;;                  1    wreg      void 
 11857 ;; Registers used:
 11858 ;;		wreg, status,2, status,0
 11859 ;; Tracked objects:
 11860 ;;		On entry : 1F/0
 11861 ;;		On exit  : 1F/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11864 ;;      Params:         0       1       0       0       0       0       0       0
 11865 ;;      Locals:         0       1       0       0       0       0       0       0
 11866 ;;      Temps:          0       2       0       0       0       0       0       0
 11867 ;;      Totals:         0       4       0       0       0       0       0       0
 11868 ;;Total ram usage:        4 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; Hardware stack levels required when called:    8
 11871 ;; This function calls:
 11872 ;;		Nothing
 11873 ;; This function is called by:
 11874 ;;		_main
 11875 ;;		_CalcMotorStepCounter
 11876 ;;		_SpiCmdFunc_FwdPulseNormal
 11877 ;;		_SpiCmdFunc_RevPulseNormal
 11878 ;;		_SpiCmdFunc_SearchBasePosition
 11879 ;;		_SpiCmdFunc_Search1008Position
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _SetMotorDirection
 11885  1509                     _SetMotorDirection:
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _SetMotorDirection: [wreg+status,2+status,0]
 11889                           ;SetMotorDirection@motor_no stored from wreg
 11890  1509  00A3               	movwf	SetMotorDirection@motor_no
 11891                           
 11892                           ;MotorDrive.c: 1676: void SetMotorDirection(UB motor_no, UB dir);MotorDrive.c: 1677: {;M
      +                          otorDrive.c: 1678:     motorBitOperation = (UB) (0x01 << motor_no);
 11893  150A  3001               	movlw	1
 11894  150B  00A1               	movwf	??_SetMotorDirection
 11895  150C  0A23               	incf	SetMotorDirection@motor_no,w
 11896  150D  2D0F               	goto	u4274
 11897  150E                     u4275:
 11898  150E  35A1               	lslf	??_SetMotorDirection,f
 11899  150F                     u4274:
 11900  150F  0B89               	decfsz	9,f
 11901  1510  2D0E               	goto	u4275
 11902  1511  0821               	movf	??_SetMotorDirection,w
 11903  1512  00A2               	movwf	??_SetMotorDirection+1
 11904  1513  0822               	movf	??_SetMotorDirection+1,w
 11905  1514  00F4               	movwf	_motorBitOperation
 11906                           
 11907                           ;MotorDrive.c: 1680:     if (1 == dir) {
 11908  1515  0320               	decf	SetMotorDirection@dir,w
 11909  1516  1D03               	btfss	3,2
 11910  1517  2D1D               	goto	l5826
 11911                           
 11912                           ;MotorDrive.c: 1682:         driveDirectionBit |= motorBitOperation;
 11913  1518  0874               	movf	_motorBitOperation,w
 11914  1519  00A1               	movwf	??_SetMotorDirection
 11915  151A  0821               	movf	??_SetMotorDirection,w
 11916  151B  04D7               	iorwf	_driveDirectionBit,f
 11917                           
 11918                           ;MotorDrive.c: 1684:     } else {
 11919  151C  0008               	return
 11920  151D                     l5826:
 11921                           
 11922                           ;MotorDrive.c: 1686:         driveDirectionBit &= (UB) (~motorBitOperation);
 11923  151D  0974               	comf	_motorBitOperation,w
 11924  151E  00A1               	movwf	??_SetMotorDirection
 11925  151F  0821               	movf	??_SetMotorDirection,w
 11926  1520  05D7               	andwf	_driveDirectionBit,f
 11927  1521  0008               	return
 11928  1522                     __end_of_SetMotorDirection:
 11929                           
 11930                           	psect	text71
 11931  0D85                     __ptext71:	
 11932 ;; *************** function _SetDriveType *****************
 11933 ;; Defined at:
 11934 ;;		line 1536 in file "MotorDrive.c"
 11935 ;; Parameters:    Size  Location     Type
 11936 ;;  motor_no        1    wreg     unsigned char 
 11937 ;;  drive_type      1    0[BANK0 ] unsigned char 
 11938 ;; Auto vars:     Size  Location     Type
 11939 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11940 ;; Return value:  Size  Location     Type
 11941 ;;                  1    wreg      void 
 11942 ;; Registers used:
 11943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11944 ;; Tracked objects:
 11945 ;;		On entry : 1F/0
 11946 ;;		On exit  : 1E/0
 11947 ;;		Unchanged: 0/0
 11948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11949 ;;      Params:         0       1       0       0       0       0       0       0
 11950 ;;      Locals:         0       1       0       0       0       0       0       0
 11951 ;;      Temps:          0       2       0       0       0       0       0       0
 11952 ;;      Totals:         0       4       0       0       0       0       0       0
 11953 ;;Total ram usage:        4 bytes
 11954 ;; Hardware stack levels used:    1
 11955 ;; Hardware stack levels required when called:    8
 11956 ;; This function calls:
 11957 ;;		Nothing
 11958 ;; This function is called by:
 11959 ;;		_AfterDetectedLoadPosition
 11960 ;;		_SpiCmdFunc_FwdPulseNormal
 11961 ;;		_SpiCmdFunc_RevPulseNormal
 11962 ;;		_SpiCmdFunc_SearchBasePosition
 11963 ;;		_SetFwdPulseWithCorrectProc
 11964 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11965 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11966 ;;		_SpiCmdFunc_Search1008Position
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function _SetDriveType
 11972  0D85                     _SetDriveType:
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in _SetDriveType: [wreg-fsr1h+status,2+status,0]
 11976                           ;SetDriveType@motor_no stored from wreg
 11977  0D85  00A3               	movwf	SetDriveType@motor_no
 11978                           
 11979                           ;MotorDrive.c: 1536: void SetDriveType(UB motor_no, UB drive_type);MotorDrive.c: 1537: {
      +                          ;MotorDrive.c: 1539:     motorBitOperation = (UB) (0x01 << motor_no);
 11980  0D86  3001               	movlw	1
 11981  0D87  00A1               	movwf	??_SetDriveType
 11982  0D88  0A23               	incf	SetDriveType@motor_no,w
 11983  0D89  2D8B               	goto	u4584
 11984  0D8A                     u4585:
 11985  0D8A  35A1               	lslf	??_SetDriveType,f
 11986  0D8B                     u4584:
 11987  0D8B  0B89               	decfsz	9,f
 11988  0D8C  2D8A               	goto	u4585
 11989  0D8D  0821               	movf	??_SetDriveType,w
 11990  0D8E  00A2               	movwf	??_SetDriveType+1
 11991  0D8F  0822               	movf	??_SetDriveType+1,w
 11992  0D90  00F4               	movwf	_motorBitOperation
 11993                           
 11994                           ;MotorDrive.c: 1541:     driveType[ motor_no ] = drive_type;
 11995  0D91  0820               	movf	SetDriveType@drive_type,w
 11996  0D92  00A1               	movwf	??_SetDriveType
 11997  0D93  0823               	movf	SetDriveType@motor_no,w
 11998  0D94  3E30               	addlw	(low (_driveType| (0+256)))& (0+255)
 11999  0D95  0086               	movwf	6
 12000  0D96  3001               	movlw	1	; select bank2/3
 12001  0D97  0087               	movwf	7
 12002  0D98  0821               	movf	??_SetDriveType,w
 12003  0D99  0081               	movwf	1
 12004                           
 12005                           ;MotorDrive.c: 1543:     switch (drive_type) {
 12006  0D9A  2DFD               	goto	l6066
 12007  0D9B                     l6054:
 12008                           
 12009                           ;MotorDrive.c: 1546:         addShakePulseBit &= (UB) (~motorBitOperation);
 12010  0D9B  0974               	comf	_motorBitOperation,w
 12011  0D9C  00A1               	movwf	??_SetDriveType
 12012  0D9D  0821               	movf	??_SetDriveType,w
 12013  0D9E  05F0               	andwf	_addShakePulseBit,f
 12014                           
 12015                           ;MotorDrive.c: 1547:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12016  0D9F  0974               	comf	_motorBitOperation,w
 12017  0DA0  00A1               	movwf	??_SetDriveType
 12018  0DA1  0821               	movf	??_SetDriveType,w
 12019  0DA2  05D5               	andwf	_reqSearchBasePosBit,f
 12020                           
 12021                           ;MotorDrive.c: 1549:         reqCheckLoadPosBit &= (UB) (~motorBitOperation);
 12022  0DA3  0974               	comf	_motorBitOperation,w
 12023  0DA4  00A1               	movwf	??_SetDriveType
 12024  0DA5  0821               	movf	??_SetDriveType,w
 12025  0DA6  0021               	movlb	1	; select bank1
 12026  0DA7  05CE               	andwf	_reqCheckLoadPosBit^(0+128),f
 12027                           
 12028                           ;MotorDrive.c: 1550:         reqCorrectBasePosBit &= (UB) (~motorBitOperation);
 12029  0DA8  0974               	comf	_motorBitOperation,w
 12030  0DA9  0020               	movlb	0	; select bank0
 12031  0DAA  00A1               	movwf	??_SetDriveType
 12032  0DAB  0821               	movf	??_SetDriveType,w
 12033  0DAC  05D4               	andwf	_reqCorrectBasePosBit,f
 12034                           
 12035                           ;MotorDrive.c: 1551:         reqCorrectFinePoBit &= (UB) (~motorBitOperation);
 12036  0DAD  0974               	comf	_motorBitOperation,w
 12037  0DAE  00A1               	movwf	??_SetDriveType
 12038  0DAF  0821               	movf	??_SetDriveType,w
 12039  0DB0  0021               	movlb	1	; select bank1
 12040  0DB1  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
 12041                           
 12042                           ;MotorDrive.c: 1552:         actCorrectDriveBit &= (UB) (~motorBitOperation);
 12043  0DB2  0974               	comf	_motorBitOperation,w
 12044  0DB3  0020               	movlb	0	; select bank0
 12045  0DB4  00A1               	movwf	??_SetDriveType
 12046  0DB5  0821               	movf	??_SetDriveType,w
 12047  0DB6  05D3               	andwf	_actCorrectDriveBit,f
 12048                           
 12049                           ;MotorDrive.c: 1553:         break;
 12050  0DB7  0008               	return
 12051  0DB8                     l6056:
 12052                           
 12053                           ;MotorDrive.c: 1557:         addShakePulseBit |= (UB) (motorBitOperation);
 12054  0DB8  0874               	movf	_motorBitOperation,w
 12055  0DB9  00A1               	movwf	??_SetDriveType
 12056  0DBA  0821               	movf	??_SetDriveType,w
 12057  0DBB  04F0               	iorwf	_addShakePulseBit,f
 12058                           
 12059                           ;MotorDrive.c: 1558:         reqSearchBasePosBit |= (UB) (motorBitOperation);
 12060  0DBC  0874               	movf	_motorBitOperation,w
 12061  0DBD  00A1               	movwf	??_SetDriveType
 12062  0DBE  0821               	movf	??_SetDriveType,w
 12063  0DBF  04D5               	iorwf	_reqSearchBasePosBit,f
 12064                           
 12065                           ;MotorDrive.c: 1560:         reqCheckLoadPosBit &= (UB) (~motorBitOperation);
 12066  0DC0  0974               	comf	_motorBitOperation,w
 12067  0DC1  00A1               	movwf	??_SetDriveType
 12068  0DC2  0821               	movf	??_SetDriveType,w
 12069  0DC3  0021               	movlb	1	; select bank1
 12070  0DC4  05CE               	andwf	_reqCheckLoadPosBit^(0+128),f
 12071                           
 12072                           ;MotorDrive.c: 1561:         reqCorrectBasePosBit &= (UB) (~motorBitOperation);
 12073  0DC5  0974               	comf	_motorBitOperation,w
 12074  0DC6  0020               	movlb	0	; select bank0
 12075  0DC7  00A1               	movwf	??_SetDriveType
 12076  0DC8  0821               	movf	??_SetDriveType,w
 12077  0DC9  05D4               	andwf	_reqCorrectBasePosBit,f
 12078                           
 12079                           ;MotorDrive.c: 1562:         reqCorrectFinePoBit &= (UB) (~motorBitOperation);
 12080  0DCA  0974               	comf	_motorBitOperation,w
 12081  0DCB  00A1               	movwf	??_SetDriveType
 12082  0DCC  0821               	movf	??_SetDriveType,w
 12083  0DCD  0021               	movlb	1	; select bank1
 12084  0DCE  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
 12085                           
 12086                           ;MotorDrive.c: 1563:         actCorrectDriveBit &= (UB) (~motorBitOperation);
 12087  0DCF  0974               	comf	_motorBitOperation,w
 12088  0DD0  0020               	movlb	0	; select bank0
 12089  0DD1  00A1               	movwf	??_SetDriveType
 12090  0DD2  0821               	movf	??_SetDriveType,w
 12091  0DD3  05D3               	andwf	_actCorrectDriveBit,f
 12092                           
 12093                           ;MotorDrive.c: 1564:         break;
 12094  0DD4  0008               	return
 12095  0DD5                     l6058:
 12096                           
 12097                           ;MotorDrive.c: 1567:         addShakePulseBit |= (UB) (motorBitOperation);
 12098  0DD5  0874               	movf	_motorBitOperation,w
 12099  0DD6  00A1               	movwf	??_SetDriveType
 12100  0DD7  0821               	movf	??_SetDriveType,w
 12101  0DD8  04F0               	iorwf	_addShakePulseBit,f
 12102                           
 12103                           ;MotorDrive.c: 1568:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12104  0DD9  0974               	comf	_motorBitOperation,w
 12105  0DDA  00A1               	movwf	??_SetDriveType
 12106  0DDB  0821               	movf	??_SetDriveType,w
 12107  0DDC  05D5               	andwf	_reqSearchBasePosBit,f
 12108                           
 12109                           ;MotorDrive.c: 1570:         reqCheckLoadPosBit |= (UB) (motorBitOperation);
 12110  0DDD  0874               	movf	_motorBitOperation,w
 12111  0DDE  00A1               	movwf	??_SetDriveType
 12112  0DDF  0821               	movf	??_SetDriveType,w
 12113  0DE0  0021               	movlb	1	; select bank1
 12114  0DE1  04CE               	iorwf	_reqCheckLoadPosBit^(0+128),f
 12115                           
 12116                           ;MotorDrive.c: 1574:         break;
 12117  0DE2  0008               	return
 12118  0DE3                     l6060:
 12119                           
 12120                           ;MotorDrive.c: 1577:         addShakePulseBit |= (UB) (motorBitOperation);
 12121  0DE3  0874               	movf	_motorBitOperation,w
 12122  0DE4  00A1               	movwf	??_SetDriveType
 12123  0DE5  0821               	movf	??_SetDriveType,w
 12124  0DE6  04F0               	iorwf	_addShakePulseBit,f
 12125                           
 12126                           ;MotorDrive.c: 1578:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12127  0DE7  0974               	comf	_motorBitOperation,w
 12128  0DE8  00A1               	movwf	??_SetDriveType
 12129  0DE9  0821               	movf	??_SetDriveType,w
 12130  0DEA  05D5               	andwf	_reqSearchBasePosBit,f
 12131                           
 12132                           ;MotorDrive.c: 1581:         reqCorrectBasePosBit |= (UB) (motorBitOperation);
 12133  0DEB  0874               	movf	_motorBitOperation,w
 12134  0DEC  00A1               	movwf	??_SetDriveType
 12135  0DED  0821               	movf	??_SetDriveType,w
 12136  0DEE  04D4               	iorwf	_reqCorrectBasePosBit,f
 12137                           
 12138                           ;MotorDrive.c: 1584:         break;
 12139  0DEF  0008               	return
 12140  0DF0                     l6062:
 12141                           
 12142                           ;MotorDrive.c: 1587:         addShakePulseBit &= (UB) (~motorBitOperation);
 12143  0DF0  0974               	comf	_motorBitOperation,w
 12144  0DF1  00A1               	movwf	??_SetDriveType
 12145  0DF2  0821               	movf	??_SetDriveType,w
 12146  0DF3  05F0               	andwf	_addShakePulseBit,f
 12147                           
 12148                           ;MotorDrive.c: 1588:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12149  0DF4  0974               	comf	_motorBitOperation,w
 12150  0DF5  00A1               	movwf	??_SetDriveType
 12151  0DF6  0821               	movf	??_SetDriveType,w
 12152  0DF7  05D5               	andwf	_reqSearchBasePosBit,f
 12153                           
 12154                           ;MotorDrive.c: 1593:         actCorrectDriveBit |= (UB) (motorBitOperation);
 12155  0DF8  0874               	movf	_motorBitOperation,w
 12156  0DF9  00A1               	movwf	??_SetDriveType
 12157  0DFA  0821               	movf	??_SetDriveType,w
 12158  0DFB  04D3               	iorwf	_actCorrectDriveBit,f
 12159  0DFC  0008               	return
 12160  0DFD                     l6066:
 12161  0DFD  0820               	movf	SetDriveType@drive_type,w
 12162  0DFE  00A1               	movwf	??_SetDriveType
 12163  0DFF  01A2               	clrf	??_SetDriveType+1
 12164                           
 12165                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12166                           ; Switch size 1, requested type "simple"
 12167                           ; Number of cases is 1, Range of values is 0 to 0
 12168                           ; switch strategies available:
 12169                           ; Name         Instructions Cycles
 12170                           ; simple_byte            4     3 (average)
 12171                           ; direct_byte            8     6 (fixed)
 12172                           ; jumptable            260     6 (fixed)
 12173                           ;	Chosen strategy is simple_byte
 12174  0E00  0822               	movf	??_SetDriveType+1,w
 12175  0E01  3A00               	xorlw	0	; case 0
 12176  0E02  1903               	skipnz
 12177  0E03  2E05               	goto	l6912
 12178  0E04  2E19               	goto	l800
 12179  0E05                     l6912:
 12180                           
 12181                           ; Switch size 1, requested type "simple"
 12182                           ; Number of cases is 6, Range of values is 0 to 5
 12183                           ; switch strategies available:
 12184                           ; Name         Instructions Cycles
 12185                           ; direct_byte           18     6 (fixed)
 12186                           ; simple_byte           19    10 (average)
 12187                           ; jumptable            260     6 (fixed)
 12188                           ;	Chosen strategy is simple_byte
 12189  0E05  0821               	movf	??_SetDriveType,w
 12190  0E06  3A00               	xorlw	0	; case 0
 12191  0E07  1903               	skipnz
 12192  0E08  2D9B               	goto	l6054
 12193  0E09  3A01               	xorlw	1	; case 1
 12194  0E0A  1903               	skipnz
 12195  0E0B  2DB8               	goto	l6056
 12196  0E0C  3A03               	xorlw	3	; case 2
 12197  0E0D  1903               	skipnz
 12198  0E0E  2DD5               	goto	l6058
 12199  0E0F  3A01               	xorlw	1	; case 3
 12200  0E10  1903               	skipnz
 12201  0E11  2DE3               	goto	l6060
 12202  0E12  3A07               	xorlw	7	; case 4
 12203  0E13  1903               	skipnz
 12204  0E14  2DF0               	goto	l6062
 12205  0E15  3A01               	xorlw	1	; case 5
 12206  0E16  1903               	skipnz
 12207  0E17  2DB8               	goto	l6056
 12208  0E18  2E19               	goto	l800
 12209  0E19                     l800:
 12210  0E19  0008               	return
 12211  0E1A                     __end_of_SetDriveType:
 12212                           
 12213                           	psect	text72
 12214  1360                     __ptext72:	
 12215 ;; *************** function _SetMotorEnableExcitating *****************
 12216 ;; Defined at:
 12217 ;;		line 1497 in file "MotorDrive.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  motor_no        1    wreg     unsigned char 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  motor_no        1    2[BANK0 ] unsigned char 
 12222 ;; Return value:  Size  Location     Type
 12223 ;;                  1    wreg      void 
 12224 ;; Registers used:
 12225 ;;		wreg, status,2, status,0
 12226 ;; Tracked objects:
 12227 ;;		On entry : 1F/0
 12228 ;;		On exit  : 1F/1
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12231 ;;      Params:         0       0       0       0       0       0       0       0
 12232 ;;      Locals:         0       1       0       0       0       0       0       0
 12233 ;;      Temps:          0       2       0       0       0       0       0       0
 12234 ;;      Totals:         0       3       0       0       0       0       0       0
 12235 ;;Total ram usage:        3 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    8
 12238 ;; This function calls:
 12239 ;;		Nothing
 12240 ;; This function is called by:
 12241 ;;		_SpiCmdFunc_EnableExcitating
 12242 ;; This function uses a non-reentrant model
 12243 ;;
 12244                           
 12245                           
 12246                           ;psect for function _SetMotorEnableExcitating
 12247  1360                     _SetMotorEnableExcitating:
 12248                           
 12249                           ;incstack = 0
 12250                           ; Regs used in _SetMotorEnableExcitating: [wreg+status,2+status,0]
 12251                           ;SetMotorEnableExcitating@motor_no stored from wreg
 12252  1360  00A2               	movwf	SetMotorEnableExcitating@motor_no
 12253                           
 12254                           ;MotorDrive.c: 1497: void SetMotorEnableExcitating(UB motor_no);MotorDrive.c: 1498: {;Mo
      +                          torDrive.c: 1499:     motorBitOperation = (UB) (0x01 << motor_no);
 12255  1361  3001               	movlw	1
 12256  1362  00A0               	movwf	??_SetMotorEnableExcitating
 12257  1363  0A22               	incf	SetMotorEnableExcitating@motor_no,w
 12258  1364  2B66               	goto	u4674
 12259  1365                     u4675:
 12260  1365  35A0               	lslf	??_SetMotorEnableExcitating,f
 12261  1366                     u4674:
 12262  1366  0B89               	decfsz	9,f
 12263  1367  2B65               	goto	u4675
 12264  1368  0820               	movf	??_SetMotorEnableExcitating,w
 12265  1369  00A1               	movwf	??_SetMotorEnableExcitating+1
 12266  136A  0821               	movf	??_SetMotorEnableExcitating+1,w
 12267  136B  00F4               	movwf	_motorBitOperation
 12268                           
 12269                           ;MotorDrive.c: 1501:     excitatingEnableBit |= (UB) (motorBitOperation);
 12270  136C  0874               	movf	_motorBitOperation,w
 12271  136D  00A0               	movwf	??_SetMotorEnableExcitating
 12272  136E  0820               	movf	??_SetMotorEnableExcitating,w
 12273  136F  0021               	movlb	1	; select bank1
 12274  1370  04E3               	iorwf	_excitatingEnableBit^(0+128),f
 12275  1371  0008               	return
 12276  1372                     __end_of_SetMotorEnableExcitating:
 12277                           
 12278                           	psect	text73
 12279  134E                     __ptext73:	
 12280 ;; *************** function _SetMotorDisableExcitating *****************
 12281 ;; Defined at:
 12282 ;;		line 1512 in file "MotorDrive.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;  motor_no        1    wreg     unsigned char 
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;  motor_no        1    2[BANK0 ] unsigned char 
 12287 ;; Return value:  Size  Location     Type
 12288 ;;                  1    wreg      void 
 12289 ;; Registers used:
 12290 ;;		wreg, status,2, status,0
 12291 ;; Tracked objects:
 12292 ;;		On entry : 1F/0
 12293 ;;		On exit  : 1F/1
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12296 ;;      Params:         0       0       0       0       0       0       0       0
 12297 ;;      Locals:         0       1       0       0       0       0       0       0
 12298 ;;      Temps:          0       2       0       0       0       0       0       0
 12299 ;;      Totals:         0       3       0       0       0       0       0       0
 12300 ;;Total ram usage:        3 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; Hardware stack levels required when called:    8
 12303 ;; This function calls:
 12304 ;;		Nothing
 12305 ;; This function is called by:
 12306 ;;		_SpiCmdFunc_DisableExcitating
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           
 12311                           ;psect for function _SetMotorDisableExcitating
 12312  134E                     _SetMotorDisableExcitating:
 12313                           
 12314                           ;incstack = 0
 12315                           ; Regs used in _SetMotorDisableExcitating: [wreg+status,2+status,0]
 12316                           ;SetMotorDisableExcitating@motor_no stored from wreg
 12317  134E  00A2               	movwf	SetMotorDisableExcitating@motor_no
 12318                           
 12319                           ;MotorDrive.c: 1512: void SetMotorDisableExcitating(UB motor_no);MotorDrive.c: 1513: {;M
      +                          otorDrive.c: 1514:     motorBitOperation = (UB) (0x01 << motor_no);
 12320  134F  3001               	movlw	1
 12321  1350  00A0               	movwf	??_SetMotorDisableExcitating
 12322  1351  0A22               	incf	SetMotorDisableExcitating@motor_no,w
 12323  1352  2B54               	goto	u4684
 12324  1353                     u4685:
 12325  1353  35A0               	lslf	??_SetMotorDisableExcitating,f
 12326  1354                     u4684:
 12327  1354  0B89               	decfsz	9,f
 12328  1355  2B53               	goto	u4685
 12329  1356  0820               	movf	??_SetMotorDisableExcitating,w
 12330  1357  00A1               	movwf	??_SetMotorDisableExcitating+1
 12331  1358  0821               	movf	??_SetMotorDisableExcitating+1,w
 12332  1359  00F4               	movwf	_motorBitOperation
 12333                           
 12334                           ;MotorDrive.c: 1516:     excitatingEnableBit &= (UB) (~motorBitOperation);
 12335  135A  0974               	comf	_motorBitOperation,w
 12336  135B  00A0               	movwf	??_SetMotorDisableExcitating
 12337  135C  0820               	movf	??_SetMotorDisableExcitating,w
 12338  135D  0021               	movlb	1	; select bank1
 12339  135E  05E3               	andwf	_excitatingEnableBit^(0+128),f
 12340  135F  0008               	return
 12341  1360                     __end_of_SetMotorDisableExcitating:
 12342                           
 12343                           	psect	text74
 12344  12D3                     __ptext74:	
 12345 ;; *************** function _InitPulsePositionTable *****************
 12346 ;; Defined at:
 12347 ;;		line 799 in file "MotorDrive.c"
 12348 ;; Parameters:    Size  Location     Type
 12349 ;;  motor_no        1    wreg     unsigned char 
 12350 ;; Auto vars:     Size  Location     Type
 12351 ;;  motor_no        1    1[BANK0 ] unsigned char 
 12352 ;; Return value:  Size  Location     Type
 12353 ;;                  1    wreg      void 
 12354 ;; Registers used:
 12355 ;;		wreg, status,2, status,0
 12356 ;; Tracked objects:
 12357 ;;		On entry : 1C/2
 12358 ;;		On exit  : 1F/1
 12359 ;;		Unchanged: 0/0
 12360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12361 ;;      Params:         0       0       0       0       0       0       0       0
 12362 ;;      Locals:         0       1       0       0       0       0       0       0
 12363 ;;      Temps:          0       1       0       0       0       0       0       0
 12364 ;;      Totals:         0       2       0       0       0       0       0       0
 12365 ;;Total ram usage:        2 bytes
 12366 ;; Hardware stack levels used:    1
 12367 ;; Hardware stack levels required when called:    8
 12368 ;; This function calls:
 12369 ;;		Nothing
 12370 ;; This function is called by:
 12371 ;;		_main
 12372 ;; This function uses a non-reentrant model
 12373 ;;
 12374                           
 12375                           
 12376                           ;psect for function _InitPulsePositionTable
 12377  12D3                     _InitPulsePositionTable:
 12378                           
 12379                           ;incstack = 0
 12380                           ; Regs used in _InitPulsePositionTable: [wreg+status,2+status,0]
 12381                           ;InitPulsePositionTable@motor_no stored from wreg
 12382  12D3  0020               	movlb	0	; select bank0
 12383  12D4  00A1               	movwf	InitPulsePositionTable@motor_no
 12384                           
 12385                           ;MotorDrive.c: 799: void InitPulsePositionTable(UB motor_no);MotorDrive.c: 800: {;MotorD
      +                          rive.c: 801:     if (0 == motor_no) {
 12386  12D5  0821               	movf	InitPulsePositionTable@motor_no,w
 12387  12D6  1D03               	btfss	3,2
 12388  12D7  2ADE               	goto	l6838
 12389                           
 12390                           ;MotorDrive.c: 802:         TblM0PulseChangePositionLast = PULSE_CHANGE_OFF;
 12391  12D8  305B               	movlw	91
 12392  12D9  00A0               	movwf	??_InitPulsePositionTable
 12393  12DA  0820               	movf	??_InitPulsePositionTable,w
 12394  12DB  0021               	movlb	1	; select bank1
 12395  12DC  00EC               	movwf	_TblM0PulseChangePositionLast^(0+128)
 12396                           
 12397                           ;MotorDrive.c: 803:     } else {
 12398  12DD  0008               	return
 12399  12DE                     l6838:
 12400                           
 12401                           ;MotorDrive.c: 804:         TblM1PulseChangePositionLast = PULSE_CHANGE_OFF;
 12402  12DE  305B               	movlw	91
 12403  12DF  00A0               	movwf	??_InitPulsePositionTable
 12404  12E0  0820               	movf	??_InitPulsePositionTable,w
 12405  12E1  0021               	movlb	1	; select bank1
 12406  12E2  00EB               	movwf	_TblM1PulseChangePositionLast^(0+128)
 12407  12E3  0008               	return
 12408  12E4                     __end_of_InitPulsePositionTable:
 12409                           
 12410                           	psect	intentry
 12411  0004                     __pintentry:	
 12412 ;; *************** function _INTERRUPT_InterruptManager *****************
 12413 ;; Defined at:
 12414 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12415 ;; Parameters:    Size  Location     Type
 12416 ;;		None
 12417 ;; Auto vars:     Size  Location     Type
 12418 ;;		None
 12419 ;; Return value:  Size  Location     Type
 12420 ;;                  1    wreg      void 
 12421 ;; Registers used:
 12422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12423 ;; Tracked objects:
 12424 ;;		On entry : 0/0
 12425 ;;		On exit  : 0/0
 12426 ;;		Unchanged: 0/0
 12427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12428 ;;      Params:         0       0       0       0       0       0       0       0
 12429 ;;      Locals:         0       0       0       0       0       0       0       0
 12430 ;;      Temps:          0       0       0       0       0       0       0       0
 12431 ;;      Totals:         0       0       0       0       0       0       0       0
 12432 ;;Total ram usage:        0 bytes
 12433 ;; Hardware stack levels used:    1
 12434 ;; Hardware stack levels required when called:    7
 12435 ;; This function calls:
 12436 ;;		_TMR1_ISR
 12437 ;;		_TMR2_ISR
 12438 ;; This function is called by:
 12439 ;;		Interrupt level 1
 12440 ;; This function uses a non-reentrant model
 12441 ;;
 12442                           
 12443  0004                     _INTERRUPT_InterruptManager:
 12444                           
 12445                           ;incstack = 0
 12446  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12447                           
 12448                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12449  0005  3180               	pagesel	$
 12450                           
 12451                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 12452  0006  1F0B               	btfss	11,6	;volatile
 12453  0007  281A               	goto	i1l85
 12454                           
 12455                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 12456  0008  0021               	movlb	1	; select bank1
 12457  0009  1C91               	btfss	17,1	;volatile
 12458  000A  2812               	goto	i1l80
 12459  000B  0020               	movlb	0	; select bank0
 12460  000C  1C91               	btfss	17,1	;volatile
 12461  000D  2812               	goto	i1l80
 12462                           
 12463                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             TMR2_ISR();
 12464  000E  3190  2063  3180   	fcall	_TMR2_ISR
 12465                           
 12466                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 12467  0011  281A               	goto	i1l85
 12468  0012                     i1l80:	
 12469                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 12470                           
 12471  0012  0021               	movlb	1	; select bank1
 12472  0013  1C11               	btfss	17,0	;volatile
 12473  0014  281A               	goto	i1l85
 12474  0015  0020               	movlb	0	; select bank0
 12475  0016  1C11               	btfss	17,0	;volatile
 12476  0017  281A               	goto	i1l85
 12477                           
 12478                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 12479  0018  3190  20D0         	fcall	_TMR1_ISR
 12480  001A                     i1l85:	
 12481                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 12482                           
 12483                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 12484                           
 12485  001A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12486  001B  0009               	retfie
 12487  001C                     __end_of_INTERRUPT_InterruptManager:
 12488                           
 12489                           	psect	text76
 12490  1063                     __ptext76:	
 12491 ;; *************** function _TMR2_ISR *****************
 12492 ;; Defined at:
 12493 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;		None
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;		None
 12498 ;; Return value:  Size  Location     Type
 12499 ;;                  1    wreg      void 
 12500 ;; Registers used:
 12501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12502 ;; Tracked objects:
 12503 ;;		On entry : 1F/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12507 ;;      Params:         0       0       0       0       0       0       0       0
 12508 ;;      Locals:         0       0       0       0       0       0       0       0
 12509 ;;      Temps:          0       0       0       0       0       0       0       0
 12510 ;;      Totals:         0       0       0       0       0       0       0       0
 12511 ;;Total ram usage:        0 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    6
 12514 ;; This function calls:
 12515 ;;		_TMR2_CallBack
 12516 ;; This function is called by:
 12517 ;;		_INTERRUPT_InterruptManager
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           
 12522                           ;psect for function _TMR2_ISR
 12523  1063                     _TMR2_ISR:
 12524                           
 12525                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in _TMR2_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12529  1063  1091               	bcf	17,1	;volatile
 12530                           
 12531                           ;mcc_generated_files/tmr2.c: 127:     TMR2_CallBack();
 12532  1064  3190  20BA         	fcall	_TMR2_CallBack
 12533  1066  0008               	return
 12534  1067                     __end_of_TMR2_ISR:
 12535                           
 12536                           	psect	text77
 12537  10BA                     __ptext77:	
 12538 ;; *************** function _TMR2_CallBack *****************
 12539 ;; Defined at:
 12540 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;		None
 12545 ;; Return value:  Size  Location     Type
 12546 ;;                  1    wreg      void 
 12547 ;; Registers used:
 12548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12549 ;; Tracked objects:
 12550 ;;		On entry : 1F/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12554 ;;      Params:         0       0       0       0       0       0       0       0
 12555 ;;      Locals:         0       0       0       0       0       0       0       0
 12556 ;;      Temps:          0       0       0       0       0       0       0       0
 12557 ;;      Totals:         0       0       0       0       0       0       0       0
 12558 ;;Total ram usage:        0 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    5
 12561 ;; This function calls:
 12562 ;;		Absolute function
 12563 ;;		_TMR2_DefaultInterruptHandler
 12564 ;;		_TMR2_Interrupt
 12565 ;;		_TMR2_Interrupt_SPK
 12566 ;; This function is called by:
 12567 ;;		_TMR2_ISR
 12568 ;; This function uses a non-reentrant model
 12569 ;;
 12570                           
 12571                           
 12572                           ;psect for function _TMR2_CallBack
 12573  10BA                     _TMR2_CallBack:
 12574                           
 12575                           ;mcc_generated_files/tmr2.c: 134:     if(TMR2_InterruptHandler)
 12576                           
 12577                           ;incstack = 0
 12578                           ; Regs used in _TMR2_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12579  10BA  0022               	movlb	2	; select bank2
 12580  10BB  086C               	movf	_TMR2_InterruptHandler^(0+256),w
 12581  10BC  046D               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 12582  10BD  1903               	btfsc	3,2
 12583  10BE  0008               	return
 12584                           
 12585                           ;mcc_generated_files/tmr2.c: 135:     {;mcc_generated_files/tmr2.c: 136:         TMR2_In
      +                          terruptHandler();
 12586  10BF  086D               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 12587  10C0  008A               	movwf	10
 12588  10C1  086C               	movf	_TMR2_InterruptHandler^(0+256),w
 12589  10C2  000A               	callw
 12590  10C3  3190               	pagesel	$
 12591  10C4  0008               	return
 12592  10C5                     __end_of_TMR2_CallBack:
 12593                           
 12594                           	psect	text78
 12595  03FA                     __ptext78:	
 12596 ;; *************** function _TMR2_Interrupt *****************
 12597 ;; Defined at:
 12598 ;;		line 867 in file "MotorDrive.c"
 12599 ;; Parameters:    Size  Location     Type
 12600 ;;		None
 12601 ;; Auto vars:     Size  Location     Type
 12602 ;;		None
 12603 ;; Return value:  Size  Location     Type
 12604 ;;                  1    wreg      void 
 12605 ;; Registers used:
 12606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12607 ;; Tracked objects:
 12608 ;;		On entry : 1F/2
 12609 ;;		On exit  : 1F/0
 12610 ;;		Unchanged: 0/0
 12611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12612 ;;      Params:         0       0       0       0       0       0       0       0
 12613 ;;      Locals:         0       0       0       0       0       0       0       0
 12614 ;;      Temps:          3       0       0       0       0       0       0       0
 12615 ;;      Totals:         3       0       0       0       0       0       0       0
 12616 ;;Total ram usage:        3 bytes
 12617 ;; Hardware stack levels used:    1
 12618 ;; Hardware stack levels required when called:    1
 12619 ;; This function calls:
 12620 ;;		Absolute function
 12621 ;;		_ComparatorOff
 12622 ;;		_ComparatorOn
 12623 ;;		_SetDataTRISxWork_M0_SPK_POL0_OPEN
 12624 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 12625 ;;		_SetDataTRISxWork_M0_SPK_POL1_OPEN
 12626 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 12627 ;;		_SetDataTRISxWork_M1_SPK_POL0_OPEN
 12628 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 12629 ;;		_SetDataTRISxWork_M1_SPK_POL1_OPEN
 12630 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 12631 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 12632 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P1
 12633 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P2
 12634 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 12635 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P1
 12636 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P2
 12637 ;;		_SetPulseOutLATxWork_M0_REV_POL0_OFF
 12638 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P1
 12639 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P2
 12640 ;;		_SetPulseOutLATxWork_M0_REV_POL1_OFF
 12641 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P1
 12642 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P2
 12643 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 12644 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 12645 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 12646 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 12647 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 12648 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P1
 12649 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P2
 12650 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 12651 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P1
 12652 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P2
 12653 ;;		_SetPulseOutLATxWork_M1_REV_POL0_OFF
 12654 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P1
 12655 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P2
 12656 ;;		_SetPulseOutLATxWork_M1_REV_POL1_OFF
 12657 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P1
 12658 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P2
 12659 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 12660 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 12661 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 12662 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 12663 ;;		_VrsCheck
 12664 ;;		i1_TMR2_StopTimer
 12665 ;; This function is called by:
 12666 ;;		_main
 12667 ;;		_SetMotorStopSPK
 12668 ;;		_TMR2_CallBack
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           
 12673                           ;psect for function _TMR2_Interrupt
 12674  03FA                     _TMR2_Interrupt:
 12675                           
 12676                           ;MotorDrive.c: 873:     if (OutTrisRequestFlug == 1) {
 12677                           
 12678                           ;incstack = 0
 12679                           ; Regs used in _TMR2_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12680  03FA  0021               	movlb	1	; select bank1
 12681  03FB  0355               	decf	_OutTrisRequestFlug^(0+128),w
 12682  03FC  1D03               	btfss	3,2
 12683  03FD  2C32               	goto	i1l5008
 12684                           
 12685                           ;MotorDrive.c: 874:         OutTrisRequestFlug = 0;
 12686  03FE  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 12687                           
 12688                           ;MotorDrive.c: 878:         dataTRISA = TRISA;
 12689  03FF  080C               	movf	12,w	;volatile
 12690  0400  00F7               	movwf	??_TMR2_Interrupt
 12691  0401  0877               	movf	??_TMR2_Interrupt,w
 12692  0402  0020               	movlb	0	; select bank0
 12693  0403  00E1               	movwf	_dataTRISA
 12694                           
 12695                           ;MotorDrive.c: 879:         dataTRISB = TRISB;
 12696  0404  0021               	movlb	1	; select bank1
 12697  0405  080D               	movf	13,w	;volatile
 12698  0406  00F7               	movwf	??_TMR2_Interrupt
 12699  0407  0877               	movf	??_TMR2_Interrupt,w
 12700  0408  0020               	movlb	0	; select bank0
 12701  0409  00E0               	movwf	_dataTRISB
 12702                           
 12703                           ;MotorDrive.c: 880:         dataTRISC = TRISC;
 12704  040A  0021               	movlb	1	; select bank1
 12705  040B  080E               	movf	14,w	;volatile
 12706  040C  00F7               	movwf	??_TMR2_Interrupt
 12707  040D  0877               	movf	??_TMR2_Interrupt,w
 12708  040E  0020               	movlb	0	; select bank0
 12709  040F  00DF               	movwf	_dataTRISC
 12710                           
 12711                           ;MotorDrive.c: 884:         dataTRISB &= (UB) (~(0x00 | 0x00));
 12712  0410  30FD               	movlw	253
 12713  0411  00F7               	movwf	??_TMR2_Interrupt
 12714  0412  0877               	movf	??_TMR2_Interrupt,w
 12715  0413  05E1               	andwf	_dataTRISA,f
 12716                           
 12717                           ;MotorDrive.c: 885:         dataTRISC &= (UB) (~(0x22 | 0x1C));
 12718  0414  30C1               	movlw	193
 12719  0415  00F7               	movwf	??_TMR2_Interrupt
 12720  0416  0877               	movf	??_TMR2_Interrupt,w
 12721  0417  05DF               	andwf	_dataTRISC,f
 12722                           
 12723                           ;MotorDrive.c: 888:         dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 12724  0418  085E               	movf	_dataTRISAWork_M0,w
 12725  0419  045B               	iorwf	_dataTRISAWork_M1,w
 12726  041A  00F7               	movwf	??_TMR2_Interrupt
 12727  041B  0877               	movf	??_TMR2_Interrupt,w
 12728  041C  04E1               	iorwf	_dataTRISA,f
 12729                           
 12730                           ;MotorDrive.c: 889:         dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 12731  041D  085D               	movf	_dataTRISBWork_M0,w
 12732  041E  045A               	iorwf	_dataTRISBWork_M1,w
 12733  041F  00F7               	movwf	??_TMR2_Interrupt
 12734  0420  0877               	movf	??_TMR2_Interrupt,w
 12735  0421  04E0               	iorwf	_dataTRISB,f
 12736                           
 12737                           ;MotorDrive.c: 890:         dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 12738  0422  085C               	movf	_dataTRISCWork_M0,w
 12739  0423  0459               	iorwf	_dataTRISCWork_M1,w
 12740  0424  00F7               	movwf	??_TMR2_Interrupt
 12741  0425  0877               	movf	??_TMR2_Interrupt,w
 12742  0426  04DF               	iorwf	_dataTRISC,f
 12743                           
 12744                           ;MotorDrive.c: 893:         TRISA = dataTRISA;
 12745  0427  0861               	movf	_dataTRISA,w
 12746  0428  0021               	movlb	1	; select bank1
 12747  0429  008C               	movwf	12	;volatile
 12748                           
 12749                           ;MotorDrive.c: 894:         TRISB = dataTRISB;
 12750  042A  0020               	movlb	0	; select bank0
 12751  042B  0860               	movf	_dataTRISB,w
 12752  042C  0021               	movlb	1	; select bank1
 12753  042D  008D               	movwf	13	;volatile
 12754                           
 12755                           ;MotorDrive.c: 895:         TRISC = dataTRISC;
 12756  042E  0020               	movlb	0	; select bank0
 12757  042F  085F               	movf	_dataTRISC,w
 12758  0430  0021               	movlb	1	; select bank1
 12759  0431  008E               	movwf	14	;volatile
 12760  0432                     i1l5008:
 12761                           
 12762                           ;MotorDrive.c: 898:     if (OutRequestFlug == 1) {
 12763  0432  0356               	decf	_OutRequestFlug^(0+128),w
 12764  0433  1D03               	btfss	3,2
 12765  0434  2C6E               	goto	i1l5036
 12766                           
 12767                           ;MotorDrive.c: 899:         OutRequestFlug = 0;
 12768  0435  01D6               	clrf	_OutRequestFlug^(0+128)
 12769                           
 12770                           ;MotorDrive.c: 903:         pulseOutLATA = LATA;
 12771  0436  0022               	movlb	2	; select bank2
 12772  0437  080C               	movf	12,w	;volatile
 12773  0438  00F7               	movwf	??_TMR2_Interrupt
 12774  0439  0877               	movf	??_TMR2_Interrupt,w
 12775  043A  0020               	movlb	0	; select bank0
 12776  043B  00EA               	movwf	_pulseOutLATA
 12777                           
 12778                           ;MotorDrive.c: 904:         pulseOutLATB = LATB;
 12779  043C  0022               	movlb	2	; select bank2
 12780  043D  080D               	movf	13,w	;volatile
 12781  043E  00F7               	movwf	??_TMR2_Interrupt
 12782  043F  0877               	movf	??_TMR2_Interrupt,w
 12783  0440  0020               	movlb	0	; select bank0
 12784  0441  00E9               	movwf	_pulseOutLATB
 12785                           
 12786                           ;MotorDrive.c: 905:         pulseOutLATC = LATC;
 12787  0442  0022               	movlb	2	; select bank2
 12788  0443  080E               	movf	14,w	;volatile
 12789  0444  00F7               	movwf	??_TMR2_Interrupt
 12790  0445  0877               	movf	??_TMR2_Interrupt,w
 12791  0446  0020               	movlb	0	; select bank0
 12792  0447  00E8               	movwf	_pulseOutLATC
 12793                           
 12794                           ;MotorDrive.c: 908:         pulseOutLATA &= (UB) (~(0x32 | 0x00));
 12795  0448  30CD               	movlw	205
 12796  0449  00F7               	movwf	??_TMR2_Interrupt
 12797  044A  0877               	movf	??_TMR2_Interrupt,w
 12798  044B  05EA               	andwf	_pulseOutLATA,f
 12799                           
 12800                           ;MotorDrive.c: 909:         pulseOutLATB &= (UB) (~(0x00 | 0xA0));
 12801  044C  305F               	movlw	95
 12802  044D  00F7               	movwf	??_TMR2_Interrupt
 12803  044E  0877               	movf	??_TMR2_Interrupt,w
 12804  044F  05E9               	andwf	_pulseOutLATB,f
 12805                           
 12806                           ;MotorDrive.c: 910:         pulseOutLATC &= (UB) (~(0x02 | 0x0C));
 12807  0450  30F1               	movlw	241
 12808  0451  00F7               	movwf	??_TMR2_Interrupt
 12809  0452  0877               	movf	??_TMR2_Interrupt,w
 12810  0453  05E8               	andwf	_pulseOutLATC,f
 12811                           
 12812                           ;MotorDrive.c: 913:         pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork
      +                          _M1);
 12813  0454  0867               	movf	_pulseOutLATAWork_M0,w
 12814  0455  0464               	iorwf	_pulseOutLATAWork_M1,w
 12815  0456  00F7               	movwf	??_TMR2_Interrupt
 12816  0457  0877               	movf	??_TMR2_Interrupt,w
 12817  0458  04EA               	iorwf	_pulseOutLATA,f
 12818                           
 12819                           ;MotorDrive.c: 914:         pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork
      +                          _M1);
 12820  0459  0866               	movf	_pulseOutLATBWork_M0,w
 12821  045A  0463               	iorwf	_pulseOutLATBWork_M1,w
 12822  045B  00F7               	movwf	??_TMR2_Interrupt
 12823  045C  0877               	movf	??_TMR2_Interrupt,w
 12824  045D  04E9               	iorwf	_pulseOutLATB,f
 12825                           
 12826                           ;MotorDrive.c: 915:         pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork
      +                          _M1);
 12827  045E  0865               	movf	_pulseOutLATCWork_M0,w
 12828  045F  0462               	iorwf	_pulseOutLATCWork_M1,w
 12829  0460  00F7               	movwf	??_TMR2_Interrupt
 12830  0461  0877               	movf	??_TMR2_Interrupt,w
 12831  0462  04E8               	iorwf	_pulseOutLATC,f
 12832                           
 12833                           ;MotorDrive.c: 918:         LATA = pulseOutLATA;
 12834  0463  086A               	movf	_pulseOutLATA,w
 12835  0464  0022               	movlb	2	; select bank2
 12836  0465  008C               	movwf	12	;volatile
 12837                           
 12838                           ;MotorDrive.c: 919:         LATB = pulseOutLATB;
 12839  0466  0020               	movlb	0	; select bank0
 12840  0467  0869               	movf	_pulseOutLATB,w
 12841  0468  0022               	movlb	2	; select bank2
 12842  0469  008D               	movwf	13	;volatile
 12843                           
 12844                           ;MotorDrive.c: 920:         LATC = pulseOutLATC;
 12845  046A  0020               	movlb	0	; select bank0
 12846  046B  0868               	movf	_pulseOutLATC,w
 12847  046C  0022               	movlb	2	; select bank2
 12848  046D  008E               	movwf	14	;volatile
 12849  046E                     i1l5036:
 12850                           
 12851                           ;MotorDrive.c: 928:     if (reqVrsCheckBit & 0x01) {
 12852  046E  0021               	movlb	1	; select bank1
 12853  046F  1C52               	btfss	_reqVrsCheckBit^(0+128),0
 12854  0470  2C79               	goto	i1l5042
 12855                           
 12856                           ;MotorDrive.c: 929:         reqVrsCheckBit &= ~0x01;
 12857  0471  30FE               	movlw	254
 12858  0472  00F7               	movwf	??_TMR2_Interrupt
 12859  0473  0877               	movf	??_TMR2_Interrupt,w
 12860  0474  05D2               	andwf	_reqVrsCheckBit^(0+128),f
 12861                           
 12862                           ;MotorDrive.c: 930:         VrsCheck(0);
 12863  0475  3000               	movlw	0
 12864  0476  3195  2554  3183   	fcall	_VrsCheck
 12865  0479                     i1l5042:
 12866                           
 12867                           ;MotorDrive.c: 932:     if (reqVrsCheckBit & 0x02) {
 12868  0479  0021               	movlb	1	; select bank1
 12869  047A  1CD2               	btfss	_reqVrsCheckBit^(0+128),1
 12870  047B  2C84               	goto	i1l5048
 12871                           
 12872                           ;MotorDrive.c: 933:         reqVrsCheckBit &= ~0x02;
 12873  047C  30FD               	movlw	253
 12874  047D  00F7               	movwf	??_TMR2_Interrupt
 12875  047E  0877               	movf	??_TMR2_Interrupt,w
 12876  047F  05D2               	andwf	_reqVrsCheckBit^(0+128),f
 12877                           
 12878                           ;MotorDrive.c: 934:         VrsCheck(1);
 12879  0480  3001               	movlw	1
 12880  0481  3195  2554  3183   	fcall	_VrsCheck
 12881  0484                     i1l5048:
 12882                           
 12883                           ;MotorDrive.c: 937:     if (reqComparatorOnBit & 0x01) {
 12884  0484  0021               	movlb	1	; select bank1
 12885  0485  1C54               	btfss	_reqComparatorOnBit^(0+128),0
 12886  0486  2C8F               	goto	i1l5054
 12887                           
 12888                           ;MotorDrive.c: 938:         reqComparatorOnBit &= ~0x01;
 12889  0487  30FE               	movlw	254
 12890  0488  00F7               	movwf	??_TMR2_Interrupt
 12891  0489  0877               	movf	??_TMR2_Interrupt,w
 12892  048A  05D4               	andwf	_reqComparatorOnBit^(0+128),f
 12893                           
 12894                           ;MotorDrive.c: 939:         ComparatorOn(0);
 12895  048B  3000               	movlw	0
 12896  048C  3195  25A3  3183   	fcall	_ComparatorOn
 12897  048F                     i1l5054:
 12898                           
 12899                           ;MotorDrive.c: 941:     if (reqComparatorOnBit & 0x02) {
 12900  048F  0021               	movlb	1	; select bank1
 12901  0490  1CD4               	btfss	_reqComparatorOnBit^(0+128),1
 12902  0491  2C9A               	goto	i1l5060
 12903                           
 12904                           ;MotorDrive.c: 942:         reqComparatorOnBit &= ~0x02;
 12905  0492  30FD               	movlw	253
 12906  0493  00F7               	movwf	??_TMR2_Interrupt
 12907  0494  0877               	movf	??_TMR2_Interrupt,w
 12908  0495  05D4               	andwf	_reqComparatorOnBit^(0+128),f
 12909                           
 12910                           ;MotorDrive.c: 943:         ComparatorOn(1);
 12911  0496  3001               	movlw	1
 12912  0497  3195  25A3  3183   	fcall	_ComparatorOn
 12913  049A                     i1l5060:
 12914                           
 12915                           ;MotorDrive.c: 946:     if (reqComparatorOffBit & 0x01) {
 12916  049A  0021               	movlb	1	; select bank1
 12917  049B  1C53               	btfss	_reqComparatorOffBit^(0+128),0
 12918  049C  2CA5               	goto	i1l5066
 12919                           
 12920                           ;MotorDrive.c: 947:         reqComparatorOffBit &= ~0x01;
 12921  049D  30FE               	movlw	254
 12922  049E  00F7               	movwf	??_TMR2_Interrupt
 12923  049F  0877               	movf	??_TMR2_Interrupt,w
 12924  04A0  05D3               	andwf	_reqComparatorOffBit^(0+128),f
 12925                           
 12926                           ;MotorDrive.c: 948:         ComparatorOff(0);
 12927  04A1  3000               	movlw	0
 12928  04A2  3193  23CC  3183   	fcall	_ComparatorOff
 12929  04A5                     i1l5066:
 12930                           
 12931                           ;MotorDrive.c: 950:     if (reqComparatorOffBit & 0x02) {
 12932  04A5  0021               	movlb	1	; select bank1
 12933  04A6  1CD3               	btfss	_reqComparatorOffBit^(0+128),1
 12934  04A7  2CB0               	goto	i1l5072
 12935                           
 12936                           ;MotorDrive.c: 951:         reqComparatorOffBit &= ~0x02;
 12937  04A8  30FD               	movlw	253
 12938  04A9  00F7               	movwf	??_TMR2_Interrupt
 12939  04AA  0877               	movf	??_TMR2_Interrupt,w
 12940  04AB  05D3               	andwf	_reqComparatorOffBit^(0+128),f
 12941                           
 12942                           ;MotorDrive.c: 952:         ComparatorOff(1);
 12943  04AC  3001               	movlw	1
 12944  04AD  3193  23CC  3183   	fcall	_ComparatorOff
 12945  04B0                     i1l5072:
 12946                           
 12947                           ;MotorDrive.c: 955:     if (motorActiveBit & 0x01) {
 12948  04B0  0020               	movlb	0	; select bank0
 12949  04B1  1C56               	btfss	_motorActiveBit,0
 12950  04B2  2D4B               	goto	i1l5126
 12951                           
 12952                           ;MotorDrive.c: 961:         m0PulsePositionCt++;
 12953  04B3  3001               	movlw	1
 12954  04B4  00F7               	movwf	??_TMR2_Interrupt
 12955  04B5  0877               	movf	??_TMR2_Interrupt,w
 12956  04B6  0021               	movlb	1	; select bank1
 12957  04B7  07EA               	addwf	_m0PulsePositionCt^(0+128),f
 12958                           
 12959                           ;MotorDrive.c: 962:         if (m0PulsePositionCt == m0PulseChangePosition) {
 12960  04B8  086A               	movf	_m0PulsePositionCt^(0+128),w
 12961  04B9  0667               	xorwf	_m0PulseChangePosition^(0+128),w
 12962  04BA  1D03               	skipz
 12963  04BB  2D4B               	goto	i1l5126
 12964                           
 12965                           ;MotorDrive.c: 965:             m0PulseOutStep++;
 12966  04BC  3001               	movlw	1
 12967  04BD  00F7               	movwf	??_TMR2_Interrupt
 12968  04BE  0877               	movf	??_TMR2_Interrupt,w
 12969  04BF  07F3               	addwf	_m0PulseOutStep,f
 12970                           
 12971                           ;MotorDrive.c: 967:             if (m0PulseOutStep >= ID_PULSE_OUT_STEP_MAX) {
 12972  04C0  301A               	movlw	26
 12973  04C1  0273               	subwf	_m0PulseOutStep,w
 12974  04C2  1C03               	skipc
 12975  04C3  2D2D               	goto	i1l5116
 12976                           
 12977                           ;MotorDrive.c: 969:                 if (0 == (actCorrectDriveBit & 0x01)) {
 12978  04C4  0020               	movlb	0	; select bank0
 12979  04C5  1853               	btfsc	_actCorrectDriveBit,0
 12980  04C6  2CF2               	goto	i1l687
 12981                           
 12982                           ;MotorDrive.c: 970:                     if ((reqSearchBasePosBit | reqCorrectBasePosBit 
      +                          | reqCheckLoadPosBit) & 0x01) {
 12983  04C7  0854               	movf	_reqCorrectBasePosBit,w
 12984  04C8  0455               	iorwf	_reqSearchBasePosBit,w
 12985  04C9  00F7               	movwf	??_TMR2_Interrupt
 12986  04CA  0021               	movlb	1	; select bank1
 12987  04CB  084E               	movf	_reqCheckLoadPosBit^(0+128),w
 12988  04CC  0477               	iorwf	??_TMR2_Interrupt,w
 12989  04CD  00F8               	movwf	??_TMR2_Interrupt+1
 12990  04CE  1C78               	btfss	??_TMR2_Interrupt+1,0
 12991  04CF  2CF2               	goto	i1l687
 12992                           
 12993                           ;MotorDrive.c: 972:                         positionSearchCt[ 0 ]++;
 12994  04D0  3001               	movlw	1
 12995  04D1  07A4               	addwf	_positionSearchCt^(0+128),f
 12996  04D2  3000               	movlw	0
 12997  04D3  3DA5               	addwfc	(_positionSearchCt+1)^(0+128),f
 12998                           
 12999                           ;MotorDrive.c: 974:                         if ((0 == vrsCountValue[ 0 ])
 13000  04D4  083C               	movf	_vrsCountValue^(0+128),w
 13001  04D5  1903               	btfsc	3,2
 13002  04D6  2CEB               	goto	i1l5092
 13003  04D7  3056               	movlw	low (_TblMaxSteps| (0+32768))
 13004  04D8  0084               	movwf	4
 13005  04D9  3098               	movlw	high (_TblMaxSteps| (0+32768))
 13006  04DA  0085               	movwf	5
 13007  04DB  3F00               	moviw [0]fsr0
 13008  04DC  00F7               	movwf	??_TMR2_Interrupt
 13009  04DD  3F01               	moviw [1]fsr0
 13010  04DE  00F8               	movwf	??_TMR2_Interrupt+1
 13011  04DF  0825               	movf	(_positionSearchCt+1)^(0+128),w
 13012  04E0  3A80               	xorlw	128
 13013  04E1  00F9               	movwf	??_TMR2_Interrupt+2
 13014  04E2  0878               	movf	??_TMR2_Interrupt+1,w
 13015  04E3  3A80               	xorlw	128
 13016  04E4  0279               	subwf	??_TMR2_Interrupt+2,w
 13017  04E5  1D03               	skipz
 13018  04E6  2CE9               	goto	u313_25
 13019  04E7  0877               	movf	??_TMR2_Interrupt,w
 13020  04E8  0224               	subwf	_positionSearchCt^(0+128),w
 13021  04E9                     u313_25:
 13022  04E9  1C03               	skipc
 13023  04EA  2CF2               	goto	i1l687
 13024  04EB                     i1l5092:
 13025                           
 13026                           ;MotorDrive.c: 975:                                 || (positionSearchCt[ 0 ] >= TblMaxS
      +                          teps[ 0 ])) {;MotorDrive.c: 976:                             motorActiveBit &= (UB) (~0x
      +                          01);
 13027  04EB  30FE               	movlw	254
 13028  04EC  00F7               	movwf	??_TMR2_Interrupt
 13029  04ED  0877               	movf	??_TMR2_Interrupt,w
 13030  04EE  0020               	movlb	0	; select bank0
 13031  04EF  05D6               	andwf	_motorActiveBit,f
 13032                           
 13033                           ;MotorDrive.c: 977:                             reqAfterDetectLoadFuncBit |= 0x01;
 13034  04F0  0021               	movlb	1	; select bank1
 13035  04F1  1450               	bsf	_reqAfterDetectLoadFuncBit^(0+128),0
 13036  04F2                     i1l687:	
 13037                           ;MotorDrive.c: 983:                 }
 13038                           
 13039                           
 13040                           ;MotorDrive.c: 985:                 if (motorM0StepCounter) {
 13041  04F2  0021               	movlb	1	; select bank1
 13042  04F3  0840               	movf	_motorM0StepCounter^(0+128),w
 13043  04F4  0441               	iorwf	(_motorM0StepCounter+1)^(0+128),w
 13044  04F5  1903               	btfsc	3,2
 13045  04F6  2D13               	goto	i1l5104
 13046                           
 13047                           ;MotorDrive.c: 987:                     motorM0StepCounter--;
 13048  04F7  30FF               	movlw	255
 13049  04F8  07C0               	addwf	_motorM0StepCounter^(0+128),f
 13050  04F9  30FF               	movlw	255
 13051  04FA  3DC1               	addwfc	(_motorM0StepCounter+1)^(0+128),f
 13052                           
 13053                           ;MotorDrive.c: 988:                     if (0 >= motorM0StepCounter) {
 13054  04FB  0841               	movf	(_motorM0StepCounter+1)^(0+128),w
 13055  04FC  3A80               	xorlw	128
 13056  04FD  00F7               	movwf	??_TMR2_Interrupt
 13057  04FE  3080               	movlw	128
 13058  04FF  0277               	subwf	??_TMR2_Interrupt,w
 13059  0500  1D03               	skipz
 13060  0501  2D04               	goto	u315_25
 13061  0502  3001               	movlw	1
 13062  0503  0240               	subwf	_motorM0StepCounter^(0+128),w
 13063  0504                     u315_25:
 13064  0504  1803               	skipnc
 13065  0505  2D13               	goto	i1l5104
 13066                           
 13067                           ;MotorDrive.c: 989:                         actCorrectDriveBit &= (UB) (~0x01);
 13068  0506  30FE               	movlw	254
 13069  0507  00F7               	movwf	??_TMR2_Interrupt
 13070  0508  0877               	movf	??_TMR2_Interrupt,w
 13071  0509  0020               	movlb	0	; select bank0
 13072  050A  05D3               	andwf	_actCorrectDriveBit,f
 13073                           
 13074                           ;MotorDrive.c: 990:                         motorActiveBit &= (UB) (~0x01);
 13075  050B  30FE               	movlw	254
 13076  050C  00F7               	movwf	??_TMR2_Interrupt
 13077  050D  0877               	movf	??_TMR2_Interrupt,w
 13078  050E  05D6               	andwf	_motorActiveBit,f
 13079                           
 13080                           ;MotorDrive.c: 991:                         reqAfterMotorStopFuncBit |= 0x01;
 13081  050F  0021               	movlb	1	; select bank1
 13082  0510  1459               	bsf	_reqAfterMotorStopFuncBit^(0+128),0
 13083                           
 13084                           ;MotorDrive.c: 992:                         motorM0StepCounter = 0;
 13085  0511  01C0               	clrf	_motorM0StepCounter^(0+128)
 13086  0512  01C1               	clrf	(_motorM0StepCounter+1)^(0+128)
 13087  0513                     i1l5104:
 13088                           
 13089                           ;MotorDrive.c: 996:                 if (reqStopMotorBit & 0x01) {
 13090  0513  0021               	movlb	1	; select bank1
 13091  0514  1C58               	btfss	_reqStopMotorBit^(0+128),0
 13092  0515  2D21               	goto	i1l5110
 13093                           
 13094                           ;MotorDrive.c: 997:                     reqStopMotorBit &= (UB) (~0x01);
 13095  0516  30FE               	movlw	254
 13096  0517  00F7               	movwf	??_TMR2_Interrupt
 13097  0518  0877               	movf	??_TMR2_Interrupt,w
 13098  0519  05D8               	andwf	_reqStopMotorBit^(0+128),f
 13099                           
 13100                           ;MotorDrive.c: 998:                     motorActiveBit &= (UB) (~0x01);
 13101  051A  30FE               	movlw	254
 13102  051B  00F7               	movwf	??_TMR2_Interrupt
 13103  051C  0877               	movf	??_TMR2_Interrupt,w
 13104  051D  0020               	movlb	0	; select bank0
 13105  051E  05D6               	andwf	_motorActiveBit,f
 13106                           
 13107                           ;MotorDrive.c: 999:                     reqAfterMotorStopFuncBit |= 0x01;
 13108  051F  0021               	movlb	1	; select bank1
 13109  0520  1459               	bsf	_reqAfterMotorStopFuncBit^(0+128),0
 13110  0521                     i1l5110:
 13111                           
 13112                           ;MotorDrive.c: 1002:                 m0PulsePositionCt = m0PulsePositionCtWork;
 13113  0521  0020               	movlb	0	; select bank0
 13114  0522  0858               	movf	_m0PulsePositionCtWork,w
 13115  0523  00F7               	movwf	??_TMR2_Interrupt
 13116  0524  0877               	movf	??_TMR2_Interrupt,w
 13117  0525  0021               	movlb	1	; select bank1
 13118  0526  00EA               	movwf	_m0PulsePositionCt^(0+128)
 13119                           
 13120                           ;MotorDrive.c: 1003:                 m0PulseOutStep = m0PulseOutStepWork;
 13121  0527  0865               	movf	_m0PulseOutStepWork^(0+128),w
 13122  0528  00F7               	movwf	??_TMR2_Interrupt
 13123  0529  0877               	movf	??_TMR2_Interrupt,w
 13124  052A  00F3               	movwf	_m0PulseOutStep
 13125                           
 13126                           ;MotorDrive.c: 1004:                 vrsCountValue[ 0 ] = 0;
 13127  052B  01BC               	clrf	_vrsCountValue^(0+128)
 13128                           
 13129                           ;MotorDrive.c: 1006:             } else {
 13130  052C  2D36               	goto	i1l5120
 13131  052D                     i1l5116:
 13132                           
 13133                           ;MotorDrive.c: 1008:                 if (m0PulseOutChangeFunc) {
 13134  052D  084A               	movf	_m0PulseOutChangeFunc^(0+128),w
 13135  052E  044B               	iorwf	(_m0PulseOutChangeFunc+1)^(0+128),w
 13136  052F  1903               	btfsc	3,2
 13137  0530  2D36               	goto	i1l5120
 13138                           
 13139                           ;MotorDrive.c: 1009:                     m0PulseOutChangeFunc();
 13140  0531  084B               	movf	(_m0PulseOutChangeFunc+1)^(0+128),w
 13141  0532  008A               	movwf	10
 13142  0533  084A               	movf	_m0PulseOutChangeFunc^(0+128),w
 13143  0534  000A               	callw
 13144  0535  3183               	pagesel	$
 13145  0536                     i1l5120:
 13146                           
 13147                           ;MotorDrive.c: 1013:             if (m0PulseOutStep < (ID_PULSE_OUT_STEP_MAX - 1)) {
 13148  0536  3019               	movlw	25
 13149  0537  0273               	subwf	_m0PulseOutStep,w
 13150  0538  1803               	skipnc
 13151  0539  2D46               	goto	i1l5124
 13152                           
 13153                           ;MotorDrive.c: 1014:                 m0PulseChangePosition = TblM0PulseChangePosition[ m
      +                          0PulseOutStep ];
 13154  053A  0873               	movf	_m0PulseOutStep,w
 13155  053B  3E35               	addlw	low (_TblM0PulseChangePosition| (0+32768))
 13156  053C  0084               	movwf	4
 13157  053D  3098               	movlw	high (_TblM0PulseChangePosition| (0+32768))
 13158  053E  1803               	skipnc
 13159  053F  3E01               	addlw	1
 13160  0540  0085               	movwf	5
 13161  0541  0800               	movf	0,w	;code access
 13162  0542  00F7               	movwf	??_TMR2_Interrupt
 13163  0543  0877               	movf	??_TMR2_Interrupt,w
 13164  0544  0021               	movlb	1	; select bank1
 13165  0545  2D4A               	goto	L18
 13166  0546                     i1l5124:	
 13167                           ;MotorDrive.c: 1015:             } else {
 13168                           
 13169                           
 13170                           ;MotorDrive.c: 1016:                 m0PulseChangePosition = TblM0PulseChangePositionLas
      +                          t;
 13171  0546  0021               	movlb	1	; select bank1
 13172  0547  086C               	movf	_TblM0PulseChangePositionLast^(0+128),w
 13173  0548  00F7               	movwf	??_TMR2_Interrupt
 13174  0549  0877               	movf	??_TMR2_Interrupt,w
 13175  054A                     L18:
 13176  054A  00E7               	movwf	_m0PulseChangePosition^(0+128)
 13177  054B                     i1l5126:
 13178                           
 13179                           ;MotorDrive.c: 1025:     if (motorActiveBit & 0x02) {
 13180  054B  0020               	movlb	0	; select bank0
 13181  054C  1CD6               	btfss	_motorActiveBit,1
 13182  054D  2DE4               	goto	i1l5180
 13183                           
 13184                           ;MotorDrive.c: 1031:         m1PulsePositionCt++;
 13185  054E  3001               	movlw	1
 13186  054F  00F7               	movwf	??_TMR2_Interrupt
 13187  0550  0877               	movf	??_TMR2_Interrupt,w
 13188  0551  0021               	movlb	1	; select bank1
 13189  0552  07E9               	addwf	_m1PulsePositionCt^(0+128),f
 13190                           
 13191                           ;MotorDrive.c: 1032:         if (m1PulsePositionCt == m1PulseChangePosition) {
 13192  0553  0869               	movf	_m1PulsePositionCt^(0+128),w
 13193  0554  0666               	xorwf	_m1PulseChangePosition^(0+128),w
 13194  0555  1D03               	skipz
 13195  0556  2DE4               	goto	i1l5180
 13196                           
 13197                           ;MotorDrive.c: 1035:             m1PulseOutStep++;
 13198  0557  3001               	movlw	1
 13199  0558  00F7               	movwf	??_TMR2_Interrupt
 13200  0559  0877               	movf	??_TMR2_Interrupt,w
 13201  055A  07F2               	addwf	_m1PulseOutStep,f
 13202                           
 13203                           ;MotorDrive.c: 1037:             if (m1PulseOutStep >= ID_PULSE_OUT_STEP_MAX) {
 13204  055B  301A               	movlw	26
 13205  055C  0272               	subwf	_m1PulseOutStep,w
 13206  055D  1C03               	skipc
 13207  055E  2DC6               	goto	i1l5170
 13208                           
 13209                           ;MotorDrive.c: 1039:                 if (0 == (actCorrectDriveBit & 0x02)) {
 13210  055F  0020               	movlb	0	; select bank0
 13211  0560  18D3               	btfsc	_actCorrectDriveBit,1
 13212  0561  2D8D               	goto	i1l702
 13213                           
 13214                           ;MotorDrive.c: 1040:                     if ((reqSearchBasePosBit | reqCorrectBasePosBit
      +                           | reqCheckLoadPosBit) & 0x02) {
 13215  0562  0854               	movf	_reqCorrectBasePosBit,w
 13216  0563  0455               	iorwf	_reqSearchBasePosBit,w
 13217  0564  00F7               	movwf	??_TMR2_Interrupt
 13218  0565  0021               	movlb	1	; select bank1
 13219  0566  084E               	movf	_reqCheckLoadPosBit^(0+128),w
 13220  0567  0477               	iorwf	??_TMR2_Interrupt,w
 13221  0568  00F8               	movwf	??_TMR2_Interrupt+1
 13222  0569  1CF8               	btfss	??_TMR2_Interrupt+1,1
 13223  056A  2D8D               	goto	i1l702
 13224                           
 13225                           ;MotorDrive.c: 1042:                         positionSearchCt[ 1 ]++;
 13226  056B  3001               	movlw	1
 13227  056C  07A6               	addwf	(_positionSearchCt^(0+128)+2),f
 13228  056D  3000               	movlw	0
 13229  056E  3DA7               	addwfc	((_positionSearchCt+1)^(0+128)+2),f
 13230                           
 13231                           ;MotorDrive.c: 1044:                         if ((0 == vrsCountValue[ 1 ])
 13232  056F  083D               	movf	(_vrsCountValue^(0+128)+1),w
 13233  0570  1903               	btfsc	3,2
 13234  0571  2D86               	goto	i1l5146
 13235  0572  3058               	movlw	low ((_TblMaxSteps+2)| (0+32768))
 13236  0573  0084               	movwf	4
 13237  0574  3098               	movlw	high ((_TblMaxSteps+2)| (0+32768))
 13238  0575  0085               	movwf	5
 13239  0576  3F00               	moviw [0]fsr0
 13240  0577  00F7               	movwf	??_TMR2_Interrupt
 13241  0578  3F01               	moviw [1]fsr0
 13242  0579  00F8               	movwf	??_TMR2_Interrupt+1
 13243  057A  0827               	movf	((_positionSearchCt+1)^(0+128)+2),w
 13244  057B  3A80               	xorlw	128
 13245  057C  00F9               	movwf	??_TMR2_Interrupt+2
 13246  057D  0878               	movf	??_TMR2_Interrupt+1,w
 13247  057E  3A80               	xorlw	128
 13248  057F  0279               	subwf	??_TMR2_Interrupt+2,w
 13249  0580  1D03               	skipz
 13250  0581  2D84               	goto	u325_25
 13251  0582  0877               	movf	??_TMR2_Interrupt,w
 13252  0583  0226               	subwf	(_positionSearchCt^(0+128)+2),w
 13253  0584                     u325_25:
 13254  0584  1C03               	skipc
 13255  0585  2D8D               	goto	i1l702
 13256  0586                     i1l5146:
 13257                           
 13258                           ;MotorDrive.c: 1045:                                 || (positionSearchCt[ 1 ] >= TblMax
      +                          Steps[ 1 ])) {;MotorDrive.c: 1046:                             motorActiveBit &= (UB) (~
      +                          0x02);
 13259  0586  30FD               	movlw	253
 13260  0587  00F7               	movwf	??_TMR2_Interrupt
 13261  0588  0877               	movf	??_TMR2_Interrupt,w
 13262  0589  0020               	movlb	0	; select bank0
 13263  058A  05D6               	andwf	_motorActiveBit,f
 13264                           
 13265                           ;MotorDrive.c: 1047:                             reqAfterDetectLoadFuncBit |= 0x02;
 13266  058B  0021               	movlb	1	; select bank1
 13267  058C  14D0               	bsf	_reqAfterDetectLoadFuncBit^(0+128),1
 13268  058D                     i1l702:	
 13269                           ;MotorDrive.c: 1053:                 }
 13270                           
 13271                           
 13272                           ;MotorDrive.c: 1055:                 if (motorM1StepCounter) {
 13273  058D  0021               	movlb	1	; select bank1
 13274  058E  083E               	movf	_motorM1StepCounter^(0+128),w
 13275  058F  043F               	iorwf	(_motorM1StepCounter+1)^(0+128),w
 13276  0590  1903               	btfsc	3,2
 13277  0591  2DAE               	goto	i1l5158
 13278                           
 13279                           ;MotorDrive.c: 1057:                     motorM1StepCounter--;
 13280  0592  30FF               	movlw	255
 13281  0593  07BE               	addwf	_motorM1StepCounter^(0+128),f
 13282  0594  30FF               	movlw	255
 13283  0595  3DBF               	addwfc	(_motorM1StepCounter+1)^(0+128),f
 13284                           
 13285                           ;MotorDrive.c: 1058:                     if (0 >= motorM1StepCounter) {
 13286  0596  083F               	movf	(_motorM1StepCounter+1)^(0+128),w
 13287  0597  3A80               	xorlw	128
 13288  0598  00F7               	movwf	??_TMR2_Interrupt
 13289  0599  3080               	movlw	128
 13290  059A  0277               	subwf	??_TMR2_Interrupt,w
 13291  059B  1D03               	skipz
 13292  059C  2D9F               	goto	u327_25
 13293  059D  3001               	movlw	1
 13294  059E  023E               	subwf	_motorM1StepCounter^(0+128),w
 13295  059F                     u327_25:
 13296  059F  1803               	skipnc
 13297  05A0  2DAE               	goto	i1l5158
 13298                           
 13299                           ;MotorDrive.c: 1059:                         actCorrectDriveBit &= (UB) (~0x02);
 13300  05A1  30FD               	movlw	253
 13301  05A2  00F7               	movwf	??_TMR2_Interrupt
 13302  05A3  0877               	movf	??_TMR2_Interrupt,w
 13303  05A4  0020               	movlb	0	; select bank0
 13304  05A5  05D3               	andwf	_actCorrectDriveBit,f
 13305                           
 13306                           ;MotorDrive.c: 1060:                         motorActiveBit &= (UB) (~0x02);
 13307  05A6  30FD               	movlw	253
 13308  05A7  00F7               	movwf	??_TMR2_Interrupt
 13309  05A8  0877               	movf	??_TMR2_Interrupt,w
 13310  05A9  05D6               	andwf	_motorActiveBit,f
 13311                           
 13312                           ;MotorDrive.c: 1061:                         reqAfterMotorStopFuncBit |= 0x02;
 13313  05AA  0021               	movlb	1	; select bank1
 13314  05AB  14D9               	bsf	_reqAfterMotorStopFuncBit^(0+128),1
 13315                           
 13316                           ;MotorDrive.c: 1062:                         motorM1StepCounter = 0;
 13317  05AC  01BE               	clrf	_motorM1StepCounter^(0+128)
 13318  05AD  01BF               	clrf	(_motorM1StepCounter+1)^(0+128)
 13319  05AE                     i1l5158:
 13320                           
 13321                           ;MotorDrive.c: 1066:                 if (reqStopMotorBit & 0x02) {
 13322  05AE  0021               	movlb	1	; select bank1
 13323  05AF  1CD8               	btfss	_reqStopMotorBit^(0+128),1
 13324  05B0  2DBC               	goto	i1l5164
 13325                           
 13326                           ;MotorDrive.c: 1067:                     reqStopMotorBit &= (UB) (~0x02);
 13327  05B1  30FD               	movlw	253
 13328  05B2  00F7               	movwf	??_TMR2_Interrupt
 13329  05B3  0877               	movf	??_TMR2_Interrupt,w
 13330  05B4  05D8               	andwf	_reqStopMotorBit^(0+128),f
 13331                           
 13332                           ;MotorDrive.c: 1068:                     motorActiveBit &= (UB) (~0x02);
 13333  05B5  30FD               	movlw	253
 13334  05B6  00F7               	movwf	??_TMR2_Interrupt
 13335  05B7  0877               	movf	??_TMR2_Interrupt,w
 13336  05B8  0020               	movlb	0	; select bank0
 13337  05B9  05D6               	andwf	_motorActiveBit,f
 13338                           
 13339                           ;MotorDrive.c: 1069:                     reqAfterMotorStopFuncBit |= 0x02;
 13340  05BA  0021               	movlb	1	; select bank1
 13341  05BB  14D9               	bsf	_reqAfterMotorStopFuncBit^(0+128),1
 13342  05BC                     i1l5164:
 13343                           
 13344                           ;MotorDrive.c: 1072:                 m1PulsePositionCt = m1PulsePositionCtWork;
 13345  05BC  0868               	movf	_m1PulsePositionCtWork^(0+128),w
 13346  05BD  00F7               	movwf	??_TMR2_Interrupt
 13347  05BE  0877               	movf	??_TMR2_Interrupt,w
 13348  05BF  00E9               	movwf	_m1PulsePositionCt^(0+128)
 13349                           
 13350                           ;MotorDrive.c: 1073:                 m1PulseOutStep = m1PulseOutStepWork;
 13351  05C0  0864               	movf	_m1PulseOutStepWork^(0+128),w
 13352  05C1  00F7               	movwf	??_TMR2_Interrupt
 13353  05C2  0877               	movf	??_TMR2_Interrupt,w
 13354  05C3  00F2               	movwf	_m1PulseOutStep
 13355                           
 13356                           ;MotorDrive.c: 1074:                 vrsCountValue[ 1 ] = 0;
 13357  05C4  01BD               	clrf	(_vrsCountValue^(0+128)+1)
 13358                           
 13359                           ;MotorDrive.c: 1076:             } else {
 13360  05C5  2DCF               	goto	i1l5174
 13361  05C6                     i1l5170:
 13362                           
 13363                           ;MotorDrive.c: 1078:                 if (m1PulseOutChangeFunc) {
 13364  05C6  0848               	movf	_m1PulseOutChangeFunc^(0+128),w
 13365  05C7  0449               	iorwf	(_m1PulseOutChangeFunc+1)^(0+128),w
 13366  05C8  1903               	btfsc	3,2
 13367  05C9  2DCF               	goto	i1l5174
 13368                           
 13369                           ;MotorDrive.c: 1079:                     m1PulseOutChangeFunc();
 13370  05CA  0849               	movf	(_m1PulseOutChangeFunc+1)^(0+128),w
 13371  05CB  008A               	movwf	10
 13372  05CC  0848               	movf	_m1PulseOutChangeFunc^(0+128),w
 13373  05CD  000A               	callw
 13374  05CE  3183               	pagesel	$
 13375  05CF                     i1l5174:
 13376                           
 13377                           ;MotorDrive.c: 1083:             if (m1PulseOutStep < (ID_PULSE_OUT_STEP_MAX - 1)) {
 13378  05CF  3019               	movlw	25
 13379  05D0  0272               	subwf	_m1PulseOutStep,w
 13380  05D1  1803               	skipnc
 13381  05D2  2DDF               	goto	i1l5178
 13382                           
 13383                           ;MotorDrive.c: 1084:                 m1PulseChangePosition = TblM1PulseChangePosition[ m
      +                          1PulseOutStep ];
 13384  05D3  0872               	movf	_m1PulseOutStep,w
 13385  05D4  3E1C               	addlw	low (_TblM1PulseChangePosition| (0+32768))
 13386  05D5  0084               	movwf	4
 13387  05D6  3098               	movlw	high (_TblM1PulseChangePosition| (0+32768))
 13388  05D7  1803               	skipnc
 13389  05D8  3E01               	addlw	1
 13390  05D9  0085               	movwf	5
 13391  05DA  0800               	movf	0,w	;code access
 13392  05DB  00F7               	movwf	??_TMR2_Interrupt
 13393  05DC  0877               	movf	??_TMR2_Interrupt,w
 13394  05DD  0021               	movlb	1	; select bank1
 13395  05DE  2DE3               	goto	L19
 13396  05DF                     i1l5178:	
 13397                           ;MotorDrive.c: 1085:             } else {
 13398                           
 13399                           
 13400                           ;MotorDrive.c: 1086:                 m1PulseChangePosition = TblM1PulseChangePositionLas
      +                          t;
 13401  05DF  0021               	movlb	1	; select bank1
 13402  05E0  086B               	movf	_TblM1PulseChangePositionLast^(0+128),w
 13403  05E1  00F7               	movwf	??_TMR2_Interrupt
 13404  05E2  0877               	movf	??_TMR2_Interrupt,w
 13405  05E3                     L19:
 13406  05E3  00E6               	movwf	_m1PulseChangePosition^(0+128)
 13407  05E4                     i1l5180:
 13408                           
 13409                           ;MotorDrive.c: 1099:     if (0 == motorActiveBit) {
 13410  05E4  0020               	movlb	0	; select bank0
 13411  05E5  0856               	movf	_motorActiveBit,w
 13412  05E6  1D03               	btfss	3,2
 13413  05E7  0008               	return
 13414                           
 13415                           ;MotorDrive.c: 1100:         TMR2_StopTimer();
 13416  05E8  3180  2002         	fcall	i1_TMR2_StopTimer
 13417  05EA  0008               	return
 13418  05EB                     __end_of_TMR2_Interrupt:
 13419                           
 13420                           	psect	text79
 13421  1050                     __ptext79:	
 13422 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 13423 ;; Defined at:
 13424 ;;		line 144 in file "mcc_generated_files/tmr2.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;		None
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;		None
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  1    wreg      void 
 13431 ;; Registers used:
 13432 ;;		None
 13433 ;; Tracked objects:
 13434 ;;		On entry : 1F/2
 13435 ;;		On exit  : 1F/2
 13436 ;;		Unchanged: 1F/0
 13437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13438 ;;      Params:         0       0       0       0       0       0       0       0
 13439 ;;      Locals:         0       0       0       0       0       0       0       0
 13440 ;;      Temps:          0       0       0       0       0       0       0       0
 13441 ;;      Totals:         0       0       0       0       0       0       0       0
 13442 ;;Total ram usage:        0 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; This function calls:
 13445 ;;		Nothing
 13446 ;; This function is called by:
 13447 ;;		_TMR2_Initialize
 13448 ;;		_TMR2_CallBack
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           
 13453                           ;psect for function _TMR2_DefaultInterruptHandler
 13454  1050                     _TMR2_DefaultInterruptHandler:
 13455                           
 13456                           ;incstack = 0
 13457                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 13458  1050  0008               	return
 13459  1051                     __end_of_TMR2_DefaultInterruptHandler:
 13460                           
 13461                           	psect	text80
 13462  0784                     __ptext80:	
 13463 ;; *************** function _TMR2_Interrupt_SPK *****************
 13464 ;; Defined at:
 13465 ;;		line 1112 in file "MotorDrive.c"
 13466 ;; Parameters:    Size  Location     Type
 13467 ;;		None
 13468 ;; Auto vars:     Size  Location     Type
 13469 ;;		None
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      void 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0, pclath, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 1F/2
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13479 ;;      Params:         0       0       0       0       0       0       0       0
 13480 ;;      Locals:         0       0       0       0       0       0       0       0
 13481 ;;      Temps:          1       0       0       0       0       0       0       0
 13482 ;;      Totals:         1       0       0       0       0       0       0       0
 13483 ;;Total ram usage:        1 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    4
 13486 ;; This function calls:
 13487 ;;		Absolute function
 13488 ;;		_SetDataTRISxWork_SPK_OPEN
 13489 ;;		_SetDataTRISxWork_SPK_SHORT
 13490 ;;		_SpkVrsCheck
 13491 ;; This function is called by:
 13492 ;;		_SetMotorStartSPK
 13493 ;;		_TMR2_CallBack
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           
 13498                           ;psect for function _TMR2_Interrupt_SPK
 13499  0784                     _TMR2_Interrupt_SPK:
 13500                           
 13501                           ;MotorDrive.c: 1114:     if (spkOutTrisRequestFlug == 1) {
 13502                           
 13503                           ;incstack = 0
 13504                           ; Regs used in _TMR2_Interrupt_SPK: [wreg+status,2+status,0+pclath+cstack]
 13505  0784  0021               	movlb	1	; select bank1
 13506  0785  035E               	decf	_spkOutTrisRequestFlug^(0+128),w
 13507  0786  1D03               	btfss	3,2
 13508  0787  2FD3               	goto	i1l5226
 13509                           
 13510                           ;MotorDrive.c: 1115:         spkOutTrisRequestFlug = 0;
 13511  0788  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
 13512                           
 13513                           ;MotorDrive.c: 1119:         dataTRISA = TRISA;
 13514  0789  080C               	movf	12,w	;volatile
 13515  078A  00F8               	movwf	??_TMR2_Interrupt_SPK
 13516  078B  0878               	movf	??_TMR2_Interrupt_SPK,w
 13517  078C  0020               	movlb	0	; select bank0
 13518  078D  00E1               	movwf	_dataTRISA
 13519                           
 13520                           ;MotorDrive.c: 1120:         dataTRISB = TRISB;
 13521  078E  0021               	movlb	1	; select bank1
 13522  078F  080D               	movf	13,w	;volatile
 13523  0790  00F8               	movwf	??_TMR2_Interrupt_SPK
 13524  0791  0878               	movf	??_TMR2_Interrupt_SPK,w
 13525  0792  0020               	movlb	0	; select bank0
 13526  0793  00E0               	movwf	_dataTRISB
 13527                           
 13528                           ;MotorDrive.c: 1121:         dataTRISC = TRISC;
 13529  0794  0021               	movlb	1	; select bank1
 13530  0795  080E               	movf	14,w	;volatile
 13531  0796  00F8               	movwf	??_TMR2_Interrupt_SPK
 13532  0797  0878               	movf	??_TMR2_Interrupt_SPK,w
 13533  0798  0020               	movlb	0	; select bank0
 13534  0799  00DF               	movwf	_dataTRISC
 13535                           
 13536                           ;MotorDrive.c: 1126:         dataTRISB &= (UB) (~(0x00 | 0x00));
 13537  079A  30FD               	movlw	253
 13538  079B  00F8               	movwf	??_TMR2_Interrupt_SPK
 13539  079C  0878               	movf	??_TMR2_Interrupt_SPK,w
 13540  079D  05E1               	andwf	_dataTRISA,f
 13541                           
 13542                           ;MotorDrive.c: 1127:         dataTRISC &= (UB) (~(0x22 | 0x1C));
 13543  079E  30C1               	movlw	193
 13544  079F  00F8               	movwf	??_TMR2_Interrupt_SPK
 13545  07A0  0878               	movf	??_TMR2_Interrupt_SPK,w
 13546  07A1  05DF               	andwf	_dataTRISC,f
 13547                           
 13548                           ;MotorDrive.c: 1130:         dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 13549  07A2  085E               	movf	_dataTRISAWork_M0,w
 13550  07A3  045B               	iorwf	_dataTRISAWork_M1,w
 13551  07A4  00F8               	movwf	??_TMR2_Interrupt_SPK
 13552  07A5  0878               	movf	??_TMR2_Interrupt_SPK,w
 13553  07A6  04E1               	iorwf	_dataTRISA,f
 13554                           
 13555                           ;MotorDrive.c: 1131:         dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 13556  07A7  085D               	movf	_dataTRISBWork_M0,w
 13557  07A8  045A               	iorwf	_dataTRISBWork_M1,w
 13558  07A9  00F8               	movwf	??_TMR2_Interrupt_SPK
 13559  07AA  0878               	movf	??_TMR2_Interrupt_SPK,w
 13560  07AB  04E0               	iorwf	_dataTRISB,f
 13561                           
 13562                           ;MotorDrive.c: 1132:         dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 13563  07AC  085C               	movf	_dataTRISCWork_M0,w
 13564  07AD  0459               	iorwf	_dataTRISCWork_M1,w
 13565  07AE  00F8               	movwf	??_TMR2_Interrupt_SPK
 13566  07AF  0878               	movf	??_TMR2_Interrupt_SPK,w
 13567  07B0  04DF               	iorwf	_dataTRISC,f
 13568                           
 13569                           ;MotorDrive.c: 1135:         TRISA = dataTRISA;
 13570  07B1  0861               	movf	_dataTRISA,w
 13571  07B2  0021               	movlb	1	; select bank1
 13572  07B3  008C               	movwf	12	;volatile
 13573                           
 13574                           ;MotorDrive.c: 1136:         TRISB = dataTRISB;
 13575  07B4  0020               	movlb	0	; select bank0
 13576  07B5  0860               	movf	_dataTRISB,w
 13577  07B6  0021               	movlb	1	; select bank1
 13578  07B7  008D               	movwf	13	;volatile
 13579                           
 13580                           ;MotorDrive.c: 1137:         TRISC = dataTRISC;
 13581  07B8  0020               	movlb	0	; select bank0
 13582  07B9  085F               	movf	_dataTRISC,w
 13583  07BA  0021               	movlb	1	; select bank1
 13584  07BB  008E               	movwf	14	;volatile
 13585                           
 13586                           ;MotorDrive.c: 1140:         if (excitatingOffMaskTime > 0) {
 13587  07BC  0862               	movf	_excitatingOffMaskTime^(0+128),w
 13588  07BD  1903               	btfsc	3,2
 13589  07BE  2FC4               	goto	i1l5218
 13590                           
 13591                           ;MotorDrive.c: 1142:             excitatingOffMaskTime--;
 13592  07BF  3001               	movlw	1
 13593  07C0  02E2               	subwf	_excitatingOffMaskTime^(0+128),f
 13594                           
 13595                           ;MotorDrive.c: 1143:             PIR2bits.C1IF = 0;
 13596  07C1  0020               	movlb	0	; select bank0
 13597  07C2  1292               	bcf	18,5	;volatile
 13598                           
 13599                           ;MotorDrive.c: 1144:             PIR2bits.C2IF = 0;
 13600  07C3  1312               	bcf	18,6	;volatile
 13601  07C4                     i1l5218:
 13602                           
 13603                           ;MotorDrive.c: 1150:         if ((spkReqVrsCheckBit & 0x01) || (spkReqVrsCheckBit & 0x02
      +                          )) {
 13604  07C4  0021               	movlb	1	; select bank1
 13605  07C5  185D               	btfsc	_spkReqVrsCheckBit^(0+128),0
 13606  07C6  2FC9               	goto	i1l5222
 13607  07C7  1CDD               	btfss	_spkReqVrsCheckBit^(0+128),1
 13608  07C8  2FD3               	goto	i1l5226
 13609  07C9                     i1l5222:
 13610                           
 13611                           ;MotorDrive.c: 1151:             spkReqVrsCheckBit &= (UB) (~(0x01 | 0x02));
 13612  07C9  30FC               	movlw	252
 13613  07CA  00F8               	movwf	??_TMR2_Interrupt_SPK
 13614  07CB  0878               	movf	??_TMR2_Interrupt_SPK,w
 13615  07CC  05DD               	andwf	_spkReqVrsCheckBit^(0+128),f
 13616                           
 13617                           ;MotorDrive.c: 1153:             if (excitatingOffMaskTime == 0) {
 13618  07CD  0862               	movf	_excitatingOffMaskTime^(0+128),w
 13619  07CE  1D03               	btfss	3,2
 13620  07CF  2FD3               	goto	i1l5226
 13621                           
 13622                           ;MotorDrive.c: 1155:                 SpkVrsCheck();
 13623  07D0  3190  20F5  3187   	fcall	_SpkVrsCheck
 13624  07D3                     i1l5226:
 13625                           
 13626                           ;MotorDrive.c: 1163:     if (excitatingTime > 0) {
 13627  07D3  0844               	movf	_excitatingTime^(0+128),w
 13628  07D4  0445               	iorwf	(_excitatingTime+1)^(0+128),w
 13629  07D5  1903               	btfsc	3,2
 13630  07D6  2FE8               	goto	i1l5242
 13631                           
 13632                           ;MotorDrive.c: 1165:         excitatingTime--;
 13633  07D7  3001               	movlw	1
 13634  07D8  02C4               	subwf	_excitatingTime^(0+128),f
 13635  07D9  3000               	movlw	0
 13636  07DA  3BC5               	subwfb	(_excitatingTime+1)^(0+128),f
 13637                           
 13638                           ;MotorDrive.c: 1167:         if (excitatingTime == 0) {
 13639  07DB  0844               	movf	_excitatingTime^(0+128),w
 13640  07DC  0445               	iorwf	(_excitatingTime+1)^(0+128),w
 13641  07DD  1D03               	btfss	3,2
 13642  07DE  2FE8               	goto	i1l5242
 13643                           
 13644                           ;MotorDrive.c: 1169:             spkStopStatus = 0;
 13645  07DF  01DB               	clrf	_spkStopStatus^(0+128)
 13646                           
 13647                           ;MotorDrive.c: 1170:             spkReqVrsCheckWait = 1;
 13648  07E0  01DC               	clrf	_spkReqVrsCheckWait^(0+128)
 13649  07E1  0ADC               	incf	_spkReqVrsCheckWait^(0+128),f
 13650                           
 13651                           ;MotorDrive.c: 1173:             spkOutChangeFunc = SetDataTRISxWork_SPK_OPEN;
 13652  07E2  30C8               	movlw	low _SetDataTRISxWork_SPK_OPEN
 13653  07E3  00C2               	movwf	_spkOutChangeFunc^(0+128)
 13654  07E4  3017               	movlw	high _SetDataTRISxWork_SPK_OPEN
 13655  07E5  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
 13656                           
 13657                           ;MotorDrive.c: 1174:             spkChangePosition = 0;
 13658  07E6  01DF               	clrf	_spkChangePosition^(0+128)
 13659                           
 13660                           ;MotorDrive.c: 1175:             spkPositionCt = 0;
 13661  07E7  01E0               	clrf	_spkPositionCt^(0+128)
 13662  07E8                     i1l5242:
 13663                           
 13664                           ;MotorDrive.c: 1182:     spkPositionCt++;
 13665  07E8  3001               	movlw	1
 13666  07E9  00F8               	movwf	??_TMR2_Interrupt_SPK
 13667  07EA  0878               	movf	??_TMR2_Interrupt_SPK,w
 13668  07EB  07E0               	addwf	_spkPositionCt^(0+128),f
 13669                           
 13670                           ;MotorDrive.c: 1184:     if (spkPositionCt == 4) {
 13671  07EC  3004               	movlw	4
 13672  07ED  0660               	xorwf	_spkPositionCt^(0+128),w
 13673  07EE  1903               	btfsc	3,2
 13674                           
 13675                           ;MotorDrive.c: 1186:         spkPositionCt = 0;
 13676  07EF  01E0               	clrf	_spkPositionCt^(0+128)
 13677                           
 13678                           ;MotorDrive.c: 1189:     if (spkPositionCt == spkChangePosition) {
 13679  07F0  0860               	movf	_spkPositionCt^(0+128),w
 13680  07F1  065F               	xorwf	_spkChangePosition^(0+128),w
 13681  07F2  1D03               	skipz
 13682  07F3  0008               	return
 13683                           
 13684                           ;MotorDrive.c: 1192:         if (spkOutChangeFunc) {
 13685  07F4  0842               	movf	_spkOutChangeFunc^(0+128),w
 13686  07F5  0443               	iorwf	(_spkOutChangeFunc+1)^(0+128),w
 13687  07F6  1903               	btfsc	3,2
 13688  07F7  0008               	return
 13689                           
 13690                           ;MotorDrive.c: 1193:             spkOutChangeFunc();
 13691  07F8  0843               	movf	(_spkOutChangeFunc+1)^(0+128),w
 13692  07F9  008A               	movwf	10
 13693  07FA  0842               	movf	_spkOutChangeFunc^(0+128),w
 13694  07FB  000A               	callw
 13695  07FC  3187               	pagesel	$
 13696  07FD  0008               	return
 13697  07FE                     __end_of_TMR2_Interrupt_SPK:
 13698                           
 13699                           	psect	text81
 13700  10F5                     __ptext81:	
 13701 ;; *************** function _SpkVrsCheck *****************
 13702 ;; Defined at:
 13703 ;;		line 2776 in file "MotorDrive.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;		None
 13706 ;; Auto vars:     Size  Location     Type
 13707 ;;		None
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  1    wreg      void 
 13710 ;; Registers used:
 13711 ;;		wreg, status,2, status,0, pclath, cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 1F/1
 13714 ;;		On exit  : 1F/1
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13717 ;;      Params:         0       0       0       0       0       0       0       0
 13718 ;;      Locals:         0       0       0       0       0       0       0       0
 13719 ;;      Temps:          0       0       0       0       0       0       0       0
 13720 ;;      Totals:         0       0       0       0       0       0       0       0
 13721 ;;Total ram usage:        0 bytes
 13722 ;; Hardware stack levels used:    1
 13723 ;; Hardware stack levels required when called:    3
 13724 ;; This function calls:
 13725 ;;		_ExcitatingOutOff
 13726 ;;		_ExcitatingOutOn
 13727 ;; This function is called by:
 13728 ;;		_TMR2_Interrupt_SPK
 13729 ;; This function uses a non-reentrant model
 13730 ;;
 13731                           
 13732                           
 13733                           ;psect for function _SpkVrsCheck
 13734  10F5                     _SpkVrsCheck:
 13735                           
 13736                           ;MotorDrive.c: 2778:     if ((PIR2bits.C1IF == 1) || (PIR2bits.C2IF == 1)) {
 13737                           
 13738                           ;incstack = 0
 13739                           ; Regs used in _SpkVrsCheck: [wreg+status,2+status,0+pclath+cstack]
 13740  10F5  0020               	movlb	0	; select bank0
 13741  10F6  1A92               	btfsc	18,5	;volatile
 13742  10F7  28FA               	goto	i1l1064
 13743  10F8  1F12               	btfss	18,6	;volatile
 13744  10F9  28FF               	goto	i1l4372
 13745  10FA                     i1l1064:
 13746                           
 13747                           ;MotorDrive.c: 2780:         PIR2bits.C1IF = 0;
 13748  10FA  1292               	bcf	18,5	;volatile
 13749                           
 13750                           ;MotorDrive.c: 2781:         PIR2bits.C2IF = 0;
 13751  10FB  1312               	bcf	18,6	;volatile
 13752                           
 13753                           ;MotorDrive.c: 2783:         ExcitatingOutOn();
 13754  10FC  3196  26F9         	fcall	_ExcitatingOutOn
 13755                           
 13756                           ;MotorDrive.c: 2784:     } else {
 13757  10FE  0008               	return
 13758  10FF                     i1l4372:
 13759                           
 13760                           ;MotorDrive.c: 2785:         ExcitatingOutOff();
 13761  10FF  3190  20E8         	fcall	_ExcitatingOutOff
 13762  1101  0008               	return
 13763  1102                     __end_of_SpkVrsCheck:
 13764                           
 13765                           	psect	text82
 13766  16F9                     __ptext82:	
 13767 ;; *************** function _ExcitatingOutOn *****************
 13768 ;; Defined at:
 13769 ;;		line 2850 in file "MotorDrive.c"
 13770 ;; Parameters:    Size  Location     Type
 13771 ;;		None
 13772 ;; Auto vars:     Size  Location     Type
 13773 ;;		None
 13774 ;; Return value:  Size  Location     Type
 13775 ;;                  1    wreg      void 
 13776 ;; Registers used:
 13777 ;;		wreg, status,2, status,0, pclath, cstack
 13778 ;; Tracked objects:
 13779 ;;		On entry : 1F/0
 13780 ;;		On exit  : 1F/1
 13781 ;;		Unchanged: 0/0
 13782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13783 ;;      Params:         0       0       0       0       0       0       0       0
 13784 ;;      Locals:         0       0       0       0       0       0       0       0
 13785 ;;      Temps:          1       0       0       0       0       0       0       0
 13786 ;;      Totals:         1       0       0       0       0       0       0       0
 13787 ;;Total ram usage:        1 bytes
 13788 ;; Hardware stack levels used:    1
 13789 ;; Hardware stack levels required when called:    1
 13790 ;; This function calls:
 13791 ;;		i1_SetOutPutLATX
 13792 ;; This function is called by:
 13793 ;;		_SpkVrsCheck
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           
 13798                           ;psect for function _ExcitatingOutOn
 13799  16F9                     _ExcitatingOutOn:
 13800                           
 13801                           ;MotorDrive.c: 2853:     dataTRISAWork_M0 = 0x00;
 13802                           
 13803                           ;incstack = 0
 13804                           ; Regs used in _ExcitatingOutOn: [wreg+status,2+status,0+pclath+cstack]
 13805  16F9  01DE               	clrf	_dataTRISAWork_M0
 13806                           
 13807                           ;MotorDrive.c: 2854:     dataTRISBWork_M0 = 0x00;
 13808  16FA  01DD               	clrf	_dataTRISBWork_M0
 13809                           
 13810                           ;MotorDrive.c: 2855:     dataTRISCWork_M0 = 0x20;
 13811  16FB  3020               	movlw	32
 13812  16FC  00F6               	movwf	??_ExcitatingOutOn
 13813  16FD  0876               	movf	??_ExcitatingOutOn,w
 13814  16FE  00DC               	movwf	_dataTRISCWork_M0
 13815                           
 13816                           ;MotorDrive.c: 2857:     dataTRISAWork_M1 = 0x00;
 13817  16FF  01DB               	clrf	_dataTRISAWork_M1
 13818                           
 13819                           ;MotorDrive.c: 2858:     dataTRISBWork_M1 = 0x00;
 13820  1700  01DA               	clrf	_dataTRISBWork_M1
 13821                           
 13822                           ;MotorDrive.c: 2859:     dataTRISCWork_M1 = 0x10;
 13823  1701  3010               	movlw	16
 13824  1702  00F6               	movwf	??_ExcitatingOutOn
 13825  1703  0876               	movf	??_ExcitatingOutOn,w
 13826  1704  00D9               	movwf	_dataTRISCWork_M1
 13827                           
 13828                           ;MotorDrive.c: 2862:     pulseOutLATAWork_M0 = 0x10;
 13829  1705  3010               	movlw	16
 13830  1706  00F6               	movwf	??_ExcitatingOutOn
 13831  1707  0876               	movf	??_ExcitatingOutOn,w
 13832  1708  00E7               	movwf	_pulseOutLATAWork_M0
 13833                           
 13834                           ;MotorDrive.c: 2863:     pulseOutLATBWork_M0 = 0x00;
 13835  1709  01E6               	clrf	_pulseOutLATBWork_M0
 13836                           
 13837                           ;MotorDrive.c: 2864:     pulseOutLATCWork_M0 = 0x00;
 13838  170A  01E5               	clrf	_pulseOutLATCWork_M0
 13839                           
 13840                           ;MotorDrive.c: 2866:     pulseOutLATAWork_M1 = 0x00;
 13841  170B  01E4               	clrf	_pulseOutLATAWork_M1
 13842                           
 13843                           ;MotorDrive.c: 2867:     pulseOutLATBWork_M1 = 0x80;
 13844  170C  3080               	movlw	128
 13845  170D  00F6               	movwf	??_ExcitatingOutOn
 13846  170E  0876               	movf	??_ExcitatingOutOn,w
 13847  170F  00E3               	movwf	_pulseOutLATBWork_M1
 13848                           
 13849                           ;MotorDrive.c: 2868:     pulseOutLATCWork_M1 = 0x00;
 13850  1710  01E2               	clrf	_pulseOutLATCWork_M1
 13851                           
 13852                           ;MotorDrive.c: 2870:     SetOutPutLATX();
 13853  1711  3189  21CC         	fcall	i1_SetOutPutLATX
 13854                           
 13855                           ;MotorDrive.c: 2871:     LATA |= 0x04;
 13856  1713  150C               	bsf	12,2	;volatile
 13857                           
 13858                           ;MotorDrive.c: 2873:     spkStopStatus = 1;
 13859  1714  0021               	movlb	1	; select bank1
 13860  1715  01DB               	clrf	_spkStopStatus^(0+128)
 13861  1716  0ADB               	incf	_spkStopStatus^(0+128),f
 13862                           
 13863                           ;MotorDrive.c: 2874:     excitatingStatusOn = 1;
 13864  1717  01DA               	clrf	_excitatingStatusOn^(0+128)
 13865  1718  0ADA               	incf	_excitatingStatusOn^(0+128),f
 13866                           
 13867                           ;MotorDrive.c: 2875:     excitatingTime = 8197;
 13868  1719  3005               	movlw	5
 13869  171A  00C4               	movwf	_excitatingTime^(0+128)
 13870  171B  3020               	movlw	32
 13871  171C  00C5               	movwf	(_excitatingTime^(0+128)+1)
 13872  171D  0008               	return
 13873  171E                     __end_of_ExcitatingOutOn:
 13874                           
 13875                           	psect	text83
 13876  10E8                     __ptext83:	
 13877 ;; *************** function _ExcitatingOutOff *****************
 13878 ;; Defined at:
 13879 ;;		line 2797 in file "MotorDrive.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;		None
 13882 ;; Auto vars:     Size  Location     Type
 13883 ;;		None
 13884 ;; Return value:  Size  Location     Type
 13885 ;;                  1    wreg      void 
 13886 ;; Registers used:
 13887 ;;		wreg, status,2, status,0, pclath, cstack
 13888 ;; Tracked objects:
 13889 ;;		On entry : 1F/0
 13890 ;;		On exit  : 1F/1
 13891 ;;		Unchanged: 0/0
 13892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13893 ;;      Params:         0       0       0       0       0       0       0       0
 13894 ;;      Locals:         0       0       0       0       0       0       0       0
 13895 ;;      Temps:          1       0       0       0       0       0       0       0
 13896 ;;      Totals:         1       0       0       0       0       0       0       0
 13897 ;;Total ram usage:        1 bytes
 13898 ;; Hardware stack levels used:    1
 13899 ;; Hardware stack levels required when called:    2
 13900 ;; This function calls:
 13901 ;;		i1_SetExcitatingOutOffData
 13902 ;; This function is called by:
 13903 ;;		_SpkVrsCheck
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           
 13908                           ;psect for function _ExcitatingOutOff
 13909  10E8                     _ExcitatingOutOff:
 13910                           
 13911                           ;MotorDrive.c: 2800:     SetExcitatingOutOffData();
 13912                           
 13913                           ;incstack = 0
 13914                           ; Regs used in _ExcitatingOutOff: [wreg+status,2+status,0+pclath+cstack]
 13915  10E8  3194  24F0  3190   	fcall	i1_SetExcitatingOutOffData
 13916                           
 13917                           ;MotorDrive.c: 2803:     if (excitatingStatusOn) {
 13918  10EB  0021               	movlb	1	; select bank1
 13919  10EC  085A               	movf	_excitatingStatusOn^(0+128),w
 13920  10ED  1903               	btfsc	3,2
 13921  10EE  0008               	return
 13922                           
 13923                           ;MotorDrive.c: 2804:         excitatingStatusOn = 0;
 13924  10EF  01DA               	clrf	_excitatingStatusOn^(0+128)
 13925                           
 13926                           ;MotorDrive.c: 2806:         excitatingOffMaskTime = 82;
 13927  10F0  3052               	movlw	82
 13928  10F1  00F7               	movwf	??_ExcitatingOutOff
 13929  10F2  0877               	movf	??_ExcitatingOutOff,w
 13930  10F3  00E2               	movwf	_excitatingOffMaskTime^(0+128)
 13931  10F4  0008               	return
 13932  10F5                     __end_of_ExcitatingOutOff:
 13933                           
 13934                           	psect	text84
 13935  14F0                     __ptext84:	
 13936 ;; *************** function i1_SetExcitatingOutOffData *****************
 13937 ;; Defined at:
 13938 ;;		line 2818 in file "MotorDrive.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;		None
 13941 ;; Auto vars:     Size  Location     Type
 13942 ;;		None
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      void 
 13945 ;; Registers used:
 13946 ;;		wreg, status,2, status,0, pclath, cstack
 13947 ;; Tracked objects:
 13948 ;;		On entry : 1F/0
 13949 ;;		On exit  : 1F/2
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13952 ;;      Params:         0       0       0       0       0       0       0       0
 13953 ;;      Locals:         0       0       0       0       0       0       0       0
 13954 ;;      Temps:          1       0       0       0       0       0       0       0
 13955 ;;      Totals:         1       0       0       0       0       0       0       0
 13956 ;;Total ram usage:        1 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; Hardware stack levels required when called:    1
 13959 ;; This function calls:
 13960 ;;		i1_SetOutPutLATX
 13961 ;; This function is called by:
 13962 ;;		_ExcitatingOutOff
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           
 13967                           ;psect for function i1_SetExcitatingOutOffData
 13968  14F0                     i1_SetExcitatingOutOffData:
 13969                           
 13970                           ;MotorDrive.c: 2822:     dataTRISAWork_M0 = 0x00;
 13971                           
 13972                           ;incstack = 0
 13973                           ; Regs used in i1_SetExcitatingOutOffData: [wreg+status,2+status,0+pclath+cstack]
 13974  14F0  01DE               	clrf	_dataTRISAWork_M0
 13975                           
 13976                           ;MotorDrive.c: 2823:     dataTRISBWork_M0 = 0x00;
 13977  14F1  01DD               	clrf	_dataTRISBWork_M0
 13978                           
 13979                           ;MotorDrive.c: 2824:     dataTRISCWork_M0 = 0x20;
 13980  14F2  3020               	movlw	32
 13981  14F3  00F6               	movwf	??i1_SetExcitatingOutOffData
 13982  14F4  0876               	movf	??i1_SetExcitatingOutOffData,w
 13983  14F5  00DC               	movwf	_dataTRISCWork_M0
 13984                           
 13985                           ;MotorDrive.c: 2826:     dataTRISAWork_M1 = 0x00;
 13986  14F6  01DB               	clrf	_dataTRISAWork_M1
 13987                           
 13988                           ;MotorDrive.c: 2827:     dataTRISBWork_M1 = 0x00;
 13989  14F7  01DA               	clrf	_dataTRISBWork_M1
 13990                           
 13991                           ;MotorDrive.c: 2828:     dataTRISCWork_M1 = 0x10;
 13992  14F8  3010               	movlw	16
 13993  14F9  00F6               	movwf	??i1_SetExcitatingOutOffData
 13994  14FA  0876               	movf	??i1_SetExcitatingOutOffData,w
 13995  14FB  00D9               	movwf	_dataTRISCWork_M1
 13996                           
 13997                           ;MotorDrive.c: 2830:     pulseOutLATAWork_M0 = 0;
 13998  14FC  01E7               	clrf	_pulseOutLATAWork_M0
 13999                           
 14000                           ;MotorDrive.c: 2831:     pulseOutLATBWork_M0 = 0;
 14001  14FD  01E6               	clrf	_pulseOutLATBWork_M0
 14002                           
 14003                           ;MotorDrive.c: 2832:     pulseOutLATCWork_M0 = 0;
 14004  14FE  01E5               	clrf	_pulseOutLATCWork_M0
 14005                           
 14006                           ;MotorDrive.c: 2834:     pulseOutLATAWork_M1 = 0;
 14007  14FF  01E4               	clrf	_pulseOutLATAWork_M1
 14008                           
 14009                           ;MotorDrive.c: 2835:     pulseOutLATBWork_M1 = 0;
 14010  1500  01E3               	clrf	_pulseOutLATBWork_M1
 14011                           
 14012                           ;MotorDrive.c: 2836:     pulseOutLATCWork_M1 = 0;
 14013  1501  01E2               	clrf	_pulseOutLATCWork_M1
 14014                           
 14015                           ;MotorDrive.c: 2838:     SetOutPutLATX();
 14016  1502  3189  21CC         	fcall	i1_SetOutPutLATX
 14017                           
 14018                           ;MotorDrive.c: 2839:     LATA &= ~0x04;
 14019  1504  30FB               	movlw	251
 14020  1505  00F6               	movwf	??i1_SetExcitatingOutOffData
 14021  1506  0876               	movf	??i1_SetExcitatingOutOffData,w
 14022  1507  058C               	andwf	12,f	;volatile
 14023  1508  0008               	return
 14024  1509                     __end_ofi1_SetExcitatingOutOffData:
 14025                           
 14026                           	psect	text85
 14027  09CC                     __ptext85:	
 14028 ;; *************** function i1_SetOutPutLATX *****************
 14029 ;; Defined at:
 14030 ;;		line 2958 in file "MotorDrive.c"
 14031 ;; Parameters:    Size  Location     Type
 14032 ;;		None
 14033 ;; Auto vars:     Size  Location     Type
 14034 ;;		None
 14035 ;; Return value:  Size  Location     Type
 14036 ;;                  1    wreg      void 
 14037 ;; Registers used:
 14038 ;;		wreg, status,2, status,0
 14039 ;; Tracked objects:
 14040 ;;		On entry : 1F/0
 14041 ;;		On exit  : 1F/2
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14044 ;;      Params:         0       0       0       0       0       0       0       0
 14045 ;;      Locals:         0       0       0       0       0       0       0       0
 14046 ;;      Temps:          1       0       0       0       0       0       0       0
 14047 ;;      Totals:         1       0       0       0       0       0       0       0
 14048 ;;Total ram usage:        1 bytes
 14049 ;; Hardware stack levels used:    1
 14050 ;; This function calls:
 14051 ;;		Nothing
 14052 ;; This function is called by:
 14053 ;;		_ExcitatingOutOn
 14054 ;;		i1_SetExcitatingOutOffData
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function i1_SetOutPutLATX
 14060  09CC                     i1_SetOutPutLATX:
 14061                           
 14062                           ;MotorDrive.c: 2962:     dataTRISA = TRISA;
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in i1_SetOutPutLATX: [wreg+status,2+status,0]
 14066  09CC  0021               	movlb	1	; select bank1
 14067  09CD  080C               	movf	12,w	;volatile
 14068  09CE  00F5               	movwf	??i1_SetOutPutLATX
 14069  09CF  0875               	movf	??i1_SetOutPutLATX,w
 14070  09D0  0020               	movlb	0	; select bank0
 14071  09D1  00E1               	movwf	_dataTRISA
 14072                           
 14073                           ;MotorDrive.c: 2963:     dataTRISB = TRISB;
 14074  09D2  0021               	movlb	1	; select bank1
 14075  09D3  080D               	movf	13,w	;volatile
 14076  09D4  00F5               	movwf	??i1_SetOutPutLATX
 14077  09D5  0875               	movf	??i1_SetOutPutLATX,w
 14078  09D6  0020               	movlb	0	; select bank0
 14079  09D7  00E0               	movwf	_dataTRISB
 14080                           
 14081                           ;MotorDrive.c: 2964:     dataTRISC = TRISC;
 14082  09D8  0021               	movlb	1	; select bank1
 14083  09D9  080E               	movf	14,w	;volatile
 14084  09DA  00F5               	movwf	??i1_SetOutPutLATX
 14085  09DB  0875               	movf	??i1_SetOutPutLATX,w
 14086  09DC  0020               	movlb	0	; select bank0
 14087  09DD  00DF               	movwf	_dataTRISC
 14088                           
 14089                           ;MotorDrive.c: 2969:     dataTRISB &= (UB) (~(0x00 | 0x00));
 14090  09DE  30FD               	movlw	253
 14091  09DF  00F5               	movwf	??i1_SetOutPutLATX
 14092  09E0  0875               	movf	??i1_SetOutPutLATX,w
 14093  09E1  05E1               	andwf	_dataTRISA,f
 14094                           
 14095                           ;MotorDrive.c: 2970:     dataTRISC &= (UB) (~(0x22 | 0x1C));
 14096  09E2  30C1               	movlw	193
 14097  09E3  00F5               	movwf	??i1_SetOutPutLATX
 14098  09E4  0875               	movf	??i1_SetOutPutLATX,w
 14099  09E5  05DF               	andwf	_dataTRISC,f
 14100                           
 14101                           ;MotorDrive.c: 2973:     dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 14102  09E6  085E               	movf	_dataTRISAWork_M0,w
 14103  09E7  045B               	iorwf	_dataTRISAWork_M1,w
 14104  09E8  00F5               	movwf	??i1_SetOutPutLATX
 14105  09E9  0875               	movf	??i1_SetOutPutLATX,w
 14106  09EA  04E1               	iorwf	_dataTRISA,f
 14107                           
 14108                           ;MotorDrive.c: 2974:     dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 14109  09EB  085D               	movf	_dataTRISBWork_M0,w
 14110  09EC  045A               	iorwf	_dataTRISBWork_M1,w
 14111  09ED  00F5               	movwf	??i1_SetOutPutLATX
 14112  09EE  0875               	movf	??i1_SetOutPutLATX,w
 14113  09EF  04E0               	iorwf	_dataTRISB,f
 14114                           
 14115                           ;MotorDrive.c: 2975:     dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 14116  09F0  085C               	movf	_dataTRISCWork_M0,w
 14117  09F1  0459               	iorwf	_dataTRISCWork_M1,w
 14118  09F2  00F5               	movwf	??i1_SetOutPutLATX
 14119  09F3  0875               	movf	??i1_SetOutPutLATX,w
 14120  09F4  04DF               	iorwf	_dataTRISC,f
 14121                           
 14122                           ;MotorDrive.c: 2978:     TRISA = dataTRISA;
 14123  09F5  0861               	movf	_dataTRISA,w
 14124  09F6  0021               	movlb	1	; select bank1
 14125  09F7  008C               	movwf	12	;volatile
 14126                           
 14127                           ;MotorDrive.c: 2979:     TRISB = dataTRISB;
 14128  09F8  0020               	movlb	0	; select bank0
 14129  09F9  0860               	movf	_dataTRISB,w
 14130  09FA  0021               	movlb	1	; select bank1
 14131  09FB  008D               	movwf	13	;volatile
 14132                           
 14133                           ;MotorDrive.c: 2980:     TRISC = dataTRISC;
 14134  09FC  0020               	movlb	0	; select bank0
 14135  09FD  085F               	movf	_dataTRISC,w
 14136  09FE  0021               	movlb	1	; select bank1
 14137  09FF  008E               	movwf	14	;volatile
 14138                           
 14139                           ;MotorDrive.c: 2983:     pulseOutLATA = LATA;
 14140  0A00  0022               	movlb	2	; select bank2
 14141  0A01  080C               	movf	12,w	;volatile
 14142  0A02  00F5               	movwf	??i1_SetOutPutLATX
 14143  0A03  0875               	movf	??i1_SetOutPutLATX,w
 14144  0A04  0020               	movlb	0	; select bank0
 14145  0A05  00EA               	movwf	_pulseOutLATA
 14146                           
 14147                           ;MotorDrive.c: 2984:     pulseOutLATB = LATB;
 14148  0A06  0022               	movlb	2	; select bank2
 14149  0A07  080D               	movf	13,w	;volatile
 14150  0A08  00F5               	movwf	??i1_SetOutPutLATX
 14151  0A09  0875               	movf	??i1_SetOutPutLATX,w
 14152  0A0A  0020               	movlb	0	; select bank0
 14153  0A0B  00E9               	movwf	_pulseOutLATB
 14154                           
 14155                           ;MotorDrive.c: 2985:     pulseOutLATC = LATC;
 14156  0A0C  0022               	movlb	2	; select bank2
 14157  0A0D  080E               	movf	14,w	;volatile
 14158  0A0E  00F5               	movwf	??i1_SetOutPutLATX
 14159  0A0F  0875               	movf	??i1_SetOutPutLATX,w
 14160  0A10  0020               	movlb	0	; select bank0
 14161  0A11  00E8               	movwf	_pulseOutLATC
 14162                           
 14163                           ;MotorDrive.c: 2989:     pulseOutLATA &= (UB) (~(0x32 | 0x00));
 14164  0A12  30CD               	movlw	205
 14165  0A13  00F5               	movwf	??i1_SetOutPutLATX
 14166  0A14  0875               	movf	??i1_SetOutPutLATX,w
 14167  0A15  05EA               	andwf	_pulseOutLATA,f
 14168                           
 14169                           ;MotorDrive.c: 2990:     pulseOutLATB &= (UB) (~(0x00 | 0xA0));
 14170  0A16  305F               	movlw	95
 14171  0A17  00F5               	movwf	??i1_SetOutPutLATX
 14172  0A18  0875               	movf	??i1_SetOutPutLATX,w
 14173  0A19  05E9               	andwf	_pulseOutLATB,f
 14174                           
 14175                           ;MotorDrive.c: 2991:     pulseOutLATC &= (UB) (~(0x02 | 0x0C));
 14176  0A1A  30F1               	movlw	241
 14177  0A1B  00F5               	movwf	??i1_SetOutPutLATX
 14178  0A1C  0875               	movf	??i1_SetOutPutLATX,w
 14179  0A1D  05E8               	andwf	_pulseOutLATC,f
 14180                           
 14181                           ;MotorDrive.c: 2994:     pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork_M1
      +                          );
 14182  0A1E  0867               	movf	_pulseOutLATAWork_M0,w
 14183  0A1F  0464               	iorwf	_pulseOutLATAWork_M1,w
 14184  0A20  00F5               	movwf	??i1_SetOutPutLATX
 14185  0A21  0875               	movf	??i1_SetOutPutLATX,w
 14186  0A22  04EA               	iorwf	_pulseOutLATA,f
 14187                           
 14188                           ;MotorDrive.c: 2995:     pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork_M1
      +                          );
 14189  0A23  0866               	movf	_pulseOutLATBWork_M0,w
 14190  0A24  0463               	iorwf	_pulseOutLATBWork_M1,w
 14191  0A25  00F5               	movwf	??i1_SetOutPutLATX
 14192  0A26  0875               	movf	??i1_SetOutPutLATX,w
 14193  0A27  04E9               	iorwf	_pulseOutLATB,f
 14194                           
 14195                           ;MotorDrive.c: 2996:     pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork_M1
      +                          );
 14196  0A28  0865               	movf	_pulseOutLATCWork_M0,w
 14197  0A29  0462               	iorwf	_pulseOutLATCWork_M1,w
 14198  0A2A  00F5               	movwf	??i1_SetOutPutLATX
 14199  0A2B  0875               	movf	??i1_SetOutPutLATX,w
 14200  0A2C  04E8               	iorwf	_pulseOutLATC,f
 14201                           
 14202                           ;MotorDrive.c: 2999:     LATA = pulseOutLATA;
 14203  0A2D  086A               	movf	_pulseOutLATA,w
 14204  0A2E  0022               	movlb	2	; select bank2
 14205  0A2F  008C               	movwf	12	;volatile
 14206                           
 14207                           ;MotorDrive.c: 3000:     LATB = pulseOutLATB;
 14208  0A30  0020               	movlb	0	; select bank0
 14209  0A31  0869               	movf	_pulseOutLATB,w
 14210  0A32  0022               	movlb	2	; select bank2
 14211  0A33  008D               	movwf	13	;volatile
 14212                           
 14213                           ;MotorDrive.c: 3001:     LATC = pulseOutLATC;
 14214  0A34  0020               	movlb	0	; select bank0
 14215  0A35  0868               	movf	_pulseOutLATC,w
 14216  0A36  0022               	movlb	2	; select bank2
 14217  0A37  008E               	movwf	14	;volatile
 14218  0A38  0008               	return
 14219  0A39                     __end_ofi1_SetOutPutLATX:
 14220                           
 14221                           	psect	text86
 14222  17C8                     __ptext86:	
 14223 ;; *************** function _SetDataTRISxWork_SPK_OPEN *****************
 14224 ;; Defined at:
 14225 ;;		line 2887 in file "MotorDrive.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;		None
 14228 ;; Auto vars:     Size  Location     Type
 14229 ;;		None
 14230 ;; Return value:  Size  Location     Type
 14231 ;;                  1    wreg      void 
 14232 ;; Registers used:
 14233 ;;		wreg, status,2, status,0
 14234 ;; Tracked objects:
 14235 ;;		On entry : 1F/1
 14236 ;;		On exit  : 1F/1
 14237 ;;		Unchanged: 0/0
 14238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14239 ;;      Params:         0       0       0       0       0       0       0       0
 14240 ;;      Locals:         0       0       0       0       0       0       0       0
 14241 ;;      Temps:          1       0       0       0       0       0       0       0
 14242 ;;      Totals:         1       0       0       0       0       0       0       0
 14243 ;;Total ram usage:        1 bytes
 14244 ;; Hardware stack levels used:    1
 14245 ;; This function calls:
 14246 ;;		Nothing
 14247 ;; This function is called by:
 14248 ;;		_TMR2_Interrupt_SPK
 14249 ;;		_SetDataTRISxWork_SPK_SHORT
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _SetDataTRISxWork_SPK_OPEN
 14255  17C8                     _SetDataTRISxWork_SPK_OPEN:
 14256                           
 14257                           ;MotorDrive.c: 2889:     if (detectSpkTurnBit == 0) {
 14258                           
 14259                           ;incstack = 0
 14260                           ; Regs used in _SetDataTRISxWork_SPK_OPEN: [wreg+status,2+status,0]
 14261  17C8  0861               	movf	_detectSpkTurnBit^(0+128),w
 14262  17C9  1D03               	btfss	3,2
 14263  17CA  2FDD               	goto	i1l4564
 14264                           
 14265                           ;MotorDrive.c: 2890:         dataTRISAWork_M0 = 0x00;
 14266  17CB  0020               	movlb	0	; select bank0
 14267  17CC  01DE               	clrf	_dataTRISAWork_M0
 14268                           
 14269                           ;MotorDrive.c: 2891:         dataTRISBWork_M0 = 0x00;
 14270  17CD  01DD               	clrf	_dataTRISBWork_M0
 14271                           
 14272                           ;MotorDrive.c: 2892:         dataTRISCWork_M0 = 0x02;
 14273  17CE  3002               	movlw	2
 14274  17CF  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14275  17D0  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14276  17D1  00DC               	movwf	_dataTRISCWork_M0
 14277                           
 14278                           ;MotorDrive.c: 2894:         dataTRISAWork_M1 = 0x00;
 14279  17D2  01DB               	clrf	_dataTRISAWork_M1
 14280                           
 14281                           ;MotorDrive.c: 2895:         dataTRISBWork_M1 = 0x00;
 14282  17D3  01DA               	clrf	_dataTRISBWork_M1
 14283                           
 14284                           ;MotorDrive.c: 2896:         dataTRISCWork_M1 = 0x08;
 14285  17D4  3008               	movlw	8
 14286  17D5  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14287  17D6  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14288  17D7  00D9               	movwf	_dataTRISCWork_M1
 14289                           
 14290                           ;MotorDrive.c: 2898:         CM1CON1 = (0x90 | 0x01);
 14291  17D8  3091               	movlw	145
 14292  17D9  0022               	movlb	2	; select bank2
 14293  17DA  0092               	movwf	18	;volatile
 14294                           
 14295                           ;MotorDrive.c: 2899:         CM2CON1 = (0x90 | 0x03);
 14296  17DB  3093               	movlw	147
 14297  17DC  2FEE               	goto	L20
 14298  17DD                     i1l4564:	
 14299                           ;MotorDrive.c: 2901:     } else {
 14300                           
 14301                           
 14302                           ;MotorDrive.c: 2902:         dataTRISAWork_M0 = 0x02;
 14303  17DD  3002               	movlw	2
 14304  17DE  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14305  17DF  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14306  17E0  0020               	movlb	0	; select bank0
 14307  17E1  00DE               	movwf	_dataTRISAWork_M0
 14308                           
 14309                           ;MotorDrive.c: 2903:         dataTRISBWork_M0 = 0x00;
 14310  17E2  01DD               	clrf	_dataTRISBWork_M0
 14311                           
 14312                           ;MotorDrive.c: 2904:         dataTRISCWork_M0 = 0x00;
 14313  17E3  01DC               	clrf	_dataTRISCWork_M0
 14314                           
 14315                           ;MotorDrive.c: 2906:         dataTRISAWork_M1 = 0x00;
 14316  17E4  01DB               	clrf	_dataTRISAWork_M1
 14317                           
 14318                           ;MotorDrive.c: 2907:         dataTRISBWork_M1 = 0x00;
 14319  17E5  01DA               	clrf	_dataTRISBWork_M1
 14320                           
 14321                           ;MotorDrive.c: 2908:         dataTRISCWork_M1 = 0x04;
 14322  17E6  3004               	movlw	4
 14323  17E7  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14324  17E8  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14325  17E9  00D9               	movwf	_dataTRISCWork_M1
 14326                           
 14327                           ;MotorDrive.c: 2910:         CM1CON1 = (0x90 | 0x00);
 14328  17EA  3090               	movlw	144
 14329  17EB  0022               	movlb	2	; select bank2
 14330  17EC  0092               	movwf	18	;volatile
 14331                           
 14332                           ;MotorDrive.c: 2911:         CM2CON1 = (0x90 | 0x02);
 14333  17ED  3092               	movlw	146
 14334  17EE                     L20:
 14335  17EE  0094               	movwf	20	;volatile
 14336                           
 14337                           ;MotorDrive.c: 2914:     spkOutChangeFunc = SetDataTRISxWork_SPK_SHORT;
 14338                           
 14339                           ;MotorDrive.c: 2912:     }
 14340  17EF  30BF               	movlw	low _SetDataTRISxWork_SPK_SHORT
 14341  17F0  0021               	movlb	1	; select bank1
 14342  17F1  00C2               	movwf	_spkOutChangeFunc^(0+128)
 14343  17F2  3015               	movlw	high _SetDataTRISxWork_SPK_SHORT
 14344  17F3  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
 14345                           
 14346                           ;MotorDrive.c: 2915:     spkChangePosition = 1;
 14347  17F4  01DF               	clrf	_spkChangePosition^(0+128)
 14348  17F5  0ADF               	incf	_spkChangePosition^(0+128),f
 14349                           
 14350                           ;MotorDrive.c: 2916:     detectSpkTurnBit ^= 0x01;
 14351  17F6  3001               	movlw	1
 14352  17F7  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 14353  17F8  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 14354  17F9  06E1               	xorwf	_detectSpkTurnBit^(0+128),f
 14355                           
 14356                           ;MotorDrive.c: 2918:     if (0 == spkStopStatus) {
 14357  17FA  085B               	movf	_spkStopStatus^(0+128),w
 14358  17FB  1D03               	btfss	3,2
 14359  17FC  0008               	return
 14360                           
 14361                           ;MotorDrive.c: 2919:         spkOutTrisRequestFlug = 1;
 14362  17FD  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
 14363  17FE  0ADE               	incf	_spkOutTrisRequestFlug^(0+128),f
 14364  17FF  0008               	return
 14365  1800                     __end_of_SetDataTRISxWork_SPK_OPEN:
 14366                           
 14367                           	psect	text87
 14368  15BF                     __ptext87:	
 14369 ;; *************** function _SetDataTRISxWork_SPK_SHORT *****************
 14370 ;; Defined at:
 14371 ;;		line 2933 in file "MotorDrive.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;		None
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;		None
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      void 
 14378 ;; Registers used:
 14379 ;;		wreg, status,2, status,0
 14380 ;; Tracked objects:
 14381 ;;		On entry : 1F/1
 14382 ;;		On exit  : 1F/1
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14385 ;;      Params:         0       0       0       0       0       0       0       0
 14386 ;;      Locals:         0       0       0       0       0       0       0       0
 14387 ;;      Temps:          1       0       0       0       0       0       0       0
 14388 ;;      Totals:         1       0       0       0       0       0       0       0
 14389 ;;Total ram usage:        1 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; This function calls:
 14392 ;;		Nothing
 14393 ;; This function is called by:
 14394 ;;		_SetMotorStartSPK
 14395 ;;		_SetDataTRISxWork_SPK_OPEN
 14396 ;;		_TMR2_Interrupt_SPK
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           
 14401                           ;psect for function _SetDataTRISxWork_SPK_SHORT
 14402  15BF                     _SetDataTRISxWork_SPK_SHORT:
 14403                           
 14404                           ;MotorDrive.c: 2935:     dataTRISAWork_M0 = (0x00 | 0x00);
 14405                           
 14406                           ;incstack = 0
 14407                           ; Regs used in _SetDataTRISxWork_SPK_SHORT: [wreg+status,2+status,0]
 14408  15BF  0020               	movlb	0	; select bank0
 14409  15C0  01DE               	clrf	_dataTRISAWork_M0
 14410                           
 14411                           ;MotorDrive.c: 2936:     dataTRISBWork_M0 = (0x00 | 0x00);
 14412  15C1  01DD               	clrf	_dataTRISBWork_M0
 14413                           
 14414                           ;MotorDrive.c: 2937:     dataTRISCWork_M0 = (0x00 | 0x00);
 14415  15C2  01DC               	clrf	_dataTRISCWork_M0
 14416                           
 14417                           ;MotorDrive.c: 2939:     dataTRISAWork_M1 = (0x00 | 0x00);
 14418  15C3  01DB               	clrf	_dataTRISAWork_M1
 14419                           
 14420                           ;MotorDrive.c: 2940:     dataTRISBWork_M1 = (0x00 | 0x00);
 14421  15C4  01DA               	clrf	_dataTRISBWork_M1
 14422                           
 14423                           ;MotorDrive.c: 2941:     dataTRISCWork_M1 = (0x00 | 0x00);
 14424  15C5  01D9               	clrf	_dataTRISCWork_M1
 14425                           
 14426                           ;MotorDrive.c: 2943:     spkOutChangeFunc = SetDataTRISxWork_SPK_OPEN;
 14427  15C6  30C8               	movlw	low _SetDataTRISxWork_SPK_OPEN
 14428  15C7  0021               	movlb	1	; select bank1
 14429  15C8  00C2               	movwf	_spkOutChangeFunc^(0+128)
 14430  15C9  3017               	movlw	high _SetDataTRISxWork_SPK_OPEN
 14431  15CA  00C3               	movwf	(_spkOutChangeFunc^(0+128)+1)
 14432                           
 14433                           ;MotorDrive.c: 2944:     spkChangePosition = 0;
 14434  15CB  01DF               	clrf	_spkChangePosition^(0+128)
 14435                           
 14436                           ;MotorDrive.c: 2946:     spkOutTrisRequestFlug = 1;
 14437  15CC  01DE               	clrf	_spkOutTrisRequestFlug^(0+128)
 14438  15CD  0ADE               	incf	_spkOutTrisRequestFlug^(0+128),f
 14439                           
 14440                           ;MotorDrive.c: 2948:     if (0 == spkStopStatus) {
 14441  15CE  085B               	movf	_spkStopStatus^(0+128),w
 14442  15CF  1D03               	btfss	3,2
 14443  15D0  0008               	return
 14444                           
 14445                           ;MotorDrive.c: 2949:         if (0 == spkReqVrsCheckWait) {
 14446  15D1  085C               	movf	_spkReqVrsCheckWait^(0+128),w
 14447  15D2  1D03               	btfss	3,2
 14448  15D3  2DD9               	goto	i1l4596
 14449                           
 14450                           ;MotorDrive.c: 2950:             spkReqVrsCheckBit |= (0x01 | 0x02);
 14451  15D4  3003               	movlw	3
 14452  15D5  00F5               	movwf	??_SetDataTRISxWork_SPK_SHORT
 14453  15D6  0875               	movf	??_SetDataTRISxWork_SPK_SHORT,w
 14454  15D7  04DD               	iorwf	_spkReqVrsCheckBit^(0+128),f
 14455                           
 14456                           ;MotorDrive.c: 2951:         } else {
 14457  15D8  0008               	return
 14458  15D9                     i1l4596:
 14459                           
 14460                           ;MotorDrive.c: 2952:             spkReqVrsCheckWait = 0;
 14461  15D9  01DC               	clrf	_spkReqVrsCheckWait^(0+128)
 14462  15DA  0008               	return
 14463  15DB                     __end_of_SetDataTRISxWork_SPK_SHORT:
 14464                           
 14465                           	psect	text88
 14466  0002                     __ptext88:	
 14467 ;; *************** function i1_TMR2_StopTimer *****************
 14468 ;; Defined at:
 14469 ;;		line 93 in file "mcc_generated_files/tmr2.c"
 14470 ;; Parameters:    Size  Location     Type
 14471 ;;		None
 14472 ;; Auto vars:     Size  Location     Type
 14473 ;;		None
 14474 ;; Return value:  Size  Location     Type
 14475 ;;                  1    wreg      void 
 14476 ;; Registers used:
 14477 ;;		None
 14478 ;; Tracked objects:
 14479 ;;		On entry : 1F/0
 14480 ;;		On exit  : 1F/0
 14481 ;;		Unchanged: 0/0
 14482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14483 ;;      Params:         0       0       0       0       0       0       0       0
 14484 ;;      Locals:         0       0       0       0       0       0       0       0
 14485 ;;      Temps:          0       0       0       0       0       0       0       0
 14486 ;;      Totals:         0       0       0       0       0       0       0       0
 14487 ;;Total ram usage:        0 bytes
 14488 ;; Hardware stack levels used:    1
 14489 ;; This function calls:
 14490 ;;		Nothing
 14491 ;; This function is called by:
 14492 ;;		_TMR2_Interrupt
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function i1_TMR2_StopTimer
 14498  0002                     i1_TMR2_StopTimer:
 14499                           
 14500                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
 14501                           
 14502                           ;incstack = 0
 14503                           ; Regs used in i1_TMR2_StopTimer: []
 14504  0002  111C               	bcf	28,2	;volatile
 14505  0003  0008               	return
 14506  0004                     __end_ofi1_TMR2_StopTimer:
 14507                           
 14508                           	psect	text89
 14509  1554                     __ptext89:	
 14510 ;; *************** function _VrsCheck *****************
 14511 ;; Defined at:
 14512 ;;		line 2717 in file "MotorDrive.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  motor_no        1    wreg     unsigned char 
 14515 ;; Auto vars:     Size  Location     Type
 14516 ;;  motor_no        1    1[COMMON] unsigned char 
 14517 ;; Return value:  Size  Location     Type
 14518 ;;                  1    wreg      void 
 14519 ;; Registers used:
 14520 ;;		wreg, status,2, status,0
 14521 ;; Tracked objects:
 14522 ;;		On entry : 1F/1
 14523 ;;		On exit  : 1F/0
 14524 ;;		Unchanged: 0/0
 14525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14526 ;;      Params:         0       0       0       0       0       0       0       0
 14527 ;;      Locals:         1       0       0       0       0       0       0       0
 14528 ;;      Temps:          1       0       0       0       0       0       0       0
 14529 ;;      Totals:         2       0       0       0       0       0       0       0
 14530 ;;Total ram usage:        2 bytes
 14531 ;; Hardware stack levels used:    1
 14532 ;; This function calls:
 14533 ;;		Nothing
 14534 ;; This function is called by:
 14535 ;;		_TMR2_Interrupt
 14536 ;; This function uses a non-reentrant model
 14537 ;;
 14538                           
 14539                           
 14540                           ;psect for function _VrsCheck
 14541  1554                     _VrsCheck:
 14542                           
 14543                           ;incstack = 0
 14544                           ; Regs used in _VrsCheck: [wreg+status,2+status,0]
 14545                           ;VrsCheck@motor_no stored from wreg
 14546  1554  00F6               	movwf	VrsCheck@motor_no
 14547                           
 14548                           ;MotorDrive.c: 2717: void VrsCheck(UB motor_no);MotorDrive.c: 2718: {;MotorDrive.c: 2719
      +                          :     if (motor_no == 0) {
 14549  1555  0876               	movf	VrsCheck@motor_no,w
 14550  1556  1D03               	btfss	3,2
 14551  1557  2D63               	goto	i1l1049
 14552                           
 14553                           ;MotorDrive.c: 2720:         if (PIR2bits.C1IF) {
 14554  1558  0020               	movlb	0	; select bank0
 14555  1559  1E92               	btfss	18,5	;volatile
 14556  155A  2D60               	goto	i1l4328
 14557                           
 14558                           ;MotorDrive.c: 2721:             vrsCountValue[ 0 ]++;
 14559  155B  3001               	movlw	1
 14560  155C  00F5               	movwf	??_VrsCheck
 14561  155D  0875               	movf	??_VrsCheck,w
 14562  155E  0021               	movlb	1	; select bank1
 14563  155F  07BC               	addwf	_vrsCountValue^(0+128),f
 14564  1560                     i1l4328:
 14565                           
 14566                           ;MotorDrive.c: 2724:         PIR2bits.C1IF = 0;
 14567  1560  0020               	movlb	0	; select bank0
 14568  1561  1292               	bcf	18,5	;volatile
 14569                           
 14570                           ;MotorDrive.c: 2725:     } else {
 14571  1562  0008               	return
 14572  1563                     i1l1049:
 14573                           
 14574                           ;MotorDrive.c: 2726:         if (PIR2bits.C2IF) {
 14575  1563  0020               	movlb	0	; select bank0
 14576  1564  1F12               	btfss	18,6	;volatile
 14577  1565  2D6B               	goto	i1l4332
 14578                           
 14579                           ;MotorDrive.c: 2727:             vrsCountValue [ 1 ]++;
 14580  1566  3001               	movlw	1
 14581  1567  00F5               	movwf	??_VrsCheck
 14582  1568  0875               	movf	??_VrsCheck,w
 14583  1569  0021               	movlb	1	; select bank1
 14584  156A  07BD               	addwf	(_vrsCountValue^(0+128)+1),f
 14585  156B                     i1l4332:
 14586                           
 14587                           ;MotorDrive.c: 2729:         PIR2bits.C2IF = 0;
 14588  156B  0020               	movlb	0	; select bank0
 14589  156C  1312               	bcf	18,6	;volatile
 14590  156D  0008               	return
 14591  156E                     __end_of_VrsCheck:
 14592                           
 14593                           	psect	text90
 14594  14C0                     __ptext90:	
 14595 ;; *************** function _SetDataTRISxWork_M1_SPK_POL1_SHORT *****************
 14596 ;; Defined at:
 14597 ;;		line 3586 in file "MotorDrive.c"
 14598 ;; Parameters:    Size  Location     Type
 14599 ;;		None
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;		None
 14602 ;; Return value:  Size  Location     Type
 14603 ;;                  1    wreg      void 
 14604 ;; Registers used:
 14605 ;;		wreg, status,2, status,0
 14606 ;; Tracked objects:
 14607 ;;		On entry : 1F/1
 14608 ;;		On exit  : 1F/1
 14609 ;;		Unchanged: 0/0
 14610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14611 ;;      Params:         0       0       0       0       0       0       0       0
 14612 ;;      Locals:         0       0       0       0       0       0       0       0
 14613 ;;      Temps:          0       0       0       0       0       0       0       0
 14614 ;;      Totals:         0       0       0       0       0       0       0       0
 14615 ;;Total ram usage:        0 bytes
 14616 ;; Hardware stack levels used:    1
 14617 ;; This function calls:
 14618 ;;		Nothing
 14619 ;; This function is called by:
 14620 ;;		_SetDataTRISxWork_M1_SPK_POL1_OPEN
 14621 ;;		_TMR2_Interrupt
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           
 14626                           ;psect for function _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14627  14C0                     _SetDataTRISxWork_M1_SPK_POL1_SHORT:
 14628                           
 14629                           ;MotorDrive.c: 3588:     dataTRISAWork_M1 = 0x00;
 14630                           
 14631                           ;incstack = 0
 14632                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL1_SHORT: [wreg+status,2+status,0]
 14633  14C0  0020               	movlb	0	; select bank0
 14634  14C1  01DB               	clrf	_dataTRISAWork_M1
 14635                           
 14636                           ;MotorDrive.c: 3589:     dataTRISBWork_M1 = 0x00;
 14637  14C2  01DA               	clrf	_dataTRISBWork_M1
 14638                           
 14639                           ;MotorDrive.c: 3590:     dataTRISCWork_M1 = 0x00;
 14640  14C3  01D9               	clrf	_dataTRISCWork_M1
 14641                           
 14642                           ;MotorDrive.c: 3592:     if (m1PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 14643  14C4  3016               	movlw	22
 14644  14C5  0672               	xorwf	_m1PulseOutStep,w
 14645  14C6  1D03               	btfss	3,2
 14646  14C7  2CCF               	goto	i1l4960
 14647                           
 14648                           ;MotorDrive.c: 3593:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P1;
 14649  14C8  30FD               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14650  14C9  0021               	movlb	1	; select bank1
 14651  14CA  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14652  14CB  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14653  14CC  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14654                           
 14655                           ;MotorDrive.c: 3594:         reqComparatorOffBit |= 0x02;
 14656  14CD  14D3               	bsf	_reqComparatorOffBit^(0+128),1
 14657                           
 14658                           ;MotorDrive.c: 3595:     } else {
 14659  14CE  2CD4               	goto	i1l4962
 14660  14CF                     i1l4960:
 14661                           
 14662                           ;MotorDrive.c: 3596:         m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_OPEN;
 14663  14CF  3084               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14664  14D0  0021               	movlb	1	; select bank1
 14665  14D1  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14666  14D2  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14667  14D3  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14668  14D4                     i1l4962:
 14669                           
 14670                           ;MotorDrive.c: 3599:     OutTrisRequestFlug = 1;
 14671  14D4  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14672  14D5  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14673                           
 14674                           ;MotorDrive.c: 3600:     reqVrsCheckBit |= 0x02;
 14675  14D6  14D2               	bsf	_reqVrsCheckBit^(0+128),1
 14676  14D7  0008               	return
 14677  14D8                     __end_of_SetDataTRISxWork_M1_SPK_POL1_SHORT:
 14678                           
 14679                           	psect	text91
 14680  1284                     __ptext91:	
 14681 ;; *************** function _SetDataTRISxWork_M1_SPK_POL1_OPEN *****************
 14682 ;; Defined at:
 14683 ;;		line 3574 in file "MotorDrive.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;		None
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;		None
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      void 
 14690 ;; Registers used:
 14691 ;;		wreg, status,2
 14692 ;; Tracked objects:
 14693 ;;		On entry : 1F/1
 14694 ;;		On exit  : 1F/1
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14697 ;;      Params:         0       0       0       0       0       0       0       0
 14698 ;;      Locals:         0       0       0       0       0       0       0       0
 14699 ;;      Temps:          1       0       0       0       0       0       0       0
 14700 ;;      Totals:         1       0       0       0       0       0       0       0
 14701 ;;Total ram usage:        1 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; This function calls:
 14704 ;;		Nothing
 14705 ;; This function is called by:
 14706 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 14707 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 14708 ;;		_TMR2_Interrupt
 14709 ;; This function uses a non-reentrant model
 14710 ;;
 14711                           
 14712                           
 14713                           ;psect for function _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14714  1284                     _SetDataTRISxWork_M1_SPK_POL1_OPEN:
 14715                           
 14716                           ;MotorDrive.c: 3576:     dataTRISAWork_M1 = 0x00;
 14717                           
 14718                           ;incstack = 0
 14719                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL1_OPEN: [wreg+status,2]
 14720  1284  0020               	movlb	0	; select bank0
 14721  1285  01DB               	clrf	_dataTRISAWork_M1
 14722                           
 14723                           ;MotorDrive.c: 3577:     dataTRISBWork_M1 = 0x00;
 14724  1286  01DA               	clrf	_dataTRISBWork_M1
 14725                           
 14726                           ;MotorDrive.c: 3578:     dataTRISCWork_M1 = 0x04;
 14727  1287  3004               	movlw	4
 14728  1288  00F5               	movwf	??_SetDataTRISxWork_M1_SPK_POL1_OPEN
 14729  1289  0875               	movf	??_SetDataTRISxWork_M1_SPK_POL1_OPEN,w
 14730  128A  00D9               	movwf	_dataTRISCWork_M1
 14731                           
 14732                           ;MotorDrive.c: 3580:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_SHORT;
 14733  128B  30C0               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14734  128C  0021               	movlb	1	; select bank1
 14735  128D  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14736  128E  3014               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14737  128F  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14738                           
 14739                           ;MotorDrive.c: 3581:     OutTrisRequestFlug = 1;
 14740  1290  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14741  1291  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14742  1292  0008               	return
 14743  1293                     __end_of_SetDataTRISxWork_M1_SPK_POL1_OPEN:
 14744                           
 14745                           	psect	text92
 14746  133C                     __ptext92:	
 14747 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF *****************
 14748 ;; Defined at:
 14749 ;;		line 3555 in file "MotorDrive.c"
 14750 ;; Parameters:    Size  Location     Type
 14751 ;;		None
 14752 ;; Auto vars:     Size  Location     Type
 14753 ;;		None
 14754 ;; Return value:  Size  Location     Type
 14755 ;;                  1    wreg      void 
 14756 ;; Registers used:
 14757 ;;		wreg, status,2
 14758 ;; Tracked objects:
 14759 ;;		On entry : 1F/1
 14760 ;;		On exit  : 1F/1
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14763 ;;      Params:         0       0       0       0       0       0       0       0
 14764 ;;      Locals:         0       0       0       0       0       0       0       0
 14765 ;;      Temps:          0       0       0       0       0       0       0       0
 14766 ;;      Totals:         0       0       0       0       0       0       0       0
 14767 ;;Total ram usage:        0 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; This function calls:
 14770 ;;		Nothing
 14771 ;; This function is called by:
 14772 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 14773 ;;		_TMR2_Interrupt
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 14779  133C                     _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:
 14780                           
 14781                           ;MotorDrive.c: 3557:     pulseOutLATAWork_M1 = 0;
 14782                           
 14783                           ;incstack = 0
 14784                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF: [wreg+status,2]
 14785  133C  0020               	movlb	0	; select bank0
 14786  133D  01E4               	clrf	_pulseOutLATAWork_M1
 14787                           
 14788                           ;MotorDrive.c: 3558:     pulseOutLATBWork_M1 = 0;
 14789  133E  01E3               	clrf	_pulseOutLATBWork_M1
 14790                           
 14791                           ;MotorDrive.c: 3559:     pulseOutLATCWork_M1 = 0;
 14792  133F  01E2               	clrf	_pulseOutLATCWork_M1
 14793                           
 14794                           ;MotorDrive.c: 3562:     dataTRISAWork_M1 = 0x00;
 14795  1340  01DB               	clrf	_dataTRISAWork_M1
 14796                           
 14797                           ;MotorDrive.c: 3563:     dataTRISBWork_M1 = 0x00;
 14798  1341  01DA               	clrf	_dataTRISBWork_M1
 14799                           
 14800                           ;MotorDrive.c: 3564:     dataTRISCWork_M1 = 0x00;
 14801  1342  01D9               	clrf	_dataTRISCWork_M1
 14802                           
 14803                           ;MotorDrive.c: 3566:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_OPEN;
 14804  1343  3084               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14805  1344  0021               	movlb	1	; select bank1
 14806  1345  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14807  1346  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14808  1347  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14809                           
 14810                           ;MotorDrive.c: 3567:     OutRequestFlug = 1;
 14811  1348  01D6               	clrf	_OutRequestFlug^(0+128)
 14812  1349  0AD6               	incf	_OutRequestFlug^(0+128),f
 14813                           
 14814                           ;MotorDrive.c: 3568:     OutTrisRequestFlug = 1;
 14815  134A  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14816  134B  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14817                           
 14818                           ;MotorDrive.c: 3569:     reqComparatorOnBit |= 0x02;
 14819  134C  14D4               	bsf	_reqComparatorOnBit^(0+128),1
 14820  134D  0008               	return
 14821  134E                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:
 14822                           
 14823                           	psect	text93
 14824  14A8                     __ptext93:	
 14825 ;; *************** function _SetDataTRISxWork_M1_SPK_POL0_SHORT *****************
 14826 ;; Defined at:
 14827 ;;		line 3523 in file "MotorDrive.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;		None
 14830 ;; Auto vars:     Size  Location     Type
 14831 ;;		None
 14832 ;; Return value:  Size  Location     Type
 14833 ;;                  1    wreg      void 
 14834 ;; Registers used:
 14835 ;;		wreg, status,2, status,0
 14836 ;; Tracked objects:
 14837 ;;		On entry : 1F/1
 14838 ;;		On exit  : 1F/1
 14839 ;;		Unchanged: 0/0
 14840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14841 ;;      Params:         0       0       0       0       0       0       0       0
 14842 ;;      Locals:         0       0       0       0       0       0       0       0
 14843 ;;      Temps:          0       0       0       0       0       0       0       0
 14844 ;;      Totals:         0       0       0       0       0       0       0       0
 14845 ;;Total ram usage:        0 bytes
 14846 ;; Hardware stack levels used:    1
 14847 ;; This function calls:
 14848 ;;		Nothing
 14849 ;; This function is called by:
 14850 ;;		_SetDataTRISxWork_M1_SPK_POL0_OPEN
 14851 ;;		_TMR2_Interrupt
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           
 14856                           ;psect for function _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14857  14A8                     _SetDataTRISxWork_M1_SPK_POL0_SHORT:
 14858                           
 14859                           ;MotorDrive.c: 3525:     dataTRISAWork_M1 = 0x00;
 14860                           
 14861                           ;incstack = 0
 14862                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL0_SHORT: [wreg+status,2+status,0]
 14863  14A8  0020               	movlb	0	; select bank0
 14864  14A9  01DB               	clrf	_dataTRISAWork_M1
 14865                           
 14866                           ;MotorDrive.c: 3526:     dataTRISBWork_M1 = 0x00;
 14867  14AA  01DA               	clrf	_dataTRISBWork_M1
 14868                           
 14869                           ;MotorDrive.c: 3527:     dataTRISCWork_M1 = 0x00;
 14870  14AB  01D9               	clrf	_dataTRISCWork_M1
 14871                           
 14872                           ;MotorDrive.c: 3529:     if (m1PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 14873  14AC  3016               	movlw	22
 14874  14AD  0672               	xorwf	_m1PulseOutStep,w
 14875  14AE  1D03               	btfss	3,2
 14876  14AF  2CB7               	goto	i1l4920
 14877                           
 14878                           ;MotorDrive.c: 3530:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P1;
 14879  14B0  300C               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14880  14B1  0021               	movlb	1	; select bank1
 14881  14B2  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14882  14B3  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14883  14B4  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14884                           
 14885                           ;MotorDrive.c: 3531:         reqComparatorOffBit |= 0x02;
 14886  14B5  14D3               	bsf	_reqComparatorOffBit^(0+128),1
 14887                           
 14888                           ;MotorDrive.c: 3532:     } else {
 14889  14B6  2CBC               	goto	i1l4922
 14890  14B7                     i1l4920:
 14891                           
 14892                           ;MotorDrive.c: 3533:         m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_OPEN;
 14893  14B7  3075               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14894  14B8  0021               	movlb	1	; select bank1
 14895  14B9  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14896  14BA  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14897  14BB  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14898  14BC                     i1l4922:
 14899                           
 14900                           ;MotorDrive.c: 3536:     OutTrisRequestFlug = 1;
 14901  14BC  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14902  14BD  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14903                           
 14904                           ;MotorDrive.c: 3537:     reqVrsCheckBit |= 0x02;
 14905  14BE  14D2               	bsf	_reqVrsCheckBit^(0+128),1
 14906  14BF  0008               	return
 14907  14C0                     __end_of_SetDataTRISxWork_M1_SPK_POL0_SHORT:
 14908                           
 14909                           	psect	text94
 14910  1275                     __ptext94:	
 14911 ;; *************** function _SetDataTRISxWork_M1_SPK_POL0_OPEN *****************
 14912 ;; Defined at:
 14913 ;;		line 3511 in file "MotorDrive.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;		None
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;		None
 14918 ;; Return value:  Size  Location     Type
 14919 ;;                  1    wreg      void 
 14920 ;; Registers used:
 14921 ;;		wreg, status,2
 14922 ;; Tracked objects:
 14923 ;;		On entry : 1F/1
 14924 ;;		On exit  : 1F/1
 14925 ;;		Unchanged: 0/0
 14926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14927 ;;      Params:         0       0       0       0       0       0       0       0
 14928 ;;      Locals:         0       0       0       0       0       0       0       0
 14929 ;;      Temps:          1       0       0       0       0       0       0       0
 14930 ;;      Totals:         1       0       0       0       0       0       0       0
 14931 ;;Total ram usage:        1 bytes
 14932 ;; Hardware stack levels used:    1
 14933 ;; This function calls:
 14934 ;;		Nothing
 14935 ;; This function is called by:
 14936 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 14937 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 14938 ;;		_TMR2_Interrupt
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           
 14943                           ;psect for function _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14944  1275                     _SetDataTRISxWork_M1_SPK_POL0_OPEN:
 14945                           
 14946                           ;MotorDrive.c: 3513:     dataTRISAWork_M1 = 0x00;
 14947                           
 14948                           ;incstack = 0
 14949                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL0_OPEN: [wreg+status,2]
 14950  1275  0020               	movlb	0	; select bank0
 14951  1276  01DB               	clrf	_dataTRISAWork_M1
 14952                           
 14953                           ;MotorDrive.c: 3514:     dataTRISBWork_M1 = 0x00;
 14954  1277  01DA               	clrf	_dataTRISBWork_M1
 14955                           
 14956                           ;MotorDrive.c: 3515:     dataTRISCWork_M1 = 0x08;
 14957  1278  3008               	movlw	8
 14958  1279  00F5               	movwf	??_SetDataTRISxWork_M1_SPK_POL0_OPEN
 14959  127A  0875               	movf	??_SetDataTRISxWork_M1_SPK_POL0_OPEN,w
 14960  127B  00D9               	movwf	_dataTRISCWork_M1
 14961                           
 14962                           ;MotorDrive.c: 3517:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_SHORT;
 14963  127C  30A8               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14964  127D  0021               	movlb	1	; select bank1
 14965  127E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14966  127F  3014               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14967  1280  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14968                           
 14969                           ;MotorDrive.c: 3518:     OutTrisRequestFlug = 1;
 14970  1281  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14971  1282  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14972  1283  0008               	return
 14973  1284                     __end_of_SetDataTRISxWork_M1_SPK_POL0_OPEN:
 14974                           
 14975                           	psect	text95
 14976  132A                     __ptext95:	
 14977 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF *****************
 14978 ;; Defined at:
 14979 ;;		line 3492 in file "MotorDrive.c"
 14980 ;; Parameters:    Size  Location     Type
 14981 ;;		None
 14982 ;; Auto vars:     Size  Location     Type
 14983 ;;		None
 14984 ;; Return value:  Size  Location     Type
 14985 ;;                  1    wreg      void 
 14986 ;; Registers used:
 14987 ;;		wreg, status,2
 14988 ;; Tracked objects:
 14989 ;;		On entry : 1F/1
 14990 ;;		On exit  : 1F/1
 14991 ;;		Unchanged: 0/0
 14992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14993 ;;      Params:         0       0       0       0       0       0       0       0
 14994 ;;      Locals:         0       0       0       0       0       0       0       0
 14995 ;;      Temps:          0       0       0       0       0       0       0       0
 14996 ;;      Totals:         0       0       0       0       0       0       0       0
 14997 ;;Total ram usage:        0 bytes
 14998 ;; Hardware stack levels used:    1
 14999 ;; This function calls:
 15000 ;;		Nothing
 15001 ;; This function is called by:
 15002 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15003 ;;		_TMR2_Interrupt
 15004 ;; This function uses a non-reentrant model
 15005 ;;
 15006                           
 15007                           
 15008                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15009  132A                     _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:
 15010                           
 15011                           ;MotorDrive.c: 3494:     pulseOutLATAWork_M1 = 0;
 15012                           
 15013                           ;incstack = 0
 15014                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF: [wreg+status,2]
 15015  132A  0020               	movlb	0	; select bank0
 15016  132B  01E4               	clrf	_pulseOutLATAWork_M1
 15017                           
 15018                           ;MotorDrive.c: 3495:     pulseOutLATBWork_M1 = 0;
 15019  132C  01E3               	clrf	_pulseOutLATBWork_M1
 15020                           
 15021                           ;MotorDrive.c: 3496:     pulseOutLATCWork_M1 = 0;
 15022  132D  01E2               	clrf	_pulseOutLATCWork_M1
 15023                           
 15024                           ;MotorDrive.c: 3499:     dataTRISAWork_M1 = 0x00;
 15025  132E  01DB               	clrf	_dataTRISAWork_M1
 15026                           
 15027                           ;MotorDrive.c: 3500:     dataTRISBWork_M1 = 0x00;
 15028  132F  01DA               	clrf	_dataTRISBWork_M1
 15029                           
 15030                           ;MotorDrive.c: 3501:     dataTRISCWork_M1 = 0x00;
 15031  1330  01D9               	clrf	_dataTRISCWork_M1
 15032                           
 15033                           ;MotorDrive.c: 3503:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_OPEN;
 15034  1331  3075               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_OPEN
 15035  1332  0021               	movlb	1	; select bank1
 15036  1333  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15037  1334  3012               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_OPEN
 15038  1335  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15039                           
 15040                           ;MotorDrive.c: 3504:     OutRequestFlug = 1;
 15041  1336  01D6               	clrf	_OutRequestFlug^(0+128)
 15042  1337  0AD6               	incf	_OutRequestFlug^(0+128),f
 15043                           
 15044                           ;MotorDrive.c: 3505:     OutTrisRequestFlug = 1;
 15045  1338  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15046  1339  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15047                           
 15048                           ;MotorDrive.c: 3506:     reqComparatorOnBit |= 0x02;
 15049  133A  14D4               	bsf	_reqComparatorOnBit^(0+128),1
 15050  133B  0008               	return
 15051  133C                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:
 15052                           
 15053                           	psect	text96
 15054  12C3                     __ptext96:	
 15055 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_OFF *****************
 15056 ;; Defined at:
 15057 ;;		line 3336 in file "MotorDrive.c"
 15058 ;; Parameters:    Size  Location     Type
 15059 ;;		None
 15060 ;; Auto vars:     Size  Location     Type
 15061 ;;		None
 15062 ;; Return value:  Size  Location     Type
 15063 ;;                  1    wreg      void 
 15064 ;; Registers used:
 15065 ;;		wreg, status,2, status,0
 15066 ;; Tracked objects:
 15067 ;;		On entry : 1F/1
 15068 ;;		On exit  : 1F/1
 15069 ;;		Unchanged: 0/0
 15070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15071 ;;      Params:         0       0       0       0       0       0       0       0
 15072 ;;      Locals:         0       0       0       0       0       0       0       0
 15073 ;;      Temps:          1       0       0       0       0       0       0       0
 15074 ;;      Totals:         1       0       0       0       0       0       0       0
 15075 ;;Total ram usage:        1 bytes
 15076 ;; Hardware stack levels used:    1
 15077 ;; This function calls:
 15078 ;;		Nothing
 15079 ;; This function is called by:
 15080 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P2
 15081 ;;		_TMR2_Interrupt
 15082 ;; This function uses a non-reentrant model
 15083 ;;
 15084                           
 15085                           
 15086                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_OFF
 15087  12C3                     _SetPulseOutLATxWork_M1_REV_POL1_OFF:
 15088                           
 15089                           ;MotorDrive.c: 3338:     pulseOutLATAWork_M1 = 0;
 15090                           
 15091                           ;incstack = 0
 15092                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_OFF: [wreg+status,2+status,0]
 15093  12C3  0020               	movlb	0	; select bank0
 15094  12C4  01E4               	clrf	_pulseOutLATAWork_M1
 15095                           
 15096                           ;MotorDrive.c: 3339:     pulseOutLATBWork_M1 = 0;
 15097  12C5  01E3               	clrf	_pulseOutLATBWork_M1
 15098                           
 15099                           ;MotorDrive.c: 3340:     pulseOutLATCWork_M1 = 0;
 15100  12C6  01E2               	clrf	_pulseOutLATCWork_M1
 15101                           
 15102                           ;MotorDrive.c: 3342:     polarityBit ^= 0x02;
 15103  12C7  3002               	movlw	2
 15104  12C8  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_OFF
 15105  12C9  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_OFF,w
 15106  12CA  06F1               	xorwf	_polarityBit,f
 15107                           
 15108                           ;MotorDrive.c: 3344:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_P1;
 15109  12CB  302A               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P1
 15110  12CC  0021               	movlb	1	; select bank1
 15111  12CD  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15112  12CE  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P1
 15113  12CF  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15114                           
 15115                           ;MotorDrive.c: 3345:     OutRequestFlug = 1;
 15116  12D0  01D6               	clrf	_OutRequestFlug^(0+128)
 15117  12D1  0AD6               	incf	_OutRequestFlug^(0+128),f
 15118  12D2  0008               	return
 15119  12D3                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_OFF:
 15120                           
 15121                           	psect	text97
 15122  1266                     __ptext97:	
 15123 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_P2 *****************
 15124 ;; Defined at:
 15125 ;;		line 3324 in file "MotorDrive.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;		None
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;		None
 15130 ;; Return value:  Size  Location     Type
 15131 ;;                  1    wreg      void 
 15132 ;; Registers used:
 15133 ;;		wreg, status,2
 15134 ;; Tracked objects:
 15135 ;;		On entry : 1F/1
 15136 ;;		On exit  : 1F/1
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15139 ;;      Params:         0       0       0       0       0       0       0       0
 15140 ;;      Locals:         0       0       0       0       0       0       0       0
 15141 ;;      Temps:          1       0       0       0       0       0       0       0
 15142 ;;      Totals:         1       0       0       0       0       0       0       0
 15143 ;;Total ram usage:        1 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; This function calls:
 15146 ;;		Nothing
 15147 ;; This function is called by:
 15148 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P1
 15149 ;;		_TMR2_Interrupt
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_P2
 15155  1266                     _SetPulseOutLATxWork_M1_REV_POL1_P2:
 15156                           
 15157                           ;MotorDrive.c: 3326:     pulseOutLATAWork_M1 = 0x00;
 15158                           
 15159                           ;incstack = 0
 15160                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_P2: [wreg+status,2]
 15161  1266  0020               	movlb	0	; select bank0
 15162  1267  01E4               	clrf	_pulseOutLATAWork_M1
 15163                           
 15164                           ;MotorDrive.c: 3327:     pulseOutLATBWork_M1 = 0x80;
 15165  1268  3080               	movlw	128
 15166  1269  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_P2
 15167  126A  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_P2,w
 15168  126B  00E3               	movwf	_pulseOutLATBWork_M1
 15169                           
 15170                           ;MotorDrive.c: 3328:     pulseOutLATCWork_M1 = 0x00;
 15171  126C  01E2               	clrf	_pulseOutLATCWork_M1
 15172                           
 15173                           ;MotorDrive.c: 3330:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_OFF;
 15174  126D  30C3               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_OFF
 15175  126E  0021               	movlb	1	; select bank1
 15176  126F  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15177  1270  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_OFF
 15178  1271  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15179                           
 15180                           ;MotorDrive.c: 3331:     OutRequestFlug = 1;
 15181  1272  01D6               	clrf	_OutRequestFlug^(0+128)
 15182  1273  0AD6               	incf	_OutRequestFlug^(0+128),f
 15183  1274  0008               	return
 15184  1275                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_P2:
 15185                           
 15186                           	psect	text98
 15187  12B3                     __ptext98:	
 15188 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_OFF *****************
 15189 ;; Defined at:
 15190 ;;		line 3297 in file "MotorDrive.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;		None
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;		None
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  1    wreg      void 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, status,0
 15199 ;; Tracked objects:
 15200 ;;		On entry : 1F/1
 15201 ;;		On exit  : 1F/1
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15204 ;;      Params:         0       0       0       0       0       0       0       0
 15205 ;;      Locals:         0       0       0       0       0       0       0       0
 15206 ;;      Temps:          1       0       0       0       0       0       0       0
 15207 ;;      Totals:         1       0       0       0       0       0       0       0
 15208 ;;Total ram usage:        1 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; This function calls:
 15211 ;;		Nothing
 15212 ;; This function is called by:
 15213 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P2
 15214 ;;		_TMR2_Interrupt
 15215 ;; This function uses a non-reentrant model
 15216 ;;
 15217                           
 15218                           
 15219                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_OFF
 15220  12B3                     _SetPulseOutLATxWork_M1_REV_POL0_OFF:
 15221                           
 15222                           ;MotorDrive.c: 3299:     pulseOutLATAWork_M1 = 0;
 15223                           
 15224                           ;incstack = 0
 15225                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_OFF: [wreg+status,2+status,0]
 15226  12B3  0020               	movlb	0	; select bank0
 15227  12B4  01E4               	clrf	_pulseOutLATAWork_M1
 15228                           
 15229                           ;MotorDrive.c: 3300:     pulseOutLATBWork_M1 = 0;
 15230  12B5  01E3               	clrf	_pulseOutLATBWork_M1
 15231                           
 15232                           ;MotorDrive.c: 3301:     pulseOutLATCWork_M1 = 0;
 15233  12B6  01E2               	clrf	_pulseOutLATCWork_M1
 15234                           
 15235                           ;MotorDrive.c: 3303:     polarityBit ^= 0x02;
 15236  12B7  3002               	movlw	2
 15237  12B8  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_OFF
 15238  12B9  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_OFF,w
 15239  12BA  06F1               	xorwf	_polarityBit,f
 15240                           
 15241                           ;MotorDrive.c: 3305:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_P1;
 15242  12BB  301B               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P1
 15243  12BC  0021               	movlb	1	; select bank1
 15244  12BD  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15245  12BE  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P1
 15246  12BF  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15247                           
 15248                           ;MotorDrive.c: 3306:     OutRequestFlug = 1;
 15249  12C0  01D6               	clrf	_OutRequestFlug^(0+128)
 15250  12C1  0AD6               	incf	_OutRequestFlug^(0+128),f
 15251  12C2  0008               	return
 15252  12C3                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_OFF:
 15253                           
 15254                           	psect	text99
 15255  1257                     __ptext99:	
 15256 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_P2 *****************
 15257 ;; Defined at:
 15258 ;;		line 3285 in file "MotorDrive.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;		None
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;		None
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  1    wreg      void 
 15265 ;; Registers used:
 15266 ;;		wreg, status,2
 15267 ;; Tracked objects:
 15268 ;;		On entry : 1F/1
 15269 ;;		On exit  : 1F/1
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15272 ;;      Params:         0       0       0       0       0       0       0       0
 15273 ;;      Locals:         0       0       0       0       0       0       0       0
 15274 ;;      Temps:          1       0       0       0       0       0       0       0
 15275 ;;      Totals:         1       0       0       0       0       0       0       0
 15276 ;;Total ram usage:        1 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; This function calls:
 15279 ;;		Nothing
 15280 ;; This function is called by:
 15281 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P1
 15282 ;;		_TMR2_Interrupt
 15283 ;; This function uses a non-reentrant model
 15284 ;;
 15285                           
 15286                           
 15287                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_P2
 15288  1257                     _SetPulseOutLATxWork_M1_REV_POL0_P2:
 15289                           
 15290                           ;MotorDrive.c: 3287:     pulseOutLATAWork_M1 = 0x00;
 15291                           
 15292                           ;incstack = 0
 15293                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_P2: [wreg+status,2]
 15294  1257  0020               	movlb	0	; select bank0
 15295  1258  01E4               	clrf	_pulseOutLATAWork_M1
 15296                           
 15297                           ;MotorDrive.c: 3288:     pulseOutLATBWork_M1 = 0x20;
 15298  1259  3020               	movlw	32
 15299  125A  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_P2
 15300  125B  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_P2,w
 15301  125C  00E3               	movwf	_pulseOutLATBWork_M1
 15302                           
 15303                           ;MotorDrive.c: 3289:     pulseOutLATCWork_M1 = 0x00;
 15304  125D  01E2               	clrf	_pulseOutLATCWork_M1
 15305                           
 15306                           ;MotorDrive.c: 3291:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_OFF;
 15307  125E  30B3               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_OFF
 15308  125F  0021               	movlb	1	; select bank1
 15309  1260  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15310  1261  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_OFF
 15311  1262  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15312                           
 15313                           ;MotorDrive.c: 3292:     OutRequestFlug = 1;
 15314  1263  01D6               	clrf	_OutRequestFlug^(0+128)
 15315  1264  0AD6               	incf	_OutRequestFlug^(0+128),f
 15316  1265  0008               	return
 15317  1266                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_P2:
 15318                           
 15319                           	psect	text100
 15320  1461                     __ptext100:	
 15321 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_OFF *****************
 15322 ;; Defined at:
 15323 ;;		line 3252 in file "MotorDrive.c"
 15324 ;; Parameters:    Size  Location     Type
 15325 ;;		None
 15326 ;; Auto vars:     Size  Location     Type
 15327 ;;		None
 15328 ;; Return value:  Size  Location     Type
 15329 ;;                  1    wreg      void 
 15330 ;; Registers used:
 15331 ;;		wreg, status,2, status,0
 15332 ;; Tracked objects:
 15333 ;;		On entry : 1F/1
 15334 ;;		On exit  : 1F/1
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15337 ;;      Params:         0       0       0       0       0       0       0       0
 15338 ;;      Locals:         0       0       0       0       0       0       0       0
 15339 ;;      Temps:          1       0       0       0       0       0       0       0
 15340 ;;      Totals:         1       0       0       0       0       0       0       0
 15341 ;;Total ram usage:        1 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; This function calls:
 15344 ;;		Nothing
 15345 ;; This function is called by:
 15346 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P2
 15347 ;;		_TMR2_Interrupt
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           
 15352                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15353  1461                     _SetPulseOutLATxWork_M1_FWD_POL1_OFF:
 15354                           
 15355                           ;MotorDrive.c: 3254:     pulseOutLATAWork_M1 = 0;
 15356                           
 15357                           ;incstack = 0
 15358                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_OFF: [wreg+status,2+status,0]
 15359  1461  0020               	movlb	0	; select bank0
 15360  1462  01E4               	clrf	_pulseOutLATAWork_M1
 15361                           
 15362                           ;MotorDrive.c: 3255:     pulseOutLATBWork_M1 = 0;
 15363  1463  01E3               	clrf	_pulseOutLATBWork_M1
 15364                           
 15365                           ;MotorDrive.c: 3256:     pulseOutLATCWork_M1 = 0;
 15366  1464  01E2               	clrf	_pulseOutLATCWork_M1
 15367                           
 15368                           ;MotorDrive.c: 3258:     polarityBit ^= 0x02;
 15369  1465  3002               	movlw	2
 15370  1466  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15371  1467  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_OFF,w
 15372  1468  06F1               	xorwf	_polarityBit,f
 15373                           
 15374                           ;MotorDrive.c: 3260:     if (addShakePulseBit & 0x02) {
 15375  1469  1CF0               	btfss	_addShakePulseBit,1
 15376  146A  2C70               	goto	i1l4754
 15377                           
 15378                           ;MotorDrive.c: 3261:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL0_P0
      +                          ;
 15379  146B  30EE               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15380  146C  0021               	movlb	1	; select bank1
 15381  146D  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15382  146E  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15383  146F  2C74               	goto	L21
 15384  1470                     i1l4754:	
 15385                           ;MotorDrive.c: 3262:     } else {
 15386                           
 15387                           
 15388                           ;MotorDrive.c: 3263:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P1;
 15389  1470  300C               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15390  1471  0021               	movlb	1	; select bank1
 15391  1472  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15392  1473  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15393  1474                     L21:
 15394  1474  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15395                           
 15396                           ;MotorDrive.c: 3266:     OutRequestFlug = 1;
 15397  1475  01D6               	clrf	_OutRequestFlug^(0+128)
 15398  1476  0AD6               	incf	_OutRequestFlug^(0+128),f
 15399  1477  0008               	return
 15400  1478                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF:
 15401                           
 15402                           	psect	text101
 15403  1248                     __ptext101:	
 15404 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_P2 *****************
 15405 ;; Defined at:
 15406 ;;		line 3240 in file "MotorDrive.c"
 15407 ;; Parameters:    Size  Location     Type
 15408 ;;		None
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;		None
 15411 ;; Return value:  Size  Location     Type
 15412 ;;                  1    wreg      void 
 15413 ;; Registers used:
 15414 ;;		wreg, status,2
 15415 ;; Tracked objects:
 15416 ;;		On entry : 1F/1
 15417 ;;		On exit  : 1F/1
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15420 ;;      Params:         0       0       0       0       0       0       0       0
 15421 ;;      Locals:         0       0       0       0       0       0       0       0
 15422 ;;      Temps:          1       0       0       0       0       0       0       0
 15423 ;;      Totals:         1       0       0       0       0       0       0       0
 15424 ;;Total ram usage:        1 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; This function calls:
 15427 ;;		Nothing
 15428 ;; This function is called by:
 15429 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P1
 15430 ;;		_TMR2_Interrupt
 15431 ;; This function uses a non-reentrant model
 15432 ;;
 15433                           
 15434                           
 15435                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15436  1248                     _SetPulseOutLATxWork_M1_FWD_POL1_P2:
 15437                           
 15438                           ;MotorDrive.c: 3242:     pulseOutLATAWork_M1 = 0x00;
 15439                           
 15440                           ;incstack = 0
 15441                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_P2: [wreg+status,2]
 15442  1248  0020               	movlb	0	; select bank0
 15443  1249  01E4               	clrf	_pulseOutLATAWork_M1
 15444                           
 15445                           ;MotorDrive.c: 3243:     pulseOutLATBWork_M1 = 0x00;
 15446  124A  01E3               	clrf	_pulseOutLATBWork_M1
 15447                           
 15448                           ;MotorDrive.c: 3244:     pulseOutLATCWork_M1 = 0x08;
 15449  124B  3008               	movlw	8
 15450  124C  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_P2
 15451  124D  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_P2,w
 15452  124E  00E2               	movwf	_pulseOutLATCWork_M1
 15453                           
 15454                           ;MotorDrive.c: 3246:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_OFF;
 15455  124F  3061               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15456  1250  0021               	movlb	1	; select bank1
 15457  1251  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15458  1252  3014               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15459  1253  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15460                           
 15461                           ;MotorDrive.c: 3247:     OutRequestFlug = 1;
 15462  1254  01D6               	clrf	_OutRequestFlug^(0+128)
 15463  1255  0AD6               	incf	_OutRequestFlug^(0+128),f
 15464  1256  0008               	return
 15465  1257                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P2:
 15466                           
 15467                           	psect	text102
 15468  144A                     __ptext102:	
 15469 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_OFF *****************
 15470 ;; Defined at:
 15471 ;;		line 3207 in file "MotorDrive.c"
 15472 ;; Parameters:    Size  Location     Type
 15473 ;;		None
 15474 ;; Auto vars:     Size  Location     Type
 15475 ;;		None
 15476 ;; Return value:  Size  Location     Type
 15477 ;;                  1    wreg      void 
 15478 ;; Registers used:
 15479 ;;		wreg, status,2, status,0
 15480 ;; Tracked objects:
 15481 ;;		On entry : 1F/1
 15482 ;;		On exit  : 1F/1
 15483 ;;		Unchanged: 0/0
 15484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15485 ;;      Params:         0       0       0       0       0       0       0       0
 15486 ;;      Locals:         0       0       0       0       0       0       0       0
 15487 ;;      Temps:          1       0       0       0       0       0       0       0
 15488 ;;      Totals:         1       0       0       0       0       0       0       0
 15489 ;;Total ram usage:        1 bytes
 15490 ;; Hardware stack levels used:    1
 15491 ;; This function calls:
 15492 ;;		Nothing
 15493 ;; This function is called by:
 15494 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P2
 15495 ;;		_TMR2_Interrupt
 15496 ;; This function uses a non-reentrant model
 15497 ;;
 15498                           
 15499                           
 15500                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15501  144A                     _SetPulseOutLATxWork_M1_FWD_POL0_OFF:
 15502                           
 15503                           ;MotorDrive.c: 3209:     pulseOutLATAWork_M1 = 0;
 15504                           
 15505                           ;incstack = 0
 15506                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_OFF: [wreg+status,2+status,0]
 15507  144A  0020               	movlb	0	; select bank0
 15508  144B  01E4               	clrf	_pulseOutLATAWork_M1
 15509                           
 15510                           ;MotorDrive.c: 3210:     pulseOutLATBWork_M1 = 0;
 15511  144C  01E3               	clrf	_pulseOutLATBWork_M1
 15512                           
 15513                           ;MotorDrive.c: 3211:     pulseOutLATCWork_M1 = 0;
 15514  144D  01E2               	clrf	_pulseOutLATCWork_M1
 15515                           
 15516                           ;MotorDrive.c: 3213:     polarityBit ^= 0x02;
 15517  144E  3002               	movlw	2
 15518  144F  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15519  1450  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_OFF,w
 15520  1451  06F1               	xorwf	_polarityBit,f
 15521                           
 15522                           ;MotorDrive.c: 3215:     if (addShakePulseBit & 0x02) {
 15523  1452  1CF0               	btfss	_addShakePulseBit,1
 15524  1453  2C59               	goto	i1l4726
 15525                           
 15526                           ;MotorDrive.c: 3216:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL1_P0
      +                          ;
 15527  1454  30DF               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15528  1455  0021               	movlb	1	; select bank1
 15529  1456  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15530  1457  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15531  1458  2C5D               	goto	L22
 15532  1459                     i1l4726:	
 15533                           ;MotorDrive.c: 3217:     } else {
 15534                           
 15535                           
 15536                           ;MotorDrive.c: 3218:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P1;
 15537  1459  30FD               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15538  145A  0021               	movlb	1	; select bank1
 15539  145B  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15540  145C  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15541  145D                     L22:
 15542  145D  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15543                           
 15544                           ;MotorDrive.c: 3221:     OutRequestFlug = 1;
 15545  145E  01D6               	clrf	_OutRequestFlug^(0+128)
 15546  145F  0AD6               	incf	_OutRequestFlug^(0+128),f
 15547  1460  0008               	return
 15548  1461                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF:
 15549                           
 15550                           	psect	text103
 15551  1239                     __ptext103:	
 15552 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_P2 *****************
 15553 ;; Defined at:
 15554 ;;		line 3195 in file "MotorDrive.c"
 15555 ;; Parameters:    Size  Location     Type
 15556 ;;		None
 15557 ;; Auto vars:     Size  Location     Type
 15558 ;;		None
 15559 ;; Return value:  Size  Location     Type
 15560 ;;                  1    wreg      void 
 15561 ;; Registers used:
 15562 ;;		wreg, status,2
 15563 ;; Tracked objects:
 15564 ;;		On entry : 1F/1
 15565 ;;		On exit  : 1F/1
 15566 ;;		Unchanged: 0/0
 15567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15568 ;;      Params:         0       0       0       0       0       0       0       0
 15569 ;;      Locals:         0       0       0       0       0       0       0       0
 15570 ;;      Temps:          1       0       0       0       0       0       0       0
 15571 ;;      Totals:         1       0       0       0       0       0       0       0
 15572 ;;Total ram usage:        1 bytes
 15573 ;; Hardware stack levels used:    1
 15574 ;; This function calls:
 15575 ;;		Nothing
 15576 ;; This function is called by:
 15577 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P1
 15578 ;;		_TMR2_Interrupt
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           
 15583                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15584  1239                     _SetPulseOutLATxWork_M1_FWD_POL0_P2:
 15585                           
 15586                           ;MotorDrive.c: 3197:     pulseOutLATAWork_M1 = 0x00;
 15587                           
 15588                           ;incstack = 0
 15589                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_P2: [wreg+status,2]
 15590  1239  0020               	movlb	0	; select bank0
 15591  123A  01E4               	clrf	_pulseOutLATAWork_M1
 15592                           
 15593                           ;MotorDrive.c: 3198:     pulseOutLATBWork_M1 = 0x00;
 15594  123B  01E3               	clrf	_pulseOutLATBWork_M1
 15595                           
 15596                           ;MotorDrive.c: 3199:     pulseOutLATCWork_M1 = 0x04;
 15597  123C  3004               	movlw	4
 15598  123D  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_P2
 15599  123E  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_P2,w
 15600  123F  00E2               	movwf	_pulseOutLATCWork_M1
 15601                           
 15602                           ;MotorDrive.c: 3201:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_OFF;
 15603  1240  304A               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15604  1241  0021               	movlb	1	; select bank1
 15605  1242  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15606  1243  3014               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15607  1244  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15608                           
 15609                           ;MotorDrive.c: 3202:     OutRequestFlug = 1;
 15610  1245  01D6               	clrf	_OutRequestFlug^(0+128)
 15611  1246  0AD6               	incf	_OutRequestFlug^(0+128),f
 15612  1247  0008               	return
 15613  1248                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P2:
 15614                           
 15615                           	psect	text104
 15616  122A                     __ptext104:	
 15617 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_P1 *****************
 15618 ;; Defined at:
 15619 ;;		line 3273 in file "MotorDrive.c"
 15620 ;; Parameters:    Size  Location     Type
 15621 ;;		None
 15622 ;; Auto vars:     Size  Location     Type
 15623 ;;		None
 15624 ;; Return value:  Size  Location     Type
 15625 ;;                  1    wreg      void 
 15626 ;; Registers used:
 15627 ;;		wreg, status,2
 15628 ;; Tracked objects:
 15629 ;;		On entry : 1F/1
 15630 ;;		On exit  : 1F/1
 15631 ;;		Unchanged: 0/0
 15632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15633 ;;      Params:         0       0       0       0       0       0       0       0
 15634 ;;      Locals:         0       0       0       0       0       0       0       0
 15635 ;;      Temps:          1       0       0       0       0       0       0       0
 15636 ;;      Totals:         1       0       0       0       0       0       0       0
 15637 ;;Total ram usage:        1 bytes
 15638 ;; Hardware stack levels used:    1
 15639 ;; This function calls:
 15640 ;;		Nothing
 15641 ;; This function is called by:
 15642 ;;		_StartPulseOutM1
 15643 ;;		_SetPulseOutLATxWork_M1_REV_POL1_OFF
 15644 ;;		_TMR2_Interrupt
 15645 ;; This function uses a non-reentrant model
 15646 ;;
 15647                           
 15648                           
 15649                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_P1
 15650  122A                     _SetPulseOutLATxWork_M1_REV_POL0_P1:
 15651                           
 15652                           ;MotorDrive.c: 3275:     pulseOutLATAWork_M1 = 0x00;
 15653                           
 15654                           ;incstack = 0
 15655                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_P1: [wreg+status,2]
 15656  122A  0020               	movlb	0	; select bank0
 15657  122B  01E4               	clrf	_pulseOutLATAWork_M1
 15658                           
 15659                           ;MotorDrive.c: 3276:     pulseOutLATBWork_M1 = 0x00;
 15660  122C  01E3               	clrf	_pulseOutLATBWork_M1
 15661                           
 15662                           ;MotorDrive.c: 3277:     pulseOutLATCWork_M1 = 0x08;
 15663  122D  3008               	movlw	8
 15664  122E  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_P1
 15665  122F  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_P1,w
 15666  1230  00E2               	movwf	_pulseOutLATCWork_M1
 15667                           
 15668                           ;MotorDrive.c: 3279:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_P2;
 15669  1231  3057               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P2
 15670  1232  0021               	movlb	1	; select bank1
 15671  1233  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15672  1234  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P2
 15673  1235  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15674                           
 15675                           ;MotorDrive.c: 3280:     OutRequestFlug = 1;
 15676  1236  01D6               	clrf	_OutRequestFlug^(0+128)
 15677  1237  0AD6               	incf	_OutRequestFlug^(0+128),f
 15678  1238  0008               	return
 15679  1239                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_P1:
 15680                           
 15681                           	psect	text105
 15682  121B                     __ptext105:	
 15683 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_P1 *****************
 15684 ;; Defined at:
 15685 ;;		line 3312 in file "MotorDrive.c"
 15686 ;; Parameters:    Size  Location     Type
 15687 ;;		None
 15688 ;; Auto vars:     Size  Location     Type
 15689 ;;		None
 15690 ;; Return value:  Size  Location     Type
 15691 ;;                  1    wreg      void 
 15692 ;; Registers used:
 15693 ;;		wreg, status,2
 15694 ;; Tracked objects:
 15695 ;;		On entry : 1F/1
 15696 ;;		On exit  : 1F/1
 15697 ;;		Unchanged: 0/0
 15698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15699 ;;      Params:         0       0       0       0       0       0       0       0
 15700 ;;      Locals:         0       0       0       0       0       0       0       0
 15701 ;;      Temps:          1       0       0       0       0       0       0       0
 15702 ;;      Totals:         1       0       0       0       0       0       0       0
 15703 ;;Total ram usage:        1 bytes
 15704 ;; Hardware stack levels used:    1
 15705 ;; This function calls:
 15706 ;;		Nothing
 15707 ;; This function is called by:
 15708 ;;		_StartPulseOutM1
 15709 ;;		_SetPulseOutLATxWork_M1_REV_POL0_OFF
 15710 ;;		_TMR2_Interrupt
 15711 ;; This function uses a non-reentrant model
 15712 ;;
 15713                           
 15714                           
 15715                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_P1
 15716  121B                     _SetPulseOutLATxWork_M1_REV_POL1_P1:
 15717                           
 15718                           ;MotorDrive.c: 3314:     pulseOutLATAWork_M1 = 0x00;
 15719                           
 15720                           ;incstack = 0
 15721                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_P1: [wreg+status,2]
 15722  121B  0020               	movlb	0	; select bank0
 15723  121C  01E4               	clrf	_pulseOutLATAWork_M1
 15724                           
 15725                           ;MotorDrive.c: 3315:     pulseOutLATBWork_M1 = 0x00;
 15726  121D  01E3               	clrf	_pulseOutLATBWork_M1
 15727                           
 15728                           ;MotorDrive.c: 3316:     pulseOutLATCWork_M1 = 0x04;
 15729  121E  3004               	movlw	4
 15730  121F  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_P1
 15731  1220  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_P1,w
 15732  1221  00E2               	movwf	_pulseOutLATCWork_M1
 15733                           
 15734                           ;MotorDrive.c: 3318:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_P2;
 15735  1222  3066               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P2
 15736  1223  0021               	movlb	1	; select bank1
 15737  1224  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15738  1225  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P2
 15739  1226  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15740                           
 15741                           ;MotorDrive.c: 3319:     OutRequestFlug = 1;
 15742  1227  01D6               	clrf	_OutRequestFlug^(0+128)
 15743  1228  0AD6               	incf	_OutRequestFlug^(0+128),f
 15744  1229  0008               	return
 15745  122A                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_P1:
 15746                           
 15747                           	psect	text106
 15748  120C                     __ptext106:	
 15749 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_P1 *****************
 15750 ;; Defined at:
 15751 ;;		line 3183 in file "MotorDrive.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;		None
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;		None
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  1    wreg      void 
 15758 ;; Registers used:
 15759 ;;		wreg, status,2
 15760 ;; Tracked objects:
 15761 ;;		On entry : 1F/1
 15762 ;;		On exit  : 1F/1
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15765 ;;      Params:         0       0       0       0       0       0       0       0
 15766 ;;      Locals:         0       0       0       0       0       0       0       0
 15767 ;;      Temps:          1       0       0       0       0       0       0       0
 15768 ;;      Totals:         1       0       0       0       0       0       0       0
 15769 ;;Total ram usage:        1 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; This function calls:
 15772 ;;		Nothing
 15773 ;; This function is called by:
 15774 ;;		_StartPulseOutM1
 15775 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15776 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 15777 ;;		_TMR2_Interrupt
 15778 ;; This function uses a non-reentrant model
 15779 ;;
 15780                           
 15781                           
 15782                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15783  120C                     _SetPulseOutLATxWork_M1_FWD_POL0_P1:
 15784                           
 15785                           ;MotorDrive.c: 3185:     pulseOutLATAWork_M1 = 0x00;
 15786                           
 15787                           ;incstack = 0
 15788                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_P1: [wreg+status,2]
 15789  120C  0020               	movlb	0	; select bank0
 15790  120D  01E4               	clrf	_pulseOutLATAWork_M1
 15791                           
 15792                           ;MotorDrive.c: 3186:     pulseOutLATBWork_M1 = 0x80;
 15793  120E  3080               	movlw	128
 15794  120F  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_P1
 15795  1210  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_P1,w
 15796  1211  00E3               	movwf	_pulseOutLATBWork_M1
 15797                           
 15798                           ;MotorDrive.c: 3187:     pulseOutLATCWork_M1 = 0x00;
 15799  1212  01E2               	clrf	_pulseOutLATCWork_M1
 15800                           
 15801                           ;MotorDrive.c: 3189:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P2;
 15802  1213  3039               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15803  1214  0021               	movlb	1	; select bank1
 15804  1215  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15805  1216  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15806  1217  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15807                           
 15808                           ;MotorDrive.c: 3190:     OutRequestFlug = 1;
 15809  1218  01D6               	clrf	_OutRequestFlug^(0+128)
 15810  1219  0AD6               	incf	_OutRequestFlug^(0+128),f
 15811  121A  0008               	return
 15812  121B                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P1:
 15813                           
 15814                           	psect	text107
 15815  11FD                     __ptext107:	
 15816 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_P1 *****************
 15817 ;; Defined at:
 15818 ;;		line 3228 in file "MotorDrive.c"
 15819 ;; Parameters:    Size  Location     Type
 15820 ;;		None
 15821 ;; Auto vars:     Size  Location     Type
 15822 ;;		None
 15823 ;; Return value:  Size  Location     Type
 15824 ;;                  1    wreg      void 
 15825 ;; Registers used:
 15826 ;;		wreg, status,2
 15827 ;; Tracked objects:
 15828 ;;		On entry : 1F/1
 15829 ;;		On exit  : 1F/1
 15830 ;;		Unchanged: 0/0
 15831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15832 ;;      Params:         0       0       0       0       0       0       0       0
 15833 ;;      Locals:         0       0       0       0       0       0       0       0
 15834 ;;      Temps:          1       0       0       0       0       0       0       0
 15835 ;;      Totals:         1       0       0       0       0       0       0       0
 15836 ;;Total ram usage:        1 bytes
 15837 ;; Hardware stack levels used:    1
 15838 ;; This function calls:
 15839 ;;		Nothing
 15840 ;; This function is called by:
 15841 ;;		_StartPulseOutM1
 15842 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15843 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 15844 ;;		_TMR2_Interrupt
 15845 ;; This function uses a non-reentrant model
 15846 ;;
 15847                           
 15848                           
 15849                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15850  11FD                     _SetPulseOutLATxWork_M1_FWD_POL1_P1:
 15851                           
 15852                           ;MotorDrive.c: 3230:     pulseOutLATAWork_M1 = 0x00;
 15853                           
 15854                           ;incstack = 0
 15855                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_P1: [wreg+status,2]
 15856  11FD  0020               	movlb	0	; select bank0
 15857  11FE  01E4               	clrf	_pulseOutLATAWork_M1
 15858                           
 15859                           ;MotorDrive.c: 3231:     pulseOutLATBWork_M1 = 0x20;
 15860  11FF  3020               	movlw	32
 15861  1200  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_P1
 15862  1201  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_P1,w
 15863  1202  00E3               	movwf	_pulseOutLATBWork_M1
 15864                           
 15865                           ;MotorDrive.c: 3232:     pulseOutLATCWork_M1 = 0x00;
 15866  1203  01E2               	clrf	_pulseOutLATCWork_M1
 15867                           
 15868                           ;MotorDrive.c: 3234:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P2;
 15869  1204  3048               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15870  1205  0021               	movlb	1	; select bank1
 15871  1206  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15872  1207  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15873  1208  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15874                           
 15875                           ;MotorDrive.c: 3235:     OutRequestFlug = 1;
 15876  1209  01D6               	clrf	_OutRequestFlug^(0+128)
 15877  120A  0AD6               	incf	_OutRequestFlug^(0+128),f
 15878  120B  0008               	return
 15879  120C                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P1:
 15880                           
 15881                           	psect	text108
 15882  11EE                     __ptext108:	
 15883 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 *****************
 15884 ;; Defined at:
 15885 ;;		line 3480 in file "MotorDrive.c"
 15886 ;; Parameters:    Size  Location     Type
 15887 ;;		None
 15888 ;; Auto vars:     Size  Location     Type
 15889 ;;		None
 15890 ;; Return value:  Size  Location     Type
 15891 ;;                  1    wreg      void 
 15892 ;; Registers used:
 15893 ;;		wreg, status,2
 15894 ;; Tracked objects:
 15895 ;;		On entry : 1F/1
 15896 ;;		On exit  : 1F/1
 15897 ;;		Unchanged: 0/0
 15898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15899 ;;      Params:         0       0       0       0       0       0       0       0
 15900 ;;      Locals:         0       0       0       0       0       0       0       0
 15901 ;;      Temps:          1       0       0       0       0       0       0       0
 15902 ;;      Totals:         1       0       0       0       0       0       0       0
 15903 ;;Total ram usage:        1 bytes
 15904 ;; Hardware stack levels used:    1
 15905 ;; This function calls:
 15906 ;;		Nothing
 15907 ;; This function is called by:
 15908 ;;		_StartPulseOutM1
 15909 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15910 ;;		_TMR2_Interrupt
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           
 15915                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15916  11EE                     _SetPulseOutLATxWork_M1_SHAKE_POL0_P0:
 15917                           
 15918                           ;MotorDrive.c: 3482:     pulseOutLATAWork_M1 = 0x00;
 15919                           
 15920                           ;incstack = 0
 15921                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL0_P0: [wreg+status,2]
 15922  11EE  0020               	movlb	0	; select bank0
 15923  11EF  01E4               	clrf	_pulseOutLATAWork_M1
 15924                           
 15925                           ;MotorDrive.c: 3483:     pulseOutLATBWork_M1 = 0x80;
 15926  11F0  3080               	movlw	128
 15927  11F1  00F5               	movwf	??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15928  11F2  0875               	movf	??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0,w
 15929  11F3  00E3               	movwf	_pulseOutLATBWork_M1
 15930                           
 15931                           ;MotorDrive.c: 3484:     pulseOutLATCWork_M1 = 0x00;
 15932  11F4  01E2               	clrf	_pulseOutLATCWork_M1
 15933                           
 15934                           ;MotorDrive.c: 3486:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL0_OFF;
 15935  11F5  302A               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15936  11F6  0021               	movlb	1	; select bank1
 15937  11F7  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15938  11F8  3013               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15939  11F9  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15940                           
 15941                           ;MotorDrive.c: 3487:     OutRequestFlug = 1;
 15942  11FA  01D6               	clrf	_OutRequestFlug^(0+128)
 15943  11FB  0AD6               	incf	_OutRequestFlug^(0+128),f
 15944  11FC  0008               	return
 15945  11FD                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:
 15946                           
 15947                           	psect	text109
 15948  11DF                     __ptext109:	
 15949 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 *****************
 15950 ;; Defined at:
 15951 ;;		line 3543 in file "MotorDrive.c"
 15952 ;; Parameters:    Size  Location     Type
 15953 ;;		None
 15954 ;; Auto vars:     Size  Location     Type
 15955 ;;		None
 15956 ;; Return value:  Size  Location     Type
 15957 ;;                  1    wreg      void 
 15958 ;; Registers used:
 15959 ;;		wreg, status,2
 15960 ;; Tracked objects:
 15961 ;;		On entry : 1F/1
 15962 ;;		On exit  : 1F/1
 15963 ;;		Unchanged: 0/0
 15964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15965 ;;      Params:         0       0       0       0       0       0       0       0
 15966 ;;      Locals:         0       0       0       0       0       0       0       0
 15967 ;;      Temps:          1       0       0       0       0       0       0       0
 15968 ;;      Totals:         1       0       0       0       0       0       0       0
 15969 ;;Total ram usage:        1 bytes
 15970 ;; Hardware stack levels used:    1
 15971 ;; This function calls:
 15972 ;;		Nothing
 15973 ;; This function is called by:
 15974 ;;		_StartPulseOutM1
 15975 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15976 ;;		_TMR2_Interrupt
 15977 ;; This function uses a non-reentrant model
 15978 ;;
 15979                           
 15980                           
 15981                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15982  11DF                     _SetPulseOutLATxWork_M1_SHAKE_POL1_P0:
 15983                           
 15984                           ;MotorDrive.c: 3545:     pulseOutLATAWork_M1 = 0x00;
 15985                           
 15986                           ;incstack = 0
 15987                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL1_P0: [wreg+status,2]
 15988  11DF  0020               	movlb	0	; select bank0
 15989  11E0  01E4               	clrf	_pulseOutLATAWork_M1
 15990                           
 15991                           ;MotorDrive.c: 3546:     pulseOutLATBWork_M1 = 0x20;
 15992  11E1  3020               	movlw	32
 15993  11E2  00F5               	movwf	??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15994  11E3  0875               	movf	??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0,w
 15995  11E4  00E3               	movwf	_pulseOutLATBWork_M1
 15996                           
 15997                           ;MotorDrive.c: 3547:     pulseOutLATCWork_M1 = 0x00;
 15998  11E5  01E2               	clrf	_pulseOutLATCWork_M1
 15999                           
 16000                           ;MotorDrive.c: 3549:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL1_OFF;
 16001  11E6  303C               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 16002  11E7  0021               	movlb	1	; select bank1
 16003  11E8  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 16004  11E9  3013               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 16005  11EA  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 16006                           
 16007                           ;MotorDrive.c: 3550:     OutRequestFlug = 1;
 16008  11EB  01D6               	clrf	_OutRequestFlug^(0+128)
 16009  11EC  0AD6               	incf	_OutRequestFlug^(0+128),f
 16010  11ED  0008               	return
 16011  11EE                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:
 16012                           
 16013                           	psect	text110
 16014  1490                     __ptext110:	
 16015 ;; *************** function _SetDataTRISxWork_M0_SPK_POL1_SHORT *****************
 16016 ;; Defined at:
 16017 ;;		line 3459 in file "MotorDrive.c"
 16018 ;; Parameters:    Size  Location     Type
 16019 ;;		None
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;		None
 16022 ;; Return value:  Size  Location     Type
 16023 ;;                  1    wreg      void 
 16024 ;; Registers used:
 16025 ;;		wreg, status,2, status,0
 16026 ;; Tracked objects:
 16027 ;;		On entry : 1F/1
 16028 ;;		On exit  : 1F/1
 16029 ;;		Unchanged: 0/0
 16030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16031 ;;      Params:         0       0       0       0       0       0       0       0
 16032 ;;      Locals:         0       0       0       0       0       0       0       0
 16033 ;;      Temps:          0       0       0       0       0       0       0       0
 16034 ;;      Totals:         0       0       0       0       0       0       0       0
 16035 ;;Total ram usage:        0 bytes
 16036 ;; Hardware stack levels used:    1
 16037 ;; This function calls:
 16038 ;;		Nothing
 16039 ;; This function is called by:
 16040 ;;		_SetDataTRISxWork_M0_SPK_POL1_OPEN
 16041 ;;		_TMR2_Interrupt
 16042 ;; This function uses a non-reentrant model
 16043 ;;
 16044                           
 16045                           
 16046                           ;psect for function _SetDataTRISxWork_M0_SPK_POL1_SHORT
 16047  1490                     _SetDataTRISxWork_M0_SPK_POL1_SHORT:
 16048                           
 16049                           ;MotorDrive.c: 3461:     dataTRISAWork_M0 = 0x00;
 16050                           
 16051                           ;incstack = 0
 16052                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL1_SHORT: [wreg+status,2+status,0]
 16053  1490  0020               	movlb	0	; select bank0
 16054  1491  01DE               	clrf	_dataTRISAWork_M0
 16055                           
 16056                           ;MotorDrive.c: 3462:     dataTRISBWork_M0 = 0x00;
 16057  1492  01DD               	clrf	_dataTRISBWork_M0
 16058                           
 16059                           ;MotorDrive.c: 3463:     dataTRISCWork_M0 = 0x00;
 16060  1493  01DC               	clrf	_dataTRISCWork_M0
 16061                           
 16062                           ;MotorDrive.c: 3465:     if (m0PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 16063  1494  3016               	movlw	22
 16064  1495  0673               	xorwf	_m0PulseOutStep,w
 16065  1496  1D03               	btfss	3,2
 16066  1497  2C9F               	goto	i1l4880
 16067                           
 16068                           ;MotorDrive.c: 3466:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P1;
 16069  1498  3049               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16070  1499  0021               	movlb	1	; select bank1
 16071  149A  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16072  149B  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16073  149C  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16074                           
 16075                           ;MotorDrive.c: 3467:         reqComparatorOffBit |= 0x01;
 16076  149D  1453               	bsf	_reqComparatorOffBit^(0+128),0
 16077                           
 16078                           ;MotorDrive.c: 3468:     } else {
 16079  149E  2CA4               	goto	i1l4882
 16080  149F                     i1l4880:
 16081                           
 16082                           ;MotorDrive.c: 3469:         m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_OPEN;
 16083  149F  30D0               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16084  14A0  0021               	movlb	1	; select bank1
 16085  14A1  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16086  14A2  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16087  14A3  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16088  14A4                     i1l4882:
 16089                           
 16090                           ;MotorDrive.c: 3472:     OutTrisRequestFlug = 1;
 16091  14A4  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16092  14A5  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16093                           
 16094                           ;MotorDrive.c: 3473:     reqVrsCheckBit |= 0x01;
 16095  14A6  1452               	bsf	_reqVrsCheckBit^(0+128),0
 16096  14A7  0008               	return
 16097  14A8                     __end_of_SetDataTRISxWork_M0_SPK_POL1_SHORT:
 16098                           
 16099                           	psect	text111
 16100  11D0                     __ptext111:	
 16101 ;; *************** function _SetDataTRISxWork_M0_SPK_POL1_OPEN *****************
 16102 ;; Defined at:
 16103 ;;		line 3447 in file "MotorDrive.c"
 16104 ;; Parameters:    Size  Location     Type
 16105 ;;		None
 16106 ;; Auto vars:     Size  Location     Type
 16107 ;;		None
 16108 ;; Return value:  Size  Location     Type
 16109 ;;                  1    wreg      void 
 16110 ;; Registers used:
 16111 ;;		wreg, status,2
 16112 ;; Tracked objects:
 16113 ;;		On entry : 1F/1
 16114 ;;		On exit  : 1F/1
 16115 ;;		Unchanged: 0/0
 16116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16117 ;;      Params:         0       0       0       0       0       0       0       0
 16118 ;;      Locals:         0       0       0       0       0       0       0       0
 16119 ;;      Temps:          1       0       0       0       0       0       0       0
 16120 ;;      Totals:         1       0       0       0       0       0       0       0
 16121 ;;Total ram usage:        1 bytes
 16122 ;; Hardware stack levels used:    1
 16123 ;; This function calls:
 16124 ;;		Nothing
 16125 ;; This function is called by:
 16126 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 16127 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 16128 ;;		_TMR2_Interrupt
 16129 ;; This function uses a non-reentrant model
 16130 ;;
 16131                           
 16132                           
 16133                           ;psect for function _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16134  11D0                     _SetDataTRISxWork_M0_SPK_POL1_OPEN:
 16135                           
 16136                           ;MotorDrive.c: 3449:     dataTRISAWork_M0 = 0x02;
 16137                           
 16138                           ;incstack = 0
 16139                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL1_OPEN: [wreg+status,2]
 16140  11D0  3002               	movlw	2
 16141  11D1  00F5               	movwf	??_SetDataTRISxWork_M0_SPK_POL1_OPEN
 16142  11D2  0875               	movf	??_SetDataTRISxWork_M0_SPK_POL1_OPEN,w
 16143  11D3  0020               	movlb	0	; select bank0
 16144  11D4  00DE               	movwf	_dataTRISAWork_M0
 16145                           
 16146                           ;MotorDrive.c: 3450:     dataTRISBWork_M0 = 0x00;
 16147  11D5  01DD               	clrf	_dataTRISBWork_M0
 16148                           
 16149                           ;MotorDrive.c: 3451:     dataTRISCWork_M0 = 0x00;
 16150  11D6  01DC               	clrf	_dataTRISCWork_M0
 16151                           
 16152                           ;MotorDrive.c: 3453:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_SHORT;
 16153  11D7  3090               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_SHORT
 16154  11D8  0021               	movlb	1	; select bank1
 16155  11D9  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16156  11DA  3014               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_SHORT
 16157  11DB  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16158                           
 16159                           ;MotorDrive.c: 3454:     OutTrisRequestFlug = 1;
 16160  11DC  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16161  11DD  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16162  11DE  0008               	return
 16163  11DF                     __end_of_SetDataTRISxWork_M0_SPK_POL1_OPEN:
 16164                           
 16165                           	psect	text112
 16166  1318                     __ptext112:	
 16167 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF *****************
 16168 ;; Defined at:
 16169 ;;		line 3428 in file "MotorDrive.c"
 16170 ;; Parameters:    Size  Location     Type
 16171 ;;		None
 16172 ;; Auto vars:     Size  Location     Type
 16173 ;;		None
 16174 ;; Return value:  Size  Location     Type
 16175 ;;                  1    wreg      void 
 16176 ;; Registers used:
 16177 ;;		wreg, status,2
 16178 ;; Tracked objects:
 16179 ;;		On entry : 1F/1
 16180 ;;		On exit  : 1F/1
 16181 ;;		Unchanged: 0/0
 16182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16183 ;;      Params:         0       0       0       0       0       0       0       0
 16184 ;;      Locals:         0       0       0       0       0       0       0       0
 16185 ;;      Temps:          0       0       0       0       0       0       0       0
 16186 ;;      Totals:         0       0       0       0       0       0       0       0
 16187 ;;Total ram usage:        0 bytes
 16188 ;; Hardware stack levels used:    1
 16189 ;; This function calls:
 16190 ;;		Nothing
 16191 ;; This function is called by:
 16192 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16193 ;;		_TMR2_Interrupt
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           
 16198                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 16199  1318                     _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:
 16200                           
 16201                           ;MotorDrive.c: 3430:     pulseOutLATAWork_M0 = 0;
 16202                           
 16203                           ;incstack = 0
 16204                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF: [wreg+status,2]
 16205  1318  0020               	movlb	0	; select bank0
 16206  1319  01E7               	clrf	_pulseOutLATAWork_M0
 16207                           
 16208                           ;MotorDrive.c: 3431:     pulseOutLATBWork_M0 = 0;
 16209  131A  01E6               	clrf	_pulseOutLATBWork_M0
 16210                           
 16211                           ;MotorDrive.c: 3432:     pulseOutLATCWork_M0 = 0;
 16212  131B  01E5               	clrf	_pulseOutLATCWork_M0
 16213                           
 16214                           ;MotorDrive.c: 3435:     dataTRISAWork_M0 = 0x00;
 16215  131C  01DE               	clrf	_dataTRISAWork_M0
 16216                           
 16217                           ;MotorDrive.c: 3436:     dataTRISBWork_M0 = 0x00;
 16218  131D  01DD               	clrf	_dataTRISBWork_M0
 16219                           
 16220                           ;MotorDrive.c: 3437:     dataTRISCWork_M0 = 0x00;
 16221  131E  01DC               	clrf	_dataTRISCWork_M0
 16222                           
 16223                           ;MotorDrive.c: 3439:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_OPEN;
 16224  131F  30D0               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16225  1320  0021               	movlb	1	; select bank1
 16226  1321  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16227  1322  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_OPEN
 16228  1323  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16229                           
 16230                           ;MotorDrive.c: 3440:     OutRequestFlug = 1;
 16231  1324  01D6               	clrf	_OutRequestFlug^(0+128)
 16232  1325  0AD6               	incf	_OutRequestFlug^(0+128),f
 16233                           
 16234                           ;MotorDrive.c: 3441:     OutTrisRequestFlug = 1;
 16235  1326  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16236  1327  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16237                           
 16238                           ;MotorDrive.c: 3442:     reqComparatorOnBit |= 0x01;
 16239  1328  1454               	bsf	_reqComparatorOnBit^(0+128),0
 16240  1329  0008               	return
 16241  132A                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:
 16242                           
 16243                           	psect	text113
 16244  1478                     __ptext113:	
 16245 ;; *************** function _SetDataTRISxWork_M0_SPK_POL0_SHORT *****************
 16246 ;; Defined at:
 16247 ;;		line 3396 in file "MotorDrive.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;		None
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;		None
 16252 ;; Return value:  Size  Location     Type
 16253 ;;                  1    wreg      void 
 16254 ;; Registers used:
 16255 ;;		wreg, status,2, status,0
 16256 ;; Tracked objects:
 16257 ;;		On entry : 1F/1
 16258 ;;		On exit  : 1F/1
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16261 ;;      Params:         0       0       0       0       0       0       0       0
 16262 ;;      Locals:         0       0       0       0       0       0       0       0
 16263 ;;      Temps:          0       0       0       0       0       0       0       0
 16264 ;;      Totals:         0       0       0       0       0       0       0       0
 16265 ;;Total ram usage:        0 bytes
 16266 ;; Hardware stack levels used:    1
 16267 ;; This function calls:
 16268 ;;		Nothing
 16269 ;; This function is called by:
 16270 ;;		_SetDataTRISxWork_M0_SPK_POL0_OPEN
 16271 ;;		_TMR2_Interrupt
 16272 ;; This function uses a non-reentrant model
 16273 ;;
 16274                           
 16275                           
 16276                           ;psect for function _SetDataTRISxWork_M0_SPK_POL0_SHORT
 16277  1478                     _SetDataTRISxWork_M0_SPK_POL0_SHORT:
 16278                           
 16279                           ;MotorDrive.c: 3398:     dataTRISAWork_M0 = 0x00;
 16280                           
 16281                           ;incstack = 0
 16282                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL0_SHORT: [wreg+status,2+status,0]
 16283  1478  0020               	movlb	0	; select bank0
 16284  1479  01DE               	clrf	_dataTRISAWork_M0
 16285                           
 16286                           ;MotorDrive.c: 3399:     dataTRISBWork_M0 = 0x00;
 16287  147A  01DD               	clrf	_dataTRISBWork_M0
 16288                           
 16289                           ;MotorDrive.c: 3400:     dataTRISCWork_M0 = 0x00;
 16290  147B  01DC               	clrf	_dataTRISCWork_M0
 16291                           
 16292                           ;MotorDrive.c: 3402:     if (m0PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 16293  147C  3016               	movlw	22
 16294  147D  0673               	xorwf	_m0PulseOutStep,w
 16295  147E  1D03               	btfss	3,2
 16296  147F  2C87               	goto	i1l4840
 16297                           
 16298                           ;MotorDrive.c: 3403:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P1;
 16299  1480  3058               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16300  1481  0021               	movlb	1	; select bank1
 16301  1482  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16302  1483  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16303  1484  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16304                           
 16305                           ;MotorDrive.c: 3404:         reqComparatorOffBit |= 0x01;
 16306  1485  1453               	bsf	_reqComparatorOffBit^(0+128),0
 16307                           
 16308                           ;MotorDrive.c: 3405:     } else {
 16309  1486  2C8C               	goto	i1l4842
 16310  1487                     i1l4840:
 16311                           
 16312                           ;MotorDrive.c: 3406:         m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_OPEN;
 16313  1487  30C1               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16314  1488  0021               	movlb	1	; select bank1
 16315  1489  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16316  148A  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16317  148B  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16318  148C                     i1l4842:
 16319                           
 16320                           ;MotorDrive.c: 3409:     OutTrisRequestFlug = 1;
 16321  148C  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16322  148D  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16323                           
 16324                           ;MotorDrive.c: 3410:     reqVrsCheckBit |= 0x01;
 16325  148E  1452               	bsf	_reqVrsCheckBit^(0+128),0
 16326  148F  0008               	return
 16327  1490                     __end_of_SetDataTRISxWork_M0_SPK_POL0_SHORT:
 16328                           
 16329                           	psect	text114
 16330  11C1                     __ptext114:	
 16331 ;; *************** function _SetDataTRISxWork_M0_SPK_POL0_OPEN *****************
 16332 ;; Defined at:
 16333 ;;		line 3384 in file "MotorDrive.c"
 16334 ;; Parameters:    Size  Location     Type
 16335 ;;		None
 16336 ;; Auto vars:     Size  Location     Type
 16337 ;;		None
 16338 ;; Return value:  Size  Location     Type
 16339 ;;                  1    wreg      void 
 16340 ;; Registers used:
 16341 ;;		wreg, status,2
 16342 ;; Tracked objects:
 16343 ;;		On entry : 1F/1
 16344 ;;		On exit  : 1F/1
 16345 ;;		Unchanged: 0/0
 16346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16347 ;;      Params:         0       0       0       0       0       0       0       0
 16348 ;;      Locals:         0       0       0       0       0       0       0       0
 16349 ;;      Temps:          1       0       0       0       0       0       0       0
 16350 ;;      Totals:         1       0       0       0       0       0       0       0
 16351 ;;Total ram usage:        1 bytes
 16352 ;; Hardware stack levels used:    1
 16353 ;; This function calls:
 16354 ;;		Nothing
 16355 ;; This function is called by:
 16356 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 16357 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 16358 ;;		_TMR2_Interrupt
 16359 ;; This function uses a non-reentrant model
 16360 ;;
 16361                           
 16362                           
 16363                           ;psect for function _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16364  11C1                     _SetDataTRISxWork_M0_SPK_POL0_OPEN:
 16365                           
 16366                           ;MotorDrive.c: 3386:     dataTRISAWork_M0 = 0x00;
 16367                           
 16368                           ;incstack = 0
 16369                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL0_OPEN: [wreg+status,2]
 16370  11C1  0020               	movlb	0	; select bank0
 16371  11C2  01DE               	clrf	_dataTRISAWork_M0
 16372                           
 16373                           ;MotorDrive.c: 3387:     dataTRISBWork_M0 = 0x00;
 16374  11C3  01DD               	clrf	_dataTRISBWork_M0
 16375                           
 16376                           ;MotorDrive.c: 3388:     dataTRISCWork_M0 = 0x02;
 16377  11C4  3002               	movlw	2
 16378  11C5  00F5               	movwf	??_SetDataTRISxWork_M0_SPK_POL0_OPEN
 16379  11C6  0875               	movf	??_SetDataTRISxWork_M0_SPK_POL0_OPEN,w
 16380  11C7  00DC               	movwf	_dataTRISCWork_M0
 16381                           
 16382                           ;MotorDrive.c: 3390:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_SHORT;
 16383  11C8  3078               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_SHORT
 16384  11C9  0021               	movlb	1	; select bank1
 16385  11CA  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16386  11CB  3014               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_SHORT
 16387  11CC  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16388                           
 16389                           ;MotorDrive.c: 3391:     OutTrisRequestFlug = 1;
 16390  11CD  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16391  11CE  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16392  11CF  0008               	return
 16393  11D0                     __end_of_SetDataTRISxWork_M0_SPK_POL0_OPEN:
 16394                           
 16395                           	psect	text115
 16396  1306                     __ptext115:	
 16397 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF *****************
 16398 ;; Defined at:
 16399 ;;		line 3365 in file "MotorDrive.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;		None
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;		None
 16404 ;; Return value:  Size  Location     Type
 16405 ;;                  1    wreg      void 
 16406 ;; Registers used:
 16407 ;;		wreg, status,2
 16408 ;; Tracked objects:
 16409 ;;		On entry : 1F/1
 16410 ;;		On exit  : 1F/1
 16411 ;;		Unchanged: 0/0
 16412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16413 ;;      Params:         0       0       0       0       0       0       0       0
 16414 ;;      Locals:         0       0       0       0       0       0       0       0
 16415 ;;      Temps:          0       0       0       0       0       0       0       0
 16416 ;;      Totals:         0       0       0       0       0       0       0       0
 16417 ;;Total ram usage:        0 bytes
 16418 ;; Hardware stack levels used:    1
 16419 ;; This function calls:
 16420 ;;		Nothing
 16421 ;; This function is called by:
 16422 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16423 ;;		_TMR2_Interrupt
 16424 ;; This function uses a non-reentrant model
 16425 ;;
 16426                           
 16427                           
 16428                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 16429  1306                     _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:
 16430                           
 16431                           ;MotorDrive.c: 3367:     pulseOutLATAWork_M0 = 0;
 16432                           
 16433                           ;incstack = 0
 16434                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF: [wreg+status,2]
 16435  1306  0020               	movlb	0	; select bank0
 16436  1307  01E7               	clrf	_pulseOutLATAWork_M0
 16437                           
 16438                           ;MotorDrive.c: 3368:     pulseOutLATBWork_M0 = 0;
 16439  1308  01E6               	clrf	_pulseOutLATBWork_M0
 16440                           
 16441                           ;MotorDrive.c: 3369:     pulseOutLATCWork_M0 = 0;
 16442  1309  01E5               	clrf	_pulseOutLATCWork_M0
 16443                           
 16444                           ;MotorDrive.c: 3372:     dataTRISAWork_M0 = 0x00;
 16445  130A  01DE               	clrf	_dataTRISAWork_M0
 16446                           
 16447                           ;MotorDrive.c: 3373:     dataTRISBWork_M0 = 0x00;
 16448  130B  01DD               	clrf	_dataTRISBWork_M0
 16449                           
 16450                           ;MotorDrive.c: 3374:     dataTRISCWork_M0 = 0x00;
 16451  130C  01DC               	clrf	_dataTRISCWork_M0
 16452                           
 16453                           ;MotorDrive.c: 3376:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_OPEN;
 16454  130D  30C1               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16455  130E  0021               	movlb	1	; select bank1
 16456  130F  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16457  1310  3011               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_OPEN
 16458  1311  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16459                           
 16460                           ;MotorDrive.c: 3377:     OutRequestFlug = 1;
 16461  1312  01D6               	clrf	_OutRequestFlug^(0+128)
 16462  1313  0AD6               	incf	_OutRequestFlug^(0+128),f
 16463                           
 16464                           ;MotorDrive.c: 3378:     OutTrisRequestFlug = 1;
 16465  1314  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 16466  1315  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 16467                           
 16468                           ;MotorDrive.c: 3379:     reqComparatorOnBit |= 0x01;
 16469  1316  1454               	bsf	_reqComparatorOnBit^(0+128),0
 16470  1317  0008               	return
 16471  1318                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:
 16472                           
 16473                           	psect	text116
 16474  12A3                     __ptext116:	
 16475 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_OFF *****************
 16476 ;; Defined at:
 16477 ;;		line 3167 in file "MotorDrive.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;		None
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;		None
 16482 ;; Return value:  Size  Location     Type
 16483 ;;                  1    wreg      void 
 16484 ;; Registers used:
 16485 ;;		wreg, status,2, status,0
 16486 ;; Tracked objects:
 16487 ;;		On entry : 1F/1
 16488 ;;		On exit  : 1F/1
 16489 ;;		Unchanged: 0/0
 16490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16491 ;;      Params:         0       0       0       0       0       0       0       0
 16492 ;;      Locals:         0       0       0       0       0       0       0       0
 16493 ;;      Temps:          1       0       0       0       0       0       0       0
 16494 ;;      Totals:         1       0       0       0       0       0       0       0
 16495 ;;Total ram usage:        1 bytes
 16496 ;; Hardware stack levels used:    1
 16497 ;; This function calls:
 16498 ;;		Nothing
 16499 ;; This function is called by:
 16500 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P2
 16501 ;;		_TMR2_Interrupt
 16502 ;; This function uses a non-reentrant model
 16503 ;;
 16504                           
 16505                           
 16506                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16507  12A3                     _SetPulseOutLATxWork_M0_REV_POL1_OFF:
 16508                           
 16509                           ;MotorDrive.c: 3169:     pulseOutLATAWork_M0 = 0;
 16510                           
 16511                           ;incstack = 0
 16512                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_OFF: [wreg+status,2+status,0]
 16513  12A3  0020               	movlb	0	; select bank0
 16514  12A4  01E7               	clrf	_pulseOutLATAWork_M0
 16515                           
 16516                           ;MotorDrive.c: 3170:     pulseOutLATBWork_M0 = 0;
 16517  12A5  01E6               	clrf	_pulseOutLATBWork_M0
 16518                           
 16519                           ;MotorDrive.c: 3171:     pulseOutLATCWork_M0 = 0;
 16520  12A6  01E5               	clrf	_pulseOutLATCWork_M0
 16521                           
 16522                           ;MotorDrive.c: 3173:     polarityBit ^= 0x01;
 16523  12A7  3001               	movlw	1
 16524  12A8  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_OFF
 16525  12A9  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_OFF,w
 16526  12AA  06F1               	xorwf	_polarityBit,f
 16527                           
 16528                           ;MotorDrive.c: 3175:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_P1;
 16529  12AB  3076               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P1
 16530  12AC  0021               	movlb	1	; select bank1
 16531  12AD  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16532  12AE  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P1
 16533  12AF  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16534                           
 16535                           ;MotorDrive.c: 3176:     OutRequestFlug = 1;
 16536  12B0  01D6               	clrf	_OutRequestFlug^(0+128)
 16537  12B1  0AD6               	incf	_OutRequestFlug^(0+128),f
 16538  12B2  0008               	return
 16539  12B3                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_OFF:
 16540                           
 16541                           	psect	text117
 16542  11B2                     __ptext117:	
 16543 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_P2 *****************
 16544 ;; Defined at:
 16545 ;;		line 3155 in file "MotorDrive.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;		None
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;		None
 16550 ;; Return value:  Size  Location     Type
 16551 ;;                  1    wreg      void 
 16552 ;; Registers used:
 16553 ;;		wreg, status,2
 16554 ;; Tracked objects:
 16555 ;;		On entry : 1F/1
 16556 ;;		On exit  : 1F/1
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16559 ;;      Params:         0       0       0       0       0       0       0       0
 16560 ;;      Locals:         0       0       0       0       0       0       0       0
 16561 ;;      Temps:          1       0       0       0       0       0       0       0
 16562 ;;      Totals:         1       0       0       0       0       0       0       0
 16563 ;;Total ram usage:        1 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; This function calls:
 16566 ;;		Nothing
 16567 ;; This function is called by:
 16568 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P1
 16569 ;;		_TMR2_Interrupt
 16570 ;; This function uses a non-reentrant model
 16571 ;;
 16572                           
 16573                           
 16574                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_P2
 16575  11B2                     _SetPulseOutLATxWork_M0_REV_POL1_P2:
 16576                           
 16577                           ;MotorDrive.c: 3157:     pulseOutLATAWork_M0 = 0x10;
 16578                           
 16579                           ;incstack = 0
 16580                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_P2: [wreg+status,2]
 16581  11B2  3010               	movlw	16
 16582  11B3  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_P2
 16583  11B4  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_P2,w
 16584  11B5  0020               	movlb	0	; select bank0
 16585  11B6  00E7               	movwf	_pulseOutLATAWork_M0
 16586                           
 16587                           ;MotorDrive.c: 3158:     pulseOutLATBWork_M0 = 0x00;
 16588  11B7  01E6               	clrf	_pulseOutLATBWork_M0
 16589                           
 16590                           ;MotorDrive.c: 3159:     pulseOutLATCWork_M0 = 0x00;
 16591  11B8  01E5               	clrf	_pulseOutLATCWork_M0
 16592                           
 16593                           ;MotorDrive.c: 3161:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_OFF;
 16594  11B9  30A3               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16595  11BA  0021               	movlb	1	; select bank1
 16596  11BB  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16597  11BC  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16598  11BD  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16599                           
 16600                           ;MotorDrive.c: 3162:     OutRequestFlug = 1;
 16601  11BE  01D6               	clrf	_OutRequestFlug^(0+128)
 16602  11BF  0AD6               	incf	_OutRequestFlug^(0+128),f
 16603  11C0  0008               	return
 16604  11C1                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_P2:
 16605                           
 16606                           	psect	text118
 16607  1293                     __ptext118:	
 16608 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_OFF *****************
 16609 ;; Defined at:
 16610 ;;		line 3128 in file "MotorDrive.c"
 16611 ;; Parameters:    Size  Location     Type
 16612 ;;		None
 16613 ;; Auto vars:     Size  Location     Type
 16614 ;;		None
 16615 ;; Return value:  Size  Location     Type
 16616 ;;                  1    wreg      void 
 16617 ;; Registers used:
 16618 ;;		wreg, status,2, status,0
 16619 ;; Tracked objects:
 16620 ;;		On entry : 1F/1
 16621 ;;		On exit  : 1F/1
 16622 ;;		Unchanged: 0/0
 16623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16624 ;;      Params:         0       0       0       0       0       0       0       0
 16625 ;;      Locals:         0       0       0       0       0       0       0       0
 16626 ;;      Temps:          1       0       0       0       0       0       0       0
 16627 ;;      Totals:         1       0       0       0       0       0       0       0
 16628 ;;Total ram usage:        1 bytes
 16629 ;; Hardware stack levels used:    1
 16630 ;; This function calls:
 16631 ;;		Nothing
 16632 ;; This function is called by:
 16633 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P2
 16634 ;;		_TMR2_Interrupt
 16635 ;; This function uses a non-reentrant model
 16636 ;;
 16637                           
 16638                           
 16639                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16640  1293                     _SetPulseOutLATxWork_M0_REV_POL0_OFF:
 16641                           
 16642                           ;MotorDrive.c: 3130:     pulseOutLATAWork_M0 = 0;
 16643                           
 16644                           ;incstack = 0
 16645                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_OFF: [wreg+status,2+status,0]
 16646  1293  0020               	movlb	0	; select bank0
 16647  1294  01E7               	clrf	_pulseOutLATAWork_M0
 16648                           
 16649                           ;MotorDrive.c: 3131:     pulseOutLATBWork_M0 = 0;
 16650  1295  01E6               	clrf	_pulseOutLATBWork_M0
 16651                           
 16652                           ;MotorDrive.c: 3132:     pulseOutLATCWork_M0 = 0;
 16653  1296  01E5               	clrf	_pulseOutLATCWork_M0
 16654                           
 16655                           ;MotorDrive.c: 3134:     polarityBit ^= 0x01;
 16656  1297  3001               	movlw	1
 16657  1298  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_OFF
 16658  1299  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_OFF,w
 16659  129A  06F1               	xorwf	_polarityBit,f
 16660                           
 16661                           ;MotorDrive.c: 3136:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_P1;
 16662  129B  3067               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P1
 16663  129C  0021               	movlb	1	; select bank1
 16664  129D  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16665  129E  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P1
 16666  129F  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16667                           
 16668                           ;MotorDrive.c: 3137:     OutRequestFlug = 1;
 16669  12A0  01D6               	clrf	_OutRequestFlug^(0+128)
 16670  12A1  0AD6               	incf	_OutRequestFlug^(0+128),f
 16671  12A2  0008               	return
 16672  12A3                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_OFF:
 16673                           
 16674                           	psect	text119
 16675  11A3                     __ptext119:	
 16676 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_P2 *****************
 16677 ;; Defined at:
 16678 ;;		line 3116 in file "MotorDrive.c"
 16679 ;; Parameters:    Size  Location     Type
 16680 ;;		None
 16681 ;; Auto vars:     Size  Location     Type
 16682 ;;		None
 16683 ;; Return value:  Size  Location     Type
 16684 ;;                  1    wreg      void 
 16685 ;; Registers used:
 16686 ;;		wreg, status,2
 16687 ;; Tracked objects:
 16688 ;;		On entry : 1F/1
 16689 ;;		On exit  : 1F/1
 16690 ;;		Unchanged: 0/0
 16691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16692 ;;      Params:         0       0       0       0       0       0       0       0
 16693 ;;      Locals:         0       0       0       0       0       0       0       0
 16694 ;;      Temps:          1       0       0       0       0       0       0       0
 16695 ;;      Totals:         1       0       0       0       0       0       0       0
 16696 ;;Total ram usage:        1 bytes
 16697 ;; Hardware stack levels used:    1
 16698 ;; This function calls:
 16699 ;;		Nothing
 16700 ;; This function is called by:
 16701 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P1
 16702 ;;		_TMR2_Interrupt
 16703 ;; This function uses a non-reentrant model
 16704 ;;
 16705                           
 16706                           
 16707                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_P2
 16708  11A3                     _SetPulseOutLATxWork_M0_REV_POL0_P2:
 16709                           
 16710                           ;MotorDrive.c: 3118:     pulseOutLATAWork_M0 = 0x20;
 16711                           
 16712                           ;incstack = 0
 16713                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_P2: [wreg+status,2]
 16714  11A3  3020               	movlw	32
 16715  11A4  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_P2
 16716  11A5  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_P2,w
 16717  11A6  0020               	movlb	0	; select bank0
 16718  11A7  00E7               	movwf	_pulseOutLATAWork_M0
 16719                           
 16720                           ;MotorDrive.c: 3119:     pulseOutLATBWork_M0 = 0x00;
 16721  11A8  01E6               	clrf	_pulseOutLATBWork_M0
 16722                           
 16723                           ;MotorDrive.c: 3120:     pulseOutLATCWork_M0 = 0x00;
 16724  11A9  01E5               	clrf	_pulseOutLATCWork_M0
 16725                           
 16726                           ;MotorDrive.c: 3122:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_OFF;
 16727  11AA  3093               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16728  11AB  0021               	movlb	1	; select bank1
 16729  11AC  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16730  11AD  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16731  11AE  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16732                           
 16733                           ;MotorDrive.c: 3123:     OutRequestFlug = 1;
 16734  11AF  01D6               	clrf	_OutRequestFlug^(0+128)
 16735  11B0  0AD6               	incf	_OutRequestFlug^(0+128),f
 16736  11B1  0008               	return
 16737  11B2                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_P2:
 16738                           
 16739                           	psect	text120
 16740  1433                     __ptext120:	
 16741 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_OFF *****************
 16742 ;; Defined at:
 16743 ;;		line 3083 in file "MotorDrive.c"
 16744 ;; Parameters:    Size  Location     Type
 16745 ;;		None
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;		None
 16748 ;; Return value:  Size  Location     Type
 16749 ;;                  1    wreg      void 
 16750 ;; Registers used:
 16751 ;;		wreg, status,2, status,0
 16752 ;; Tracked objects:
 16753 ;;		On entry : 1F/1
 16754 ;;		On exit  : 1F/1
 16755 ;;		Unchanged: 0/0
 16756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16757 ;;      Params:         0       0       0       0       0       0       0       0
 16758 ;;      Locals:         0       0       0       0       0       0       0       0
 16759 ;;      Temps:          1       0       0       0       0       0       0       0
 16760 ;;      Totals:         1       0       0       0       0       0       0       0
 16761 ;;Total ram usage:        1 bytes
 16762 ;; Hardware stack levels used:    1
 16763 ;; This function calls:
 16764 ;;		Nothing
 16765 ;; This function is called by:
 16766 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P2
 16767 ;;		_TMR2_Interrupt
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16773  1433                     _SetPulseOutLATxWork_M0_FWD_POL1_OFF:
 16774                           
 16775                           ;MotorDrive.c: 3085:     pulseOutLATAWork_M0 = 0;
 16776                           
 16777                           ;incstack = 0
 16778                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_OFF: [wreg+status,2+status,0]
 16779  1433  0020               	movlb	0	; select bank0
 16780  1434  01E7               	clrf	_pulseOutLATAWork_M0
 16781                           
 16782                           ;MotorDrive.c: 3086:     pulseOutLATBWork_M0 = 0;
 16783  1435  01E6               	clrf	_pulseOutLATBWork_M0
 16784                           
 16785                           ;MotorDrive.c: 3087:     pulseOutLATCWork_M0 = 0;
 16786  1436  01E5               	clrf	_pulseOutLATCWork_M0
 16787                           
 16788                           ;MotorDrive.c: 3089:     polarityBit ^= 0x01;
 16789  1437  3001               	movlw	1
 16790  1438  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16791  1439  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_OFF,w
 16792  143A  06F1               	xorwf	_polarityBit,f
 16793                           
 16794                           ;MotorDrive.c: 3091:     if (addShakePulseBit & 0x01) {
 16795  143B  1C70               	btfss	_addShakePulseBit,0
 16796  143C  2C42               	goto	i1l4650
 16797                           
 16798                           ;MotorDrive.c: 3092:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL0_P0
      +                          ;
 16799  143D  303A               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16800  143E  0021               	movlb	1	; select bank1
 16801  143F  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16802  1440  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16803  1441  2C46               	goto	L23
 16804  1442                     i1l4650:	
 16805                           ;MotorDrive.c: 3093:     } else {
 16806                           
 16807                           
 16808                           ;MotorDrive.c: 3094:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P1;
 16809  1442  3058               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16810  1443  0021               	movlb	1	; select bank1
 16811  1444  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16812  1445  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16813  1446                     L23:
 16814  1446  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16815                           
 16816                           ;MotorDrive.c: 3097:     OutRequestFlug = 1;
 16817  1447  01D6               	clrf	_OutRequestFlug^(0+128)
 16818  1448  0AD6               	incf	_OutRequestFlug^(0+128),f
 16819  1449  0008               	return
 16820  144A                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF:
 16821                           
 16822                           	psect	text121
 16823  1194                     __ptext121:	
 16824 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_P2 *****************
 16825 ;; Defined at:
 16826 ;;		line 3071 in file "MotorDrive.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;		None
 16829 ;; Auto vars:     Size  Location     Type
 16830 ;;		None
 16831 ;; Return value:  Size  Location     Type
 16832 ;;                  1    wreg      void 
 16833 ;; Registers used:
 16834 ;;		wreg, status,2
 16835 ;; Tracked objects:
 16836 ;;		On entry : 1F/1
 16837 ;;		On exit  : 1F/1
 16838 ;;		Unchanged: 0/0
 16839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16840 ;;      Params:         0       0       0       0       0       0       0       0
 16841 ;;      Locals:         0       0       0       0       0       0       0       0
 16842 ;;      Temps:          1       0       0       0       0       0       0       0
 16843 ;;      Totals:         1       0       0       0       0       0       0       0
 16844 ;;Total ram usage:        1 bytes
 16845 ;; Hardware stack levels used:    1
 16846 ;; This function calls:
 16847 ;;		Nothing
 16848 ;; This function is called by:
 16849 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P1
 16850 ;;		_TMR2_Interrupt
 16851 ;; This function uses a non-reentrant model
 16852 ;;
 16853                           
 16854                           
 16855                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_P2
 16856  1194                     _SetPulseOutLATxWork_M0_FWD_POL1_P2:
 16857                           
 16858                           ;MotorDrive.c: 3073:     pulseOutLATAWork_M0 = 0x00;
 16859                           
 16860                           ;incstack = 0
 16861                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_P2: [wreg+status,2]
 16862  1194  0020               	movlb	0	; select bank0
 16863  1195  01E7               	clrf	_pulseOutLATAWork_M0
 16864                           
 16865                           ;MotorDrive.c: 3074:     pulseOutLATBWork_M0 = 0x00;
 16866  1196  01E6               	clrf	_pulseOutLATBWork_M0
 16867                           
 16868                           ;MotorDrive.c: 3075:     pulseOutLATCWork_M0 = 0x02;
 16869  1197  3002               	movlw	2
 16870  1198  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_P2
 16871  1199  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_P2,w
 16872  119A  00E5               	movwf	_pulseOutLATCWork_M0
 16873                           
 16874                           ;MotorDrive.c: 3077:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_OFF;
 16875  119B  3033               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16876  119C  0021               	movlb	1	; select bank1
 16877  119D  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16878  119E  3014               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16879  119F  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16880                           
 16881                           ;MotorDrive.c: 3078:     OutRequestFlug = 1;
 16882  11A0  01D6               	clrf	_OutRequestFlug^(0+128)
 16883  11A1  0AD6               	incf	_OutRequestFlug^(0+128),f
 16884  11A2  0008               	return
 16885  11A3                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P2:
 16886                           
 16887                           	psect	text122
 16888  141C                     __ptext122:	
 16889 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_OFF *****************
 16890 ;; Defined at:
 16891 ;;		line 3038 in file "MotorDrive.c"
 16892 ;; Parameters:    Size  Location     Type
 16893 ;;		None
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;		None
 16896 ;; Return value:  Size  Location     Type
 16897 ;;                  1    wreg      void 
 16898 ;; Registers used:
 16899 ;;		wreg, status,2, status,0
 16900 ;; Tracked objects:
 16901 ;;		On entry : 1F/1
 16902 ;;		On exit  : 1F/1
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16905 ;;      Params:         0       0       0       0       0       0       0       0
 16906 ;;      Locals:         0       0       0       0       0       0       0       0
 16907 ;;      Temps:          1       0       0       0       0       0       0       0
 16908 ;;      Totals:         1       0       0       0       0       0       0       0
 16909 ;;Total ram usage:        1 bytes
 16910 ;; Hardware stack levels used:    1
 16911 ;; This function calls:
 16912 ;;		Nothing
 16913 ;; This function is called by:
 16914 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P2
 16915 ;;		_TMR2_Interrupt
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           
 16920                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16921  141C                     _SetPulseOutLATxWork_M0_FWD_POL0_OFF:
 16922                           
 16923                           ;MotorDrive.c: 3040:     pulseOutLATAWork_M0 = 0;
 16924                           
 16925                           ;incstack = 0
 16926                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_OFF: [wreg+status,2+status,0]
 16927  141C  0020               	movlb	0	; select bank0
 16928  141D  01E7               	clrf	_pulseOutLATAWork_M0
 16929                           
 16930                           ;MotorDrive.c: 3041:     pulseOutLATBWork_M0 = 0;
 16931  141E  01E6               	clrf	_pulseOutLATBWork_M0
 16932                           
 16933                           ;MotorDrive.c: 3042:     pulseOutLATCWork_M0 = 0;
 16934  141F  01E5               	clrf	_pulseOutLATCWork_M0
 16935                           
 16936                           ;MotorDrive.c: 3044:     polarityBit ^= 0x01;
 16937  1420  3001               	movlw	1
 16938  1421  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16939  1422  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_OFF,w
 16940  1423  06F1               	xorwf	_polarityBit,f
 16941                           
 16942                           ;MotorDrive.c: 3046:     if (addShakePulseBit & 0x01) {
 16943  1424  1C70               	btfss	_addShakePulseBit,0
 16944  1425  2C2B               	goto	i1l4622
 16945                           
 16946                           ;MotorDrive.c: 3047:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL1_P0
      +                          ;
 16947  1426  302B               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16948  1427  0021               	movlb	1	; select bank1
 16949  1428  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16950  1429  3011               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16951  142A  2C2F               	goto	L24
 16952  142B                     i1l4622:	
 16953                           ;MotorDrive.c: 3048:     } else {
 16954                           
 16955                           
 16956                           ;MotorDrive.c: 3049:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P1;
 16957  142B  3049               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16958  142C  0021               	movlb	1	; select bank1
 16959  142D  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16960  142E  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16961  142F                     L24:
 16962  142F  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16963                           
 16964                           ;MotorDrive.c: 3052:     OutRequestFlug = 1;
 16965  1430  01D6               	clrf	_OutRequestFlug^(0+128)
 16966  1431  0AD6               	incf	_OutRequestFlug^(0+128),f
 16967  1432  0008               	return
 16968  1433                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF:
 16969                           
 16970                           	psect	text123
 16971  1185                     __ptext123:	
 16972 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_P2 *****************
 16973 ;; Defined at:
 16974 ;;		line 3026 in file "MotorDrive.c"
 16975 ;; Parameters:    Size  Location     Type
 16976 ;;		None
 16977 ;; Auto vars:     Size  Location     Type
 16978 ;;		None
 16979 ;; Return value:  Size  Location     Type
 16980 ;;                  1    wreg      void 
 16981 ;; Registers used:
 16982 ;;		wreg, status,2
 16983 ;; Tracked objects:
 16984 ;;		On entry : 1F/1
 16985 ;;		On exit  : 1F/1
 16986 ;;		Unchanged: 0/0
 16987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16988 ;;      Params:         0       0       0       0       0       0       0       0
 16989 ;;      Locals:         0       0       0       0       0       0       0       0
 16990 ;;      Temps:          1       0       0       0       0       0       0       0
 16991 ;;      Totals:         1       0       0       0       0       0       0       0
 16992 ;;Total ram usage:        1 bytes
 16993 ;; Hardware stack levels used:    1
 16994 ;; This function calls:
 16995 ;;		Nothing
 16996 ;; This function is called by:
 16997 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P1
 16998 ;;		_TMR2_Interrupt
 16999 ;; This function uses a non-reentrant model
 17000 ;;
 17001                           
 17002                           
 17003                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_P2
 17004  1185                     _SetPulseOutLATxWork_M0_FWD_POL0_P2:
 17005                           
 17006                           ;MotorDrive.c: 3028:     pulseOutLATAWork_M0 = 0x02;
 17007                           
 17008                           ;incstack = 0
 17009                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_P2: [wreg+status,2]
 17010  1185  3002               	movlw	2
 17011  1186  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_P2
 17012  1187  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_P2,w
 17013  1188  0020               	movlb	0	; select bank0
 17014  1189  00E7               	movwf	_pulseOutLATAWork_M0
 17015                           
 17016                           ;MotorDrive.c: 3029:     pulseOutLATBWork_M0 = 0x00;
 17017  118A  01E6               	clrf	_pulseOutLATBWork_M0
 17018                           
 17019                           ;MotorDrive.c: 3030:     pulseOutLATCWork_M0 = 0x00;
 17020  118B  01E5               	clrf	_pulseOutLATCWork_M0
 17021                           
 17022                           ;MotorDrive.c: 3032:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_OFF;
 17023  118C  301C               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17024  118D  0021               	movlb	1	; select bank1
 17025  118E  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17026  118F  3014               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17027  1190  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17028                           
 17029                           ;MotorDrive.c: 3033:     OutRequestFlug = 1;
 17030  1191  01D6               	clrf	_OutRequestFlug^(0+128)
 17031  1192  0AD6               	incf	_OutRequestFlug^(0+128),f
 17032  1193  0008               	return
 17033  1194                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P2:
 17034                           
 17035                           	psect	text124
 17036  1176                     __ptext124:	
 17037 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_P1 *****************
 17038 ;; Defined at:
 17039 ;;		line 3104 in file "MotorDrive.c"
 17040 ;; Parameters:    Size  Location     Type
 17041 ;;		None
 17042 ;; Auto vars:     Size  Location     Type
 17043 ;;		None
 17044 ;; Return value:  Size  Location     Type
 17045 ;;                  1    wreg      void 
 17046 ;; Registers used:
 17047 ;;		wreg, status,2
 17048 ;; Tracked objects:
 17049 ;;		On entry : 1F/1
 17050 ;;		On exit  : 1F/1
 17051 ;;		Unchanged: 0/0
 17052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17053 ;;      Params:         0       0       0       0       0       0       0       0
 17054 ;;      Locals:         0       0       0       0       0       0       0       0
 17055 ;;      Temps:          1       0       0       0       0       0       0       0
 17056 ;;      Totals:         1       0       0       0       0       0       0       0
 17057 ;;Total ram usage:        1 bytes
 17058 ;; Hardware stack levels used:    1
 17059 ;; This function calls:
 17060 ;;		Nothing
 17061 ;; This function is called by:
 17062 ;;		_StartPulseOutM0
 17063 ;;		_SetPulseOutLATxWork_M0_REV_POL1_OFF
 17064 ;;		_TMR2_Interrupt
 17065 ;; This function uses a non-reentrant model
 17066 ;;
 17067                           
 17068                           
 17069                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_P1
 17070  1176                     _SetPulseOutLATxWork_M0_REV_POL0_P1:
 17071                           
 17072                           ;MotorDrive.c: 3106:     pulseOutLATAWork_M0 = 0x00;
 17073                           
 17074                           ;incstack = 0
 17075                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_P1: [wreg+status,2]
 17076  1176  0020               	movlb	0	; select bank0
 17077  1177  01E7               	clrf	_pulseOutLATAWork_M0
 17078                           
 17079                           ;MotorDrive.c: 3107:     pulseOutLATBWork_M0 = 0x00;
 17080  1178  01E6               	clrf	_pulseOutLATBWork_M0
 17081                           
 17082                           ;MotorDrive.c: 3108:     pulseOutLATCWork_M0 = 0x02;
 17083  1179  3002               	movlw	2
 17084  117A  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_P1
 17085  117B  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_P1,w
 17086  117C  00E5               	movwf	_pulseOutLATCWork_M0
 17087                           
 17088                           ;MotorDrive.c: 3110:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_P2;
 17089  117D  30A3               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P2
 17090  117E  0021               	movlb	1	; select bank1
 17091  117F  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17092  1180  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P2
 17093  1181  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17094                           
 17095                           ;MotorDrive.c: 3111:     OutRequestFlug = 1;
 17096  1182  01D6               	clrf	_OutRequestFlug^(0+128)
 17097  1183  0AD6               	incf	_OutRequestFlug^(0+128),f
 17098  1184  0008               	return
 17099  1185                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_P1:
 17100                           
 17101                           	psect	text125
 17102  1167                     __ptext125:	
 17103 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_P1 *****************
 17104 ;; Defined at:
 17105 ;;		line 3143 in file "MotorDrive.c"
 17106 ;; Parameters:    Size  Location     Type
 17107 ;;		None
 17108 ;; Auto vars:     Size  Location     Type
 17109 ;;		None
 17110 ;; Return value:  Size  Location     Type
 17111 ;;                  1    wreg      void 
 17112 ;; Registers used:
 17113 ;;		wreg, status,2
 17114 ;; Tracked objects:
 17115 ;;		On entry : 1F/1
 17116 ;;		On exit  : 1F/1
 17117 ;;		Unchanged: 0/0
 17118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17119 ;;      Params:         0       0       0       0       0       0       0       0
 17120 ;;      Locals:         0       0       0       0       0       0       0       0
 17121 ;;      Temps:          1       0       0       0       0       0       0       0
 17122 ;;      Totals:         1       0       0       0       0       0       0       0
 17123 ;;Total ram usage:        1 bytes
 17124 ;; Hardware stack levels used:    1
 17125 ;; This function calls:
 17126 ;;		Nothing
 17127 ;; This function is called by:
 17128 ;;		_StartPulseOutM0
 17129 ;;		_SetPulseOutLATxWork_M0_REV_POL0_OFF
 17130 ;;		_TMR2_Interrupt
 17131 ;; This function uses a non-reentrant model
 17132 ;;
 17133                           
 17134                           
 17135                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_P1
 17136  1167                     _SetPulseOutLATxWork_M0_REV_POL1_P1:
 17137                           
 17138                           ;MotorDrive.c: 3145:     pulseOutLATAWork_M0 = 0x02;
 17139                           
 17140                           ;incstack = 0
 17141                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_P1: [wreg+status,2]
 17142  1167  3002               	movlw	2
 17143  1168  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_P1
 17144  1169  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_P1,w
 17145  116A  0020               	movlb	0	; select bank0
 17146  116B  00E7               	movwf	_pulseOutLATAWork_M0
 17147                           
 17148                           ;MotorDrive.c: 3146:     pulseOutLATBWork_M0 = 0x00;
 17149  116C  01E6               	clrf	_pulseOutLATBWork_M0
 17150                           
 17151                           ;MotorDrive.c: 3147:     pulseOutLATCWork_M0 = 0x00;
 17152  116D  01E5               	clrf	_pulseOutLATCWork_M0
 17153                           
 17154                           ;MotorDrive.c: 3149:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_P2;
 17155  116E  30B2               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P2
 17156  116F  0021               	movlb	1	; select bank1
 17157  1170  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17158  1171  3011               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P2
 17159  1172  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17160                           
 17161                           ;MotorDrive.c: 3150:     OutRequestFlug = 1;
 17162  1173  01D6               	clrf	_OutRequestFlug^(0+128)
 17163  1174  0AD6               	incf	_OutRequestFlug^(0+128),f
 17164  1175  0008               	return
 17165  1176                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_P1:
 17166                           
 17167                           	psect	text126
 17168  1158                     __ptext126:	
 17169 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_P1 *****************
 17170 ;; Defined at:
 17171 ;;		line 3014 in file "MotorDrive.c"
 17172 ;; Parameters:    Size  Location     Type
 17173 ;;		None
 17174 ;; Auto vars:     Size  Location     Type
 17175 ;;		None
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  1    wreg      void 
 17178 ;; Registers used:
 17179 ;;		wreg, status,2
 17180 ;; Tracked objects:
 17181 ;;		On entry : 1F/1
 17182 ;;		On exit  : 1F/1
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17185 ;;      Params:         0       0       0       0       0       0       0       0
 17186 ;;      Locals:         0       0       0       0       0       0       0       0
 17187 ;;      Temps:          1       0       0       0       0       0       0       0
 17188 ;;      Totals:         1       0       0       0       0       0       0       0
 17189 ;;Total ram usage:        1 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; This function calls:
 17192 ;;		Nothing
 17193 ;; This function is called by:
 17194 ;;		_StartPulseOutM0
 17195 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 17196 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 17197 ;;		_TMR2_Interrupt
 17198 ;; This function uses a non-reentrant model
 17199 ;;
 17200                           
 17201                           
 17202                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_P1
 17203  1158                     _SetPulseOutLATxWork_M0_FWD_POL0_P1:
 17204                           
 17205                           ;MotorDrive.c: 3016:     pulseOutLATAWork_M0 = 0x10;
 17206                           
 17207                           ;incstack = 0
 17208                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_P1: [wreg+status,2]
 17209  1158  3010               	movlw	16
 17210  1159  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_P1
 17211  115A  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_P1,w
 17212  115B  0020               	movlb	0	; select bank0
 17213  115C  00E7               	movwf	_pulseOutLATAWork_M0
 17214                           
 17215                           ;MotorDrive.c: 3017:     pulseOutLATBWork_M0 = 0x00;
 17216  115D  01E6               	clrf	_pulseOutLATBWork_M0
 17217                           
 17218                           ;MotorDrive.c: 3018:     pulseOutLATCWork_M0 = 0x00;
 17219  115E  01E5               	clrf	_pulseOutLATCWork_M0
 17220                           
 17221                           ;MotorDrive.c: 3020:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P2;
 17222  115F  3085               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P2
 17223  1160  0021               	movlb	1	; select bank1
 17224  1161  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17225  1162  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P2
 17226  1163  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17227                           
 17228                           ;MotorDrive.c: 3021:     OutRequestFlug = 1;
 17229  1164  01D6               	clrf	_OutRequestFlug^(0+128)
 17230  1165  0AD6               	incf	_OutRequestFlug^(0+128),f
 17231  1166  0008               	return
 17232  1167                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P1:
 17233                           
 17234                           	psect	text127
 17235  1149                     __ptext127:	
 17236 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_P1 *****************
 17237 ;; Defined at:
 17238 ;;		line 3059 in file "MotorDrive.c"
 17239 ;; Parameters:    Size  Location     Type
 17240 ;;		None
 17241 ;; Auto vars:     Size  Location     Type
 17242 ;;		None
 17243 ;; Return value:  Size  Location     Type
 17244 ;;                  1    wreg      void 
 17245 ;; Registers used:
 17246 ;;		wreg, status,2
 17247 ;; Tracked objects:
 17248 ;;		On entry : 1F/1
 17249 ;;		On exit  : 1F/1
 17250 ;;		Unchanged: 0/0
 17251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17252 ;;      Params:         0       0       0       0       0       0       0       0
 17253 ;;      Locals:         0       0       0       0       0       0       0       0
 17254 ;;      Temps:          1       0       0       0       0       0       0       0
 17255 ;;      Totals:         1       0       0       0       0       0       0       0
 17256 ;;Total ram usage:        1 bytes
 17257 ;; Hardware stack levels used:    1
 17258 ;; This function calls:
 17259 ;;		Nothing
 17260 ;; This function is called by:
 17261 ;;		_StartPulseOutM0
 17262 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17263 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 17264 ;;		_TMR2_Interrupt
 17265 ;; This function uses a non-reentrant model
 17266 ;;
 17267                           
 17268                           
 17269                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_P1
 17270  1149                     _SetPulseOutLATxWork_M0_FWD_POL1_P1:
 17271                           
 17272                           ;MotorDrive.c: 3061:     pulseOutLATAWork_M0 = 0x20;
 17273                           
 17274                           ;incstack = 0
 17275                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_P1: [wreg+status,2]
 17276  1149  3020               	movlw	32
 17277  114A  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_P1
 17278  114B  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_P1,w
 17279  114C  0020               	movlb	0	; select bank0
 17280  114D  00E7               	movwf	_pulseOutLATAWork_M0
 17281                           
 17282                           ;MotorDrive.c: 3062:     pulseOutLATBWork_M0 = 0x00;
 17283  114E  01E6               	clrf	_pulseOutLATBWork_M0
 17284                           
 17285                           ;MotorDrive.c: 3063:     pulseOutLATCWork_M0 = 0x00;
 17286  114F  01E5               	clrf	_pulseOutLATCWork_M0
 17287                           
 17288                           ;MotorDrive.c: 3065:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P2;
 17289  1150  3094               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P2
 17290  1151  0021               	movlb	1	; select bank1
 17291  1152  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17292  1153  3011               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P2
 17293  1154  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17294                           
 17295                           ;MotorDrive.c: 3066:     OutRequestFlug = 1;
 17296  1155  01D6               	clrf	_OutRequestFlug^(0+128)
 17297  1156  0AD6               	incf	_OutRequestFlug^(0+128),f
 17298  1157  0008               	return
 17299  1158                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P1:
 17300                           
 17301                           	psect	text128
 17302  113A                     __ptext128:	
 17303 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 *****************
 17304 ;; Defined at:
 17305 ;;		line 3353 in file "MotorDrive.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;		None
 17308 ;; Auto vars:     Size  Location     Type
 17309 ;;		None
 17310 ;; Return value:  Size  Location     Type
 17311 ;;                  1    wreg      void 
 17312 ;; Registers used:
 17313 ;;		wreg, status,2
 17314 ;; Tracked objects:
 17315 ;;		On entry : 1F/1
 17316 ;;		On exit  : 1F/1
 17317 ;;		Unchanged: 0/0
 17318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17319 ;;      Params:         0       0       0       0       0       0       0       0
 17320 ;;      Locals:         0       0       0       0       0       0       0       0
 17321 ;;      Temps:          1       0       0       0       0       0       0       0
 17322 ;;      Totals:         1       0       0       0       0       0       0       0
 17323 ;;Total ram usage:        1 bytes
 17324 ;; Hardware stack levels used:    1
 17325 ;; This function calls:
 17326 ;;		Nothing
 17327 ;; This function is called by:
 17328 ;;		_StartPulseOutM0
 17329 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 17330 ;;		_TMR2_Interrupt
 17331 ;; This function uses a non-reentrant model
 17332 ;;
 17333                           
 17334                           
 17335                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 17336  113A                     _SetPulseOutLATxWork_M0_SHAKE_POL0_P0:
 17337                           
 17338                           ;MotorDrive.c: 3355:     pulseOutLATAWork_M0 = 0x10;
 17339                           
 17340                           ;incstack = 0
 17341                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL0_P0: [wreg+status,2]
 17342  113A  3010               	movlw	16
 17343  113B  00F5               	movwf	??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 17344  113C  0875               	movf	??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0,w
 17345  113D  0020               	movlb	0	; select bank0
 17346  113E  00E7               	movwf	_pulseOutLATAWork_M0
 17347                           
 17348                           ;MotorDrive.c: 3356:     pulseOutLATBWork_M0 = 0x00;
 17349  113F  01E6               	clrf	_pulseOutLATBWork_M0
 17350                           
 17351                           ;MotorDrive.c: 3357:     pulseOutLATCWork_M0 = 0x00;
 17352  1140  01E5               	clrf	_pulseOutLATCWork_M0
 17353                           
 17354                           ;MotorDrive.c: 3359:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL0_OFF;
 17355  1141  3006               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 17356  1142  0021               	movlb	1	; select bank1
 17357  1143  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17358  1144  3013               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 17359  1145  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17360                           
 17361                           ;MotorDrive.c: 3360:     OutRequestFlug = 1;
 17362  1146  01D6               	clrf	_OutRequestFlug^(0+128)
 17363  1147  0AD6               	incf	_OutRequestFlug^(0+128),f
 17364  1148  0008               	return
 17365  1149                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:
 17366                           
 17367                           	psect	text129
 17368  112B                     __ptext129:	
 17369 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 *****************
 17370 ;; Defined at:
 17371 ;;		line 3416 in file "MotorDrive.c"
 17372 ;; Parameters:    Size  Location     Type
 17373 ;;		None
 17374 ;; Auto vars:     Size  Location     Type
 17375 ;;		None
 17376 ;; Return value:  Size  Location     Type
 17377 ;;                  1    wreg      void 
 17378 ;; Registers used:
 17379 ;;		wreg, status,2
 17380 ;; Tracked objects:
 17381 ;;		On entry : 1F/1
 17382 ;;		On exit  : 1F/1
 17383 ;;		Unchanged: 0/0
 17384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17385 ;;      Params:         0       0       0       0       0       0       0       0
 17386 ;;      Locals:         0       0       0       0       0       0       0       0
 17387 ;;      Temps:          1       0       0       0       0       0       0       0
 17388 ;;      Totals:         1       0       0       0       0       0       0       0
 17389 ;;Total ram usage:        1 bytes
 17390 ;; Hardware stack levels used:    1
 17391 ;; This function calls:
 17392 ;;		Nothing
 17393 ;; This function is called by:
 17394 ;;		_StartPulseOutM0
 17395 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 17396 ;;		_TMR2_Interrupt
 17397 ;; This function uses a non-reentrant model
 17398 ;;
 17399                           
 17400                           
 17401                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 17402  112B                     _SetPulseOutLATxWork_M0_SHAKE_POL1_P0:
 17403                           
 17404                           ;MotorDrive.c: 3418:     pulseOutLATAWork_M0 = 0x20;
 17405                           
 17406                           ;incstack = 0
 17407                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL1_P0: [wreg+status,2]
 17408  112B  3020               	movlw	32
 17409  112C  00F5               	movwf	??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 17410  112D  0875               	movf	??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0,w
 17411  112E  0020               	movlb	0	; select bank0
 17412  112F  00E7               	movwf	_pulseOutLATAWork_M0
 17413                           
 17414                           ;MotorDrive.c: 3419:     pulseOutLATBWork_M0 = 0x00;
 17415  1130  01E6               	clrf	_pulseOutLATBWork_M0
 17416                           
 17417                           ;MotorDrive.c: 3420:     pulseOutLATCWork_M0 = 0x00;
 17418  1131  01E5               	clrf	_pulseOutLATCWork_M0
 17419                           
 17420                           ;MotorDrive.c: 3422:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL1_OFF;
 17421  1132  3018               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 17422  1133  0021               	movlb	1	; select bank1
 17423  1134  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 17424  1135  3013               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 17425  1136  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 17426                           
 17427                           ;MotorDrive.c: 3423:     OutRequestFlug = 1;
 17428  1137  01D6               	clrf	_OutRequestFlug^(0+128)
 17429  1138  0AD6               	incf	_OutRequestFlug^(0+128),f
 17430  1139  0008               	return
 17431  113A                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:
 17432                           
 17433                           	psect	text130
 17434  15A3                     __ptext130:	
 17435 ;; *************** function _ComparatorOn *****************
 17436 ;; Defined at:
 17437 ;;		line 2682 in file "MotorDrive.c"
 17438 ;; Parameters:    Size  Location     Type
 17439 ;;  motor_no        1    wreg     unsigned char 
 17440 ;; Auto vars:     Size  Location     Type
 17441 ;;  motor_no        1    0[COMMON] unsigned char 
 17442 ;; Return value:  Size  Location     Type
 17443 ;;                  1    wreg      void 
 17444 ;; Registers used:
 17445 ;;		wreg, status,2, status,0
 17446 ;; Tracked objects:
 17447 ;;		On entry : 1F/1
 17448 ;;		On exit  : 1F/0
 17449 ;;		Unchanged: 0/0
 17450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17451 ;;      Params:         0       0       0       0       0       0       0       0
 17452 ;;      Locals:         1       0       0       0       0       0       0       0
 17453 ;;      Temps:          0       0       0       0       0       0       0       0
 17454 ;;      Totals:         1       0       0       0       0       0       0       0
 17455 ;;Total ram usage:        1 bytes
 17456 ;; Hardware stack levels used:    1
 17457 ;; This function calls:
 17458 ;;		Nothing
 17459 ;; This function is called by:
 17460 ;;		_TMR2_Interrupt
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           
 17465                           ;psect for function _ComparatorOn
 17466  15A3                     _ComparatorOn:
 17467                           
 17468                           ;incstack = 0
 17469                           ; Regs used in _ComparatorOn: [wreg+status,2+status,0]
 17470                           ;ComparatorOn@motor_no stored from wreg
 17471  15A3  00F5               	movwf	ComparatorOn@motor_no
 17472                           
 17473                           ;MotorDrive.c: 2682: void ComparatorOn(UB motor_no);MotorDrive.c: 2683: {;MotorDrive.c: 
      +                          2684:     if (motor_no == 0) {
 17474  15A4  0875               	movf	ComparatorOn@motor_no,w
 17475  15A5  1D03               	btfss	3,2
 17476  15A6  2DB3               	goto	i1l4346
 17477                           
 17478                           ;MotorDrive.c: 2685:         CM1CON0 = (0x14 | 0x80);
 17479  15A7  3094               	movlw	148
 17480  15A8  0022               	movlb	2	; select bank2
 17481  15A9  0091               	movwf	17	;volatile
 17482                           
 17483                           ;MotorDrive.c: 2686:         if (polarityBit & 0x01) {
 17484  15AA  1C71               	btfss	_polarityBit,0
 17485  15AB  2DAE               	goto	i1l4342
 17486                           
 17487                           ;MotorDrive.c: 2688:             CM1CON1 = (0x90 | 0x00);
 17488  15AC  3090               	movlw	144
 17489  15AD  2DAF               	goto	L25
 17490  15AE                     i1l4342:	
 17491                           ;MotorDrive.c: 2689:         } else {
 17492                           
 17493                           
 17494                           ;MotorDrive.c: 2691:             CM1CON1 = (0x90 | 0x01);
 17495  15AE  3091               	movlw	145
 17496  15AF                     L25:
 17497  15AF  0092               	movwf	18	;volatile
 17498                           
 17499                           ;MotorDrive.c: 2693:         PIR2bits.C1IF = 0;
 17500  15B0  0020               	movlb	0	; select bank0
 17501  15B1  1292               	bcf	18,5	;volatile
 17502                           
 17503                           ;MotorDrive.c: 2695:     } else {
 17504  15B2  0008               	return
 17505  15B3                     i1l4346:
 17506                           
 17507                           ;MotorDrive.c: 2697:         CM2CON0 = (0x14 | 0x80);
 17508  15B3  3094               	movlw	148
 17509  15B4  0022               	movlb	2	; select bank2
 17510  15B5  0093               	movwf	19	;volatile
 17511                           
 17512                           ;MotorDrive.c: 2698:         if (polarityBit & 0x02) {
 17513  15B6  1CF1               	btfss	_polarityBit,1
 17514  15B7  2DBA               	goto	i1l4352
 17515                           
 17516                           ;MotorDrive.c: 2700:             CM2CON1 = (0x90 | 0x02);
 17517  15B8  3092               	movlw	146
 17518  15B9  2DBB               	goto	L26
 17519  15BA                     i1l4352:	
 17520                           ;MotorDrive.c: 2701:         } else {
 17521                           
 17522                           
 17523                           ;MotorDrive.c: 2703:             CM2CON1 = (0x90 | 0x03);
 17524  15BA  3093               	movlw	147
 17525  15BB                     L26:
 17526  15BB  0094               	movwf	20	;volatile
 17527                           
 17528                           ;MotorDrive.c: 2705:         PIR2bits.C2IF = 0;
 17529  15BC  0020               	movlb	0	; select bank0
 17530  15BD  1312               	bcf	18,6	;volatile
 17531  15BE  0008               	return
 17532  15BF                     __end_of_ComparatorOn:
 17533                           
 17534                           	psect	text131
 17535  13CC                     __ptext131:	
 17536 ;; *************** function _ComparatorOff *****************
 17537 ;; Defined at:
 17538 ;;		line 2663 in file "MotorDrive.c"
 17539 ;; Parameters:    Size  Location     Type
 17540 ;;  motor_no        1    wreg     unsigned char 
 17541 ;; Auto vars:     Size  Location     Type
 17542 ;;  motor_no        1    0[COMMON] unsigned char 
 17543 ;; Return value:  Size  Location     Type
 17544 ;;                  1    wreg      void 
 17545 ;; Registers used:
 17546 ;;		wreg, status,2, status,0
 17547 ;; Tracked objects:
 17548 ;;		On entry : 1F/1
 17549 ;;		On exit  : 1F/0
 17550 ;;		Unchanged: 0/0
 17551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17552 ;;      Params:         0       0       0       0       0       0       0       0
 17553 ;;      Locals:         1       0       0       0       0       0       0       0
 17554 ;;      Temps:          0       0       0       0       0       0       0       0
 17555 ;;      Totals:         1       0       0       0       0       0       0       0
 17556 ;;Total ram usage:        1 bytes
 17557 ;; Hardware stack levels used:    1
 17558 ;; This function calls:
 17559 ;;		Nothing
 17560 ;; This function is called by:
 17561 ;;		_TMR2_Interrupt
 17562 ;; This function uses a non-reentrant model
 17563 ;;
 17564                           
 17565                           
 17566                           ;psect for function _ComparatorOff
 17567  13CC                     _ComparatorOff:
 17568                           
 17569                           ;incstack = 0
 17570                           ; Regs used in _ComparatorOff: [wreg+status,2+status,0]
 17571                           ;ComparatorOff@motor_no stored from wreg
 17572  13CC  00F5               	movwf	ComparatorOff@motor_no
 17573                           
 17574                           ;MotorDrive.c: 2663: void ComparatorOff(UB motor_no);MotorDrive.c: 2664: {;MotorDrive.c:
      +                           2665:     if (motor_no == 0) {
 17575  13CD  0875               	movf	ComparatorOff@motor_no,w
 17576  13CE  1D03               	btfss	3,2
 17577  13CF  2BD6               	goto	i1l4360
 17578                           
 17579                           ;MotorDrive.c: 2666:         CM1CON0 = 0x14;
 17580  13D0  3014               	movlw	20
 17581  13D1  0022               	movlb	2	; select bank2
 17582  13D2  0091               	movwf	17	;volatile
 17583                           
 17584                           ;MotorDrive.c: 2667:         CM1CON1 = 0x90;
 17585  13D3  3090               	movlw	144
 17586  13D4  0092               	movwf	18	;volatile
 17587                           
 17588                           ;MotorDrive.c: 2668:     } else {
 17589  13D5  2BDB               	goto	i1l4362
 17590  13D6                     i1l4360:
 17591                           
 17592                           ;MotorDrive.c: 2669:         CM2CON0 = 0x14;
 17593  13D6  3014               	movlw	20
 17594  13D7  0022               	movlb	2	; select bank2
 17595  13D8  0093               	movwf	19	;volatile
 17596                           
 17597                           ;MotorDrive.c: 2670:         CM2CON1 = 0x90;
 17598  13D9  3090               	movlw	144
 17599  13DA  0094               	movwf	20	;volatile
 17600  13DB                     i1l4362:
 17601                           
 17602                           ;MotorDrive.c: 2672:     PIR2bits.C1IF = 0;
 17603  13DB  0020               	movlb	0	; select bank0
 17604  13DC  1292               	bcf	18,5	;volatile
 17605                           
 17606                           ;MotorDrive.c: 2673:     PIR2bits.C2IF = 0;
 17607  13DD  1312               	bcf	18,6	;volatile
 17608  13DE  0008               	return
 17609  13DF                     __end_of_ComparatorOff:
 17610                           
 17611                           	psect	text132
 17612  10D0                     __ptext132:	
 17613 ;; *************** function _TMR1_ISR *****************
 17614 ;; Defined at:
 17615 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 17616 ;; Parameters:    Size  Location     Type
 17617 ;;		None
 17618 ;; Auto vars:     Size  Location     Type
 17619 ;;		None
 17620 ;; Return value:  Size  Location     Type
 17621 ;;                  1    wreg      void 
 17622 ;; Registers used:
 17623 ;;		wreg, status,2, status,0, pclath, cstack
 17624 ;; Tracked objects:
 17625 ;;		On entry : 1F/0
 17626 ;;		On exit  : 0/0
 17627 ;;		Unchanged: 0/0
 17628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17629 ;;      Params:         0       0       0       0       0       0       0       0
 17630 ;;      Locals:         0       0       0       0       0       0       0       0
 17631 ;;      Temps:          0       0       0       0       0       0       0       0
 17632 ;;      Totals:         0       0       0       0       0       0       0       0
 17633 ;;Total ram usage:        0 bytes
 17634 ;; Hardware stack levels used:    1
 17635 ;; Hardware stack levels required when called:    2
 17636 ;; This function calls:
 17637 ;;		_TMR1_CallBack
 17638 ;;		_TMR1_WriteTimer
 17639 ;; This function is called by:
 17640 ;;		_INTERRUPT_InterruptManager
 17641 ;; This function uses a non-reentrant model
 17642 ;;
 17643                           
 17644                           
 17645                           ;psect for function _TMR1_ISR
 17646  10D0                     _TMR1_ISR:
 17647                           
 17648                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 17649                           
 17650                           ;incstack = 0
 17651                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 17652  10D0  1011               	bcf	17,0	;volatile
 17653                           
 17654                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 17655  10D1  0022               	movlb	2	; select bank2
 17656  10D2  086B               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 17657  10D3  00F6               	movwf	TMR1_WriteTimer@timerVal+1
 17658  10D4  086A               	movf	_timer1ReloadVal^(0+256),w	;volatile
 17659  10D5  00F5               	movwf	TMR1_WriteTimer@timerVal
 17660  10D6  3191  211C  3190   	fcall	_TMR1_WriteTimer
 17661                           
 17662                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 17663  10D9  3190  20AF         	fcall	_TMR1_CallBack
 17664  10DB  0008               	return
 17665  10DC                     __end_of_TMR1_ISR:
 17666                           
 17667                           	psect	text133
 17668  111C                     __ptext133:	
 17669 ;; *************** function _TMR1_WriteTimer *****************
 17670 ;; Defined at:
 17671 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 17672 ;; Parameters:    Size  Location     Type
 17673 ;;  timerVal        2    0[COMMON] unsigned short 
 17674 ;; Auto vars:     Size  Location     Type
 17675 ;;		None
 17676 ;; Return value:  Size  Location     Type
 17677 ;;                  1    wreg      void 
 17678 ;; Registers used:
 17679 ;;		wreg
 17680 ;; Tracked objects:
 17681 ;;		On entry : 1F/2
 17682 ;;		On exit  : 1F/0
 17683 ;;		Unchanged: 0/0
 17684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17685 ;;      Params:         2       0       0       0       0       0       0       0
 17686 ;;      Locals:         0       0       0       0       0       0       0       0
 17687 ;;      Temps:          0       0       0       0       0       0       0       0
 17688 ;;      Totals:         2       0       0       0       0       0       0       0
 17689 ;;Total ram usage:        2 bytes
 17690 ;; Hardware stack levels used:    1
 17691 ;; This function calls:
 17692 ;;		Nothing
 17693 ;; This function is called by:
 17694 ;;		_TMR1_ISR
 17695 ;; This function uses a non-reentrant model
 17696 ;;
 17697                           
 17698                           
 17699                           ;psect for function _TMR1_WriteTimer
 17700  111C                     _TMR1_WriteTimer:
 17701                           
 17702                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 17703                           
 17704                           ;incstack = 0
 17705                           ; Regs used in _TMR1_WriteTimer: [wreg]
 17706  111C  0020               	movlb	0	; select bank0
 17707  111D  1D18               	btfss	24,2	;volatile
 17708  111E  2926               	goto	i1l5636
 17709                           
 17710                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 17711  111F  1018               	bcf	24,0	;volatile
 17712                           
 17713                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 17714  1120  0876               	movf	TMR1_WriteTimer@timerVal+1,w
 17715  1121  0097               	movwf	23	;volatile
 17716                           
 17717                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 17718  1122  0875               	movf	TMR1_WriteTimer@timerVal,w
 17719  1123  0096               	movwf	22	;volatile
 17720                           
 17721                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 17722  1124  1418               	bsf	24,0	;volatile
 17723                           
 17724                           ;mcc_generated_files/tmr1.c: 133:     }
 17725  1125  0008               	return
 17726  1126                     i1l5636:
 17727                           
 17728                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 17729  1126  0876               	movf	TMR1_WriteTimer@timerVal+1,w
 17730  1127  0097               	movwf	23	;volatile
 17731                           
 17732                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 17733  1128  0875               	movf	TMR1_WriteTimer@timerVal,w
 17734  1129  0096               	movwf	22	;volatile
 17735  112A  0008               	return
 17736  112B                     __end_of_TMR1_WriteTimer:
 17737                           
 17738                           	psect	text134
 17739  10AF                     __ptext134:	
 17740 ;; *************** function _TMR1_CallBack *****************
 17741 ;; Defined at:
 17742 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 17743 ;; Parameters:    Size  Location     Type
 17744 ;;		None
 17745 ;; Auto vars:     Size  Location     Type
 17746 ;;		None
 17747 ;; Return value:  Size  Location     Type
 17748 ;;                  1    wreg      void 
 17749 ;; Registers used:
 17750 ;;		wreg, status,2, status,0, pclath, cstack
 17751 ;; Tracked objects:
 17752 ;;		On entry : 1F/0
 17753 ;;		On exit  : 0/0
 17754 ;;		Unchanged: 0/0
 17755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17756 ;;      Params:         0       0       0       0       0       0       0       0
 17757 ;;      Locals:         0       0       0       0       0       0       0       0
 17758 ;;      Temps:          0       0       0       0       0       0       0       0
 17759 ;;      Totals:         0       0       0       0       0       0       0       0
 17760 ;;Total ram usage:        0 bytes
 17761 ;; Hardware stack levels used:    1
 17762 ;; Hardware stack levels required when called:    1
 17763 ;; This function calls:
 17764 ;;		Absolute function
 17765 ;;		_TMR1_DefaultInterruptHandler
 17766 ;; This function is called by:
 17767 ;;		_TMR1_ISR
 17768 ;; This function uses a non-reentrant model
 17769 ;;
 17770                           
 17771                           
 17772                           ;psect for function _TMR1_CallBack
 17773  10AF                     _TMR1_CallBack:
 17774                           
 17775                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 17776                           
 17777                           ;incstack = 0
 17778                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 17779  10AF  0022               	movlb	2	; select bank2
 17780  10B0  0868               	movf	_TMR1_InterruptHandler^(0+256),w
 17781  10B1  0469               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 17782  10B2  1903               	btfsc	3,2
 17783  10B3  0008               	return
 17784                           
 17785                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 17786  10B4  0869               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 17787  10B5  008A               	movwf	10
 17788  10B6  0868               	movf	_TMR1_InterruptHandler^(0+256),w
 17789  10B7  000A               	callw
 17790  10B8  3190               	pagesel	$
 17791  10B9  0008               	return
 17792  10BA                     __end_of_TMR1_CallBack:
 17793                           
 17794                           	psect	text135
 17795  104F                     __ptext135:	
 17796 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 17797 ;; Defined at:
 17798 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 17799 ;; Parameters:    Size  Location     Type
 17800 ;;		None
 17801 ;; Auto vars:     Size  Location     Type
 17802 ;;		None
 17803 ;; Return value:  Size  Location     Type
 17804 ;;                  1    wreg      void 
 17805 ;; Registers used:
 17806 ;;		None
 17807 ;; Tracked objects:
 17808 ;;		On entry : 1F/2
 17809 ;;		On exit  : 1F/2
 17810 ;;		Unchanged: 1F/0
 17811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17812 ;;      Params:         0       0       0       0       0       0       0       0
 17813 ;;      Locals:         0       0       0       0       0       0       0       0
 17814 ;;      Temps:          0       0       0       0       0       0       0       0
 17815 ;;      Totals:         0       0       0       0       0       0       0       0
 17816 ;;Total ram usage:        0 bytes
 17817 ;; Hardware stack levels used:    1
 17818 ;; This function calls:
 17819 ;;		Nothing
 17820 ;; This function is called by:
 17821 ;;		_TMR1_Initialize
 17822 ;;		_TMR1_CallBack
 17823 ;; This function uses a non-reentrant model
 17824 ;;
 17825                           
 17826                           
 17827                           ;psect for function _TMR1_DefaultInterruptHandler
 17828  104F                     _TMR1_DefaultInterruptHandler:
 17829                           
 17830                           ;incstack = 0
 17831                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 17832  104F  0008               	return
 17833  1050                     __end_of_TMR1_DefaultInterruptHandler:
 17834  007E                     btemp	set	126	;btemp
 17835  007E                     int$flags	set	126
 17836  007E                     wtemp0	set	126
 17837  2138                     
 17838                           	psect	config
 17839                           
 17840                           ;Config register CONFIG1 @ 0x8007
 17841                           ;	Oscillator Selection Bits
 17842                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17843                           ;	Watchdog Timer Enable
 17844                           ;	WDTE = OFF, WDT disabled
 17845                           ;	Power-up Timer Enable
 17846                           ;	PWRTE = OFF, PWRT disabled
 17847                           ;	MCLR Pin Function Select
 17848                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17849                           ;	Flash Program Memory Code Protection
 17850                           ;	CP = OFF, Program memory code protection is disabled
 17851                           ;	Brown-out Reset Enable
 17852                           ;	BOREN = ON, Brown-out Reset enabled
 17853                           ;	Clock Out Enable
 17854                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17855                           ;	Internal/External Switchover Mode
 17856                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 17857                           ;	Fail-Safe Clock Monitor Enable
 17858                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17859  8007                     	org	32775
 17860  8007  3FE4               	dw	16356
 17861                           
 17862                           ;Config register CONFIG2 @ 0x8008
 17863                           ;	Flash Memory Self-Write Protection
 17864                           ;	WRT = OFF, Write protection off
 17865                           ;	Stack Overflow/Underflow Reset Enable
 17866                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17867                           ;	Brown-out Reset Voltage Selection
 17868                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17869                           ;	Low-Power Brown Out Reset
 17870                           ;	LPBOR = OFF, Low-Power BOR is disabled
 17871                           ;	Low-Voltage Programming Enable
 17872                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
 17873  8008                     	org	32776
 17874  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    94
    Data        0
    BSS         235
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     47      80
    BANK1            80      1      80
    BANK2            80      2      80
    BANK3            72      1      47
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    SPIControl_ExecuteCommand$2146	const PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    SPIControl_ExecuteCommand$2141	const PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    SpiCmmandFunction	const PTR FTN(unsigned char ,)void [14] size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    CorrectPosition@pos	PTR short  size(2) Largest target is 92
		 -> detectBasePosition(BANK2[4]), missingDetectFinePosition(BANK1[2]), detectLoadPosition(BIGRAM[92]), currentPosition(BANK0[4]), 
		 -> targetPosition(BANK2[4]), 

    detectLoadPositionTypePtr	PTR unsigned char [2] size(1) Largest target is 46
		 -> detectLoadPositionType(BANK2[46]), 

    detectLoadPositionPtr	PTR short [2] size(2) Largest target is 92
		 -> detectLoadPosition(BIGRAM[92]), 

    sp__GetAfterDetectLoadFunc	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    SetAfterDetectLoadFunc@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> VerifyHandPosition_LoadPosition(), AfterDetectedLoadPosition(), 

    SetAfterMotorStopFunc@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), SPIControl_SetNotification(), 

    cbAfterMotorStopFunc	PTR FTN(unsigned char ,)void [2] size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), SPIControl_SetNotification(), 
		 -> NULL(NULL[0]), 

    WatchMotorDriveFinish@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), VerifyHandPosition_LoadPosition(), 
		 -> SPIControl_SetNotification(), AfterDetectedLoadPosition(), NULL(NULL[0]), 

    cbAfterDetectLoadFunc	PTR FTN(unsigned char ,)void [2] size(2) Largest target is 1
		 -> VerifyHandPosition_LoadPosition(), AfterDetectedLoadPosition(), NULL(NULL[0]), 

    spkOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_SPK_SHORT(), SetDataTRISxWork_SPK_OPEN(), Absolute function(), 

    m1PulseOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_M1_SPK_POL1_SHORT(), SetDataTRISxWork_M1_SPK_POL1_OPEN(), SetPulseOutLATxWork_M1_SHAKE_POL1_OFF(), SetDataTRISxWork_M1_SPK_POL0_SHORT(), 
		 -> SetDataTRISxWork_M1_SPK_POL0_OPEN(), SetPulseOutLATxWork_M1_SHAKE_POL0_OFF(), SetPulseOutLATxWork_M1_REV_POL1_OFF(), SetPulseOutLATxWork_M1_REV_POL1_P2(), 
		 -> SetPulseOutLATxWork_M1_REV_POL0_OFF(), SetPulseOutLATxWork_M1_REV_POL0_P2(), SetPulseOutLATxWork_M1_FWD_POL1_OFF(), SetPulseOutLATxWork_M1_FWD_POL1_P2(), 
		 -> SetPulseOutLATxWork_M1_FWD_POL0_OFF(), SetPulseOutLATxWork_M1_FWD_POL0_P2(), SetPulseOutLATxWork_M1_REV_POL0_P1(), SetPulseOutLATxWork_M1_REV_POL1_P1(), 
		 -> SetPulseOutLATxWork_M1_FWD_POL0_P1(), SetPulseOutLATxWork_M1_FWD_POL1_P1(), SetPulseOutLATxWork_M1_SHAKE_POL0_P0(), SetPulseOutLATxWork_M1_SHAKE_POL1_P0(), 
		 -> Absolute function(), 

    m0PulseOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_M0_SPK_POL1_SHORT(), SetDataTRISxWork_M0_SPK_POL1_OPEN(), SetPulseOutLATxWork_M0_SHAKE_POL1_OFF(), SetDataTRISxWork_M0_SPK_POL0_SHORT(), 
		 -> SetDataTRISxWork_M0_SPK_POL0_OPEN(), SetPulseOutLATxWork_M0_SHAKE_POL0_OFF(), SetPulseOutLATxWork_M0_REV_POL1_OFF(), SetPulseOutLATxWork_M0_REV_POL1_P2(), 
		 -> SetPulseOutLATxWork_M0_REV_POL0_OFF(), SetPulseOutLATxWork_M0_REV_POL0_P2(), SetPulseOutLATxWork_M0_FWD_POL1_OFF(), SetPulseOutLATxWork_M0_FWD_POL1_P2(), 
		 -> SetPulseOutLATxWork_M0_FWD_POL0_OFF(), SetPulseOutLATxWork_M0_FWD_POL0_P2(), SetPulseOutLATxWork_M0_REV_POL0_P1(), SetPulseOutLATxWork_M0_REV_POL1_P1(), 
		 -> SetPulseOutLATxWork_M0_FWD_POL0_P1(), SetPulseOutLATxWork_M0_FWD_POL1_P1(), SetPulseOutLATxWork_M0_SHAKE_POL0_P0(), SetPulseOutLATxWork_M0_SHAKE_POL1_P0(), 
		 -> Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Interrupt_SPK(), TMR2_Interrupt(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Interrupt_SPK(), TMR2_Interrupt(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_TMR2_Interrupt
    _SpkVrsCheck->_ExcitatingOutOff
    _ExcitatingOutOn->i1_SetOutPutLATX
    _ExcitatingOutOff->i1_SetExcitatingOutOffData
    i1_SetExcitatingOutOffData->i1_SetOutPutLATX
    _TMR2_Interrupt->_VrsCheck
    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _SPIControl_RecieveComannd->_WatchMotorDriveFinish
    _WatchMotorDriveFinish->_VerifyHandPosition_LoadPosition
    _VerifyHandPosition_LoadPosition->_MoveTargetPosition
    _SetMotorCorrectPositionStart->_InitPositionSearch
    _AfterDetectedLoadPosition->_MoveTargetPosition
    _UpdateCurrentPositionByFinePosition->___wmul
    _UpdataHandPosition->_CorrectPosition
    _SaveLoadPosition->___wmul
    _MoveTargetPosition->_CalcMotorStepCounter
    _DetermineBasePosition->_CorrectPosition
    _SPIControl_ExecuteCommand->_SpiCmdFunc_FwdPulseWithCorrect
    _SetMotorStopSPK->_SetExcitatingOutOffData
    _SetMotorStopSPK->_TMR2_SetInterruptHandler
    _SetMotorStartSPK->_SetExcitatingOutOffData
    _SetMotorStartSPK->_TMR2_SetInterruptHandler
    _SetExcitatingOutOffData->_SetOutPutLATX
    _SetMotorPositionSearchStart->_InitPositionSearch
    _InitPositionSearch->___wmul
    _UpdateTargetPosition->_CorrectPosition
    _CalcMotorStepCounter->_PriorUpdateCorrentPosition
    _SetMotorStepCounter->_PriorUpdateCorrentPosition
    _PriorUpdateCorrentPosition->_CorrectPosition
    _CorrectPosition->___wmul
    _SetMotorStart->_StartPulseOutM0
    _SetMotorStart->_StartPulseOutM1

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SPIControl_RecieveComannd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _SPIControl_RecieveComannd->_WatchMotorDriveFinish

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  233837
                                              0 BANK3      1     1      0
             _InitPulsePositionTable
          _SPIControl_RecieveComannd
                           _SPI_Open
                  _SYSTEM_Initialize
              _SetMotorAddShakePulse
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
                     _TMR1_StopTimer
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorAddShakePulse                                4     3      1     242
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     512
                     _DAC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     391
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Open                                             4     4      0      88
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPIControl_RecieveComannd                            1     1      0  226918
                                              0 BANK1      1     1      0
          _SPIControl_ExecuteCommand
                       _SPI_ReadByte
              _WatchMotorDriveFinish
 ---------------------------------------------------------------------------------
 (2) _WatchMotorDriveFinish                                3     3      0  151040
                                             46 BANK0      1     1      0
                                              0 BANK2      2     2      0
          _AfterDetectedLoadPosition *
         _SPIControl_SetNotification *
         _SetFwdPulseWithCorrectProc *
       _SpiCmdFunc_DisableExcitating *
        _SpiCmdFunc_EnableExcitating *
          _SpiCmdFunc_FwdPulseNormal *
     _SpiCmdFunc_FwdPulsePositionCtl *
     _SpiCmdFunc_FwdPulseWithCorrect *
       _SpiCmdFunc_FwdPulseWithShake *
          _SpiCmdFunc_RevPulseNormal *
     _SpiCmdFunc_RevPulsePositionCtl *
      _SpiCmdFunc_Search1008Position *
      _SpiCmdFunc_SearchBasePosition *
      _SpiCmdFunc_SearchLoadPosition *
          _SpiCmdFunc_StartDetectVrs *
           _SpiCmdFunc_StopDetectVrs *
                    _SpiCmdFunc_Test *
    _VerifyHandPosition_LoadPosition *
 ---------------------------------------------------------------------------------
 (3) _VerifyHandPosition_LoadPosition                     19    18      1   21394
                                             29 BANK0     17    16      1
                    _CorrectPosition
                 _MoveTargetPosition
       _SetMotorCorrectPositionStart
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetMotorCorrectPositionStart                         3     3      0    6392
                                             16 BANK0      3     3      0
                 _InitPositionSearch
             _SetAfterDetectLoadFunc
 ---------------------------------------------------------------------------------
 (3) _SPIControl_SetNotification                           2     1      1       0
                                             29 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _AfterDetectedLoadPosition                           11    10      1   42663
                                             29 BANK0     11    10      1
               _ActivateHandPosition
                    _CorrectPosition
              _DetermineBasePosition
                 _InitPositionSearch
                 _MoveTargetPosition
                   _SaveLoadPosition
             _SetAfterDetectLoadFunc
              _SetAfterMotorStopFunc
                       _SetDriveType
                 _SetMotorBitMotorNo
                      _SetMotorStart
                 _UpdataHandPosition
_UpdateCurrentPositionByFinePosition
 ---------------------------------------------------------------------------------
 (4) _UpdateCurrentPositionByFinePosition                 14    14      0    5517
                                              6 BANK0     12    12      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _UpdataHandPosition                                  12    12      0    6752
                                             13 BANK0     12    12      0
                    _CorrectPosition
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetMotorBitMotorNo                                   3     3      0      62
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _SaveLoadPosition                                    18    18      0    5480
                                              6 BANK0     18    18      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _MoveTargetPosition                                   2     2      0    7528
                                             27 BANK0      2     2      0
               _CalcMotorStepCounter
                  _SetMotorFrequency
                      _SetMotorStart
 ---------------------------------------------------------------------------------
 (4) _DetermineBasePosition                               12    12      0    7273
                                             13 BANK0     12    12      0
                    _CorrectPosition
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ActivateHandPosition                                 3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _SPI_ReadByte                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPIControl_ExecuteCommand                            5     5      0   75878
                                             32 BANK0      5     5      0
                   _GetIsMotorActive
              _SetAfterMotorStopFunc
       _SpiCmdFunc_DisableExcitating *
        _SpiCmdFunc_EnableExcitating *
          _SpiCmdFunc_FwdPulseNormal *
     _SpiCmdFunc_FwdPulsePositionCtl *
     _SpiCmdFunc_FwdPulseWithCorrect *
       _SpiCmdFunc_FwdPulseWithShake *
          _SpiCmdFunc_RevPulseNormal *
     _SpiCmdFunc_RevPulsePositionCtl *
      _SpiCmdFunc_Search1008Position *
      _SpiCmdFunc_SearchBasePosition *
      _SpiCmdFunc_SearchLoadPosition *
          _SpiCmdFunc_StartDetectVrs *
           _SpiCmdFunc_StopDetectVrs *
                    _SpiCmdFunc_Test *
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_Test                                      1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_StopDetectVrs                             1     0      1     391
                                             29 BANK0      1     0      1
                    _SetMotorStopSPK
 ---------------------------------------------------------------------------------
 (4) _SetMotorStopSPK                                      0     0      0     391
            _SetExcitatingOutOffData
                   _SpkComparatorOff
           _TMR2_SetInterruptHandler
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (5) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SpkComparatorOff                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_StartDetectVrs                            1     0      1     391
                                             29 BANK0      1     0      1
                   _SetMotorStartSPK
 ---------------------------------------------------------------------------------
 (4) _SetMotorStartSPK                                     0     0      0     391
            _SetExcitatingOutOffData
                    _SpkComparatorOn
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     391
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SpkComparatorOn                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetExcitatingOutOffData                              1     1      0       0
                                              1 BANK0      1     1      0
                      _SetOutPutLATX
 ---------------------------------------------------------------------------------
 (6) _SetOutPutLATX                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_SearchLoadPosition                        1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_SearchBasePosition                        2     1      1   13319
                                             29 BANK0      2     1      1
             _DeactivateHandPosition
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
        _SetMotorPositionSearchStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_Search1008Position                        2     1      1   13449
                                             29 BANK0      2     1      1
             _DeactivateHandPosition
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
        _SetMotorPositionSearchStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (4) _SetMotorPositionSearchStart                          1     1      0    6454
                                             16 BANK0      1     1      0
                 _InitPositionSearch
             _SetAfterDetectLoadFunc
                      _SetMotorStart
 ---------------------------------------------------------------------------------
 (5) _InitPositionSearch                                  10    10      0    5666
                                              6 BANK0     10    10      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4686
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     416
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _DeactivateHandPosition                               3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_RevPulsePositionCtl                       2     1      1   10696
                                             29 BANK0      2     1      1
               _CalcMotorStepCounter
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_RevPulseNormal                            2     1      1    6834
                                             29 BANK0      2     1      1
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseWithShake                         1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseWithCorrect                       3     2      1   12351
                                             29 BANK0      3     2      1
                   _GetIsMotorActive
              _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
                       _SetMotorStop
 ---------------------------------------------------------------------------------
 (4) _SetMotorStop                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _SetFwdPulseWithCorrectProc                           4     3      1   11762
                                             29 BANK0      4     3      1
               _CalcMotorStepCounter
             _SetAfterDetectLoadFunc
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (5) _SetAfterDetectLoadFunc                               3     1      2     602
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _SetAfterMotorStopFunc                                3     1      2     332
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetIsMotorActive                                     4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulsePositionCtl                       2     1      1   10696
                                             29 BANK0      2     1      1
               _CalcMotorStepCounter
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (4) _UpdateTargetPosition                                 5     3      2    2082
                                             13 BANK0      5     3      2
                    _CorrectPosition
 ---------------------------------------------------------------------------------
 (5) _CalcMotorStepCounter                                11    11      0    5170
                                             16 BANK0     11    11      0
                    _CorrectPosition
         _PriorUpdateCorrentPosition
                  _SetMotorDirection
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseNormal                            2     1      1    6834
                                             29 BANK0      2     1      1
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (1) _SetMotorStepCounter                                  3     1      2    2538
                                             16 BANK0      3     1      2
         _PriorUpdateCorrentPosition
 ---------------------------------------------------------------------------------
 (2) _PriorUpdateCorrentPosition                           3     3      0    1905
                                             13 BANK0      3     3      0
                    _CorrectPosition
 ---------------------------------------------------------------------------------
 (3) _CorrectPosition                                      7     3      4    1688
                                              6 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorStart                                        1     1      0      31
                                              1 BANK0      1     1      0
                    _StartPulseOutM0
                    _StartPulseOutM1
 ---------------------------------------------------------------------------------
 (2) _StartPulseOutM1                                      1     1      0       0
                                              0 BANK0      1     1      0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _StartPulseOutM0                                      1     1      0       0
                                              0 BANK0      1     1      0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorFrequency                                    4     2      2    2234
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _SetMotorDirection                                    4     3      1     852
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _SetDriveType                                         4     3      1    1024
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_EnableExcitating                          1     0      1      62
                                             29 BANK0      1     0      1
           _SetMotorEnableExcitating
 ---------------------------------------------------------------------------------
 (4) _SetMotorEnableExcitating                             3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_DisableExcitating                         1     0      1      62
                                             29 BANK0      1     0      1
          _SetMotorDisableExcitating
 ---------------------------------------------------------------------------------
 (4) _SetMotorDisableExcitating                            3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPulsePositionTable                               2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     295
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0      66
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR2_CallBack                                       0     0      0      66
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                     _TMR2_Interrupt *
                 _TMR2_Interrupt_SPK *
 ---------------------------------------------------------------------------------
 (11) _TMR2_Interrupt_SPK                                  1     1      0       0
                                              3 COMMON     1     1      0
                   Absolute function *
          _SetDataTRISxWork_SPK_OPEN *
         _SetDataTRISxWork_SPK_SHORT *
                        _SpkVrsCheck
 ---------------------------------------------------------------------------------
 (12) _SpkVrsCheck                                         0     0      0       0
                   _ExcitatingOutOff
                    _ExcitatingOutOn
 ---------------------------------------------------------------------------------
 (13) _ExcitatingOutOn                                     1     1      0       0
                                              1 COMMON     1     1      0
                    i1_SetOutPutLATX
 ---------------------------------------------------------------------------------
 (13) _ExcitatingOutOff                                    1     1      0       0
                                              2 COMMON     1     1      0
          i1_SetExcitatingOutOffData
 ---------------------------------------------------------------------------------
 (14) i1_SetExcitatingOutOffData                           1     1      0       0
                                              1 COMMON     1     1      0
                    i1_SetOutPutLATX
 ---------------------------------------------------------------------------------
 (14) i1_SetOutPutLATX                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_SPK_SHORT                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_SPK_OPEN                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_Interrupt                                      3     3      0      66
                                              2 COMMON     3     3      0
                   Absolute function *
                      _ComparatorOff
                       _ComparatorOn
  _SetDataTRISxWork_M0_SPK_POL0_OPEN *
 _SetDataTRISxWork_M0_SPK_POL0_SHORT *
  _SetDataTRISxWork_M0_SPK_POL1_OPEN *
 _SetDataTRISxWork_M0_SPK_POL1_SHORT *
  _SetDataTRISxWork_M1_SPK_POL0_OPEN *
 _SetDataTRISxWork_M1_SPK_POL0_SHORT *
  _SetDataTRISxWork_M1_SPK_POL1_OPEN *
 _SetDataTRISxWork_M1_SPK_POL1_SHORT *
_SetPulseOutLATxWork_M0_FWD_POL0_OFF *
 _SetPulseOutLATxWork_M0_FWD_POL0_P1 *
 _SetPulseOutLATxWork_M0_FWD_POL0_P2 *
_SetPulseOutLATxWork_M0_FWD_POL1_OFF *
 _SetPulseOutLATxWork_M0_FWD_POL1_P1 *
 _SetPulseOutLATxWork_M0_FWD_POL1_P2 *
_SetPulseOutLATxWork_M0_REV_POL0_OFF *
 _SetPulseOutLATxWork_M0_REV_POL0_P1 *
 _SetPulseOutLATxWork_M0_REV_POL0_P2 *
_SetPulseOutLATxWork_M0_REV_POL1_OFF *
 _SetPulseOutLATxWork_M0_REV_POL1_P1 *
 _SetPulseOutLATxWork_M0_REV_POL1_P2 *
_SetPulseOutLATxWork_M0_SHAKE_POL0_O *
_SetPulseOutLATxWork_M0_SHAKE_POL0_P *
_SetPulseOutLATxWork_M0_SHAKE_POL1_O *
_SetPulseOutLATxWork_M0_SHAKE_POL1_P *
_SetPulseOutLATxWork_M1_FWD_POL0_OFF *
 _SetPulseOutLATxWork_M1_FWD_POL0_P1 *
 _SetPulseOutLATxWork_M1_FWD_POL0_P2 *
_SetPulseOutLATxWork_M1_FWD_POL1_OFF *
 _SetPulseOutLATxWork_M1_FWD_POL1_P1 *
 _SetPulseOutLATxWork_M1_FWD_POL1_P2 *
_SetPulseOutLATxWork_M1_REV_POL0_OFF *
 _SetPulseOutLATxWork_M1_REV_POL0_P1 *
 _SetPulseOutLATxWork_M1_REV_POL0_P2 *
_SetPulseOutLATxWork_M1_REV_POL1_OFF *
 _SetPulseOutLATxWork_M1_REV_POL1_P1 *
 _SetPulseOutLATxWork_M1_REV_POL1_P2 *
_SetPulseOutLATxWork_M1_SHAKE_POL0_O *
_SetPulseOutLATxWork_M1_SHAKE_POL0_P *
_SetPulseOutLATxWork_M1_SHAKE_POL1_O *
_SetPulseOutLATxWork_M1_SHAKE_POL1_P *
                           _VrsCheck
                   i1_TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR2_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _VrsCheck                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL1_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL0_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL1_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL0_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL1_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL1_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL0_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL0_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL1_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL1_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL0_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL0_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ComparatorOn                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ComparatorOff                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPulsePositionTable
   _SPIControl_RecieveComannd
     _SPIControl_ExecuteCommand
       _GetIsMotorActive
       _SetAfterMotorStopFunc
       _SpiCmdFunc_DisableExcitating *
         _SetMotorDisableExcitating
       _SpiCmdFunc_EnableExcitating *
         _SetMotorEnableExcitating
       _SpiCmdFunc_FwdPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_FwdPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_FwdPulseWithCorrect *
         _GetIsMotorActive
         _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetAfterDetectLoadFunc
           _SetDriveType
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
           _UpdateTargetPosition
             _CorrectPosition
               ___wmul (ARG)
         _SetMotorStop
       _SpiCmdFunc_FwdPulseWithShake *
       _SpiCmdFunc_RevPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_RevPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_Search1008Position *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchBasePosition *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchLoadPosition *
       _SpiCmdFunc_StartDetectVrs *
         _SetMotorStartSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOn
           _TMR2_SetInterruptHandler
           _TMR2_StartTimer
       _SpiCmdFunc_StopDetectVrs *
         _SetMotorStopSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOff
           _TMR2_SetInterruptHandler
           _TMR2_StopTimer
       _SpiCmdFunc_Test *
     _SPI_ReadByte
     _WatchMotorDriveFinish
       _AfterDetectedLoadPosition *
         _ActivateHandPosition
         _CorrectPosition
           ___wmul (ARG)
         _DetermineBasePosition
           _CorrectPosition
             ___wmul (ARG)
           ___bmul
           ___wmul
         _InitPositionSearch
           ___bmul
           ___wmul
         _MoveTargetPosition
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SaveLoadPosition
           ___bmul
           ___wmul
         _SetAfterDetectLoadFunc
         _SetAfterMotorStopFunc
         _SetDriveType
         _SetMotorBitMotorNo
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdataHandPosition
           _CorrectPosition
             ___wmul (ARG)
           ___wmul
         _UpdateCurrentPositionByFinePosition
           ___bmul
           ___wmul
       _SPIControl_SetNotification *
       _SetFwdPulseWithCorrectProc *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetAfterDetectLoadFunc
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_DisableExcitating *
         _SetMotorDisableExcitating
       _SpiCmdFunc_EnableExcitating *
         _SetMotorEnableExcitating
       _SpiCmdFunc_FwdPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_FwdPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_FwdPulseWithCorrect *
         _GetIsMotorActive
         _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetAfterDetectLoadFunc
           _SetDriveType
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
           _UpdateTargetPosition
             _CorrectPosition
               ___wmul (ARG)
         _SetMotorStop
       _SpiCmdFunc_FwdPulseWithShake *
       _SpiCmdFunc_RevPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_RevPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_Search1008Position *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchBasePosition *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchLoadPosition *
       _SpiCmdFunc_StartDetectVrs *
         _SetMotorStartSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOn
           _TMR2_SetInterruptHandler
           _TMR2_StartTimer
       _SpiCmdFunc_StopDetectVrs *
         _SetMotorStopSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOff
           _TMR2_SetInterruptHandler
           _TMR2_StopTimer
       _SpiCmdFunc_Test *
       _VerifyHandPosition_LoadPosition *
         _CorrectPosition
           ___wmul (ARG)
         _MoveTargetPosition
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorCorrectPositionStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
         ___bmul
         ___wmul
   _SPI_Open
   _SYSTEM_Initialize
     _DAC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _SetMotorAddShakePulse
   _SetMotorDirection
   _SetMotorFrequency
   _SetMotorStart
     _StartPulseOutM0
       _TMR2_StartTimer
     _StartPulseOutM1
       _TMR2_StartTimer
   _SetMotorStepCounter
     _PriorUpdateCorrentPosition
       _CorrectPosition
         ___wmul (ARG)
   _TMR1_StopTimer
   _TMR2_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _TMR2_Interrupt *
         Absolute function(Fake) *
         _ComparatorOff *
         _ComparatorOn *
         _SetDataTRISxWork_M0_SPK_POL0_OPEN *
         _SetDataTRISxWork_M0_SPK_POL0_SHORT *
         _SetDataTRISxWork_M0_SPK_POL1_OPEN *
         _SetDataTRISxWork_M0_SPK_POL1_SHORT *
         _SetDataTRISxWork_M1_SPK_POL0_OPEN *
         _SetDataTRISxWork_M1_SPK_POL0_SHORT *
         _SetDataTRISxWork_M1_SPK_POL1_OPEN *
         _SetDataTRISxWork_M1_SPK_POL1_SHORT *
         _SetPulseOutLATxWork_M0_FWD_POL0_OFF *
         _SetPulseOutLATxWork_M0_FWD_POL0_P1 *
         _SetPulseOutLATxWork_M0_FWD_POL0_P2 *
         _SetPulseOutLATxWork_M0_FWD_POL1_OFF *
         _SetPulseOutLATxWork_M0_FWD_POL1_P1 *
         _SetPulseOutLATxWork_M0_FWD_POL1_P2 *
         _SetPulseOutLATxWork_M0_REV_POL0_OFF *
         _SetPulseOutLATxWork_M0_REV_POL0_P1 *
         _SetPulseOutLATxWork_M0_REV_POL0_P2 *
         _SetPulseOutLATxWork_M0_REV_POL1_OFF *
         _SetPulseOutLATxWork_M0_REV_POL1_P1 *
         _SetPulseOutLATxWork_M0_REV_POL1_P2 *
         _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF *
         _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 *
         _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF *
         _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 *
         _SetPulseOutLATxWork_M1_FWD_POL0_OFF *
         _SetPulseOutLATxWork_M1_FWD_POL0_P1 *
         _SetPulseOutLATxWork_M1_FWD_POL0_P2 *
         _SetPulseOutLATxWork_M1_FWD_POL1_OFF *
         _SetPulseOutLATxWork_M1_FWD_POL1_P1 *
         _SetPulseOutLATxWork_M1_FWD_POL1_P2 *
         _SetPulseOutLATxWork_M1_REV_POL0_OFF *
         _SetPulseOutLATxWork_M1_REV_POL0_P1 *
         _SetPulseOutLATxWork_M1_REV_POL0_P2 *
         _SetPulseOutLATxWork_M1_REV_POL1_OFF *
         _SetPulseOutLATxWork_M1_REV_POL1_P1 *
         _SetPulseOutLATxWork_M1_REV_POL1_P2 *
         _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF *
         _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 *
         _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF *
         _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 *
         _VrsCheck *
         i1_TMR2_StopTimer *
       _TMR2_Interrupt_SPK *
         Absolute function(Fake) *
         _SetDataTRISxWork_SPK_OPEN *
         _SetDataTRISxWork_SPK_SHORT *
         _SpkVrsCheck *
           _ExcitatingOutOff
             i1_SetExcitatingOutOffData
               i1_SetOutPutLATX
           _ExcitatingOutOn
             i1_SetOutPutLATX

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     129       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2F      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      1      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      2      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               48      1      2F      12       65.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     129      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Aug 24 11:28:43 2021

                  __end_of_SetAfterDetectLoadFunc 10D0                             __end_of_SetOutPutLATX 0AA6  
                                  _SPI_Initialize 10A5                        MoveTargetPosition@motor_no 003C  
                __end_of_TMR2_SetInterruptHandler 1089                SetFwdPulseWithCorrectProc@motor_no 003D  
                            SetMotorDirection@dir 0020                                    ??_ComparatorOn 0075  
                               _motorBitOperation 0074                        __end_of_offsetBasePosition 1852  
                                  ___bmul@product 0022                         _detectLoadPositionTypePtr 00B8  
             SetFwdPulseWithCorrectProc@motor_bit 0040             SpiCmdFunc_SearchBasePosition@motor_no 003D  
                                 ??_ComparatorOff 0075                               ___wmul@multiplicand 0022  
                                    _pulseOutLATA 006A                                      _pulseOutLATB 0069  
                                    _pulseOutLATC 0068                      CalcMotorStepCounter@motor_no 003A  
                              _m1PulseOutStepWork 00E4        __end_of_SetPulseOutLATxWork_M1_REV_POL0_P1 1239  
     __size_of_SetPulseOutLATxWork_M1_REV_POL0_P1 000F              ??_SetPulseOutLATxWork_M1_REV_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M1_REV_POL0_P1 0075                _SetPulseOutLATxWork_M1_REV_POL0_P1 122A  
      __end_of_SetPulseOutLATxWork_M1_REV_POL0_P2 1266       __size_of_SetPulseOutLATxWork_M1_REV_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M1_REV_POL0_P2 0075               ?_SetPulseOutLATxWork_M1_REV_POL0_P2 0075  
              _SetPulseOutLATxWork_M1_REV_POL0_P2 1257                            ?_WatchMotorDriveFinish 0075  
      __end_of_SetPulseOutLATxWork_M1_REV_POL1_P1 122A       __size_of_SetPulseOutLATxWork_M1_REV_POL1_P1 000F  
            ??_SetPulseOutLATxWork_M1_REV_POL1_P1 0075               ?_SetPulseOutLATxWork_M1_REV_POL1_P1 0075  
              _SetPulseOutLATxWork_M1_REV_POL1_P1 121B        __end_of_SetPulseOutLATxWork_M1_REV_POL1_P2 1275  
     __size_of_SetPulseOutLATxWork_M1_REV_POL1_P2 000F              ??_SetPulseOutLATxWork_M1_REV_POL1_P2 0075  
             ?_SetPulseOutLATxWork_M1_REV_POL1_P2 0075                _SetPulseOutLATxWork_M1_REV_POL1_P2 1266  
          __end_of_SpiCmdFunc_FwdPulsePositionCtl 1670           __size_of_SpiCmdFunc_FwdPulsePositionCtl 0021  
                  _SpiCmdFunc_FwdPulsePositionCtl 164F                         i1_SetExcitatingOutOffData 14F0  
             __size_of_SetDataTRISxWork_SPK_SHORT 001C                                               l800 0E19  
                                             l746 0AD7                                               l747 0ACB  
                                             l763 0B45                                               l764 0B39  
                                             l956 0352                                               l885 080F  
                                             l888 0839                                               _PR2 001B  
                                 _timer1ReloadVal 016A                                   _TMR2_Initialize 13BA  
                                             wreg 0009                     CalcMotorStepCounter@motor_bit 0037  
                     __size_of_SetMotorBitMotorNo 0011                           ??_SetMotorAddShakePulse 0021  
     __end_of_SetPulseOutLATxWork_M1_REV_POL0_OFF 12C3      __size_of_SetPulseOutLATxWork_M1_REV_POL0_OFF 0010  
           ??_SetPulseOutLATxWork_M1_REV_POL0_OFF 0075              ?_SetPulseOutLATxWork_M1_REV_POL0_OFF 0075  
             _SetPulseOutLATxWork_M1_REV_POL0_OFF 12B3       __end_of_SetPulseOutLATxWork_M1_REV_POL1_OFF 12D3  
    __size_of_SetPulseOutLATxWork_M1_REV_POL1_OFF 0010             ??_SetPulseOutLATxWork_M1_REV_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M1_REV_POL1_OFF 0075               _SetPulseOutLATxWork_M1_REV_POL1_OFF 12C3  
            __size_of_SpiCmdFunc_EnableExcitating 0005                                 _spkChangePosition 00DF  
                  ??_SpiCmdFunc_FwdPulseWithShake 003E            __end_of_SpiCmdFunc_FwdPulseWithCorrect 162F  
         __size_of_SpiCmdFunc_FwdPulseWithCorrect 001C                    _SpiCmdFunc_FwdPulseWithCorrect 1613  
                                            l1326 0BAC                                              l1318 13A8  
                                            l1360 08A4                                              l1456 1590  
                                            l6000 0853                                              l6010 0875  
                          ?_SetAfterMotorStopFunc 0020                                              l6100 0661  
                                            l6022 1098                                              l6102 0677  
                                            l6008 086C                                              l6016 0879  
                                            l6060 0DE3                                              l6108 06B3  
                                            l6062 0DF0                                              l6054 0D9B  
                                            l6134 0E4B                                              l6230 0F5C  
                                            l6302 0D48                                              l6056 0DB8  
                                            l6080 0609                                              l6320 1405  
                                            l6058 0DD5                                              l6066 0DFD  
                                            l6250 0FA3                                              l6306 0D7F  
                                            l6092 0633                                              l6084 0617  
                                            l6180 17C5                                              l6308 0CF9  
                                            l6500 030A                                              l6404 018B  
                                            l6238 0F7B                                              l6414 01BA  
                                            l6334 08BE                                              l6088 0626  
                                            l6600 0734                                              l6512 035A  
                                            l6432 021B                                              l6408 01AB  
                                            l6440 0230                                              l6352 0090  
                                            l6530 0394                                              l6370 0105  
                                            l6346 0076                                              l5820 082F  
                                            l6276 0C76                                              l6268 0EE6  
                                            l6612 0780                                              l6604 073D  
                                            l6452 0251                                              l6460 0265  
                                            l6444 0240                                              l6356 00B6  
                                            l5910 0B86                                              l6606 0741  
                                            l6526 0386                                              l6534 039F  
                                            l6542 03B0                                              l6454 0261  
                                            l6446 0242                                              l6382 0141  
                                            l6366 00E8                                              l5832 0AAE  
                                            l5920 08F9                                              l6608 0779  
                                            l6528 038C                                              l6472 027D  
                                            l6368 0102                                              l6384 0144  
                                            l5826 151D                                              l5850 0AD2  
                                            l5842 0AC1                                              l6810 0BCC  
                                            l6802 0BA8                                              l6482 0296  
                                            l6394 0165                                              l5908 0B81  
                                            l6564 03EB                                              l6548 03C1  
                                            l6484 029C                                              l5854 0ADE  
                                            l5918 08E7                                              l6814 0BE6  
                                            l6590 0778                                              l6566 03EF  
                                            l6912 0E05                                              l5856 0AED  
                                            l6592 0700                                              l6576 06CD  
                                            l6648 1628                                              l6760 0C17  
                                            l5866 0B0F                                              l5874 0B1E  
                                            l6770 0C34                                              l5868 0B14  
                                            l5892 0B40                                              l5884 0B31  
                                            l5980 12E6                                              l6780 0C53  
                                            l6852 13B6                                              l6844 154F  
                                            l6838 12DE                                              l5966 158A  
                                            l5896 0B4C                                              l5984 12EC  
                                            l5898 0B5D                                              l6890 09C8  
                                            l6798 0BA1                                              _LATA 010C  
                                            _LATB 010D                                              _LATC 010E  
                                            u5015 016F                                              u5045 0189  
                                            u4255 0821                                              u4274 150F  
                                            u4434 08C8                                              u4275 150E  
                                            u4435 08C7                                              u5075 01D5  
                                            u5085 01E9                                              u5095 01FD  
                                            u4704 1378                                              u4705 1377  
                                            u4714 12FF                                              u4475 1591  
                                            u4715 12FE                                              u5604 1541  
                                            u4645 0696                                              u4485 1596  
                                            u4805 0D51                                              u5365 0776  
                                            u5605 1540                                              i1l80 0012  
                                            u4584 0D8B                                              u4824 138A  
                                            u4585 0D8A                                              u4825 1389  
                                            u5385 072F                                              u4905 00B2  
                                            u4674 1366                                              u4594 05F1  
                                            u4834 13F9                                              u4675 1365  
                                            u4595 05F0                                              u4835 13F8  
                                            u5395 073B                                              u4915 00C0  
                                            u4684 1354                                              i1l85 001A  
                                            u4685 1353                                              u4925 00CC  
                                            u5637 1602                                              u4774 139C  
                                            u4694 174D                                              u4854 0888  
                                            u4775 139B                                              u4695 174C  
                                            u4935 00D8                                              u5647 160D  
                                            u4855 0887                                              u4965 0125  
                                            u4975 013F                                              u4985 014E  
                                            u4995 015A                                              _TMR2 001A  
                                            _WPUA 020C                                              _WPUB 020D  
                      __end_of_MoveTargetPosition 13F2                     ??_SetMotorPositionSearchStart 0030  
                                            _main 0966             __end_of_SpiCmdFunc_Search1008Position 179C  
          __size_of_SpiCmdFunc_Search1008Position 002B                     _SpiCmdFunc_Search1008Position 1771  
              __end_of_SetFwdPulseWithCorrectProc 08C2                        _SetFwdPulseWithCorrectProc 0882  
                                            fsr0h 0005                                              fsr1h 0007  
                                            indf0 0000                                              fsr0l 0004  
                                            indf1 0001                                              fsr1l 0006  
                                            btemp 007E                           __end_of_SpiCmdFunc_Test 1052  
               __end_of_SpiCmdFunc_StartDetectVrs 1060                       __end_of_SetMotorStepCounter 110F  
                                            start 001C                 SPIControl_ExecuteCommand@cmd_type 0043  
                           ?_UpdateTargetPosition 002D                            __end_of_SPI_Initialize 10AF  
                      ??_TMR1_SetInterruptHandler 0022                                 ___bmul@multiplier 0023  
                 ??_SpiCmdFunc_SearchBasePosition 003E                    __size_of_DetermineBasePosition 00A6  
                              _reqCheckLoadPosBit 00CE                                  _SaveLoadPosition 0C74  
                   __end_of_DetermineBasePosition 1000                __size_of_AfterDetectedLoadPosition 039D  
                  InitPulsePositionTable@motor_no 0021                        __end_of_TMR2_Interrupt_SPK 07FE  
                  __size_of_OSCILLATOR_Initialize 0006                     __end_of_OSCILLATOR_Initialize 1081  
                                           ?_main 0075                                 ??_SpkComparatorOn 0020  
                                           _T1CON 0018                                             _T2CON 001C  
                                           _LATC0 0870                                             i1l702 058D  
                                           i1l687 04F2                      AfterDetectedLoadPosition@res 0043  
                                           _TMR1H 0017                                             _TMR1L 0016  
                                           _TRISA 008C                                             _TRISB 008D  
                                           _TRISC 008E                         _SPIControl_RecieveComannd 13A8  
                                  _reqVrsCheckBit 00D2                               _finishPositionCtSet 00C6  
                        __end_ofi1_TMR2_StopTimer 0004                                 _driveDirectionBit 0057  
                                __end_of_TMR1_ISR 10DC                                  __end_of_TMR2_ISR 1067  
                            _CalcMotorStepCounter 05EB                                    _WDT_Initialize 1067  
                                ?_SetMotorStopSPK 0075         __end_of_SetDataTRISxWork_M0_SPK_POL0_OPEN 11D0  
      __size_of_SetDataTRISxWork_M0_SPK_POL0_OPEN 000F               ??_SetDataTRISxWork_M0_SPK_POL0_OPEN 0075  
              ?_SetDataTRISxWork_M0_SPK_POL0_OPEN 0075                 _SetDataTRISxWork_M0_SPK_POL0_OPEN 11C1  
       __end_of_SetDataTRISxWork_M0_SPK_POL1_OPEN 11DF        __size_of_SetDataTRISxWork_M0_SPK_POL1_OPEN 000F  
             ??_SetDataTRISxWork_M0_SPK_POL1_OPEN 0075                ?_SetDataTRISxWork_M0_SPK_POL1_OPEN 0075  
               _SetDataTRISxWork_M0_SPK_POL1_OPEN 11D0                                 _spkReqVrsCheckBit 00DD  
                        _reqAfterMotorStopFuncBit 00D9                                _actCorrectDriveBit 0053  
                                __end_of_SPI_Open 0966                           __end_of_TMR1_Initialize 1588  
                                           pclath 000A                         ??_SetExcitatingOutOffData 0021  
                                           status 0003                          ??_DeactivateHandPosition 0020  
                       SetAfterMotorStopFunc@func 0020                                             wtemp0 007E  
                                 _TMR2_StartTimer 1054                               InitPositionSearch@i 002E  
                __end_of_TblM0PulseChangePosition 184E                                   _TMR1_WriteTimer 111C  
                     __size_of_UpdataHandPosition 00A0                                   ?_SPI_Initialize 0075  
                               ??_ExcitatingOutOn 0076                                  ??_DAC_Initialize 0020  
                                 __initialization 001E                                    _doubleInterval 00CD  
                      ?_SpiCmdFunc_FwdPulseNormal 003D                                      __end_of_main 09CC  
             SetMotorPositionSearchStart@motor_no 0030                           __end_of_TMR2_Initialize 13CC  
                     ?_INTERRUPT_InterruptManager 0075                          _TMR2_SetInterruptHandler 1081  
                                          ??_main 01CE                        ?_SpiCmdFunc_RevPulseNormal 003D  
                              _reqComparatorOnBit 00D4                              _cbAfterMotorStopFunc 00AC  
                        ??_InitPulsePositionTable 0020                                  _motorNoOperation 006B  
                          __end_of_WDT_Initialize 106B                             ?_CalcMotorStepCounter 0075  
                               ?_SpkComparatorOff 0075                             _cbAfterDetectLoadFunc 0120  
                                __end_of_VrsCheck 156E                                  _searchTotalSteps 0124  
                                   _vrsCountValue 00BC                                ??_SpkComparatorOff 0020  
                                          _APFCON 011D                                            _ANSELA 018C  
                                          _ANSELB 018D                                            _ANSELC 018E  
          SpiCmdFunc_FwdPulseWithCorrect@motor_no 003D                              __end_of_ComparatorOn 15BF  
                                          _BORCON 0116                                            _T1GCON 0019  
                          _detectLoadPositionType 0132                           TMR1_WriteTimer@timerVal 0075  
                                          i1l1064 10FA                                            i1l1049 1563  
                                          i1l5110 0521                                            i1l5120 0536  
                                          i1l5104 0513                                            i1l5008 0432  
                                          i1l5042 0479                                            i1l4332 156B  
                                          i1l5124 0546                                            i1l5116 052D  
                                          i1l5060 049A                                            i1l5036 046E  
                                          i1l4342 15AE                                            i1l5222 07C9  
                                          i1l5126 054B                                            i1l5054 048F  
                                          i1l4360 13D6                                            i1l4352 15BA  
                                          i1l4328 1560                                            i1l5072 04B0  
                                          i1l5048 0484                                            i1l4362 13DB  
                                          i1l4346 15B3                                            i1l5242 07E8  
                                          i1l5218 07C4                                            i1l5226 07D3  
                                          i1l5146 0586                                            i1l5170 05C6  
                                          i1l5066 04A5                                            i1l4372 10FF  
                                          i1l5164 05BC                                            i1l5180 05E4  
                                          i1l5092 04EB                                            i1l4622 142B  
                                          i1l5174 05CF                                            i1l5158 05AE  
                                          i1l4650 1442                                            i1l5178 05DF  
                                          i1l4564 17DD                                            i1l4726 1459  
                                          i1l4840 1487                                            i1l4920 14B7  
                                          i1l4842 148C                                            i1l4754 1470  
                                          i1l4922 14BC                                            i1l5636 1126  
                                          i1l4596 15D9                                            i1l4880 149F  
                                          i1l4960 14CF                                            i1l4882 14A4  
                                          i1l4962 14D4                                            u313_25 04E9  
                                _dataTRISAWork_M0 005E                                  _dataTRISAWork_M1 005B  
                                          u315_25 0504                                            u325_25 0584  
                                          u327_25 059F                                            _OSCCON 0099  
                                _dataTRISBWork_M0 005D                                  _dataTRISBWork_M1 005A  
                                _dataTRISCWork_M0 005C                                  _dataTRISCWork_M1 0059  
                                          _WDTCON 0097                     SetMotorAddShakePulse@motor_no 0023  
                             __end_of_TblMaxSteps 185A                            ??_UpdateTargetPosition 002F  
                                ?_SpiCmdFunc_Test 003D                       ??_SetDataTRISxWork_SPK_OPEN 0075  
                              CorrectPosition@max 0028                                CorrectPosition@pos 0026  
                               _correctDriveSteps 012E                       ?_SPIControl_SetNotification 003D  
            __end_of_TMR1_DefaultInterruptHandler 1050             __size_of_TMR1_DefaultInterruptHandler 0001  
                    _TMR1_DefaultInterruptHandler 104F                    ?_SpiCmdFunc_Search1008Position 003D  
                                          ___bmul 12E4                                            ___wmul 1588  
                         SpiCmdFunc_Test@motor_no 003D                 __end_of_SpiCmdFunc_FwdPulseNormal 16F9  
                              _InitPositionSearch 0E1A                                 ?_SetMotorStartSPK 0075  
           __end_of_SpiCmdFunc_SearchBasePosition 1747            __size_of_SpiCmdFunc_SearchBasePosition 0029  
                   _SpiCmdFunc_SearchBasePosition 171E                                _spkReqVrsCheckWait 00DC  
                              ??_SetMotorStartSPK 0022                                     ?_SetDriveType 0020  
                      ??_SpiCmdFunc_StopDetectVrs 003E                             ComparatorOff@motor_no 0075  
                           _m1PulsePositionCtWork 00E8                  ??_SpiCmdFunc_RevPulsePositionCtl 003E  
                 ?_SpiCmdFunc_RevPulsePositionCtl 003D                 __end_of_SpiCmdFunc_RevPulseNormal 16B3  
                             ?_InitPositionSearch 0075                                     ??_SpkVrsCheck 0078  
                        __size_ofi1_SetOutPutLATX 006D                                   ?_WDT_Initialize 0075  
                                 _currentPosition 006C                          SetMotorStepCounter@steps 0030  
                         __end_of_TMR2_StartTimer 1057          TMR1_SetInterruptHandler@InterruptHandler 0020  
        TMR2_SetInterruptHandler@InterruptHandler 0020              SpiCmdFunc_FwdPulseWithShake@motor_no 003D  
                         __end_of_TMR1_WriteTimer 112B                __size_ofi1_SetExcitatingOutOffData 0019  
                           __end_of_TMR1_CallBack 10BA                                    _m0PulseOutStep 0073  
                                ?_TMR1_Initialize 0075                                 _SYSTEM_Initialize 1407  
                                 _reqStopMotorBit 00D8                           __end_of__initialization 0059  
                           __end_of_TMR2_CallBack 10C5                                 ?_ExcitatingOutOff 0075  
                     ??_SpiCmdFunc_StartDetectVrs 003E                               UpdataHandPosition@i 0037  
                 __size_of_DeactivateHandPosition 0012                                ?_SYSTEM_Initialize 0075  
                            ??_InitPositionSearch 0026                         __size_of_GetIsMotorActive 0015  
                              ??_ExcitatingOutOff 0077                                     ?_SetMotorStop 0075  
                             ___bmul@multiplicand 0020                          __size_of_CorrectPosition 003A  
                                  __pcstackCOMMON 0075                          __size_of_StartPulseOutM0 0070  
                        __size_of_StartPulseOutM1 0072                          _TblM0PulseChangePosition 1835  
                             ??_SYSTEM_Initialize 0022                           ??_WatchMotorDriveFinish 004E  
                                       ?_TMR1_ISR 0075                                         ?_TMR2_ISR 0075  
                   ?_TMR1_DefaultInterruptHandler 0075                     __size_of_ActivateHandPosition 0012  
                                ?_TMR2_Initialize 0075                      ?_SpiCmdFunc_EnableExcitating 003D  
            SetMotorCorrectPositionStart@motor_no 0032                                    ??_SetDriveType 0021  
                                       ?_SPI_Open 0075                         _SetDataTRISxWork_SPK_OPEN 17C8  
                            SetMotorStop@motor_no 0022                                    _OPTION_REGbits 0095  
                          ??_CalcMotorStepCounter 0030                        ?_SetMotorDisableExcitating 0075  
                           _handPositionActiveBit 00D1                   __size_of_InitPulsePositionTable 0011  
                           _m1PulseChangePosition 00E6                           ??_SetAfterMotorStopFunc 0022  
               __size_of_SetMotorEnableExcitating 0012                                _offsetBasePosition 184E  
                       ?_SetMotorEnableExcitating 0075                          __end_of_SaveLoadPosition 0CF7  
                                     _TblMaxSteps 1856                         __end_of_SYSTEM_Initialize 141C  
                             _reqComparatorOffBit 00D3                    __size_of_SetMotorAddShakePulse 0019  
                   __end_of_SetMotorAddShakePulse 1554                                        __pbssBANK0 004F  
                                      __pbssBANK1 00A0                                        __pbssBANK2 0120  
                                      __pbssBANK3 01A0                               __end_of_SpkVrsCheck 1102  
                       WatchMotorDriveFinish@func 016E                                    _m1PulseOutStep 0072  
              __size_of_SPIControl_RecieveComannd 0012                      ??_PriorUpdateCorrentPosition 002D  
                     ?_SetFwdPulseWithCorrectProc 003D                                _detectLoadPosition 2194  
                         __size_of_TMR2_Interrupt 01F1                                    ??_SetMotorStop 0020  
                             _reqSearchBasePosBit 0055                                   _SpkComparatorOn 0800  
                                      __pmaintext 0966                                           ?___bmul 0020  
                              _positionSearchStat 00B0                         _missingDetectFinePosition 00ED  
                           _spkOutTrisRequestFlug 00DE                                           ?___wmul 0020  
                               _SetMotorDirection 1509                                        ??_TMR1_ISR 0077  
                                      ??_TMR2_ISR 007A                                _MoveTargetPosition 13DF  
                                      __pintentry 0004                                         ?_VrsCheck 0075  
                                         _DACCON0 0118                                           _DACCON1 0119  
                                         _CM1CON0 0111                                           _CM1CON1 0112  
                              _excitatingStatusOn 00DA                                           _CM2CON0 0113  
                                         _CM2CON1 0114                PriorUpdateCorrentPosition@motor_no 002F  
      __end_of_SetDataTRISxWork_M1_SPK_POL0_SHORT 14C0       __size_of_SetDataTRISxWork_M1_SPK_POL0_SHORT 0018  
            ??_SetDataTRISxWork_M1_SPK_POL0_SHORT 0075               ?_SetDataTRISxWork_M1_SPK_POL0_SHORT 0075  
              _SetDataTRISxWork_M1_SPK_POL0_SHORT 14A8        __end_of_SetDataTRISxWork_M1_SPK_POL1_SHORT 14D8  
     __size_of_SetDataTRISxWork_M1_SPK_POL1_SHORT 0018              ??_SetDataTRISxWork_M1_SPK_POL1_SHORT 0075  
             ?_SetDataTRISxWork_M1_SPK_POL1_SHORT 0075                _SetDataTRISxWork_M1_SPK_POL1_SHORT 14C0  
                              ?_SetMotorDirection 0020                        ?_SPIControl_ExecuteCommand 0075  
                                      ??_SPI_Open 0020                           _detectLoadPositionIndex 00BA  
                       _SpiCmdFunc_StartDetectVrs 105D                            _DeactivateHandPosition 1384  
                           __end_of_ComparatorOff 13DF                           __size_of_TMR1_StopTimer 0002  
                   ??_SpiCmdFunc_EnableExcitating 003E                        __end_of_SetMotorBitMotorNo 1306  
                       CalcMotorStepCounter@steps 0038                               ?_MoveTargetPosition 0075  
                               _TblMaxSearchSteps 1852                                    _targetPosition 0164  
                               _SetMotorFrequency 0845                             __size_of_ComparatorOn 001C  
                             ??_SetMotorDirection 0021                    ?_SpiCmdFunc_SearchBasePosition 003D  
               __end_of_SetMotorDisableExcitating 1360                            __size_of_SetMotorStart 000A  
               SpiCmdFunc_FwdPulseNormal@motor_no 003D                                 ?i1_TMR2_StopTimer 0075  
                                         _SSP1ADD 0212                                           _SSP1BUF 0211  
                              ?_SetMotorFrequency 0020                           __size_of_TMR2_StopTimer 0003  
         __end_of_VerifyHandPosition_LoadPosition 0784          __size_of_VerifyHandPosition_LoadPosition 00C4  
               ??_VerifyHandPosition_LoadPosition 003E                  ?_VerifyHandPosition_LoadPosition 003D  
                 _VerifyHandPosition_LoadPosition 06C0               __size_of_SPIControl_SetNotification 001C  
                                ?_TMR2_StartTimer 0075                                _TMR2_Interrupt_SPK 0784  
                                 _ExcitatingOutOn 16F9                            __size_of_SetOutPutLATX 006D  
                                ?_TMR1_WriteTimer 0075                              SetDriveType@motor_no 0023  
                              ??i1_TMR2_StopTimer 0075         __end_of_SetDataTRISxWork_M1_SPK_POL0_OPEN 1284  
      __size_of_SetDataTRISxWork_M1_SPK_POL0_OPEN 000F               ??_SetDataTRISxWork_M1_SPK_POL0_OPEN 0075  
              ?_SetDataTRISxWork_M1_SPK_POL0_OPEN 0075                 _SetDataTRISxWork_M1_SPK_POL0_OPEN 1275  
       __end_of_SetDataTRISxWork_M1_SPK_POL1_OPEN 1293        __size_of_SetDataTRISxWork_M1_SPK_POL1_OPEN 000F  
             ??_SetDataTRISxWork_M1_SPK_POL1_OPEN 0075                ?_SetDataTRISxWork_M1_SPK_POL1_OPEN 0075  
               _SetDataTRISxWork_M1_SPK_POL1_OPEN 1284                                 ??i1_SetOutPutLATX 0075  
                                ??_SPI_Initialize 0020                             SetMotorStart@motor_no 0021  
               SpiCmdFunc_RevPulseNormal@motor_no 003D                      ??_SetDataTRISxWork_SPK_SHORT 0075  
                             ??_SetMotorFrequency 0022                              ??_MoveTargetPosition 003B  
                             ?_TMR2_Interrupt_SPK 0075                                 _SpiCmmandFunction 1800  
                          _InitPulsePositionTable 12D3                         __end_of_SetMotorDirection 1522  
                      ??_TMR2_SetInterruptHandler 0022                                   __size_of___bmul 0011  
                     ??_SpiCmdFunc_FwdPulseNormal 003E                                   __size_of___wmul 001B  
                    __size_of_SetMotorStepCounter 000D                                        ??_VrsCheck 0075  
                                    _ComparatorOn 15A3                             _DetermineBasePosition 0F5A  
                               ??_CorrectPosition 002A                         __end_of_TblMaxSearchSteps 1856  
                                         __ptext1 07FE                                           __ptext2 153B  
                                         __ptext3 1407                                           __ptext4 1067  
                                         __ptext5 13BA                                           __ptext6 156E  
                                         __ptext7 1089                                           __ptext8 10A5  
                                         __ptext9 1522                 __end_of_SPIControl_ExecuteCommand 0BFB  
                               ??_StartPulseOutM0 0020                                 ??_StartPulseOutM1 0020  
                       __end_of_SetMotorFrequency 0882                    ??_TMR1_DefaultInterruptHandler 0075  
                     ??_SpiCmdFunc_RevPulseNormal 003E                              ??_TMR2_Interrupt_SPK 0078  
                          SetDriveType@drive_type 0020                                         _T1CONbits 0018  
                           _OSCILLATOR_Initialize 107B                                         _T2CONbits 001C  
               __size_of_TMR1_SetInterruptHandler 0008                                       _SpkVrsCheck 10F5  
                        ??_PIN_MANAGER_Initialize 0020     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 133C  
  __size_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0012           ??_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0075  
          ?_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0075             _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 132A  
                       ?_TMR1_SetInterruptHandler 0020     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 134E  
  __size_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0012           ??_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0075  
          ?_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0075             _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 133C  
                      __size_of_SYSTEM_Initialize 0015                                           clrloop0 10DD  
             __end_of_SetMotorPositionSearchStart 164F                       _SetMotorPositionSearchStart 162F  
                            end_of_initialization 0059      __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 1149  
   __size_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 000F            ??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 0075  
           ?_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 0075              _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 113A  
    __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 113A     __size_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 000F  
          ??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 0075             ?_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 0075  
            _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 112B                           __end_of_SpkComparatorOn 080B  
                       __end_of_SpiCmmandFunction 181C                        __end_of_UpdataHandPosition 0F5A  
                    ActivateHandPosition@motor_no 0022                              __end_of_SetDriveType 0E1A  
                        ??_SetAfterDetectLoadFunc 0022                                    _detectLoadCont 004F  
                                _GetIsMotorActive 13F2                                    _detectLoadType 0051  
                        __size_of_SetMotorStopSPK 0018                                     _SetMotorStart 1091  
                       __size_of_SpkComparatorOff 000D                                    _OutRequestFlug 00D6  
                                   _SetOutPutLATX 0A39                     SetAfterMotorStopFunc@motor_no 0022  
                                ??_WDT_Initialize 0020                        ?_AfterDetectedLoadPosition 003D  
                               _spi_configuration 185A                   ??_SpiCmdFunc_SearchLoadPosition 003E  
                VerifyHandPosition_LoadPosition@i 004B                           __end_of_ExcitatingOutOn 171E  
                           _excitatingOffMaskTime 00E2                                    _motorActiveBit 0056  
                            __end_of_SetMotorStop 1384               __size_of_SetFwdPulseWithCorrectProc 0040  
                                       _TRISBbits 008D             SPIControl_ExecuteCommand@motor_select 0044  
            SpiCmdFunc_DisableExcitating@motor_no 003D                         _SpiCmdFunc_FwdPulseNormal 16D6  
                        ?_SetExcitatingOutOffData 0075                         __size_of_SetMotorStartSPK 002C  
                    _TblM1PulseChangePositionLast 00EB                __size_of_SetDataTRISxWork_SPK_OPEN 0038  
                               _m1PulsePositionCt 00E9                __end_of_PriorUpdateCorrentPosition 0910  
                      _PriorUpdateCorrentPosition 08C2            __end_of_SpiCmdFunc_RevPulsePositionCtl 1691  
         __size_of_SpiCmdFunc_RevPulsePositionCtl 0021                    _SpiCmdFunc_RevPulsePositionCtl 1670  
                       _SpiCmdFunc_RevPulseNormal 1691             SpiCmdFunc_SearchLoadPosition@motor_no 003D  
                                  _excitatingTime 00C4                                _motorM0StepCounter 00C0  
                                  _TMR2_Interrupt 03FA                                    ?_SetMotorStart 0075  
                   __size_of_UpdateTargetPosition 0023                                     ?_SPI_ReadByte 0075  
                      __size_of_SetMotorDirection 0019                                    ?_SetOutPutLATX 0075  
                          ?_DetermineBasePosition 0075                  SpiCmdFunc_StopDetectVrs@motor_no 003D  
                            _m0PulseOutChangeFunc 00CA                          _correctDriveDirectionBit 00D7  
            __end_of_TMR2_DefaultInterruptHandler 1051             __size_of_TMR2_DefaultInterruptHandler 0001  
                    _TMR2_DefaultInterruptHandler 1050                  __end_of_SetMotorEnableExcitating 1372  
                                  __end_of___bmul 12F5              UpdateCurrentPositionByFinePosition@i 0030  
                        __size_of_SpiCmdFunc_Test 0001                         __end_of_spi_configuration 185E  
                  __size_of_WatchMotorDriveFinish 0079                                    __end_of___wmul 15A3  
                   __end_of_WatchMotorDriveFinish 0C74                                 __size_of_TMR1_ISR 000C  
                               __size_of_TMR2_ISR 0004                         __size_of_ExcitatingOutOff 000D  
                                  _TMR1_StopTimer 07FE                            ?_OSCILLATOR_Initialize 0075  
                      __size_of_SetMotorFrequency 003D                                _motorM1StepCounter 00BE  
                           _m0PulsePositionCtWork 0058                 __end_of_AfterDetectedLoadPosition 03FA  
                         __size_of_DAC_Initialize 0006                                 __size_of_SPI_Open 0056  
                     ??_SetMotorDisableExcitating 0020                               start_initialization 001E  
             SpiCmdFunc_EnableExcitating@motor_no 003D                        SetMotorBitMotorNo@motor_no 0022  
                 __size_of_PIN_MANAGER_Initialize 0019                                    _TMR2_StopTimer 1057  
            __end_of_SetMotorCorrectPositionStart 1771             __size_of_SetMotorCorrectPositionStart 002A  
                    _SetMotorCorrectPositionStart 1747                    __size_of_SetAfterMotorStopFunc 000A  
                   __end_of_SetAfterMotorStopFunc 10A5                __size_of_SpiCmdFunc_StartDetectVrs 0003  
                               ?_SaveLoadPosition 0075               DetermineBasePosition@base_pos_index 0037  
                    __end_of_ActivateHandPosition 13A8                __end_of_SetDataTRISxWork_SPK_SHORT 15DB  
                      _SetDataTRISxWork_SPK_SHORT 15BF                            __end_of_TMR2_Interrupt 05EB  
                              ??_SaveLoadPosition 0026                                  ?_SpkComparatorOn 0075  
               __size_of_SpiCmdFunc_StopDetectVrs 0003                         ?_SpiCmdFunc_StopDetectVrs 003D  
                           _detectLoadPositionPtr 0128       UpdateCurrentPositionByFinePosition@motor_no 0031  
                 __size_of_SetAfterDetectLoadFunc 000B                       __size_of_InitPositionSearch 00A0  
                                  ??_SPI_ReadByte 0020                         SetMotorFrequency@set_freq 0021  
                       SetMotorFrequency@motor_no 0023                    SPI_Open@spiUniqueConfiguration 0023  
               SetMotorDisableExcitating@motor_no 0022                          __size_of_TMR1_Initialize 001A  
                               SaveLoadPosition@i 0037                               _excitatingEnableBit 00E3  
                                        ??___bmul 0021                                          ??___wmul 0024  
                         ?_DeactivateHandPosition 0075                                  _addShakePulseBit 0070  
                               ??_SetMotorStopSPK 0022                            __end_of_TMR1_StopTimer 0800  
                SetMotorEnableExcitating@motor_no 0022                     ?_TMR2_DefaultInterruptHandler 0075  
                            ComparatorOn@motor_no 0075                                      _loadPosition 2138  
                             GetIsMotorActive@res 0023                            __size_of_TMR1_CallBack 000B  
                     ??_SPIControl_ExecuteCommand 0040                                 __size_of_VrsCheck 001A  
                                 i1_SetOutPutLATX 09CC                            __size_of_TMR2_CallBack 000B  
                                     __pbssBIGRAM 2138                                  ?_ExcitatingOutOn 0075  
                 __end_of_SetExcitatingOutOffData 15F7                            __end_of_TMR2_StopTimer 105A  
                       UpdateTargetPosition@steps 002D               AfterDetectedLoadPosition@move_steps 0044  
                                     __pbssCOMMON 0070                                         ___latbits 0002  
                           _m0PulseChangePosition 00E7                                     __pcstackBANK0 0020  
                                   __pcstackBANK1 00EF                                     __pcstackBANK2 016E  
                                   __pcstackBANK3 01CE                          __size_of_TMR2_Initialize 0012  
                   __size_of_CalcMotorStepCounter 00D5             __end_of_SpiCmdFunc_SearchLoadPosition 1054  
          __size_of_SpiCmdFunc_SearchLoadPosition 0001                     _SpiCmdFunc_SearchLoadPosition 1053  
                           __size_of_SetDriveType 0095                               _SetMotorStepCounter 1102  
                   ?_SetMotorCorrectPositionStart 0075       __end_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF 1433  
    __size_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0017             ??_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0075  
            ?_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0075               _SetPulseOutLATxWork_M0_FWD_POL0_OFF 141C  
     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF 144A      __size_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0017  
           ??_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0075              ?_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0075  
             _SetPulseOutLATxWork_M0_FWD_POL1_OFF 1433                                _SetMotorBitMotorNo 12F5  
                                 ?_TMR2_Interrupt 0075                                         _dataTRISA 0061  
                                       _dataTRISB 0060                                         _dataTRISC 005F  
                         ?_InitPulsePositionTable 0075                             _SetMotorAddShakePulse 153B  
                                 ??_SetMotorStart 0021                        ?i1_SetExcitatingOutOffData 0075  
                                       __pnvBANK2 0168                         _SetMotorDisableExcitating 134E  
                                 _CorrectPosition 080B                 SpiCmdFunc_StartDetectVrs@motor_no 003D  
                                _SpkComparatorOff 110F                                   ??_SetOutPutLATX 0020  
                                 _StartPulseOutM0 0AA6                                   _StartPulseOutM1 0B16  
                             ?_SetMotorBitMotorNo 0075                            _PIN_MANAGER_Initialize 1522  
                       __size_ofi1_TMR2_StopTimer 0002                    __end_of_DeactivateHandPosition 1396  
                       _reqAfterDetectLoadFuncBit 00D0                  __end_of_TMR1_SetInterruptHandler 1091  
                  DeactivateHandPosition@motor_no 0022                                         __ptext100 1461  
                                       __ptext101 1248                                         __ptext110 1490  
                                       __ptext102 144A                                         __ptext111 11D0  
                                       __ptext103 1239                                         __ptext120 1433  
                                       __ptext112 1318                                         __ptext104 122A  
                                       __ptext121 1194                                         __ptext113 1478  
                                       __ptext105 121B                                         __ptext130 15A3  
                                       __ptext122 141C                                         __ptext114 11C1  
                                       __ptext106 120C                                         __ptext131 13CC  
                                       __ptext123 1185                                         __ptext115 1306  
                                       __ptext107 11FD                                         __ptext132 10D0  
                                       __ptext124 1176                                         __ptext116 12A3  
                                       __ptext108 11EE                                         __ptext133 111C  
                                       __ptext125 1167                                         __ptext117 11B2  
                                       __ptext109 11DF                                         __ptext134 10AF  
                                       __ptext126 1158                                         __ptext118 1293  
                                       __ptext135 104F                                         __ptext127 1149  
                                       __ptext119 11A3                                         __ptext128 113A  
                                       __ptext129 112B                              ?_SetMotorStepCounter 0030  
                                 ?_TMR1_StopTimer 0075                             __size_of_SetMotorStop 0012  
                    ??_INTERRUPT_InterruptManager 007A                            _SetAfterDetectLoadFunc 10C5  
                      SetAfterDetectLoadFunc@func 0020                                      _SetDriveType 0D85  
                        _SetMotorEnableExcitating 1360                          __end_of_GetIsMotorActive 1407  
                                       _driveType 0130                                 ??_SpiCmdFunc_Test 003E  
                                 ?_TMR2_StopTimer 0075                                      ?_SpkVrsCheck 0075  
                            ??_SetMotorBitMotorNo 0020                    SetAfterDetectLoadFunc@motor_no 0022  
              SPIControl_SetNotification@motor_no 003D                                  _SetMotorStartSPK 179C  
                  __end_of_InitPulsePositionTable 12E4                         _SPIControl_ExecuteCommand 0B88  
    __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 11FD     __size_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 000F  
          ??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 0075             ?_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 0075  
            _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 11EE      __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 11EE  
   __size_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 000F            ??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 0075  
           ?_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 0075              _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 11DF  
                                   _TMR1_CallBack 10AF                   _correctDriveFinishPositionCtSet 012C  
                                  ___wmul@product 0024                  ??_SpiCmdFunc_FwdPulsePositionCtl 003E  
                 ?_SpiCmdFunc_FwdPulsePositionCtl 003D                       __size_of_MoveTargetPosition 0013  
                                       clear_ram0 10DC                                     _TMR2_CallBack 10BA  
              __size_of_SpiCmdFunc_FwdPulseNormal 0023                                          _PIE1bits 0091  
               __end_ofi1_SetExcitatingOutOffData 1509                            __size_of_ComparatorOff 0013  
                        __size_of_TMR2_StartTimer 0003                        ?_SPIControl_RecieveComannd 0075  
                               _loadPositionIndex 00B6                          __size_of_TMR1_WriteTimer 000F  
             __size_of_INTERRUPT_InterruptManager 0018                                      _SetMotorStop 1372  
                                        _PIR1bits 0011                                          _PIR2bits 0012  
          SpiCmdFunc_FwdPulsePositionCtl@motor_no 003D              __size_of_SetMotorPositionSearchStart 0020  
                    ??_SPIControl_SetNotification 003E                             ??_SetMotorStepCounter 0032  
                         __end_ofi1_SetOutPutLATX 0A39                                          _SSP1CON1 0215  
                                        _SSP1CON2 0216                __size_of_SpiCmdFunc_RevPulseNormal 0022  
                                        _TMR1_ISR 10D0                                          _TMR2_ISR 1063  
                                        _SSP1STAT 0214                                _UpdataHandPosition 0EBA  
                        GetIsMotorActive@motor_no 0022               __end_of_SpiCmdFunc_EnableExcitating 1070  
                     _SpiCmdFunc_EnableExcitating 106B                                  _spkOutChangeFunc 00C2  
                ??_SpiCmdFunc_FwdPulseWithCorrect 003E                   ?_SpiCmdFunc_FwdPulseWithCorrect 003D  
                            _ActivateHandPosition 1396                                  _ExcitatingOutOff 10E8  
                                        _SPI_Open 0910                                 ??_TMR1_Initialize 0022  
                           SetMotorFrequency@type 0020                                 ___wmul@multiplier 0020  
                                  _DAC_Initialize 1075                       ??_AfterDetectedLoadPosition 003C  
                     __size_of_TMR2_Interrupt_SPK 007A                               ?_UpdataHandPosition 0075  
               AfterDetectedLoadPosition@motor_no 003D                              __end_of_SPI_ReadByte 105D  
                  ??_TMR2_DefaultInterruptHandler 0075                 __size_of_TMR2_SetInterruptHandler 0008  
                       ?_TMR2_SetInterruptHandler 0020              __end_of_SpiCmdFunc_DisableExcitating 1075  
           __size_of_SpiCmdFunc_DisableExcitating 0005                      _SpiCmdFunc_DisableExcitating 1070  
                         SetMotorAddShakePulse@sw 0020                           __end_of_CorrectPosition 0845  
                                  ?_TMR1_CallBack 0075                            ?_SetMotorAddShakePulse 0020  
                         __end_of_StartPulseOutM0 0B16                           __end_of_StartPulseOutM1 0B88  
     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF 1461      __size_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0017  
           ??_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0075              ?_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0075  
             _SetPulseOutLATxWork_M1_FWD_POL0_OFF 144A       __end_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF 1478  
    __size_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0017             ??_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0075               _SetPulseOutLATxWork_M1_FWD_POL1_OFF 1461  
                  ?_SpiCmdFunc_SearchLoadPosition 003D                       ?_PriorUpdateCorrentPosition 0075  
                    UpdateTargetPosition@motor_no 0031                                 ??_TMR2_Initialize 0022  
                                  ?_TMR2_CallBack 0075                              ??_UpdataHandPosition 002D  
                __end_of_TblM1PulseChangePosition 1835                    ??_SetMotorCorrectPositionStart 0030  
                         ??_DetermineBasePosition 002D                 __end_of_SPIControl_RecieveComannd 13BA  
                __size_of_SetExcitatingOutOffData 001C        __end_of_SetDataTRISxWork_M0_SPK_POL0_SHORT 1490  
     __size_of_SetDataTRISxWork_M0_SPK_POL0_SHORT 0018              ??_SetDataTRISxWork_M0_SPK_POL0_SHORT 0075  
             ?_SetDataTRISxWork_M0_SPK_POL0_SHORT 0075                _SetDataTRISxWork_M0_SPK_POL0_SHORT 1478  
      __end_of_SetDataTRISxWork_M0_SPK_POL1_SHORT 14A8       __size_of_SetDataTRISxWork_M0_SPK_POL1_SHORT 0018  
            ??_SetDataTRISxWork_M0_SPK_POL1_SHORT 0075               ?_SetDataTRISxWork_M0_SPK_POL1_SHORT 0075  
              _SetDataTRISxWork_M0_SPK_POL1_SHORT 1490                     DetermineBasePosition@motor_no 0038  
                         __size_of_SPI_Initialize 000A                           ??_OSCILLATOR_Initialize 0020  
                                        _VrsCheck 1554                               _motorStepCounterSet 00A8  
                           ?_ActivateHandPosition 0075            SpiCmdFunc_RevPulsePositionCtl@motor_no 003D  
                          __end_of_DAC_Initialize 107B             SpiCmdFunc_Search1008Position@motor_no 003D  
                        _TMR1_SetInterruptHandler 1089              __end_of_SpiCmdFunc_FwdPulseWithShake 1053  
           __size_of_SpiCmdFunc_FwdPulseWithShake 0001                      _SpiCmdFunc_FwdPulseWithShake 1052  
                              _OutTrisRequestFlug 00D5        __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P1 1167  
     __size_of_SetPulseOutLATxWork_M0_FWD_POL0_P1 000F              ??_SetPulseOutLATxWork_M0_FWD_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M0_FWD_POL0_P1 0075                _SetPulseOutLATxWork_M0_FWD_POL0_P1 1158  
      __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P2 1194       __size_of_SetPulseOutLATxWork_M0_FWD_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M0_FWD_POL0_P2 0075               ?_SetPulseOutLATxWork_M0_FWD_POL0_P2 0075  
              _SetPulseOutLATxWork_M0_FWD_POL0_P2 1185        __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P1 1158  
     __size_of_SetPulseOutLATxWork_M0_FWD_POL1_P1 000F              ??_SetPulseOutLATxWork_M0_FWD_POL1_P1 0075  
             ?_SetPulseOutLATxWork_M0_FWD_POL1_P1 0075                _SetPulseOutLATxWork_M0_FWD_POL1_P1 1149  
      __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P2 11A3       __size_of_SetPulseOutLATxWork_M0_FWD_POL1_P2 000F  
            ??_SetPulseOutLATxWork_M0_FWD_POL1_P2 0075               ?_SetPulseOutLATxWork_M0_FWD_POL1_P2 0075  
              _SetPulseOutLATxWork_M0_FWD_POL1_P2 1194                             _TMR1_InterruptHandler 0168  
                                   _ComparatorOff 13CC                         SetMotorDirection@motor_no 0023  
                    __end_of_UpdateTargetPosition 16D6                        UpdataHandPosition@motor_no 0038  
                __end_of_SpiCmdFunc_StopDetectVrs 1063                DetermineBasePosition@load_pos_type 0035  
                                _positionSearchCt 00A4                                          __ptext10 107B  
                                        __ptext11 1075                                          __ptext20 105D  
                                        __ptext12 0910                      _TblM0PulseChangePositionLast 00EC  
                                        __ptext21 1670                                          __ptext13 13A8  
                                        __ptext30 15F7                                          __ptext22 164F  
                                        __ptext14 0BFB                                          __ptext31 005D  
                                        __ptext23 1613                                          __ptext15 0882  
                                        __ptext40 1396                                          __ptext32 06C0  
                                        __ptext24 171E                                          __ptext16 1771  
                                        __ptext41 105A                                          __ptext33 1747  
                                        __ptext25 1053                                          __ptext17 1070  
                                        __ptext50 0A39                                          __ptext42 0B88  
                                        __ptext34 0CF7                                          __ptext26 1052  
                                        __ptext18 106B                                          __ptext51 162F  
                                        __ptext43 14D8                                          __ptext35 0EBA  
                                        __ptext27 1691                                          __ptext19 1060  
                                        __ptext60 16B3                                          __ptext52 0E1A  
                                        __ptext44 1057                                          __ptext36 12F5  
                                        __ptext28 16D6                                          __ptext61 05EB  
                                        __ptext53 1588                                          __ptext45 110F  
                                        __ptext37 0C74                                          __ptext29 1051  
                                        __ptext70 1509                                          __ptext62 1102  
                                        __ptext54 12E4                                          __ptext46 179C  
                                        __ptext38 13DF                                          __ptext71 0D85  
                                        __ptext63 08C2                                          __ptext55 1384  
                                        __ptext47 1081                                          __ptext39 0F5A  
                                        __ptext80 0784                                          __ptext72 1360  
                                        __ptext64 080B                                          __ptext56 1372  
                                        __ptext48 0800                                          __ptext81 10F5  
                                        __ptext73 134E                                          __ptext65 1091  
                                        __ptext57 10C5                                          __ptext49 15DB  
                                        __ptext90 14C0                                          __ptext82 16F9  
                                        __ptext74 12D3                                          __ptext66 0B16  
                                        __ptext58 109B                                          __ptext91 1284  
                                        __ptext83 10E8                                          __ptext67 0AA6  
                                        __ptext59 13F2                                          __ptext92 133C  
                                        __ptext84 14F0                                          __ptext76 1063  
                                        __ptext68 1054                                          __ptext93 14A8  
                                        __ptext85 09CC                                          __ptext77 10BA  
                                        __ptext69 0845                                          __ptext94 1275  
                                        __ptext86 17C8                                          __ptext78 03FA  
                                        __ptext95 132A                                          __ptext87 15BF  
                                        __ptext79 1050                                          __ptext96 12C3  
                                        __ptext88 0002                                          __ptext97 1266  
                                        __ptext89 1554                                          __ptext98 12B3  
                                        __ptext99 1257                                      _SSP1CON1bits 0215  
                   ?_SpiCmdFunc_DisableExcitating 003D                       SetMotorStepCounter@motor_no 0032  
                     ?_SetDataTRISxWork_SPK_SHORT 0075                         _AfterDetectedLoadPosition 005D  
                                   __size_of_main 0066                                   _SetMotorStopSPK 14D8  
                    ??_SetFwdPulseWithCorrectProc 003E                              _reqCorrectBasePosBit 0054  
                                i1_TMR2_StopTimer 0002                                  _loadPositionType 01A0  
                       __size_of_SaveLoadPosition 0083                                     _spkPositionCt 00E0  
                                        int$flags 007E                              _m1PulseOutChangeFunc 00C8  
                                ?i1_SetOutPutLATX 0075                                 ??_TMR2_StartTimer 0020  
              __end_of_INTERRUPT_InterruptManager 001C                        _INTERRUPT_InterruptManager 0004  
                                 ?_DAC_Initialize 0075                                 ??_TMR1_WriteTimer 0077  
              __size_of_SetMotorDisableExcitating 0012                                    ?_ComparatorOff 0075  
   __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 1318    __size_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0012  
         ??_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0075            ?_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0075  
           _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 1306     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 132A  
  __size_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0012           ??_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0075  
          ?_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0075             _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 1318  
                                  _recieveCommand 00CC                             _WatchMotorDriveFinish 0BFB  
         UpdateCurrentPositionByFinePosition@diff 002E                                   _detectFinePosCt 00B4  
      __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P1 121B       __size_of_SetPulseOutLATxWork_M1_FWD_POL0_P1 000F  
            ??_SetPulseOutLATxWork_M1_FWD_POL0_P1 0075               ?_SetPulseOutLATxWork_M1_FWD_POL0_P1 0075  
              _SetPulseOutLATxWork_M1_FWD_POL0_P1 120C        __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P2 1248  
     __size_of_SetPulseOutLATxWork_M1_FWD_POL0_P2 000F              ??_SetPulseOutLATxWork_M1_FWD_POL0_P2 0075  
             ?_SetPulseOutLATxWork_M1_FWD_POL0_P2 0075                _SetPulseOutLATxWork_M1_FWD_POL0_P2 1239  
      __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P1 120C       __size_of_SetPulseOutLATxWork_M1_FWD_POL1_P1 000F  
            ??_SetPulseOutLATxWork_M1_FWD_POL1_P1 0075               ?_SetPulseOutLATxWork_M1_FWD_POL1_P1 0075  
              _SetPulseOutLATxWork_M1_FWD_POL1_P1 11FD        __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P2 1257  
     __size_of_SetPulseOutLATxWork_M1_FWD_POL1_P2 000F              ??_SetPulseOutLATxWork_M1_FWD_POL1_P2 0075  
             ?_SetPulseOutLATxWork_M1_FWD_POL1_P2 0075                _SetPulseOutLATxWork_M1_FWD_POL1_P2 1248  
                   ?_SpiCmdFunc_FwdPulseWithShake 003D                                        _INTCONbits 000B  
                        __end_of_SpkComparatorOff 111C       __end_of_SetPulseOutLATxWork_M0_REV_POL0_OFF 12A3  
    __size_of_SetPulseOutLATxWork_M0_REV_POL0_OFF 0010             ??_SetPulseOutLATxWork_M0_REV_POL0_OFF 0075  
            ?_SetPulseOutLATxWork_M0_REV_POL0_OFF 0075               _SetPulseOutLATxWork_M0_REV_POL0_OFF 1293  
     __end_of_SetPulseOutLATxWork_M0_REV_POL1_OFF 12B3      __size_of_SetPulseOutLATxWork_M0_REV_POL1_OFF 0010  
           ??_SetPulseOutLATxWork_M0_REV_POL1_OFF 0075              ?_SetPulseOutLATxWork_M0_REV_POL1_OFF 0075  
             _SetPulseOutLATxWork_M0_REV_POL1_OFF 12A3                                  ??_TMR2_Interrupt 0077  
                                   _spkStopStatus 00DB                                _detectBasePosition 0160  
                                 ??_TMR1_CallBack 0075                              __size_of_SpkVrsCheck 000D  
                 ??_SpiCmdFunc_Search1008Position 003E                           __size_of_WDT_Initialize 0004  
                                ?_CorrectPosition 0026                                          intlevel1 0000  
                                 ??_TMR2_CallBack 007A                              _detectRoughTotalMove 00A0  
                           _SetAfterMotorStopFunc 109B                                  _detectSpkTurnBit 00E1  
                                ?_StartPulseOutM0 0075                                  ?_StartPulseOutM1 0075  
                      __end_of_InitPositionSearch 0EBA                           ?_PIN_MANAGER_Initialize 0075  
                      InitPositionSearch@motor_no 002F                                  VrsCheck@motor_no 0076  
                     ??i1_SetExcitatingOutOffData 0076                        ?_SetDataTRISxWork_SPK_OPEN 0075  
VerifyHandPosition_LoadPosition@misalignment_flag 0048                                  ??_TMR1_StopTimer 0020  
                                _detectRoughPosCt 00B2                      __end_of_CalcMotorStepCounter 06C0  
              __end_of_SPIControl_SetNotification 1613                        _SPIControl_SetNotification 15F7  
                              _m0PulseOutStepWork 00E5                __size_of_SPIControl_ExecuteCommand 0073  
                      ??_SetMotorEnableExcitating 0020                          __size_of_SpkComparatorOn 000B  
                        _TblM1PulseChangePosition 181C                                   _SpiCmdFunc_Test 1051  
                          ??_ActivateHandPosition 0020                          __end_of_SetMotorStartSPK 17C8  
                         ?_SetAfterDetectLoadFunc 0020       VerifyHandPosition_LoadPosition@remain_steps 0046  
                                   ?_ComparatorOn 0075                          SaveLoadPosition@motor_no 0036  
                                ??_TMR2_StopTimer 0020                               _pulseOutLATAWork_M0 0067  
                             _pulseOutLATAWork_M1 0064                                       _polarityBit 0071  
                           __size_of_SPI_ReadByte 0003                               _pulseOutLATBWork_M0 0066  
                             _pulseOutLATBWork_M1 0063        __end_of_SetPulseOutLATxWork_M0_REV_POL0_P1 1185  
     __size_of_SetPulseOutLATxWork_M0_REV_POL0_P1 000F              ??_SetPulseOutLATxWork_M0_REV_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M0_REV_POL0_P1 0075                _SetPulseOutLATxWork_M0_REV_POL0_P1 1176  
      __end_of_SetPulseOutLATxWork_M0_REV_POL0_P2 11B2       __size_of_SetPulseOutLATxWork_M0_REV_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M0_REV_POL0_P2 0075               ?_SetPulseOutLATxWork_M0_REV_POL0_P2 0075  
              _SetPulseOutLATxWork_M0_REV_POL0_P2 11A3        __end_of_SetPulseOutLATxWork_M0_REV_POL1_P1 1176  
     __size_of_SetPulseOutLATxWork_M0_REV_POL1_P1 000F              ??_SetPulseOutLATxWork_M0_REV_POL1_P1 0075  
             ?_SetPulseOutLATxWork_M0_REV_POL1_P1 0075                _SetPulseOutLATxWork_M0_REV_POL1_P1 1167  
      __end_of_SetPulseOutLATxWork_M0_REV_POL1_P2 11C1       __size_of_SetPulseOutLATxWork_M0_REV_POL1_P2 000F  
            ??_SetPulseOutLATxWork_M0_REV_POL1_P2 0075               ?_SetPulseOutLATxWork_M0_REV_POL1_P2 0075  
              _SetPulseOutLATxWork_M0_REV_POL1_P2 11B2                                     __pstringtext1 1800  
                                   __pstringtext2 181C                                     __pstringtext3 1835  
                                   __pstringtext4 184E                                     __pstringtext5 1852  
                                   __pstringtext6 1856                                     __pstringtext7 185A  
                             _pulseOutLATCWork_M0 0065                               _pulseOutLATCWork_M1 0062  
                             _reqCorrectFinePoBit 00CF               __size_of_PriorUpdateCorrentPosition 004E  
                               ?_GetIsMotorActive 0075                                ??_GetIsMotorActive 0020  
         VerifyHandPosition_LoadPosition@load_pos 004C                           __end_of_SetMotorStopSPK 14F0  
         VerifyHandPosition_LoadPosition@curt_pos 0049                                 _m0PulsePositionCt 00EA  
                        _SpiCmdFunc_StopDetectVrs 1060                      ?_SetMotorPositionSearchStart 0075  
                  __end_of_PIN_MANAGER_Initialize 153B                          __size_of_ExcitatingOutOn 0025  
                        __end_of_ExcitatingOutOff 10F5                        ?_SpiCmdFunc_StartDetectVrs 003D  
         VerifyHandPosition_LoadPosition@motor_no 003D       __end_of_UpdateCurrentPositionByFinePosition 0D85  
    __size_of_UpdateCurrentPositionByFinePosition 008E             ??_UpdateCurrentPositionByFinePosition 0026  
            ?_UpdateCurrentPositionByFinePosition 0075               _UpdateCurrentPositionByFinePosition 0CF7  
                  ??_SpiCmdFunc_DisableExcitating 003E                             _TMR2_InterruptHandler 016C  
                           __end_of_SetMotorStart 109B                 __end_of_SetDataTRISxWork_SPK_OPEN 1800  
                                 _TMR1_Initialize 156E                           _SetExcitatingOutOffData 15DB  
                            _UpdateTargetPosition 16B3                       ??_SPIControl_RecieveComannd 00EF  
                                    _SPI_ReadByte 105A  
